
uCOS-II-ATXmega128A1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002f6  00802000  0000b478  0000b50c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001301  008022f6  008022f6  0000b802  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  0000b804  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002e0  00000000  00000000  0000c658  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001301  00000000  00000000  0000c938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a097  00000000  00000000  0000dc39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018da  00000000  00000000  00017cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008c96  00000000  00000000  000195aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000e80  00000000  00000000  00022240  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002307  00000000  00000000  000230c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000759  00000000  00000000  000253c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000dda  00000000  00000000  00025b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  000268fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>
       4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_1>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_2>
       c:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_3>
      10:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_4>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_5>
      18:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_6>
      1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_7>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_8>
      24:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_9>
      28:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_10>
      2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_11>
      30:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_12>
      34:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_13>
      38:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_14>
      3c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_15>
      40:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_16>
      44:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_17>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_18>
      4c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_19>
      50:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_20>
      54:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_21>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_22>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_23>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_24>
      64:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_25>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__vector_26>
      6c:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_27>
      70:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_28>
      74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__vector_29>
      78:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_30>
      7c:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_31>
      80:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_32>
      84:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_33>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_34>
      8c:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_35>
      90:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_36>
      94:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_37>
      98:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_38>
      9c:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_39>
      a0:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_40>
      a4:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_41>
      a8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_43>
      b0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_44>
      b4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_45>
      b8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_46>
      bc:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_47>
      c0:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_48>
      c4:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_49>
      c8:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_50>
      cc:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_51>
      d0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_52>
      d4:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_53>
      d8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__vector_54>
      dc:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_55>
      e0:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_56>
      e4:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_57>
      e8:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_58>
      ec:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_59>
      f0:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_60>
      f4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_61>
      f8:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_62>
      fc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_63>
     100:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_64>
     104:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_65>
     108:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_66>
     10c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_67>
     110:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_68>
     114:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_69>
     118:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_70>
     11c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_71>
     120:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_72>
     124:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_73>
     128:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <__vector_74>
     12c:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__vector_75>
     130:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_76>
     134:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_77>
     138:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_78>
     13c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_79>
     140:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_80>
     144:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_81>
     148:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_82>
     14c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_83>
     150:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_84>
     154:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_85>
     158:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_86>
     15c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_87>
     160:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_88>
     164:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_89>
     168:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_90>
     16c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_91>
     170:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_92>
     174:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_93>
     178:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_94>
     17c:	0c 94 a0 01 	jmp	0x340	; 0x340 <__vector_95>
     180:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_96>
     184:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_97>
     188:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_98>
     18c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_99>
     190:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_100>
     194:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_101>
     198:	0c 94 ae 01 	jmp	0x35c	; 0x35c <__vector_102>
     19c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_103>
     1a0:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_104>
     1a4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_105>
     1a8:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_106>
     1ac:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_107>
     1b0:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_108>
     1b4:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_109>
     1b8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_110>
     1bc:	0c 94 c0 01 	jmp	0x380	; 0x380 <__vector_111>
     1c0:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_112>
     1c4:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_113>

000001c8 <__vector_1>:

        .section .vectors, "ax"
                                                    ; Vector #   Address       Interrupt Definition
                                                    ; --------   -----------   ------------------------------------------
                                                    ;     0      0x0000        Reset
__vector_1:     JMP     __unhandled_interrupt       ;     1      0x0004        External Oscillator Failure (NMI)
     1c8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001cc <__vector_2>:
__vector_2:     JMP     __unhandled_interrupt       ;     2      0x0008        Port C External Interrupt 0
     1cc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001d0 <__vector_3>:
__vector_3:     JMP     __unhandled_interrupt       ;     3      0x000C        Port C External Interrupt 1
     1d0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001d4 <__vector_4>:
__vector_4:     JMP     __unhandled_interrupt       ;     4      0x0010        Port R External Interrupt 0
     1d4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001d8 <__vector_5>:
__vector_5:     JMP     __unhandled_interrupt       ;     5      0x0014        Port R External Interrupt 1
     1d8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001dc <__vector_6>:
__vector_6:     JMP     __unhandled_interrupt       ;     6      0x0018        DMA CH0
     1dc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001e0 <__vector_7>:
__vector_7:     JMP     __unhandled_interrupt       ;     7      0x001C        DMA CH1
     1e0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001e4 <__vector_8>:
__vector_8:     JMP     __unhandled_interrupt       ;     8      0x0020        DMA CH2
     1e4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001e8 <__vector_9>:
__vector_9:     JMP     __unhandled_interrupt       ;     9      0x0024        DMA CH3
     1e8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001ec <__vector_10>:
__vector_10:    JMP     __unhandled_interrupt       ;    10      0x0028        RTC Overflow
     1ec:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001f0 <__vector_11>:
__vector_11:    JMP     __unhandled_interrupt       ;    11      0x002C        RTC Compare
     1f0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001f4 <__vector_12>:
__vector_12:    JMP     __unhandled_interrupt       ;    12      0x0030        TWI C Slave Interrupt
     1f4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001f8 <__vector_13>:
__vector_13:    JMP     __unhandled_interrupt       ;    13      0x0034        TWI C Master Interrupt
     1f8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000001fc <__vector_14>:
__vector_14:    JMP     BSP_TickISR                 ;    14      0x0038        Timer C0 Overflow
     1fc:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <BSP_TickISR>

00000200 <__vector_15>:
__vector_15:    JMP     __unhandled_interrupt       ;    15      0x003C        Timer C0 Error
     200:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000204 <__vector_16>:
__vector_16:    JMP     __unhandled_interrupt       ;    16      0x0040        Timer C0 Compare or Capture A
     204:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000208 <__vector_17>:
__vector_17:    JMP     __unhandled_interrupt       ;    17      0x0044        Timer C0 Compare or Capture B
     208:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000020c <__vector_18>:
__vector_18:    JMP     __unhandled_interrupt       ;    18      0x0048        Timer C0 Compare or Capture C
     20c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000210 <__vector_19>:
__vector_19:    JMP     __unhandled_interrupt       ;    19      0x004C        Timer C0 Compare or Capture D
     210:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000214 <__vector_20>:
__vector_20:    JMP     __unhandled_interrupt       ;    20      0x0050        Timer C1 Overflow
     214:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000218 <__vector_21>:
__vector_21:    JMP     __unhandled_interrupt       ;    21      0x0054        Timer C1 Error
     218:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000021c <__vector_22>:
__vector_22:    JMP     __unhandled_interrupt       ;    22      0x0058        Timer C1 Compare or Capture A
     21c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000220 <__vector_23>:
__vector_23:    JMP     __unhandled_interrupt       ;    23      0x005C        Timer C1 Compare or Capture B
     220:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000224 <__vector_24>:
__vector_24:    JMP     __unhandled_interrupt       ;    24      0x0060        SPI C
     224:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000228 <__vector_25>:
#if (APP_CFG_PROBE_COM_EN      == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN    == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL  == PROBE_RS232_UART_0)
__vector_25:    JMP     ProbeRS232_RxISR            ;    25      0x0064        USART C0 Rx Complete
#else
__vector_25:    JMP     __unhandled_interrupt       ;    25      0x0064        USART C0 Rx Complete
     228:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000022c <__vector_26>:
#endif    

__vector_26:    JMP     __unhandled_interrupt       ;    26      0x0068        USART C0 Data Register Empty
     22c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000230 <__vector_27>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_0)
__vector_27:    JMP     ProbeRS232_TxISR            ;    27      0x006C        USART C0 Tx Complete
#else    
__vector_27:    JMP     __unhandled_interrupt       ;    27      0x006C        USART C0 Tx Complete
     230:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000234 <__vector_28>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_1)
__vector_28:    JMP  ProbeRS232_RxISR               ;    28      0x0070        USART C1 Rx Complete
#else 
__vector_28:    JMP     __unhandled_interrupt       ;    28      0x0070        USART C1 Rx Complete
     234:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000238 <__vector_29>:
#endif
__vector_29:    JMP     __unhandled_interrupt       ;    29      0x0074        USART C1 Data Register Empty
     238:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000023c <__vector_30>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_1)
__vector_30:    JMP  ProbeRS232_TxISR               ;    30      0x0078        USART C1 Tx Complete
#else
__vector_30:    JMP     __unhandled_interrupt       ;    30      0x0078        USART C1 Tx Complete
     23c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000240 <__vector_31>:
#endif

__vector_31:    JMP     __unhandled_interrupt       ;    31     0x007C         AES interrupt vector
     240:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000244 <__vector_32>:
__vector_32:    JMP     __unhandled_interrupt       ;    32     0x0080         NVM EE
     244:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000248 <__vector_33>:
__vector_33:    JMP     __unhandled_interrupt       ;    33     0x0084         NVM SPM
     248:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000024c <__vector_34>:
__vector_34:    JMP     __unhandled_interrupt       ;    34     0x0088         Port B External Interrupt 0
     24c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000250 <__vector_35>:
__vector_35:    JMP     __unhandled_interrupt       ;    35     0x008C         Port B External  Interrupt 1
     250:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000254 <__vector_36>:
__vector_36:    JMP     __unhandled_interrupt       ;    36     0x008C         Analog Comparator B Window Mode
     254:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000258 <__vector_37>:
__vector_37:    JMP     __unhandled_interrupt       ;    37     0x0090         Analog Comparator B Comparator 1
     258:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000025c <__vector_38>:
__vector_38:    JMP     __unhandled_interrupt       ;    38     0x0094         Analog Comparator B Comparator 0
     25c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000260 <__vector_39>:
__vector_39:    JMP     __unhandled_interrupt       ;    39     0x0098         ADC B CH0
     260:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000264 <__vector_40>:
__vector_40:    JMP     __unhandled_interrupt       ;    40     0x009C         ADC B CH1
     264:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000268 <__vector_41>:
__vector_41:    JMP     __unhandled_interrupt       ;    41     0x00A0         ADC B CH2
     268:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000026c <__vector_42>:
__vector_42:    JMP     __unhandled_interrupt       ;    42     0x00A4         ADC B CH3
     26c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000270 <__vector_43>:
__vector_43:    JMP     __unhandled_interrupt       ;    43     0x00A8         Port E External Interrupt 0
     270:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000274 <__vector_44>:
__vector_44:    JMP     __unhandled_interrupt       ;    44     0x00AC         Port E External Interrupt 1
     274:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000278 <__vector_45>:
__vector_45:    JMP     __unhandled_interrupt       ;    45     0x00B0         TWI E Slave Interrupt
     278:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000027c <__vector_46>:
__vector_46:    JMP     __unhandled_interrupt       ;    46     0x00B4         TWI E Master Interrupt
     27c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000280 <__vector_47>:
__vector_47:    JMP     __unhandled_interrupt       ;    47     0x00B8         Timer  E0  Overflow
     280:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000284 <__vector_48>:
__vector_48:    JMP     __unhandled_interrupt       ;    48     0x00BC         Timer  E0  Error
     284:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000288 <__vector_49>:
__vector_49:    JMP     __unhandled_interrupt       ;    49     0x00C0         Timer  E0  Compare or Capture A
     288:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000028c <__vector_50>:
__vector_50:    JMP     __unhandled_interrupt       ;    50     0x00C4         Timer  E0  Compare or Capture B
     28c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000290 <__vector_51>:
__vector_51:    JMP     __unhandled_interrupt       ;    51     0x00C8         Timer  E0  Compare or Capture C
     290:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000294 <__vector_52>:
__vector_52:    JMP     __unhandled_interrupt       ;    52     0x00CC         Timer  E0  Compare or Capture D
     294:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000298 <__vector_53>:
__vector_53:    JMP     __unhandled_interrupt       ;    53     0x00D0         Timer  E1  Overflow
     298:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000029c <__vector_54>:
__vector_54:    JMP     __unhandled_interrupt       ;    54     0x00D4         Timer  E1  Error
     29c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002a0 <__vector_55>:
__vector_55:    JMP     __unhandled_interrupt       ;    55     0x00D8         Timer  E1  Compare or Capture A
     2a0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002a4 <__vector_56>:
__vector_56:    JMP     __unhandled_interrupt       ;    56     0x00DC         Timer  E1  Compare or Capture B
     2a4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002a8 <__vector_57>:
__vector_57:    JMP     __unhandled_interrupt       ;    57     0x00E0         SPI    E
     2a8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002ac <__vector_58>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_4)
__vector_58:    JMP     ProbeRS232_RxISR            ;    58     0x00E4         USART E0 Rx Complete
#else
__vector_58:    JMP     __unhandled_interrupt       ;    58     0x00E4         USART E0 Rx Complete
     2ac:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002b0 <__vector_59>:
#endif
__vector_59:    JMP     __unhandled_interrupt       ;    59     0x00E8         USART E0 Data Register Empty
     2b0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002b4 <__vector_60>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_4)
__vector_60:    JMP     ProbeRS232_TxISR           ;     60     0x00EC         USART E0 Tx Complete
#else
__vector_60:    JMP     __unhandled_interrupt      ;     60     0x00EC         USART E0 Tx Complete
     2b4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002b8 <__vector_61>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_5)
__vector_61:    JMP     ProbeRS232_RxISR           ;     61       0x00F0       USART E1 Rx Complete
#else
__vector_61:    JMP     __unhandled_interrupt      ;     61       0x00F0       USART E1 Rx Complete
     2b8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002bc <__vector_62>:
#endif

__vector_62:    JMP     __unhandled_interrupt      ;     62       0x00F4       USART E1 Data Register Empty
     2bc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002c0 <__vector_63>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_5)
__vector_63:    JMP     ProbeRS232_TxISR           ;     63       0x00F8       USART E1 Tx Complete
#else
__vector_63:    JMP     __unhandled_interrupt      ;     63       0x00F8       USART E1 Tx Complete
     2c0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002c4 <__vector_64>:
#endif

__vector_64:    JMP     __unhandled_interrupt      ;     64       0x00FC       Port  D External Interrupt 0
     2c4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002c8 <__vector_65>:
__vector_65:    JMP     __unhandled_interrupt      ;     65       0x0100       Port  D External Interrupt 1
     2c8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002cc <__vector_66>:
__vector_66:    JMP     __unhandled_interrupt      ;     66       0x0104       Port  A External Interrupt 0
     2cc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002d0 <__vector_67>:
__vector_67:    JMP     __unhandled_interrupt      ;     67       0x0108       Port  A External Interrupt 1
     2d0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002d4 <__vector_68>:
__vector_68:    JMP     __unhandled_interrupt      ;     68       0x010C       Analog Comparator A Window Mode 
     2d4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002d8 <__vector_69>:
__vector_69:    JMP     __unhandled_interrupt      ;     69       0x0110       Analog Comparator A Comparator 1
     2d8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002dc <__vector_70>:
__vector_70:    JMP     __unhandled_interrupt      ;     70       0x0114       Analog Comparator A Comparator 0
     2dc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002e0 <__vector_71>:
__vector_71:    JMP     __unhandled_interrupt      ;     71       0x0118       ADC A CH0
     2e0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002e4 <__vector_72>:
__vector_72:    JMP     __unhandled_interrupt      ;     72       0x011C       ADC A CH1
     2e4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002e8 <__vector_73>:
__vector_73:    JMP     __unhandled_interrupt      ;     73       0x0120       ADC A CH2
     2e8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002ec <__vector_74>:
__vector_74:    JMP     __unhandled_interrupt      ;     74       0x0124       ADC A CH3
     2ec:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002f0 <__vector_75>:
__vector_75:    JMP     __unhandled_interrupt      ;     75       0x0128       TWI D Slave Interrupt
     2f0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002f4 <__vector_76>:
__vector_76:    JMP     __unhandled_interrupt      ;     76       0x012C       TWI D Master Interrupt
     2f4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002f8 <__vector_77>:
__vector_77:    JMP     __unhandled_interrupt      ;     77       0x0130       Timer D0 Overflow
     2f8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000002fc <__vector_78>:
__vector_78:    JMP     __unhandled_interrupt      ;     78       0x0134       Timer D0 Error
     2fc:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000300 <__vector_79>:
__vector_79:    JMP     __unhandled_interrupt      ;     79       0x0138       Timer D0 Compare or Capture A
     300:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000304 <__vector_80>:
__vector_80:    JMP     __unhandled_interrupt      ;     80       0x013C       Timer D0 Compare or Capture B
     304:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000308 <__vector_81>:
__vector_81:    JMP     __unhandled_interrupt      ;     81       0x0140       Timer D0 Compare or Capture C
     308:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000030c <__vector_82>:
__vector_82:    JMP     __unhandled_interrupt      ;     82       0x0144       Timer D0 Compare or Capture D
     30c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000310 <__vector_83>:
__vector_83:    JMP     __unhandled_interrupt      ;     83       0x0148       Timer D1 Overflow
     310:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000314 <__vector_84>:
__vector_84:    JMP     __unhandled_interrupt      ;     84       0x014C       Timer D1 Error
     314:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000318 <__vector_85>:
__vector_85:    JMP     __unhandled_interrupt      ;     85       0x0150       Timer D1 Compare or Capture A
     318:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000031c <__vector_86>:
__vector_86:    JMP     __unhandled_interrupt      ;     86       0x0154       Timer D1 Compare or Capture B
     31c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000320 <__vector_87>:
__vector_87:    JMP     __unhandled_interrupt      ;     87       0x0158       SPI   D
     320:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000324 <__vector_88>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_2)
__vector_88:    JMP     __unhandled_interrupt      ;     88       0x015C       USART D0 Rx Complete
#else
__vector_88:    JMP     __unhandled_interrupt           ;     88       0x015C       USART D0 Rx Complete
     324:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000328 <__vector_89>:
#endif

__vector_89:    JMP     __unhandled_interrupt      ;     89       0x0160       USART D0 Data Register Empty
     328:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000032c <__vector_90>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_2)
__vector_90:    JMP     __unhandled_interrupt      ;     90       0x0164       USART D0 Tx Complete
#else
__vector_90:    JMP     __unhandled_interrupt           ;     90       0x0164       USART D0 Tx Complete
     32c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000330 <__vector_91>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_3)
__vector_91:    JMP     ProbeRS232_RxISR           ;     91       0x0168       USART D1 RxComplete
#else
__vector_91:    JMP     __unhandled_interrupt      ;     91       0x0168       USART D1 RxComplete
     330:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000334 <__vector_92>:
#endif
__vector_92:    JMP     __unhandled_interrupt      ;     92       0x016C       USART D1 Data Register Empty 
     334:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000338 <__vector_93>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_3)
__vector_93:    JMP     ProbeRS232_TxISR           ;     93       0x0170       USART D1 Tx Complete
#else
__vector_93:    JMP     __unhandled_interrupt      ;     93       0x0170       USART D1 Tx Complete
     338:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000033c <__vector_94>:
#endif
__vector_94:    JMP     __unhandled_interrupt      ;     94       0x0174       PortQ External Interrupt 0 
     33c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000340 <__vector_95>:
__vector_95:    JMP     __unhandled_interrupt      ;     95       0x0178       PortQ External Interrupt 1.
     340:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000344 <__vector_96>:
__vector_96:    JMP     __unhandled_interrupt      ;     96       0x017C       PortH External Interrupt 0.
     344:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000348 <__vector_97>:
__vector_97:    JMP     __unhandled_interrupt      ;     97       0x0180       PortH External Interrupt 1.
     348:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000034c <__vector_98>:
__vector_98:    JMP     __unhandled_interrupt      ;     98       0x0184       PortJ External Interrupt 0.
     34c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000350 <__vector_99>:
__vector_99:    JMP     __unhandled_interrupt      ;     99       0x0188       PortJ External Interrupt 1.
     350:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000354 <__vector_100>:
__vector_100:   JMP     __unhandled_interrupt      ;    100       0x018C       PortK External Interrupt 0 
     354:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000358 <__vector_101>:
__vector_101:   JMP     __unhandled_interrupt      ;    101       0x0190       PortK External Interrupt 1 
     358:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000035c <__vector_102>:
__vector_102:   JMP     __unhandled_interrupt      ;    102       Reserved
     35c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000360 <__vector_103>:
__vector_103:   JMP     __unhandled_interrupt      ;    103       Reserved
     360:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000364 <__vector_104>:
__vector_104:   JMP     __unhandled_interrupt      ;    104       0x019C       Port F External Interrupt 0 
     364:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000368 <__vector_105>:
__vector_105:   JMP     __unhandled_interrupt      ;    105       0x01A0       Port F External Interrupt 1 
     368:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000036c <__vector_106>:
__vector_106:   JMP     __unhandled_interrupt      ;    106       0x01A4       TWI  F Slave    Interrupt
     36c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000370 <__vector_107>:
__vector_107:   JMP     __unhandled_interrupt      ;    107       0x01A8       TWI  F Master   Interrupt
     370:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000374 <__vector_108>:
__vector_108:   JMP     __unhandled_interrupt      ;    108       0x01AC       Timer F0 Overflow
     374:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000378 <__vector_109>:
__vector_109:   JMP     __unhandled_interrupt      ;    109       0x01B0       Timer F0 Error
     378:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000037c <__vector_110>:
__vector_110:   JMP     __unhandled_interrupt      ;    110       0x01B4       Timer F0 Compare or Capture A
     37c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000380 <__vector_111>:
__vector_111:   JMP     __unhandled_interrupt      ;    111       0x01B8       Timer F0 Compare or Capture B
     380:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000384 <__vector_112>:
__vector_112:   JMP     __unhandled_interrupt      ;    112       0x01BC       Timer F0 Compare or Capture C
     384:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000388 <__vector_113>:
__vector_113:   JMP     __unhandled_interrupt      ;    113       0x01C0       Timer F0 Compare or Capture D
     388:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000038c <__vector_114>:
__vector_114:   JMP     __unhandled_interrupt      ;    114       0x01C4       Timer F1 Overflow
     38c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000390 <__vector_115>:
__vector_115:   JMP     __unhandled_interrupt      ;    115       0x01C8       Timer F1 Error
     390:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000394 <__vector_116>:
__vector_116:   JMP     __unhandled_interrupt      ;    116       0x01CC       Timer F1 Compare or Capture A
     394:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

00000398 <__vector_117>:
__vector_117:   JMP     __unhandled_interrupt      ;    117       0x01D0       Timer F1 Compare or Capture B
     398:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

0000039c <__vector_118>:
__vector_118:   JMP     __unhandled_interrupt      ;    118       0x01D4       SPI F
     39c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003a0 <__vector_119>:
#if (APP_CFG_PROBE_COM_EN     == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN   == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL == PROBE_RS232_UART_6)
__vector_119:   JMP     ProbeRS232_RxISR           ;    119       0x01D8       USART F0 Rx  Complete
#else
__vector_119:   JMP     __unhandled_interrupt      ;    119       0x01D8       USART F0 Rx  Complete
     3a0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003a4 <__vector_120>:
#endif

__vector_120:   JMP     __unhandled_interrupt      ;    120       0x01DC       USART F0 Data Register Empty
     3a4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003a8 <__vector_121>:
#if (APP_CFG_PROBE_COM_EN      == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN    == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL  == PROBE_RS232_UART_6)
__vector_121:   JMP     ProbeRS232_TxISR           ;    121       0x01E0       USART F0 Tx Complete
#else
__vector_121:   JMP     __unhandled_interrupt      ;    121       0x01E0       USART F0 Tx Complete
     3a8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003ac <__vector_122>:
#if (APP_CFG_PROBE_COM_EN      == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN    == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL  == PROBE_RS232_UART_7)
__vector_122:   JMP     ProbeRS232_RxISR           ;    122       0x01E4       USART F1 Rx Complete
#else  
__vector_122:   JMP     __unhandled_interrupt      ;    122       0x01E4       USART F1 Rx Complete
     3ac:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003b0 <__vector_123>:
#endif

__vector_123:   JMP     __unhandled_interrupt      ;    123       0x01E8       USART F1 Data Register Empty
     3b0:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003b4 <__vector_124>:
#if (APP_CFG_PROBE_COM_EN      == DEF_ENABLED       ) && \
    (PROBE_COM_CFG_RS232_EN    == DEF_ENABLED       ) && \
    (PROBE_RS232_CFG_COMM_SEL  == PROBE_RS232_UART_7)
__vector_124:   JMP     ProbeRS232_TxISR           ;    124       0x01EC       USART F1 Tx Complete
#else
__vector_124:   JMP     __unhandled_interrupt      ;    124       0x01EC       USART F1 Tx Complete
     3b4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__ctors_end>

000003b8 <__ctors_end>:
     3b8:	11 24       	eor	r1, r1
     3ba:	1f be       	out	0x3f, r1	; 63
     3bc:	cf ef       	ldi	r28, 0xFF	; 255
     3be:	df e3       	ldi	r29, 0x3F	; 63
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	0c bf       	out	0x3c, r16	; 60

000003c8 <__do_copy_data>:
     3c8:	12 e2       	ldi	r17, 0x22	; 34
     3ca:	a0 e0       	ldi	r26, 0x00	; 0
     3cc:	b0 e2       	ldi	r27, 0x20	; 32
     3ce:	e8 e7       	ldi	r30, 0x78	; 120
     3d0:	f4 eb       	ldi	r31, 0xB4	; 180
     3d2:	00 e0       	ldi	r16, 0x00	; 0
     3d4:	0b bf       	out	0x3b, r16	; 59
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__do_copy_data+0x14>
     3d8:	07 90       	elpm	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	a6 3f       	cpi	r26, 0xF6	; 246
     3de:	b1 07       	cpc	r27, r17
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__do_copy_data+0x10>

000003e2 <__do_clear_bss>:
     3e2:	15 e3       	ldi	r17, 0x35	; 53
     3e4:	a6 ef       	ldi	r26, 0xF6	; 246
     3e6:	b2 e2       	ldi	r27, 0x22	; 34
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <.do_clear_bss_start>

000003ea <.do_clear_bss_loop>:
     3ea:	1d 92       	st	X+, r1

000003ec <.do_clear_bss_start>:
     3ec:	a7 3f       	cpi	r26, 0xF7	; 247
     3ee:	b1 07       	cpc	r27, r17
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <.do_clear_bss_loop>
     3f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
     3f6:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <_exit>

000003fa <__bad_interrupt>:
     3fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003fe <main>:
*                                                MAIN
**************************************************************************************************************
*/

int  main (void)
{
     3fe:	8f 92       	push	r8
     400:	9f 92       	push	r9
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  os_err;


    BSP_IntDisAll();                                            /* Disable all interrupts until we are ready to accept them */
     41c:	0e 94 1c 06 	call	0xc38	; 0xc38 <BSP_IntDisAll>

    OSInit();                                                   /* Initialize "uC/OS-II, The Real-Time Kernel"              */
     420:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <OSInit>

    OSTaskCreateExt((void (*)(void *)) App_TaskStart,           /* Create the start task                                    */
     424:	0f 92       	push	r0
     426:	0f 92       	push	r0
     428:	4d b7       	in	r20, 0x3d	; 61
     42a:	5e b7       	in	r21, 0x3e	; 62
     42c:	4f 5f       	subi	r20, 0xFF	; 255
     42e:	5f 4f       	sbci	r21, 0xFF	; 255
     430:	86 e5       	ldi	r24, 0x56	; 86
     432:	92 e0       	ldi	r25, 0x02	; 2
     434:	2d e5       	ldi	r18, 0x5D	; 93
     436:	34 e2       	ldi	r19, 0x24	; 36
     438:	e6 ef       	ldi	r30, 0xF6	; 246
     43a:	f2 e2       	ldi	r31, 0x22	; 34
     43c:	63 e0       	ldi	r22, 0x03	; 3
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	da 01       	movw	r26, r20
     442:	6d 93       	st	X+, r22
     444:	7c 93       	st	X, r23
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	a9 01       	movw	r20, r18
     44c:	22 e0       	ldi	r18, 0x02	; 2
     44e:	02 e0       	ldi	r16, 0x02	; 2
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	7f 01       	movw	r14, r30
     454:	0f 2e       	mov	r0, r31
     456:	f8 e6       	ldi	r31, 0x68	; 104
     458:	af 2e       	mov	r10, r31
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	bf 2e       	mov	r11, r31
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	cf 2e       	mov	r12, r31
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	df 2e       	mov	r13, r31
     466:	f0 2d       	mov	r31, r0
     468:	88 24       	eor	r8, r8
     46a:	99 24       	eor	r9, r9
     46c:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
                    (INT32U          )(APP_CFG_TASK_START_STK_SIZE),
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

#if (OS_TASK_NAME_SIZE > 5)
    OSTaskNameSet(APP_CFG_TASK_START_PRIO, (CPU_CHAR *)"Start", &os_err);
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e2       	ldi	r19, 0x20	; 32
     478:	82 e0       	ldi	r24, 0x02	; 2
     47a:	b9 01       	movw	r22, r18
     47c:	9e 01       	movw	r18, r28
     47e:	2f 5f       	subi	r18, 0xFF	; 255
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	a9 01       	movw	r20, r18
     484:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#else
    (void)err;        
#endif
    
    
    OSStart();                                                          /* Start multitasking (i.e. give control to uC/OS-II)       */
     488:	0e 94 71 20 	call	0x40e2	; 0x40e2 <OSStart>
	
	return (0);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
}
     490:	0f 90       	pop	r0
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	df 90       	pop	r13
     4a0:	cf 90       	pop	r12
     4a2:	bf 90       	pop	r11
     4a4:	af 90       	pop	r10
     4a6:	9f 90       	pop	r9
     4a8:	8f 90       	pop	r8
     4aa:	08 95       	ret

000004ac <App_TaskStart>:
*                 used.  The compiler should not generate any code for this statement.
*********************************************************************************************************
*/

static void  App_TaskStart (void *p_arg)
{
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	00 d0       	rcall	.+0      	; 0x4b2 <App_TaskStart+0x6>
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
     4b6:	8a 83       	std	Y+2, r24	; 0x02
     4b8:	9b 83       	std	Y+3, r25	; 0x03
    CPU_INT08U  i;


    (void)p_arg;                                                /* Prevent compiler warnings                                */

    BSP_Init();                                                 /* Initialize the BSP                                       */
     4ba:	0e 94 0d 06 	call	0xc1a	; 0xc1a <BSP_Init>

#if (OS_TASK_STAT_EN > 0)
    OSStatInit();                                               /* Determine CPU capacity                                   */
     4be:	0e 94 9b 20 	call	0x4136	; 0x4136 <OSStatInit>
#if (APP_CFG_PROBE_COM_EN       == DEF_ENABLED) || \
    (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED)
    App_ProbeInit();                                            /* Initialize uC/Probe modules                              */
#endif

    App_TaskCreate();                                           /* Create the application tasks                             */
     4c2:	0e 94 ae 02 	call	0x55c	; 0x55c <App_TaskCreate>
    App_EventCreate();                                          /* Create the application events                            */
     4c6:	0e 94 2f 03 	call	0x65e	; 0x65e <App_EventCreate>

    BSP_Ser_Init(115200);                                       
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	72 ec       	ldi	r23, 0xC2	; 194
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <BSP_Ser_Init>
    
    while (1) {                                                 /* Task body, always written as an infinite loop.           */
        for (i = 1; i < 8; i++) {
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	17 c0       	rjmp	.+46     	; 0x50a <App_TaskStart+0x5e>
            BSP_LED_On(i);
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <BSP_LED_On>
            OSTimeDlyHMSM(0, 0, 0, 100);
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	60 e0       	ldi	r22, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	24 e6       	ldi	r18, 0x64	; 100
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <OSTimeDlyHMSM>
            BSP_LED_Off(i);
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	0e 94 82 0a 	call	0x1504	; 0x1504 <BSP_LED_Off>
            OSTimeDlyHMSM(0, 0, 0, 100);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	60 e0       	ldi	r22, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	24 e6       	ldi	r18, 0x64	; 100
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <OSTimeDlyHMSM>
    App_EventCreate();                                          /* Create the application events                            */

    BSP_Ser_Init(115200);                                       
    
    while (1) {                                                 /* Task body, always written as an infinite loop.           */
        for (i = 1; i < 8; i++) {
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	89 83       	std	Y+1, r24	; 0x01
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	88 30       	cpi	r24, 0x08	; 8
     50e:	30 f3       	brcs	.-52     	; 0x4dc <App_TaskStart+0x30>
            OSTimeDlyHMSM(0, 0, 0, 100);
            BSP_LED_Off(i);
            OSTimeDlyHMSM(0, 0, 0, 100);
         
        }
        for (i = 1; i < 8; i++) {
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	89 83       	std	Y+1, r24	; 0x01
     514:	1f c0       	rjmp	.+62     	; 0x554 <App_TaskStart+0xa8>
            BSP_LED_On(9 - i);
     516:	99 e0       	ldi	r25, 0x09	; 9
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	29 2f       	mov	r18, r25
     51c:	28 1b       	sub	r18, r24
     51e:	82 2f       	mov	r24, r18
     520:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <BSP_LED_On>
            OSTimeDlyHMSM(0, 0, 0, 100);
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	24 e6       	ldi	r18, 0x64	; 100
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <OSTimeDlyHMSM>
            BSP_LED_Off(9 - i);
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	29 2f       	mov	r18, r25
     538:	28 1b       	sub	r18, r24
     53a:	82 2f       	mov	r24, r18
     53c:	0e 94 82 0a 	call	0x1504	; 0x1504 <BSP_LED_Off>
            OSTimeDlyHMSM(0, 0, 0, 100);
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	40 e0       	ldi	r20, 0x00	; 0
     546:	24 e6       	ldi	r18, 0x64	; 100
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	0e 94 33 4e 	call	0x9c66	; 0x9c66 <OSTimeDlyHMSM>
            OSTimeDlyHMSM(0, 0, 0, 100);
            BSP_LED_Off(i);
            OSTimeDlyHMSM(0, 0, 0, 100);
         
        }
        for (i = 1; i < 8; i++) {
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	89 83       	std	Y+1, r24	; 0x01
     554:	89 81       	ldd	r24, Y+1	; 0x01
     556:	88 30       	cpi	r24, 0x08	; 8
     558:	f0 f2       	brcs	.-68     	; 0x516 <App_TaskStart+0x6a>
            BSP_LED_On(9 - i);
            OSTimeDlyHMSM(0, 0, 0, 100);
            BSP_LED_Off(9 - i);
            OSTimeDlyHMSM(0, 0, 0, 100);
        }
    }
     55a:	bd cf       	rjmp	.-134    	; 0x4d6 <App_TaskStart+0x2a>

0000055c <App_TaskCreate>:
* Note(s)     : none.
*                 
**************************************************************************************************************
*/
static  void  App_TaskCreate (void)
{
     55c:	8f 92       	push	r8
     55e:	9f 92       	push	r9
     560:	af 92       	push	r10
     562:	bf 92       	push	r11
     564:	cf 92       	push	r12
     566:	df 92       	push	r13
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	df 93       	push	r29
     572:	cf 93       	push	r28
     574:	0f 92       	push	r0
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  os_err;
    
    OSTaskCreateExt((void (*)(void *)) App_TaskUserIF,
     57a:	0f 92       	push	r0
     57c:	0f 92       	push	r0
     57e:	4d b7       	in	r20, 0x3d	; 61
     580:	5e b7       	in	r21, 0x3e	; 62
     582:	4f 5f       	subi	r20, 0xFF	; 255
     584:	5f 4f       	sbci	r21, 0xFF	; 255
     586:	8f eb       	ldi	r24, 0xBF	; 191
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	25 ec       	ldi	r18, 0xC5	; 197
     58c:	35 e2       	ldi	r19, 0x25	; 37
     58e:	ee e5       	ldi	r30, 0x5E	; 94
     590:	f4 e2       	ldi	r31, 0x24	; 36
     592:	63 e0       	ldi	r22, 0x03	; 3
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	da 01       	movw	r26, r20
     598:	6d 93       	st	X+, r22
     59a:	7c 93       	st	X, r23
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	a9 01       	movw	r20, r18
     5a2:	24 e0       	ldi	r18, 0x04	; 4
     5a4:	04 e0       	ldi	r16, 0x04	; 4
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	7f 01       	movw	r14, r30
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f8 e6       	ldi	r31, 0x68	; 104
     5ae:	af 2e       	mov	r10, r31
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	bf 2e       	mov	r11, r31
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	cf 2e       	mov	r12, r31
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	df 2e       	mov	r13, r31
     5bc:	f0 2d       	mov	r31, r0
     5be:	88 24       	eor	r8, r8
     5c0:	99 24       	eor	r9, r9
     5c2:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
                    (INT32U          ) APP_CFG_TASK_USER_IF_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

#if (OS_TASK_NAME_SIZE > 13)
    OSTaskNameSet(APP_CFG_TASK_USER_IF_PRIO, (CPU_CHAR *)"User I/F", &os_err);
     5ca:	26 e0       	ldi	r18, 0x06	; 6
     5cc:	30 e2       	ldi	r19, 0x20	; 32
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	b9 01       	movw	r22, r18
     5d2:	9e 01       	movw	r18, r28
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	3f 4f       	sbci	r19, 0xFF	; 255
     5d8:	a9 01       	movw	r20, r18
     5da:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#endif

    OSTaskCreateExt((void (*)(void *)) App_TaskKbd,
     5de:	0f 92       	push	r0
     5e0:	0f 92       	push	r0
     5e2:	4d b7       	in	r20, 0x3d	; 61
     5e4:	5e b7       	in	r21, 0x3e	; 62
     5e6:	4f 5f       	subi	r20, 0xFF	; 255
     5e8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ea:	8d e4       	ldi	r24, 0x4D	; 77
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	2d e2       	ldi	r18, 0x2D	; 45
     5f0:	37 e2       	ldi	r19, 0x27	; 39
     5f2:	e6 ec       	ldi	r30, 0xC6	; 198
     5f4:	f5 e2       	ldi	r31, 0x25	; 37
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	da 01       	movw	r26, r20
     5fc:	6d 93       	st	X+, r22
     5fe:	7c 93       	st	X, r23
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	a9 01       	movw	r20, r18
     606:	23 e0       	ldi	r18, 0x03	; 3
     608:	03 e0       	ldi	r16, 0x03	; 3
     60a:	10 e0       	ldi	r17, 0x00	; 0
     60c:	7f 01       	movw	r14, r30
     60e:	0f 2e       	mov	r0, r31
     610:	f8 e6       	ldi	r31, 0x68	; 104
     612:	af 2e       	mov	r10, r31
     614:	f1 e0       	ldi	r31, 0x01	; 1
     616:	bf 2e       	mov	r11, r31
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	cf 2e       	mov	r12, r31
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	df 2e       	mov	r13, r31
     620:	f0 2d       	mov	r31, r0
     622:	88 24       	eor	r8, r8
     624:	99 24       	eor	r9, r9
     626:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
                    (INT32U          ) APP_CFG_TASK_KBD_STK_SIZE,
                    (void           *) 0,
                    (INT16U          )(OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));

#if (OS_TASK_NAME_SIZE > 13)
    OSTaskNameSet(APP_CFG_TASK_KBD_PRIO, (CPU_CHAR *)"Keyboard", &os_err);
     62e:	2f e0       	ldi	r18, 0x0F	; 15
     630:	30 e2       	ldi	r19, 0x20	; 32
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	b9 01       	movw	r22, r18
     636:	9e 01       	movw	r18, r28
     638:	2f 5f       	subi	r18, 0xFF	; 255
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	a9 01       	movw	r20, r18
     63e:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#endif
    
#if (OS_TASK_NAME_SIZE < 13)
    (void)os_err;
#endif    
}
     642:	0f 90       	pop	r0
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <App_EventCreate>:
* Note(s)     : none.
**************************************************************************************************************
*/

static  void  App_EventCreate (void)
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
#if (OS_EVENT_NAME_SIZE > 8)
	CPU_INT08U  os_err;
#endif
    
    App_UserIFMbox = OSMboxCreate((void *)0);                   /* MBOX for comm between App_TaskKbd() and App_TaskUserIF()  */
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 47 32 	call	0x648e	; 0x648e <OSMboxCreate>
     670:	80 93 7f 27 	sts	0x277F, r24
     674:	90 93 80 27 	sts	0x2780, r25

#if (OS_EVENT_NAME_SIZE > 8)
    OSEventNameSet(App_UserIFMbox, (CPU_CHAR *)"User I/F", &os_err);
     678:	80 91 7f 27 	lds	r24, 0x277F
     67c:	90 91 80 27 	lds	r25, 0x2780
     680:	26 e0       	ldi	r18, 0x06	; 6
     682:	30 e2       	ldi	r19, 0x20	; 32
     684:	b9 01       	movw	r22, r18
     686:	9e 01       	movw	r18, r28
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	a9 01       	movw	r20, r18
     68e:	0e 94 91 1c 	call	0x3922	; 0x3922 <OSEventNameSet>
#endif   

}
     692:	0f 90       	pop	r0
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <App_TaskKbd>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  App_TaskKbd (void *p_arg)
{
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	2a 97       	sbiw	r28, 0x0a	; 10
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	9a 87       	std	Y+10, r25	; 0x0a
    CPU_BOOLEAN  b4;
    CPU_BOOLEAN  b4_prev;


    (void)p_arg;
    b1_prev = DEF_FALSE;
     6ac:	19 82       	std	Y+1, r1	; 0x01
    b2_prev = DEF_FALSE;
     6ae:	1a 82       	std	Y+2, r1	; 0x02
    b3_prev = DEF_FALSE;
     6b0:	1b 82       	std	Y+3, r1	; 0x03
    b4_prev = DEF_FALSE;
     6b2:	1c 82       	std	Y+4, r1	; 0x04
    
    while (DEF_TRUE) {

        b1  = BSP_PB_GetStatus(0);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BSP_PB_GetStatus>
     6ba:	8d 83       	std	Y+5, r24	; 0x05
        b2  = BSP_PB_GetStatus(1);
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BSP_PB_GetStatus>
     6c2:	8e 83       	std	Y+6, r24	; 0x06
        b3  = BSP_PB_GetStatus(2);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BSP_PB_GetStatus>
     6ca:	8f 83       	std	Y+7, r24	; 0x07
        b4  = BSP_PB_GetStatus(3);
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BSP_PB_GetStatus>
     6d2:	88 87       	std	Y+8, r24	; 0x08

        if (b1 == DEF_TRUE && b1_prev == DEF_FALSE) {
     6d4:	8d 81       	ldd	r24, Y+5	; 0x05
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	79 f4       	brne	.+30     	; 0x6f8 <App_TaskKbd+0x5e>
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	88 23       	and	r24, r24
     6de:	61 f4       	brne	.+24     	; 0x6f8 <App_TaskKbd+0x5e>
            App_UserIFState = APP_SER_SCR_SIGN_ON;
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	80 93 7e 27 	sts	0x277E, r24
            OSMboxPost(App_UserIFMbox, &App_UserIFState);
     6e6:	80 91 7f 27 	lds	r24, 0x277F
     6ea:	90 91 80 27 	lds	r25, 0x2780
     6ee:	2e e7       	ldi	r18, 0x7E	; 126
     6f0:	37 e2       	ldi	r19, 0x27	; 39
     6f2:	b9 01       	movw	r22, r18
     6f4:	0e 94 ac 34 	call	0x6958	; 0x6958 <OSMboxPost>
        }

        if (b2 == DEF_TRUE && b2_prev == DEF_FALSE) {
     6f8:	8e 81       	ldd	r24, Y+6	; 0x06
     6fa:	81 30       	cpi	r24, 0x01	; 1
     6fc:	79 f4       	brne	.+30     	; 0x71c <App_TaskKbd+0x82>
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	88 23       	and	r24, r24
     702:	61 f4       	brne	.+24     	; 0x71c <App_TaskKbd+0x82>
            App_UserIFState = APP_SER_SCR_VER_TICK_RATE;
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	80 93 7e 27 	sts	0x277E, r24
            OSMboxPost(App_UserIFMbox, &App_UserIFState);
     70a:	80 91 7f 27 	lds	r24, 0x277F
     70e:	90 91 80 27 	lds	r25, 0x2780
     712:	2e e7       	ldi	r18, 0x7E	; 126
     714:	37 e2       	ldi	r19, 0x27	; 39
     716:	b9 01       	movw	r22, r18
     718:	0e 94 ac 34 	call	0x6958	; 0x6958 <OSMboxPost>
        }

        if (b3 == DEF_TRUE && b3_prev == DEF_FALSE) {
     71c:	8f 81       	ldd	r24, Y+7	; 0x07
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	79 f4       	brne	.+30     	; 0x740 <App_TaskKbd+0xa6>
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	88 23       	and	r24, r24
     726:	61 f4       	brne	.+24     	; 0x740 <App_TaskKbd+0xa6>
            App_UserIFState = APP_SER_SCR_CPU;
     728:	83 e0       	ldi	r24, 0x03	; 3
     72a:	80 93 7e 27 	sts	0x277E, r24
            OSMboxPost(App_UserIFMbox, &App_UserIFState);
     72e:	80 91 7f 27 	lds	r24, 0x277F
     732:	90 91 80 27 	lds	r25, 0x2780
     736:	2e e7       	ldi	r18, 0x7E	; 126
     738:	37 e2       	ldi	r19, 0x27	; 39
     73a:	b9 01       	movw	r22, r18
     73c:	0e 94 ac 34 	call	0x6958	; 0x6958 <OSMboxPost>
        }

        if (b4 == DEF_TRUE && b4_prev == DEF_FALSE) {
     740:	88 85       	ldd	r24, Y+8	; 0x08
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	79 f4       	brne	.+30     	; 0x764 <App_TaskKbd+0xca>
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	88 23       	and	r24, r24
     74a:	61 f4       	brne	.+24     	; 0x764 <App_TaskKbd+0xca>
            App_UserIFState = APP_SER_SCR_CTXSW;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	80 93 7e 27 	sts	0x277E, r24
            OSMboxPost(App_UserIFMbox, &App_UserIFState);
     752:	80 91 7f 27 	lds	r24, 0x277F
     756:	90 91 80 27 	lds	r25, 0x2780
     75a:	2e e7       	ldi	r18, 0x7E	; 126
     75c:	37 e2       	ldi	r19, 0x27	; 39
     75e:	b9 01       	movw	r22, r18
     760:	0e 94 ac 34 	call	0x6958	; 0x6958 <OSMboxPost>
        }

        b1_prev = b1;
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	89 83       	std	Y+1, r24	; 0x01
        b2_prev = b2;
     768:	8e 81       	ldd	r24, Y+6	; 0x06
     76a:	8a 83       	std	Y+2, r24	; 0x02
        b3_prev = b3;
     76c:	8f 81       	ldd	r24, Y+7	; 0x07
     76e:	8b 83       	std	Y+3, r24	; 0x03
        b4_prev = b4;
     770:	88 85       	ldd	r24, Y+8	; 0x08
     772:	8c 83       	std	Y+4, r24	; 0x04
        
        OSTimeDly(OS_TICKS_PER_SEC / 20);
     774:	82 e3       	ldi	r24, 0x32	; 50
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    }
     77c:	9b cf       	rjmp	.-202    	; 0x6b4 <App_TaskKbd+0x1a>

0000077e <App_TaskUserIF>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  App_TaskUserIF (void *p_arg)
{
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	29 97       	sbiw	r28, 0x09	; 9
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	88 87       	std	Y+8, r24	; 0x08
     78e:	99 87       	std	Y+9, r25	; 0x09
    CPU_INT32U      ser_scr;


    (void)p_arg;

    BSP_Ser_WrStr((CPU_CHAR *)"\n\n\r");
     790:	88 e1       	ldi	r24, 0x18	; 24
     792:	90 e2       	ldi	r25, 0x20	; 32
     794:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
    
	App_DispScr_SignOn();
     798:	0e 94 23 04 	call	0x846	; 0x846 <App_DispScr_SignOn>
    
	BSP_Ser_WrStr((CPU_CHAR *)"\n\n\r");
     79c:	88 e1       	ldi	r24, 0x18	; 24
     79e:	90 e2       	ldi	r25, 0x20	; 32
     7a0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
    
	OSTimeDly(OS_TICKS_PER_SEC);
     7a4:	88 ee       	ldi	r24, 0xE8	; 232
     7a6:	93 e0       	ldi	r25, 0x03	; 3
     7a8:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    
    ser_scr = APP_SER_SCR_VER_TICK_RATE;
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	ab 83       	std	Y+3, r26	; 0x03
     7ba:	bc 83       	std	Y+4, r27	; 0x04

    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.           */
        msg = (CPU_INT08U *)(OSMboxPend(App_UserIFMbox, OS_TICKS_PER_SEC / 10, &err));
     7bc:	80 91 7f 27 	lds	r24, 0x277F
     7c0:	90 91 80 27 	lds	r25, 0x2780
     7c4:	9e 01       	movw	r18, r28
     7c6:	29 5f       	subi	r18, 0xF9	; 249
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	64 e6       	ldi	r22, 0x64	; 100
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	a9 01       	movw	r20, r18
     7d0:	0e 94 6d 33 	call	0x66da	; 0x66da <OSMboxPend>
     7d4:	8d 83       	std	Y+5, r24	; 0x05
     7d6:	9e 83       	std	Y+6, r25	; 0x06
        if (err == OS_NO_ERR) {
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	88 23       	and	r24, r24
     7dc:	a1 f4       	brne	.+40     	; 0x806 <App_TaskUserIF+0x88>
            if (msg != (CPU_INT08U *)0) {
     7de:	8d 81       	ldd	r24, Y+5	; 0x05
     7e0:	9e 81       	ldd	r25, Y+6	; 0x06
     7e2:	00 97       	sbiw	r24, 0x00	; 0
     7e4:	81 f0       	breq	.+32     	; 0x806 <App_TaskUserIF+0x88>
                ser_scr = *msg;
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ea:	fc 01       	movw	r30, r24
     7ec:	80 81       	ld	r24, Z
     7ee:	88 2f       	mov	r24, r24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	a0 e0       	ldi	r26, 0x00	; 0
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	ab 83       	std	Y+3, r26	; 0x03
     7fc:	bc 83       	std	Y+4, r27	; 0x04
                
				BSP_Ser_WrStr((CPU_CHAR *)"\n\n\r");    
     7fe:	88 e1       	ldi	r24, 0x18	; 24
     800:	90 e2       	ldi	r25, 0x20	; 32
     802:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
            }
        }

        switch (ser_scr) {
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	ab 81       	ldd	r26, Y+3	; 0x03
     80c:	bc 81       	ldd	r27, Y+4	; 0x04
     80e:	83 30       	cpi	r24, 0x03	; 3
     810:	91 05       	cpc	r25, r1
     812:	a1 05       	cpc	r26, r1
     814:	b1 05       	cpc	r27, r1
     816:	69 f0       	breq	.+26     	; 0x832 <App_TaskUserIF+0xb4>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	91 05       	cpc	r25, r1
     81c:	a1 05       	cpc	r26, r1
     81e:	b1 05       	cpc	r27, r1
     820:	59 f0       	breq	.+22     	; 0x838 <App_TaskUserIF+0xba>
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	49 f4       	brne	.+18     	; 0x83e <App_TaskUserIF+0xc0>
            case APP_SER_SCR_VER_TICK_RATE:
                 App_DispScr_VerTickRate();
     82c:	0e 94 35 04 	call	0x86a	; 0x86a <App_DispScr_VerTickRate>
                 break;
     830:	09 c0       	rjmp	.+18     	; 0x844 <App_TaskUserIF+0xc6>

            case APP_SER_SCR_CPU:
                 App_DispScr_CPU();
     832:	0e 94 a5 04 	call	0x94a	; 0x94a <App_DispScr_CPU>
                 break;
     836:	06 c0       	rjmp	.+12     	; 0x844 <App_TaskUserIF+0xc6>

            case APP_SER_SCR_CTXSW:
                 App_DispScr_CtxSw();
     838:	0e 94 03 05 	call	0xa06	; 0xa06 <App_DispScr_CtxSw>
                 break;
     83c:	03 c0       	rjmp	.+6      	; 0x844 <App_TaskUserIF+0xc6>
              
            default:            
            case APP_SER_SCR_SIGN_ON:
                 App_DispScr_SignOn();
     83e:	0e 94 23 04 	call	0x846	; 0x846 <App_DispScr_SignOn>
                 break;
     842:	00 00       	nop

        }
    }
     844:	bb cf       	rjmp	.-138    	; 0x7bc <App_TaskUserIF+0x3e>

00000846 <App_DispScr_SignOn>:
*********************************************************************************************************
*/


static  void  App_DispScr_SignOn (void)
{
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
    Str_Copy(&App_SerOut[0],(CPU_CHAR *)"Micrium uC/OS-II on the ATMEL XMEGA 128A1 - STK600 \r");
     84e:	8e e2       	ldi	r24, 0x2E	; 46
     850:	97 e2       	ldi	r25, 0x27	; 39
     852:	2c e1       	ldi	r18, 0x1C	; 28
     854:	30 e2       	ldi	r19, 0x20	; 32
     856:	b9 01       	movw	r22, r18
     858:	0e 94 0f 12 	call	0x241e	; 0x241e <Str_Copy>
	
	BSP_Ser_WrStr(&App_SerOut[0]);
     85c:	8e e2       	ldi	r24, 0x2E	; 46
     85e:	97 e2       	ldi	r25, 0x27	; 39
     860:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
	
}
     864:	cf 91       	pop	r28
     866:	df 91       	pop	r29
     868:	08 95       	ret

0000086a <App_DispScr_VerTickRate>:

static  void  App_DispScr_VerTickRate (void)
{
     86a:	df 93       	push	r29
     86c:	cf 93       	push	r28
     86e:	00 d0       	rcall	.+0      	; 0x870 <App_DispScr_VerTickRate+0x6>
     870:	0f 92       	push	r0
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
    CPU_INT32U  val;


    Str_Copy(&App_SerOut[0], (CPU_CHAR *)"uC/OS-II:  Vx.yy  TickRate: xxxx \r");
     876:	8e e2       	ldi	r24, 0x2E	; 46
     878:	97 e2       	ldi	r25, 0x27	; 39
     87a:	21 e5       	ldi	r18, 0x51	; 81
     87c:	30 e2       	ldi	r19, 0x20	; 32
     87e:	b9 01       	movw	r22, r18
     880:	0e 94 0f 12 	call	0x241e	; 0x241e <Str_Copy>
    
	val            = (CPU_INT32U)OSVersion();
     884:	0e 94 a5 21 	call	0x434a	; 0x434a <OSVersion>
     888:	cc 01       	movw	r24, r24
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	ab 83       	std	Y+3, r26	; 0x03
     894:	bc 83       	std	Y+4, r27	; 0x04
    App_SerOut[12] = (val      ) / 100 + '0';
     896:	89 81       	ldd	r24, Y+1	; 0x01
     898:	9a 81       	ldd	r25, Y+2	; 0x02
     89a:	ab 81       	ldd	r26, Y+3	; 0x03
     89c:	bc 81       	ldd	r27, Y+4	; 0x04
     89e:	24 e6       	ldi	r18, 0x64	; 100
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	bc 01       	movw	r22, r24
     8a8:	cd 01       	movw	r24, r26
     8aa:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     8ae:	da 01       	movw	r26, r20
     8b0:	c9 01       	movw	r24, r18
     8b2:	80 5d       	subi	r24, 0xD0	; 208
     8b4:	80 93 3a 27 	sts	0x273A, r24
    App_SerOut[14] = (val % 100) /  10 + '0';
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	ab 81       	ldd	r26, Y+3	; 0x03
     8be:	bc 81       	ldd	r27, Y+4	; 0x04
     8c0:	24 e6       	ldi	r18, 0x64	; 100
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	2a e0       	ldi	r18, 0x0A	; 10
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	bc 01       	movw	r22, r24
     8de:	cd 01       	movw	r24, r26
     8e0:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     8e4:	da 01       	movw	r26, r20
     8e6:	c9 01       	movw	r24, r18
     8e8:	80 5d       	subi	r24, 0xD0	; 208
     8ea:	80 93 3c 27 	sts	0x273C, r24
    App_SerOut[15] = (val %  10) /   1 + '0';   
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	ab 81       	ldd	r26, Y+3	; 0x03
     8f4:	bc 81       	ldd	r27, Y+4	; 0x04
     8f6:	2a e0       	ldi	r18, 0x0A	; 10
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	80 5d       	subi	r24, 0xD0	; 208
     90c:	80 93 3d 27 	sts	0x273D, r24
    val           = (CPU_INT32U)OS_TICKS_PER_SEC;
     910:	88 ee       	ldi	r24, 0xE8	; 232
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	a0 e0       	ldi	r26, 0x00	; 0
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	9a 83       	std	Y+2, r25	; 0x02
     91c:	ab 83       	std	Y+3, r26	; 0x03
     91e:	bc 83       	std	Y+4, r27	; 0x04
    
	App_FormatDec(&App_SerOut[28], val, 4);
     920:	8a e4       	ldi	r24, 0x4A	; 74
     922:	97 e2       	ldi	r25, 0x27	; 39
     924:	29 81       	ldd	r18, Y+1	; 0x01
     926:	3a 81       	ldd	r19, Y+2	; 0x02
     928:	4b 81       	ldd	r20, Y+3	; 0x03
     92a:	5c 81       	ldd	r21, Y+4	; 0x04
     92c:	ba 01       	movw	r22, r20
     92e:	a9 01       	movw	r20, r18
     930:	24 e0       	ldi	r18, 0x04	; 4
     932:	0e 94 48 05 	call	0xa90	; 0xa90 <App_FormatDec>
    
	BSP_Ser_WrStr(&App_SerOut[0]);
     936:	8e e2       	ldi	r24, 0x2E	; 46
     938:	97 e2       	ldi	r25, 0x27	; 39
     93a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>

}
     93e:	24 96       	adiw	r28, 0x04	; 4
     940:	cd bf       	out	0x3d, r28	; 61
     942:	de bf       	out	0x3e, r29	; 62
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <App_DispScr_CPU>:

static  void  App_DispScr_CPU (void)
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	00 d0       	rcall	.+0      	; 0x950 <App_DispScr_CPU+0x6>
     950:	0f 92       	push	r0
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
    CPU_INT32U  val;


    Str_Copy(&App_SerOut[0], (CPU_CHAR *)"CPU Usage:xx CPU Speed:xxx MHz \r");
     956:	8e e2       	ldi	r24, 0x2E	; 46
     958:	97 e2       	ldi	r25, 0x27	; 39
     95a:	24 e7       	ldi	r18, 0x74	; 116
     95c:	30 e2       	ldi	r19, 0x20	; 32
     95e:	b9 01       	movw	r22, r18
     960:	0e 94 0f 12 	call	0x241e	; 0x241e <Str_Copy>
    val               = (CPU_INT32U)OSCPUUsage;
     964:	80 91 56 2c 	lds	r24, 0x2C56
     968:	88 2f       	mov	r24, r24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	89 83       	std	Y+1, r24	; 0x01
     972:	9a 83       	std	Y+2, r25	; 0x02
     974:	ab 83       	std	Y+3, r26	; 0x03
     976:	bc 83       	std	Y+4, r27	; 0x04
    App_SerOut[10]    = (val / 10) + '0';
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	9a 81       	ldd	r25, Y+2	; 0x02
     97c:	ab 81       	ldd	r26, Y+3	; 0x03
     97e:	bc 81       	ldd	r27, Y+4	; 0x04
     980:	2a e0       	ldi	r18, 0x0A	; 10
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     990:	da 01       	movw	r26, r20
     992:	c9 01       	movw	r24, r18
     994:	80 5d       	subi	r24, 0xD0	; 208
     996:	80 93 38 27 	sts	0x2738, r24
    App_SerOut[11]    = (val % 10) + '0';
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	ab 81       	ldd	r26, Y+3	; 0x03
     9a0:	bc 81       	ldd	r27, Y+4	; 0x04
     9a2:	2a e0       	ldi	r18, 0x0A	; 10
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	80 5d       	subi	r24, 0xD0	; 208
     9b8:	80 93 39 27 	sts	0x2739, r24
    
	val               = (CPU_INT32U)BSP_CPU_ClkFreq() / 1000000L;
     9bc:	0e 94 27 06 	call	0xc4e	; 0xc4e <BSP_CPU_ClkFreq>
     9c0:	dc 01       	movw	r26, r24
     9c2:	cb 01       	movw	r24, r22
     9c4:	20 e4       	ldi	r18, 0x40	; 64
     9c6:	32 e4       	ldi	r19, 0x42	; 66
     9c8:	4f e0       	ldi	r20, 0x0F	; 15
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	bc 01       	movw	r22, r24
     9ce:	cd 01       	movw	r24, r26
     9d0:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     9d4:	29 83       	std	Y+1, r18	; 0x01
     9d6:	3a 83       	std	Y+2, r19	; 0x02
     9d8:	4b 83       	std	Y+3, r20	; 0x03
     9da:	5c 83       	std	Y+4, r21	; 0x04
    App_FormatDec(&App_SerOut[23], val, 3);
     9dc:	85 e4       	ldi	r24, 0x45	; 69
     9de:	97 e2       	ldi	r25, 0x27	; 39
     9e0:	29 81       	ldd	r18, Y+1	; 0x01
     9e2:	3a 81       	ldd	r19, Y+2	; 0x02
     9e4:	4b 81       	ldd	r20, Y+3	; 0x03
     9e6:	5c 81       	ldd	r21, Y+4	; 0x04
     9e8:	ba 01       	movw	r22, r20
     9ea:	a9 01       	movw	r20, r18
     9ec:	23 e0       	ldi	r18, 0x03	; 3
     9ee:	0e 94 48 05 	call	0xa90	; 0xa90 <App_FormatDec>
	BSP_Ser_WrStr(&App_SerOut[0]);
     9f2:	8e e2       	ldi	r24, 0x2E	; 46
     9f4:	97 e2       	ldi	r25, 0x27	; 39
     9f6:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
}
     9fa:	24 96       	adiw	r28, 0x04	; 4
     9fc:	cd bf       	out	0x3d, r28	; 61
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	08 95       	ret

00000a06 <App_DispScr_CtxSw>:

static  void  App_DispScr_CtxSw (void)
{
     a06:	df 93       	push	r29
     a08:	cf 93       	push	r28
     a0a:	00 d0       	rcall	.+0      	; 0xa0c <App_DispScr_CtxSw+0x6>
     a0c:	0f 92       	push	r0
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
    CPU_INT32U  val;


    Str_Copy(&App_SerOut[0],(CPU_CHAR *)"#Ticks: xxxxxxxxx #CtxSw: xxxxxxxxx \r");
     a12:	8e e2       	ldi	r24, 0x2E	; 46
     a14:	97 e2       	ldi	r25, 0x27	; 39
     a16:	25 e9       	ldi	r18, 0x95	; 149
     a18:	30 e2       	ldi	r19, 0x20	; 32
     a1a:	b9 01       	movw	r22, r18
     a1c:	0e 94 0f 12 	call	0x241e	; 0x241e <Str_Copy>
    
	val = (CPU_INT32U)OSTime;
     a20:	80 91 0e 2e 	lds	r24, 0x2E0E
     a24:	90 91 0f 2e 	lds	r25, 0x2E0F
     a28:	a0 91 10 2e 	lds	r26, 0x2E10
     a2c:	b0 91 11 2e 	lds	r27, 0x2E11
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	9a 83       	std	Y+2, r25	; 0x02
     a34:	ab 83       	std	Y+3, r26	; 0x03
     a36:	bc 83       	std	Y+4, r27	; 0x04
    
	App_FormatDec(&App_SerOut[8], val, 9);    
     a38:	86 e3       	ldi	r24, 0x36	; 54
     a3a:	97 e2       	ldi	r25, 0x27	; 39
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	3a 81       	ldd	r19, Y+2	; 0x02
     a40:	4b 81       	ldd	r20, Y+3	; 0x03
     a42:	5c 81       	ldd	r21, Y+4	; 0x04
     a44:	ba 01       	movw	r22, r20
     a46:	a9 01       	movw	r20, r18
     a48:	29 e0       	ldi	r18, 0x09	; 9
     a4a:	0e 94 48 05 	call	0xa90	; 0xa90 <App_FormatDec>
	val = (CPU_INT32U)OSCtxSwCtr;
     a4e:	80 91 4a 2c 	lds	r24, 0x2C4A
     a52:	90 91 4b 2c 	lds	r25, 0x2C4B
     a56:	a0 91 4c 2c 	lds	r26, 0x2C4C
     a5a:	b0 91 4d 2c 	lds	r27, 0x2C4D
     a5e:	89 83       	std	Y+1, r24	; 0x01
     a60:	9a 83       	std	Y+2, r25	; 0x02
     a62:	ab 83       	std	Y+3, r26	; 0x03
     a64:	bc 83       	std	Y+4, r27	; 0x04
    
	App_FormatDec(&App_SerOut[26], val, 9);
     a66:	88 e4       	ldi	r24, 0x48	; 72
     a68:	97 e2       	ldi	r25, 0x27	; 39
     a6a:	29 81       	ldd	r18, Y+1	; 0x01
     a6c:	3a 81       	ldd	r19, Y+2	; 0x02
     a6e:	4b 81       	ldd	r20, Y+3	; 0x03
     a70:	5c 81       	ldd	r21, Y+4	; 0x04
     a72:	ba 01       	movw	r22, r20
     a74:	a9 01       	movw	r20, r18
     a76:	29 e0       	ldi	r18, 0x09	; 9
     a78:	0e 94 48 05 	call	0xa90	; 0xa90 <App_FormatDec>
    BSP_Ser_WrStr(&App_SerOut[0]);
     a7c:	8e e2       	ldi	r24, 0x2E	; 46
     a7e:	97 e2       	ldi	r25, 0x27	; 39
     a80:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
}
     a84:	24 96       	adiw	r28, 0x04	; 4
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	cf 91       	pop	r28
     a8c:	df 91       	pop	r29
     a8e:	08 95       	ret

00000a90 <App_FormatDec>:
*/

static  void  App_FormatDec (CPU_INT08U *s, 
                             CPU_INT32U  value, 
							 CPU_INT08U  digits)
{
     a90:	df 93       	push	r29
     a92:	cf 93       	push	r28
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	2c 97       	sbiw	r28, 0x0c	; 12
     a9a:	cd bf       	out	0x3d, r28	; 61
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	8e 83       	std	Y+6, r24	; 0x06
     aa0:	9f 83       	std	Y+7, r25	; 0x07
     aa2:	48 87       	std	Y+8, r20	; 0x08
     aa4:	59 87       	std	Y+9, r21	; 0x09
     aa6:	6a 87       	std	Y+10, r22	; 0x0a
     aa8:	7b 87       	std	Y+11, r23	; 0x0b
     aaa:	2c 87       	std	Y+12, r18	; 0x0c
    CPU_INT08U      i;
    CPU_INT32U      mult;


    mult        = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	8a 83       	std	Y+2, r24	; 0x02
     ab6:	9b 83       	std	Y+3, r25	; 0x03
     ab8:	ac 83       	std	Y+4, r26	; 0x04
     aba:	bd 83       	std	Y+5, r27	; 0x05
    for (i = 0; i < (digits - 1); i++) {
     abc:	19 82       	std	Y+1, r1	; 0x01
     abe:	15 c0       	rjmp	.+42     	; 0xaea <App_FormatDec+0x5a>
        mult   *= 10;
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	ac 81       	ldd	r26, Y+4	; 0x04
     ac6:	bd 81       	ldd	r27, Y+5	; 0x05
     ac8:	2a e0       	ldi	r18, 0x0A	; 10
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	bc 01       	movw	r22, r24
     ad2:	cd 01       	movw	r24, r26
     ad4:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	8a 83       	std	Y+2, r24	; 0x02
     ade:	9b 83       	std	Y+3, r25	; 0x03
     ae0:	ac 83       	std	Y+4, r26	; 0x04
     ae2:	bd 83       	std	Y+5, r27	; 0x05
    CPU_INT08U      i;
    CPU_INT32U      mult;


    mult        = 1;
    for (i = 0; i < (digits - 1); i++) {
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	89 83       	std	Y+1, r24	; 0x01
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	28 2f       	mov	r18, r24
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	8c 85       	ldd	r24, Y+12	; 0x0c
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	01 97       	sbiw	r24, 0x01	; 1
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	0c f3       	brlt	.-62     	; 0xac0 <App_FormatDec+0x30>
        mult   *= 10;
    }
    while (mult > 0) {
     afe:	3b c0       	rjmp	.+118    	; 0xb76 <App_FormatDec+0xe6>
        *s++    = value / mult + '0';
     b00:	88 85       	ldd	r24, Y+8	; 0x08
     b02:	99 85       	ldd	r25, Y+9	; 0x09
     b04:	aa 85       	ldd	r26, Y+10	; 0x0a
     b06:	bb 85       	ldd	r27, Y+11	; 0x0b
     b08:	2a 81       	ldd	r18, Y+2	; 0x02
     b0a:	3b 81       	ldd	r19, Y+3	; 0x03
     b0c:	4c 81       	ldd	r20, Y+4	; 0x04
     b0e:	5d 81       	ldd	r21, Y+5	; 0x05
     b10:	bc 01       	movw	r22, r24
     b12:	cd 01       	movw	r24, r26
     b14:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     b18:	da 01       	movw	r26, r20
     b1a:	c9 01       	movw	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	20 5d       	subi	r18, 0xD0	; 208
     b20:	8e 81       	ldd	r24, Y+6	; 0x06
     b22:	9f 81       	ldd	r25, Y+7	; 0x07
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	8e 81       	ldd	r24, Y+6	; 0x06
     b2a:	9f 81       	ldd	r25, Y+7	; 0x07
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	8e 83       	std	Y+6, r24	; 0x06
     b30:	9f 83       	std	Y+7, r25	; 0x07
        value  %= mult;
     b32:	88 85       	ldd	r24, Y+8	; 0x08
     b34:	99 85       	ldd	r25, Y+9	; 0x09
     b36:	aa 85       	ldd	r26, Y+10	; 0x0a
     b38:	bb 85       	ldd	r27, Y+11	; 0x0b
     b3a:	2a 81       	ldd	r18, Y+2	; 0x02
     b3c:	3b 81       	ldd	r19, Y+3	; 0x03
     b3e:	4c 81       	ldd	r20, Y+4	; 0x04
     b40:	5d 81       	ldd	r21, Y+5	; 0x05
     b42:	bc 01       	movw	r22, r24
     b44:	cd 01       	movw	r24, r26
     b46:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	88 87       	std	Y+8, r24	; 0x08
     b50:	99 87       	std	Y+9, r25	; 0x09
     b52:	aa 87       	std	Y+10, r26	; 0x0a
     b54:	bb 87       	std	Y+11, r27	; 0x0b
        mult   /= 10;
     b56:	8a 81       	ldd	r24, Y+2	; 0x02
     b58:	9b 81       	ldd	r25, Y+3	; 0x03
     b5a:	ac 81       	ldd	r26, Y+4	; 0x04
     b5c:	bd 81       	ldd	r27, Y+5	; 0x05
     b5e:	2a e0       	ldi	r18, 0x0A	; 10
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     b6e:	2a 83       	std	Y+2, r18	; 0x02
     b70:	3b 83       	std	Y+3, r19	; 0x03
     b72:	4c 83       	std	Y+4, r20	; 0x04
     b74:	5d 83       	std	Y+5, r21	; 0x05

    mult        = 1;
    for (i = 0; i < (digits - 1); i++) {
        mult   *= 10;
    }
    while (mult > 0) {
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	9b 81       	ldd	r25, Y+3	; 0x03
     b7a:	ac 81       	ldd	r26, Y+4	; 0x04
     b7c:	bd 81       	ldd	r27, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	09 f0       	breq	.+2      	; 0xb88 <App_FormatDec+0xf8>
     b86:	bc cf       	rjmp	.-136    	; 0xb00 <App_FormatDec+0x70>
        *s++    = value / mult + '0';
        value  %= mult;
        mult   /= 10;
    }
}
     b88:	2c 96       	adiw	r28, 0x0c	; 12
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <App_TaskCreateHook>:
*********************************************************************************************************
*/

#if (OS_APP_HOOKS_EN > 0)
void  App_TaskCreateHook (OS_TCB *ptcb)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	0f 92       	push	r0
     b9a:	0f 92       	push	r0
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	9a 83       	std	Y+2, r25	; 0x02
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#else
    (void)ptcb;
#endif
}
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <App_TaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	0f 92       	push	r0
     bb4:	0f 92       	push	r0
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	89 83       	std	Y+1, r24	; 0x01
     bbc:	9a 83       	std	Y+2, r25	; 0x02
    (void)ptcb;
}
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
}
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <App_TaskStatHook>:
* Returns    : none
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
}
     bde:	cf 91       	pop	r28
     be0:	df 91       	pop	r29
     be2:	08 95       	ret

00000be4 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	08 95       	ret

00000bf2 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
     bf2:	df 93       	push	r29
     bf4:	cf 93       	push	r28
     bf6:	0f 92       	push	r0
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	89 83       	std	Y+1, r24	; 0x01
     c00:	9a 83       	std	Y+2, r25	; 0x02
    (void)ptcb;
}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <BSP_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_Init (void)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
    BSP_CPU_Init();                                             /* Initializes all the system clks                           */
     c22:	0e 94 6f 0c 	call	0x18de	; 0x18de <BSP_CPU_Init>
  
    BSP_LED_Init();                                             /* Initialize the LEDs I/O                                   */
     c26:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <BSP_LED_Init>

    BSP_PB_Init();                                              /* Initialize the PBs  I/O                                   */
     c2a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <BSP_PB_Init>

    BSP_TmrInit();                                              /* Initialize the uC/OS-II tick timer                        */
     c2e:	0e 94 94 0c 	call	0x1928	; 0x1928 <BSP_TmrInit>
    
}
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <BSP_IntDisAll>:

void BSP_IntDisAll (void)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
    PMIC.CTRL = 0x00;
     c40:	80 ea       	ldi	r24, 0xA0	; 160
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	fc 01       	movw	r30, r24
     c46:	12 82       	std	Z+2, r1	; 0x02
}
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <BSP_CPU_ClkFreq>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  BSP_CPU_ClkFreq (void)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <BSP_CPU_ClkFreq+0x6>
     c54:	0f 92       	push	r0
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
    CPU_INT32U  cpu_freq;
    
    
    cpu_freq = BSP_SysClk_DevGetFreq(BSP_SYS_CLK_OUT_CPU);
     c5a:	84 e0       	ldi	r24, 0x04	; 4
     c5c:	0e 94 a4 07 	call	0xf48	; 0xf48 <BSP_SysClk_DevGetFreq>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	ab 83       	std	Y+3, r26	; 0x03
     c6a:	bc 83       	std	Y+4, r27	; 0x04

    return cpu_freq;    
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	ab 81       	ldd	r26, Y+3	; 0x03
     c72:	bc 81       	ldd	r27, Y+4	; 0x04
}
     c74:	bc 01       	movw	r22, r24
     c76:	cd 01       	movw	r24, r26
     c78:	24 96       	adiw	r28, 0x04	; 4
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <BSP_PLL_FreqGet>:
* Note(s)     : (1)  If the source of the PLL can not be found BSP_PLL_SrcGetFreq() will return 0.
*********************************************************************************************************
*/

CPU_INT32U  BSP_PLL_FreqGet (void) 
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	25 97       	sbiw	r28, 0x05	; 5
     c8e:	cd bf       	out	0x3d, r28	; 61
     c90:	de bf       	out	0x3e, r29	; 62
    CPU_INT32U  pll_freq;
    CPU_INT08U  pll_mul;
    
    
    pll_mul   = OSC.PLLCTRL & BSP_PLLCTRL_PLLAC_MASK;
     c92:	80 e5       	ldi	r24, 0x50	; 80
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	85 81       	ldd	r24, Z+5	; 0x05
     c9a:	8f 71       	andi	r24, 0x1F	; 31
     c9c:	89 83       	std	Y+1, r24	; 0x01

    pll_freq  = BSP_PLL_SrcGetFreq();    
     c9e:	0e 94 09 07 	call	0xe12	; 0xe12 <BSP_PLL_SrcGetFreq>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	8a 83       	std	Y+2, r24	; 0x02
     ca8:	9b 83       	std	Y+3, r25	; 0x03
     caa:	ac 83       	std	Y+4, r26	; 0x04
     cac:	bd 83       	std	Y+5, r27	; 0x05

    pll_freq *= pll_mul;
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	ac 81       	ldd	r26, Y+4	; 0x04
     cbe:	bd 81       	ldd	r27, Y+5	; 0x05
     cc0:	bc 01       	movw	r22, r24
     cc2:	cd 01       	movw	r24, r26
     cc4:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8a 83       	std	Y+2, r24	; 0x02
     cce:	9b 83       	std	Y+3, r25	; 0x03
     cd0:	ac 83       	std	Y+4, r26	; 0x04
     cd2:	bd 83       	std	Y+5, r27	; 0x05
    
    return pll_freq;    
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	9b 81       	ldd	r25, Y+3	; 0x03
     cd8:	ac 81       	ldd	r26, Y+4	; 0x04
     cda:	bd 81       	ldd	r27, Y+5	; 0x05
}
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	25 96       	adiw	r28, 0x05	; 5
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <BSP_PLL_FreqSet>:
*                   
*********************************************************************************************************
*/

CPU_BOOLEAN  BSP_PLL_FreqSet (CPU_INT32U  freq)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	2c 97       	sbiw	r28, 0x0c	; 12
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	69 87       	std	Y+9, r22	; 0x09
     cfc:	7a 87       	std	Y+10, r23	; 0x0a
     cfe:	8b 87       	std	Y+11, r24	; 0x0b
     d00:	9c 87       	std	Y+12, r25	; 0x0c
    CPU_INT32U   pll_src_freq;
    CPU_INT32U   pll_freq_mul;
    
    
    if ((freq < BSP_PLL_MIN_FREQ) ||                            /* Check the PLL output frequency limitations (see note #1)  */
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	ab 85       	ldd	r26, Y+11	; 0x0b
     d08:	bc 85       	ldd	r27, Y+12	; 0x0c
     d0a:	80 38       	cpi	r24, 0x80	; 128
     d0c:	26 e9       	ldi	r18, 0x96	; 150
     d0e:	92 07       	cpc	r25, r18
     d10:	28 e9       	ldi	r18, 0x98	; 152
     d12:	a2 07       	cpc	r26, r18
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	b2 07       	cpc	r27, r18
     d18:	60 f0       	brcs	.+24     	; 0xd32 <BSP_PLL_FreqSet+0x46>
     d1a:	89 85       	ldd	r24, Y+9	; 0x09
     d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1e:	ab 85       	ldd	r26, Y+11	; 0x0b
     d20:	bc 85       	ldd	r27, Y+12	; 0x0c
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	e2 ec       	ldi	r30, 0xC2	; 194
     d26:	9e 07       	cpc	r25, r30
     d28:	eb ee       	ldi	r30, 0xEB	; 235
     d2a:	ae 07       	cpc	r26, r30
     d2c:	eb e0       	ldi	r30, 0x0B	; 11
     d2e:	be 07       	cpc	r27, r30
     d30:	10 f0       	brcs	.+4      	; 0xd36 <BSP_PLL_FreqSet+0x4a>
        (freq > BSP_PLL_MAX_FREQ)) {            
        return DEF_TRUE;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	40 c0       	rjmp	.+128    	; 0xdb6 <BSP_PLL_FreqSet+0xca>
    }
            
    pll_src_freq = BSP_PLL_SrcGetFreq();
     d36:	0e 94 09 07 	call	0xe12	; 0xe12 <BSP_PLL_SrcGetFreq>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	89 83       	std	Y+1, r24	; 0x01
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	ab 83       	std	Y+3, r26	; 0x03
     d44:	bc 83       	std	Y+4, r27	; 0x04
    
    if (freq < pll_src_freq ) {                                 /* The desire PLL freq should be higher or equal to the ...  */
     d46:	29 85       	ldd	r18, Y+9	; 0x09
     d48:	3a 85       	ldd	r19, Y+10	; 0x0a
     d4a:	4b 85       	ldd	r20, Y+11	; 0x0b
     d4c:	5c 85       	ldd	r21, Y+12	; 0x0c
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	ab 81       	ldd	r26, Y+3	; 0x03
     d54:	bc 81       	ldd	r27, Y+4	; 0x04
     d56:	28 17       	cp	r18, r24
     d58:	39 07       	cpc	r19, r25
     d5a:	4a 07       	cpc	r20, r26
     d5c:	5b 07       	cpc	r21, r27
     d5e:	10 f4       	brcc	.+4      	; 0xd64 <BSP_PLL_FreqSet+0x78>
        return DEF_FALSE;                                       /* ... the freq of the PLL source                            */
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	29 c0       	rjmp	.+82     	; 0xdb6 <BSP_PLL_FreqSet+0xca>
    }

    pll_freq_mul = freq / pll_src_freq;    
     d64:	89 85       	ldd	r24, Y+9	; 0x09
     d66:	9a 85       	ldd	r25, Y+10	; 0x0a
     d68:	ab 85       	ldd	r26, Y+11	; 0x0b
     d6a:	bc 85       	ldd	r27, Y+12	; 0x0c
     d6c:	29 81       	ldd	r18, Y+1	; 0x01
     d6e:	3a 81       	ldd	r19, Y+2	; 0x02
     d70:	4b 81       	ldd	r20, Y+3	; 0x03
     d72:	5c 81       	ldd	r21, Y+4	; 0x04
     d74:	bc 01       	movw	r22, r24
     d76:	cd 01       	movw	r24, r26
     d78:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
     d7c:	2d 83       	std	Y+5, r18	; 0x05
     d7e:	3e 83       	std	Y+6, r19	; 0x06
     d80:	4f 83       	std	Y+7, r20	; 0x07
     d82:	58 87       	std	Y+8, r21	; 0x08
    
    if (pll_freq_mul > BSP_PLL_MAX_FREQ_MUL) {                  /* Check the maximum PLL multiplier allow by the hardware ...*/
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	af 81       	ldd	r26, Y+7	; 0x07
     d8a:	b8 85       	ldd	r27, Y+8	; 0x08
     d8c:	80 32       	cpi	r24, 0x20	; 32
     d8e:	91 05       	cpc	r25, r1
     d90:	a1 05       	cpc	r26, r1
     d92:	b1 05       	cpc	r27, r1
     d94:	10 f0       	brcs	.+4      	; 0xd9a <BSP_PLL_FreqSet+0xae>
        return DEF_FALSE;                                       /* ... (see note #2)                                         */
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <BSP_PLL_FreqSet+0xca>
    }
    
    OSC.PLLCTRL = (OSC.PLLCTRL 
     d9a:	80 e5       	ldi	r24, 0x50	; 80
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	20 e5       	ldi	r18, 0x50	; 80
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	f9 01       	movw	r30, r18
     da4:	25 81       	ldd	r18, Z+5	; 0x05
     da6:	32 2f       	mov	r19, r18
     da8:	30 7c       	andi	r19, 0xC0	; 192
     daa:	2d 81       	ldd	r18, Y+5	; 0x05
     dac:	2f 71       	andi	r18, 0x1F	; 31
     dae:	23 2b       	or	r18, r19
     db0:	fc 01       	movw	r30, r24
     db2:	25 83       	std	Z+5, r18	; 0x05
	            & BSP_PLLCTRL_PLLSRC_MASK)
				| ((CPU_INT08U)(pll_freq_mul & BSP_PLLCTRL_PLLAC_MASK));
    
	return DEF_TRUE;    
     db4:	81 e0       	ldi	r24, 0x01	; 1
}
     db6:	2c 96       	adiw	r28, 0x0c	; 12
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <BSP_PLL_SrcGet>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT08U  BSP_PLL_SrcGet  (void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	0f 92       	push	r0
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  reg_val;
    CPU_INT08U  src_val;
    
    
    reg_val = OSC.PLLCTRL & BSP_PLLCTRL_PLLSRC_MASK;
     dce:	80 e5       	ldi	r24, 0x50	; 80
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	85 81       	ldd	r24, Z+5	; 0x05
     dd6:	80 7c       	andi	r24, 0xC0	; 192
     dd8:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (reg_val) {        
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	80 38       	cpi	r24, 0x80	; 128
     de2:	91 05       	cpc	r25, r1
     de4:	41 f0       	breq	.+16     	; 0xdf6 <BSP_PLL_SrcGet+0x34>
     de6:	80 3c       	cpi	r24, 0xC0	; 192
     de8:	91 05       	cpc	r25, r1
     dea:	41 f0       	breq	.+16     	; 0xdfc <BSP_PLL_SrcGet+0x3a>
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	49 f4       	brne	.+18     	; 0xe02 <BSP_PLL_SrcGet+0x40>
        case DEF_BIT_NONE:
             src_val = BSP_PLL_SRC_RC2M;          
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
             break;
     df4:	08 c0       	rjmp	.+16     	; 0xe06 <BSP_PLL_SrcGet+0x44>
             
        case (DEF_BIT_07):
             src_val = BSP_PLL_SRC_RC32M;
     df6:	82 e0       	ldi	r24, 0x02	; 2
     df8:	89 83       	std	Y+1, r24	; 0x01
             break;
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <BSP_PLL_SrcGet+0x44>
        
        case (DEF_BIT_07 | DEF_BIT_06):
             src_val = BSP_PLL_SRC_XOSC;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	89 83       	std	Y+1, r24	; 0x01
             break;
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <BSP_PLL_SrcGet+0x44>
             
        default:
             src_val = BSP_PLL_SRC_UNKNOWN;
     e02:	84 e0       	ldi	r24, 0x04	; 4
     e04:	89 83       	std	Y+1, r24	; 0x01
    }
    
    return src_val;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}  
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <BSP_PLL_SrcGetFreq>:
* Note(s)     : (1)  If the source of the PLL can not be found BSP_PLL_SrcGetFreq() will return 0.
*********************************************************************************************************
*/

CPU_INT32U  BSP_PLL_SrcGetFreq (void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	25 97       	sbiw	r28, 0x05	; 5
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	de bf       	out	0x3e, r29	; 62
    CPU_INT08U  pll_clk_src;
    CPU_INT32U  freq;
    
    pll_clk_src = BSP_PLL_SrcGet();
     e20:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <BSP_PLL_SrcGet>
     e24:	8d 83       	std	Y+5, r24	; 0x05
    
    if (pll_clk_src == BSP_PLL_SRC_UNKNOWN) {                   /* See note #1                                               */
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	21 f4       	brne	.+8      	; 0xe34 <BSP_PLL_SrcGetFreq+0x22>
        return (CPU_INT32U)0;
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	dc 01       	movw	r26, r24
     e32:	24 c0       	rjmp	.+72     	; 0xe7c <BSP_PLL_SrcGetFreq+0x6a>
    }
    
    if (pll_clk_src == BSP_PLL_SRC_RC2M ) {
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	49 f4       	brne	.+18     	; 0xe4c <BSP_PLL_SrcGetFreq+0x3a>
        freq = BSP_CLK_IN_INT_2M_OSC_FREQ ;
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	94 e8       	ldi	r25, 0x84	; 132
     e3e:	ae e1       	ldi	r26, 0x1E	; 30
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	9a 83       	std	Y+2, r25	; 0x02
     e46:	ab 83       	std	Y+3, r26	; 0x03
     e48:	bc 83       	std	Y+4, r27	; 0x04
     e4a:	14 c0       	rjmp	.+40     	; 0xe74 <BSP_PLL_SrcGetFreq+0x62>
    
    } else if (pll_clk_src == BSP_PLL_SRC_RC32M) {
     e4c:	8d 81       	ldd	r24, Y+5	; 0x05
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	49 f4       	brne	.+18     	; 0xe64 <BSP_PLL_SrcGetFreq+0x52>
        freq =  BSP_CLK_IN_INT_32M_OSC_FREQ / 4;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	92 e1       	ldi	r25, 0x12	; 18
     e56:	aa e7       	ldi	r26, 0x7A	; 122
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	9a 83       	std	Y+2, r25	; 0x02
     e5e:	ab 83       	std	Y+3, r26	; 0x03
     e60:	bc 83       	std	Y+4, r27	; 0x04
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <BSP_PLL_SrcGetFreq+0x62>
    
    } else {
        freq =  BSP_XOSC_FreqGet();
     e64:	0e 94 38 0a 	call	0x1470	; 0x1470 <BSP_XOSC_FreqGet>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	ab 83       	std	Y+3, r26	; 0x03
     e72:	bc 83       	std	Y+4, r27	; 0x04
    }
    
    return freq;
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	ab 81       	ldd	r26, Y+3	; 0x03
     e7a:	bc 81       	ldd	r27, Y+4	; 0x04
}
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	25 96       	adiw	r28, 0x05	; 5
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <BSP_PLL_SrcSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_PLL_SrcSet  (CPU_INT08U  clk_src)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	0f 92       	push	r0
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	89 83       	std	Y+1, r24	; 0x01
    switch (clk_src) {        
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	91 05       	cpc	r25, r1
     ea2:	69 f0       	breq	.+26     	; 0xebe <BSP_PLL_SrcSet+0x32>
     ea4:	83 30       	cpi	r24, 0x03	; 3
     ea6:	91 05       	cpc	r25, r1
     ea8:	a1 f0       	breq	.+40     	; 0xed2 <BSP_PLL_SrcSet+0x46>
        default:
        case BSP_PLL_SRC_RC2M:
             OSC.PLLCTRL &= (~BSP_PLLCTRL_PLLSRC_MASK);
     eaa:	80 e5       	ldi	r24, 0x50	; 80
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	20 e5       	ldi	r18, 0x50	; 80
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	f9 01       	movw	r30, r18
     eb4:	25 81       	ldd	r18, Z+5	; 0x05
     eb6:	2f 73       	andi	r18, 0x3F	; 63
     eb8:	fc 01       	movw	r30, r24
     eba:	25 83       	std	Z+5, r18	; 0x05
             break;            
     ebc:	14 c0       	rjmp	.+40     	; 0xee6 <BSP_PLL_SrcSet+0x5a>

        case BSP_PLL_SRC_RC32M:
             OSC.PLLCTRL |= (DEF_BIT_07);
     ebe:	80 e5       	ldi	r24, 0x50	; 80
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	20 e5       	ldi	r18, 0x50	; 80
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	25 81       	ldd	r18, Z+5	; 0x05
     eca:	20 68       	ori	r18, 0x80	; 128
     ecc:	fc 01       	movw	r30, r24
     ece:	25 83       	std	Z+5, r18	; 0x05
             break;
     ed0:	0a c0       	rjmp	.+20     	; 0xee6 <BSP_PLL_SrcSet+0x5a>
        
        case BSP_PLL_SRC_XOSC:
             OSC.PLLCTRL |= (DEF_BIT_07 | DEF_BIT_06);
     ed2:	80 e5       	ldi	r24, 0x50	; 80
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	20 e5       	ldi	r18, 0x50	; 80
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	f9 01       	movw	r30, r18
     edc:	25 81       	ldd	r18, Z+5	; 0x05
     ede:	20 6c       	ori	r18, 0xC0	; 192
     ee0:	fc 01       	movw	r30, r24
     ee2:	25 83       	std	Z+5, r18	; 0x05
             break;        
     ee4:	00 00       	nop
    }
}   
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <BSP_SysClk_DevSetPre>:
*********************************************************************************************************
*/

void  BSP_SysClk_DevSetPre (CPU_INT08U  div_id,
                            CPU_INT08U  div_val)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	6a 83       	std	Y+2, r22	; 0x02
    
    if (div_id == BSP_SYS_CLK_DIV_A) {
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 f4       	brne	.+36     	; 0xf28 <BSP_SysClk_DevSetPre+0x3a>
        CLK.PSCTRL |= div_val << 2;                     
     f04:	80 e4       	ldi	r24, 0x40	; 64
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	20 e4       	ldi	r18, 0x40	; 64
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	f9 01       	movw	r30, r18
     f0e:	21 81       	ldd	r18, Z+1	; 0x01
     f10:	42 2f       	mov	r20, r18
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	22 2f       	mov	r18, r18
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	22 0f       	add	r18, r18
     f1a:	33 1f       	adc	r19, r19
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	24 2b       	or	r18, r20
     f22:	fc 01       	movw	r30, r24
     f24:	21 83       	std	Z+1, r18	; 0x01
     f26:	0b c0       	rjmp	.+22     	; 0xf3e <BSP_SysClk_DevSetPre+0x50>
    } else {
        CLK.PSCTRL |= BSP_PSCTRL_DIVBC_MASK & div_val;                          
     f28:	80 e4       	ldi	r24, 0x40	; 64
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	20 e4       	ldi	r18, 0x40	; 64
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	f9 01       	movw	r30, r18
     f32:	31 81       	ldd	r19, Z+1	; 0x01
     f34:	2a 81       	ldd	r18, Y+2	; 0x02
     f36:	23 70       	andi	r18, 0x03	; 3
     f38:	23 2b       	or	r18, r19
     f3a:	fc 01       	movw	r30, r24
     f3c:	21 83       	std	Z+1, r18	; 0x01
    }
       
 
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <BSP_SysClk_DevGetFreq>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U   BSP_SysClk_DevGetFreq  (CPU_INT08U  dev_clk)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	2d 97       	sbiw	r28, 0x0d	; 13
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	8d 87       	std	Y+13, r24	; 0x0d
    CPU_INT08U  reg_val;
    CPU_INT08U  diva;
    CPU_INT08U  divb;    
    CPU_INT08U  divc;    
    
    reg_val      = CLK.PSCTRL;
     f58:	80 e4       	ldi	r24, 0x40	; 64
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	8f 83       	std	Y+7, r24	; 0x07
    diva         = (reg_val << 2);
     f62:	8f 81       	ldd	r24, Y+7	; 0x07
     f64:	88 0f       	add	r24, r24
     f66:	88 0f       	add	r24, r24
     f68:	88 87       	std	Y+8, r24	; 0x08

    reg_val      &= 0x03;
     f6a:	8f 81       	ldd	r24, Y+7	; 0x07
     f6c:	83 70       	andi	r24, 0x03	; 3
     f6e:	8f 83       	std	Y+7, r24	; 0x07
    
    if (reg_val == 0x2) {
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	19 f4       	brne	.+6      	; 0xf7c <BSP_SysClk_DevGetFreq+0x34>
       divb = 4;
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <BSP_SysClk_DevGetFreq+0x44>
    } else if (reg_val == 0x03) {        
     f7c:	8f 81       	ldd	r24, Y+7	; 0x07
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	19 f4       	brne	.+6      	; 0xf88 <BSP_SysClk_DevGetFreq+0x40>
       divb = 2;
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <BSP_SysClk_DevGetFreq+0x44>
    } else {
       divb = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	8d 83       	std	Y+5, r24	; 0x05
    }
           
    if (DEF_BIT_IS_SET(reg_val, DEF_BIT_00)) {
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	88 23       	and	r24, r24
     f98:	19 f0       	breq	.+6      	; 0xfa0 <BSP_SysClk_DevGetFreq+0x58>
        divc = 2;
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <BSP_SysClk_DevGetFreq+0x5c>
    } else {
        divc = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	8e 83       	std	Y+6, r24	; 0x06
    }    
    
    dev_clk_freq = 0;    
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	1a 82       	std	Y+2, r1	; 0x02
     fa8:	1b 82       	std	Y+3, r1	; 0x03
     faa:	1c 82       	std	Y+4, r1	; 0x04
    sys_clk_freq = BSP_SysClk_FreqGet();
     fac:	0e 94 87 08 	call	0x110e	; 0x110e <BSP_SysClk_FreqGet>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	89 87       	std	Y+9, r24	; 0x09
     fb6:	9a 87       	std	Y+10, r25	; 0x0a
     fb8:	ab 87       	std	Y+11, r26	; 0x0b
     fba:	bc 87       	std	Y+12, r27	; 0x0c
        
    switch (dev_clk) {
     fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	82 30       	cpi	r24, 0x02	; 2
     fc4:	91 05       	cpc	r25, r1
     fc6:	61 f1       	breq	.+88     	; 0x1020 <BSP_SysClk_DevGetFreq+0xd8>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	2c f4       	brge	.+10     	; 0xfd8 <BSP_SysClk_DevGetFreq+0x90>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <BSP_SysClk_DevGetFreq+0x8e>
     fd4:	52 c0       	rjmp	.+164    	; 0x107a <BSP_SysClk_DevGetFreq+0x132>
     fd6:	8f c0       	rjmp	.+286    	; 0x10f6 <BSP_SysClk_DevGetFreq+0x1ae>
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	91 05       	cpc	r25, r1
     fdc:	29 f0       	breq	.+10     	; 0xfe8 <BSP_SysClk_DevGetFreq+0xa0>
     fde:	84 30       	cpi	r24, 0x04	; 4
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <BSP_SysClk_DevGetFreq+0x9e>
     fe4:	4a c0       	rjmp	.+148    	; 0x107a <BSP_SysClk_DevGetFreq+0x132>
     fe6:	87 c0       	rjmp	.+270    	; 0x10f6 <BSP_SysClk_DevGetFreq+0x1ae>
        case BSP_SYS_CLK_OUT_PER4:
             dev_clk_freq = sys_clk_freq / (1 << diva);
     fe8:	88 85       	ldd	r24, Y+8	; 0x08
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <BSP_SysClk_DevGetFreq+0xb0>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <BSP_SysClk_DevGetFreq+0xac>
     ffc:	9c 01       	movw	r18, r24
     ffe:	44 27       	eor	r20, r20
    1000:	37 fd       	sbrc	r19, 7
    1002:	40 95       	com	r20
    1004:	54 2f       	mov	r21, r20
    1006:	89 85       	ldd	r24, Y+9	; 0x09
    1008:	9a 85       	ldd	r25, Y+10	; 0x0a
    100a:	ab 85       	ldd	r26, Y+11	; 0x0b
    100c:	bc 85       	ldd	r27, Y+12	; 0x0c
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    1016:	29 83       	std	Y+1, r18	; 0x01
    1018:	3a 83       	std	Y+2, r19	; 0x02
    101a:	4b 83       	std	Y+3, r20	; 0x03
    101c:	5c 83       	std	Y+4, r21	; 0x04
             break;
    101e:	6b c0       	rjmp	.+214    	; 0x10f6 <BSP_SysClk_DevGetFreq+0x1ae>
             
         case BSP_SYS_CLK_OUT_PER2:
             dev_clk_freq  = sys_clk_freq / (1 << diva);
    1020:	88 85       	ldd	r24, Y+8	; 0x08
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <BSP_SysClk_DevGetFreq+0xe8>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	2a 95       	dec	r18
    1032:	e2 f7       	brpl	.-8      	; 0x102c <BSP_SysClk_DevGetFreq+0xe4>
    1034:	9c 01       	movw	r18, r24
    1036:	44 27       	eor	r20, r20
    1038:	37 fd       	sbrc	r19, 7
    103a:	40 95       	com	r20
    103c:	54 2f       	mov	r21, r20
    103e:	89 85       	ldd	r24, Y+9	; 0x09
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	ab 85       	ldd	r26, Y+11	; 0x0b
    1044:	bc 85       	ldd	r27, Y+12	; 0x0c
    1046:	bc 01       	movw	r22, r24
    1048:	cd 01       	movw	r24, r26
    104a:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    104e:	29 83       	std	Y+1, r18	; 0x01
    1050:	3a 83       	std	Y+2, r19	; 0x02
    1052:	4b 83       	std	Y+3, r20	; 0x03
    1054:	5c 83       	std	Y+4, r21	; 0x04
             dev_clk_freq /= divb; 
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	ab 81       	ldd	r26, Y+3	; 0x03
    1066:	bc 81       	ldd	r27, Y+4	; 0x04
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    1070:	29 83       	std	Y+1, r18	; 0x01
    1072:	3a 83       	std	Y+2, r19	; 0x02
    1074:	4b 83       	std	Y+3, r20	; 0x03
    1076:	5c 83       	std	Y+4, r21	; 0x04
             break;
    1078:	3e c0       	rjmp	.+124    	; 0x10f6 <BSP_SysClk_DevGetFreq+0x1ae>

        case BSP_SYS_CLK_OUT_PER:
        case BSP_SYS_CLK_OUT_CPU:
             dev_clk_freq  = sys_clk_freq / (1 << diva);
    107a:	88 85       	ldd	r24, Y+8	; 0x08
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <BSP_SysClk_DevGetFreq+0x142>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	2a 95       	dec	r18
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <BSP_SysClk_DevGetFreq+0x13e>
    108e:	9c 01       	movw	r18, r24
    1090:	44 27       	eor	r20, r20
    1092:	37 fd       	sbrc	r19, 7
    1094:	40 95       	com	r20
    1096:	54 2f       	mov	r21, r20
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	ab 85       	ldd	r26, Y+11	; 0x0b
    109e:	bc 85       	ldd	r27, Y+12	; 0x0c
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    10a8:	29 83       	std	Y+1, r18	; 0x01
    10aa:	3a 83       	std	Y+2, r19	; 0x02
    10ac:	4b 83       	std	Y+3, r20	; 0x03
    10ae:	5c 83       	std	Y+4, r21	; 0x04
             dev_clk_freq /= divb; 
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	ab 81       	ldd	r26, Y+3	; 0x03
    10c0:	bc 81       	ldd	r27, Y+4	; 0x04
    10c2:	bc 01       	movw	r22, r24
    10c4:	cd 01       	movw	r24, r26
    10c6:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    10ca:	29 83       	std	Y+1, r18	; 0x01
    10cc:	3a 83       	std	Y+2, r19	; 0x02
    10ce:	4b 83       	std	Y+3, r20	; 0x03
    10d0:	5c 83       	std	Y+4, r21	; 0x04
             dev_clk_freq /= divc;              
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	ab 81       	ldd	r26, Y+3	; 0x03
    10e2:	bc 81       	ldd	r27, Y+4	; 0x04
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    10ec:	29 83       	std	Y+1, r18	; 0x01
    10ee:	3a 83       	std	Y+2, r19	; 0x02
    10f0:	4b 83       	std	Y+3, r20	; 0x03
    10f2:	5c 83       	std	Y+4, r21	; 0x04
             break;     
    10f4:	00 00       	nop
    }
    return dev_clk_freq;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	ab 81       	ldd	r26, Y+3	; 0x03
    10fc:	bc 81       	ldd	r27, Y+4	; 0x04
}
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	2d 96       	adiw	r28, 0x0d	; 13
    1104:	cd bf       	out	0x3d, r28	; 61
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <BSP_SysClk_FreqGet>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U   BSP_SysClk_FreqGet (void)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	25 97       	sbiw	r28, 0x05	; 5
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	de bf       	out	0x3e, r29	; 62
    CPU_INT08U  sys_clk_src;
    CPU_INT32U  freq;
    
    
    sys_clk_src = BSP_SysClk_SrcGet();
    111c:	0e 94 88 09 	call	0x1310	; 0x1310 <BSP_SysClk_SrcGet>
    1120:	8d 83       	std	Y+5, r24	; 0x05
    
    if (sys_clk_src == BSP_SYS_CLK_SRC_UNKNOWN) {
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	86 30       	cpi	r24, 0x06	; 6
    1126:	21 f4       	brne	.+8      	; 0x1130 <BSP_SysClk_FreqGet+0x22>
        return 0;
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	dc 01       	movw	r26, r24
    112e:	45 c0       	rjmp	.+138    	; 0x11ba <BSP_SysClk_FreqGet+0xac>
    }
 
    switch (sys_clk_src) {        
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	b9 f0       	breq	.+46     	; 0x116a <BSP_SysClk_FreqGet+0x5c>
    113c:	84 30       	cpi	r24, 0x04	; 4
    113e:	91 05       	cpc	r25, r1
    1140:	24 f4       	brge	.+8      	; 0x114a <BSP_SysClk_FreqGet+0x3c>
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	91 05       	cpc	r25, r1
    1146:	41 f0       	breq	.+16     	; 0x1158 <BSP_SysClk_FreqGet+0x4a>
    1148:	2b c0       	rjmp	.+86     	; 0x11a0 <BSP_SysClk_FreqGet+0x92>
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	91 05       	cpc	r25, r1
    114e:	b1 f0       	breq	.+44     	; 0x117c <BSP_SysClk_FreqGet+0x6e>
    1150:	85 30       	cpi	r24, 0x05	; 5
    1152:	91 05       	cpc	r25, r1
    1154:	e1 f0       	breq	.+56     	; 0x118e <BSP_SysClk_FreqGet+0x80>
    1156:	24 c0       	rjmp	.+72     	; 0x11a0 <BSP_SysClk_FreqGet+0x92>
        case BSP_SYS_CLK_SRC_RC32M:
             freq = BSP_CLK_IN_INT_32M_OSC_FREQ; 
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	98 e4       	ldi	r25, 0x48	; 72
    115c:	a8 ee       	ldi	r26, 0xE8	; 232
    115e:	b1 e0       	ldi	r27, 0x01	; 1
    1160:	89 83       	std	Y+1, r24	; 0x01
    1162:	9a 83       	std	Y+2, r25	; 0x02
    1164:	ab 83       	std	Y+3, r26	; 0x03
    1166:	bc 83       	std	Y+4, r27	; 0x04
             break;
    1168:	24 c0       	rjmp	.+72     	; 0x11b2 <BSP_SysClk_FreqGet+0xa4>
        
        case BSP_SYS_CLK_SRC_RC32K:
             freq = BSP_CLK_IN_INT_32K_OSC_FREQ;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	9d e7       	ldi	r25, 0x7D	; 125
    116e:	a0 e0       	ldi	r26, 0x00	; 0
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	ab 83       	std	Y+3, r26	; 0x03
    1178:	bc 83       	std	Y+4, r27	; 0x04
             break;
    117a:	1b c0       	rjmp	.+54     	; 0x11b2 <BSP_SysClk_FreqGet+0xa4>
        
        case BSP_SYS_CLK_SRC_XOSC:
             freq = BSP_XOSC_FreqGet();
    117c:	0e 94 38 0a 	call	0x1470	; 0x1470 <BSP_XOSC_FreqGet>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	9a 83       	std	Y+2, r25	; 0x02
    1188:	ab 83       	std	Y+3, r26	; 0x03
    118a:	bc 83       	std	Y+4, r27	; 0x04
             break;
    118c:	12 c0       	rjmp	.+36     	; 0x11b2 <BSP_SysClk_FreqGet+0xa4>
        
        case BSP_SYS_CLK_SRC_PLL:
             freq = BSP_PLL_FreqGet();
    118e:	0e 94 42 06 	call	0xc84	; 0xc84 <BSP_PLL_FreqGet>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	ab 83       	std	Y+3, r26	; 0x03
    119c:	bc 83       	std	Y+4, r27	; 0x04
             break;
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <BSP_SysClk_FreqGet+0xa4>

        default:     
        case BSP_SYS_CLK_SRC_RC2M:
             freq = BSP_CLK_IN_INT_2M_OSC_FREQ;
    11a0:	80 e8       	ldi	r24, 0x80	; 128
    11a2:	94 e8       	ldi	r25, 0x84	; 132
    11a4:	ae e1       	ldi	r26, 0x1E	; 30
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	ab 83       	std	Y+3, r26	; 0x03
    11ae:	bc 83       	std	Y+4, r27	; 0x04
             break;            
    11b0:	00 00       	nop
             
    }
    
    return freq;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	9a 81       	ldd	r25, Y+2	; 0x02
    11b6:	ab 81       	ldd	r26, Y+3	; 0x03
    11b8:	bc 81       	ldd	r27, Y+4	; 0x04
}
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	25 96       	adiw	r28, 0x05	; 5
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <BSP_SysClk_SrcEn>:
*********************************************************************************************************
*/

CPU_BOOLEAN  BSP_SysClk_SrcEn (CPU_INT08U  clk_src, 
                               CPU_INT16U  timeout)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <BSP_SysClk_SrcEn+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <BSP_SysClk_SrcEn+0x8>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8c 83       	std	Y+4, r24	; 0x04
    11d8:	6d 83       	std	Y+5, r22	; 0x05
    11da:	7e 83       	std	Y+6, r23	; 0x06
    CPU_INT08U  reg_val;
    CPU_INT16U  timeout_ctr;
        
    
    timeout_ctr = timeout;
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	8a 83       	std	Y+2, r24	; 0x02
    11e2:	9b 83       	std	Y+3, r25	; 0x03
    
    switch (clk_src) {        
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	a1 f0       	breq	.+40     	; 0x1218 <BSP_SysClk_SrcEn+0x4e>
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	91 05       	cpc	r25, r1
    11f4:	3c f4       	brge	.+14     	; 0x1204 <BSP_SysClk_SrcEn+0x3a>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	b9 f0       	breq	.+46     	; 0x122a <BSP_SysClk_SrcEn+0x60>
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	41 f0       	breq	.+16     	; 0x1212 <BSP_SysClk_SrcEn+0x48>
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <BSP_SysClk_SrcEn+0x66>
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	91 05       	cpc	r25, r1
    1208:	51 f0       	breq	.+20     	; 0x121e <BSP_SysClk_SrcEn+0x54>
    120a:	85 30       	cpi	r24, 0x05	; 5
    120c:	91 05       	cpc	r25, r1
    120e:	51 f0       	breq	.+20     	; 0x1224 <BSP_SysClk_SrcEn+0x5a>
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <BSP_SysClk_SrcEn+0x66>
        case BSP_SYS_CLK_SRC_RC32M:
             reg_val = BSP_OSC_CTRL_RC32M_EN;
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	89 83       	std	Y+1, r24	; 0x01
             break;
    1216:	0e c0       	rjmp	.+28     	; 0x1234 <BSP_SysClk_SrcEn+0x6a>
        
        case BSP_SYS_CLK_SRC_RC32K:
             reg_val = BSP_OSC_CTRL_RC32K_EN;
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	89 83       	std	Y+1, r24	; 0x01
             break;
    121c:	0b c0       	rjmp	.+22     	; 0x1234 <BSP_SysClk_SrcEn+0x6a>
        
        case BSP_SYS_CLK_SRC_XOSC:
             reg_val = BSP_OSC_CTRL_XOSC_EN;
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	89 83       	std	Y+1, r24	; 0x01
             break;
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <BSP_SysClk_SrcEn+0x6a>
        
        case BSP_SYS_CLK_SRC_PLL:
             reg_val = BSP_OSC_CTRL_PLL_EN;
    1224:	80 e1       	ldi	r24, 0x10	; 16
    1226:	89 83       	std	Y+1, r24	; 0x01
             break;
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <BSP_SysClk_SrcEn+0x6a>

        case BSP_SYS_CLK_SRC_RC2M:
             reg_val = BSP_OSC_CTRL_RC2M_EN;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
             break;            
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <BSP_SysClk_SrcEn+0x6a>
             
        default:
             return DEF_FALSE;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	30 c0       	rjmp	.+96     	; 0x1294 <BSP_SysClk_SrcEn+0xca>
    }

    OSC.CTRL |= reg_val;
    1234:	80 e5       	ldi	r24, 0x50	; 80
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	20 e5       	ldi	r18, 0x50	; 80
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	f9 01       	movw	r30, r18
    123e:	30 81       	ld	r19, Z
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	23 2b       	or	r18, r19
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
    
    if (timeout_ctr == 0) {
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	9b 81       	ldd	r25, Y+3	; 0x03
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	e9 f4       	brne	.+58     	; 0x128a <BSP_SysClk_SrcEn+0xc0>
        if (DEF_BIT_IS_SET(OSC.STATUS, reg_val)) {
    1250:	80 e5       	ldi	r24, 0x50	; 80
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	fc 01       	movw	r30, r24
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	98 23       	and	r25, r24
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	98 17       	cp	r25, r24
    1260:	11 f4       	brne	.+4      	; 0x1266 <BSP_SysClk_SrcEn+0x9c>
            return DEF_TRUE;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <BSP_SysClk_SrcEn+0xca>
        } else
            return DEF_FALSE;
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	15 c0       	rjmp	.+42     	; 0x1294 <BSP_SysClk_SrcEn+0xca>
    }
            
    while (timeout_ctr > 0) {
        if (DEF_BIT_IS_SET(OSC.STATUS, reg_val)) {
    126a:	80 e5       	ldi	r24, 0x50	; 80
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	fc 01       	movw	r30, r24
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	98 23       	and	r25, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	98 17       	cp	r25, r24
    127a:	11 f4       	brne	.+4      	; 0x1280 <BSP_SysClk_SrcEn+0xb6>
            return DEF_TRUE;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <BSP_SysClk_SrcEn+0xca>
        }
        timeout_ctr--;
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	9b 83       	std	Y+3, r25	; 0x03
            return DEF_TRUE;
        } else
            return DEF_FALSE;
    }
            
    while (timeout_ctr > 0) {
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	61 f7       	brne	.-40     	; 0x126a <BSP_SysClk_SrcEn+0xa0>
            return DEF_TRUE;
        }
        timeout_ctr--;
    }        
    
    return DEF_FALSE;
    1292:	80 e0       	ldi	r24, 0x00	; 0
}
    1294:	26 96       	adiw	r28, 0x06	; 6
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <BSP_SysClk_SrcSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void   BSP_SysClk_SrcSet (CPU_INT08U clk_src)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	0f 92       	push	r0
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    CPU_INT08U  reg_val;
    

    switch (clk_src) {        
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	88 2f       	mov	r24, r24
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	91 05       	cpc	r25, r1
    12b8:	89 f0       	breq	.+34     	; 0x12dc <BSP_SysClk_SrcSet+0x3c>
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	91 05       	cpc	r25, r1
    12be:	24 f4       	brge	.+8      	; 0x12c8 <BSP_SysClk_SrcSet+0x28>
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	91 05       	cpc	r25, r1
    12c4:	41 f0       	breq	.+16     	; 0x12d6 <BSP_SysClk_SrcSet+0x36>
    12c6:	13 c0       	rjmp	.+38     	; 0x12ee <BSP_SysClk_SrcSet+0x4e>
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	91 05       	cpc	r25, r1
    12cc:	51 f0       	breq	.+20     	; 0x12e2 <BSP_SysClk_SrcSet+0x42>
    12ce:	85 30       	cpi	r24, 0x05	; 5
    12d0:	91 05       	cpc	r25, r1
    12d2:	51 f0       	breq	.+20     	; 0x12e8 <BSP_SysClk_SrcSet+0x48>
    12d4:	0c c0       	rjmp	.+24     	; 0x12ee <BSP_SysClk_SrcSet+0x4e>
        case BSP_SYS_CLK_SRC_RC32M:
             reg_val = 0x01;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	89 83       	std	Y+1, r24	; 0x01
             break;
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <BSP_SysClk_SrcSet+0x52>
        
        case BSP_SYS_CLK_SRC_RC32K:
             reg_val = 0x02;
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	89 83       	std	Y+1, r24	; 0x01
             break;
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <BSP_SysClk_SrcSet+0x52>
        
        case BSP_SYS_CLK_SRC_XOSC:
             reg_val = 0x03;
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	89 83       	std	Y+1, r24	; 0x01
             break;
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <BSP_SysClk_SrcSet+0x52>
        
        case BSP_SYS_CLK_SRC_PLL:
             reg_val = 0x04;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	89 83       	std	Y+1, r24	; 0x01
             break;
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <BSP_SysClk_SrcSet+0x52>

        default:
        case BSP_SYS_CLK_SRC_RC2M:
             reg_val = 0x00;
    12ee:	19 82       	std	Y+1, r1	; 0x01
             break;            
    12f0:	00 00       	nop
    }

    CCP      = BSP_CPP_IOREG_SIGNATURE;    
    12f2:	84 e3       	ldi	r24, 0x34	; 52
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	28 ed       	ldi	r18, 0xD8	; 216
    12f8:	fc 01       	movw	r30, r24
    12fa:	20 83       	st	Z, r18
    CLK.CTRL = reg_val;
    12fc:	80 e4       	ldi	r24, 0x40	; 64
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	29 81       	ldd	r18, Y+1	; 0x01
    1302:	fc 01       	movw	r30, r24
    1304:	20 83       	st	Z, r18

}
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <BSP_SysClk_SrcGet>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT08U  BSP_SysClk_SrcGet  (void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	0f 92       	push	r0
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  reg_val;
    CPU_INT08U  clk_src;
    
    reg_val = CLK.CTRL;
    131c:	80 e4       	ldi	r24, 0x40	; 64
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	fc 01       	movw	r30, r24
    1322:	80 81       	ld	r24, Z
    1324:	8a 83       	std	Y+2, r24	; 0x02
    switch (reg_val) {        
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	91 05       	cpc	r25, r1
    1330:	b1 f0       	breq	.+44     	; 0x135e <BSP_SysClk_SrcGet+0x4e>
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	91 05       	cpc	r25, r1
    1336:	34 f4       	brge	.+12     	; 0x1344 <BSP_SysClk_SrcGet+0x34>
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	59 f0       	breq	.+22     	; 0x1352 <BSP_SysClk_SrcGet+0x42>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	59 f0       	breq	.+22     	; 0x1358 <BSP_SysClk_SrcGet+0x48>
    1342:	16 c0       	rjmp	.+44     	; 0x1370 <BSP_SysClk_SrcGet+0x60>
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	69 f0       	breq	.+26     	; 0x1364 <BSP_SysClk_SrcGet+0x54>
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	91 05       	cpc	r25, r1
    134e:	69 f0       	breq	.+26     	; 0x136a <BSP_SysClk_SrcGet+0x5a>
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <BSP_SysClk_SrcGet+0x60>
        case 0x00:
             clk_src = BSP_SYS_CLK_SRC_RC2M;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
             break;
    1356:	0f c0       	rjmp	.+30     	; 0x1376 <BSP_SysClk_SrcGet+0x66>

        case 0x01:
             clk_src = BSP_SYS_CLK_SRC_RC32M;
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	89 83       	std	Y+1, r24	; 0x01
             break;
    135c:	0c c0       	rjmp	.+24     	; 0x1376 <BSP_SysClk_SrcGet+0x66>
             
        case 0x02:        
             clk_src = BSP_SYS_CLK_SRC_RC32K;
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	89 83       	std	Y+1, r24	; 0x01
             break;
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <BSP_SysClk_SrcGet+0x66>

        case 0x03:
             clk_src = BSP_SYS_CLK_SRC_XOSC;
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	89 83       	std	Y+1, r24	; 0x01
             break;
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <BSP_SysClk_SrcGet+0x66>

        case 0x04:        
             clk_src = BSP_SYS_CLK_SRC_PLL;
    136a:	85 e0       	ldi	r24, 0x05	; 5
    136c:	89 83       	std	Y+1, r24	; 0x01
             break;
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <BSP_SysClk_SrcGet+0x66>
            
        default:
            clk_src  = BSP_SYS_CLK_SRC_UNKNOWN;
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	89 83       	std	Y+1, r24	; 0x01
            break;
    1374:	00 00       	nop
    }    
    
    return clk_src;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <BSP_XOSC_SrcSet>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_XOSC_SrcSet (CPU_INT08U  clk_src)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	89 83       	std	Y+1, r24	; 0x01
    OSC.XOSCCTRL &= (~BSP_XOSCCTRL_XOSCSEL_MASK);
    138e:	80 e5       	ldi	r24, 0x50	; 80
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	20 e5       	ldi	r18, 0x50	; 80
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	f9 01       	movw	r30, r18
    1398:	22 81       	ldd	r18, Z+2	; 0x02
    139a:	20 7f       	andi	r18, 0xF0	; 240
    139c:	fc 01       	movw	r30, r24
    139e:	22 83       	std	Z+2, r18	; 0x02
     
    switch (clk_src) {
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	21 f0       	breq	.+8      	; 0x13b4 <BSP_XOSC_SrcSet+0x32>
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	59 f0       	breq	.+22     	; 0x13c8 <BSP_XOSC_SrcSet+0x46>
    13b2:	1c c0       	rjmp	.+56     	; 0x13ec <BSP_XOSC_SrcSet+0x6a>
        case BSP_XTAL_NET_SRC_LOW_XTAL:
             OSC.XOSCCTRL |= DEF_BIT_01; 
    13b4:	80 e5       	ldi	r24, 0x50	; 80
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	20 e5       	ldi	r18, 0x50	; 80
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	f9 01       	movw	r30, r18
    13be:	22 81       	ldd	r18, Z+2	; 0x02
    13c0:	22 60       	ori	r18, 0x02	; 2
    13c2:	fc 01       	movw	r30, r24
    13c4:	22 83       	std	Z+2, r18	; 0x02
             break;
    13c6:	1c c0       	rjmp	.+56     	; 0x1400 <BSP_XOSC_SrcSet+0x7e>

        case BSP_XTAL_NET_SRC_HIGH_XTAL:
             OSC.XOSCCTRL |= (DEF_BIT_01 | DEF_BIT_00); 
    13c8:	80 e5       	ldi	r24, 0x50	; 80
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	20 e5       	ldi	r18, 0x50	; 80
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	f9 01       	movw	r30, r18
    13d2:	22 81       	ldd	r18, Z+2	; 0x02
    13d4:	23 60       	ori	r18, 0x03	; 3
    13d6:	fc 01       	movw	r30, r24
    13d8:	22 83       	std	Z+2, r18	; 0x02
             } else if (BSP_CLK_IN_EXT_HIGH_XTAL_FREQ <  9000000L) {
                 OSC.XOSCCTRL |= (0x01 << 6); 
             } else if (BSP_CLK_IN_EXT_HIGH_XTAL_FREQ < 12000000L) {
                 OSC.XOSCCTRL |= (0x02 << 6); 
             } else {
                 OSC.XOSCCTRL |= (0x04 << 6); 
    13da:	80 e5       	ldi	r24, 0x50	; 80
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	20 e5       	ldi	r18, 0x50	; 80
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	f9 01       	movw	r30, r18
    13e4:	22 81       	ldd	r18, Z+2	; 0x02
    13e6:	fc 01       	movw	r30, r24
    13e8:	22 83       	std	Z+2, r18	; 0x02
             }             
             
             break;
    13ea:	0a c0       	rjmp	.+20     	; 0x1400 <BSP_XOSC_SrcSet+0x7e>

        default:
        case BSP_XTAL_NET_SRC_EXT_CLK:
             OSC.XOSCCTRL &= (~BSP_XOSCCTRL_XOSCSEL_MASK);
    13ec:	80 e5       	ldi	r24, 0x50	; 80
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	20 e5       	ldi	r18, 0x50	; 80
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	f9 01       	movw	r30, r18
    13f6:	22 81       	ldd	r18, Z+2	; 0x02
    13f8:	20 7f       	andi	r18, 0xF0	; 240
    13fa:	fc 01       	movw	r30, r24
    13fc:	22 83       	std	Z+2, r18	; 0x02
             break;
    13fe:	00 00       	nop
    }
}
    1400:	0f 90       	pop	r0
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <BSP_XOSC_SrcGet>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT08U  BSP_XOSC_SrcGet (void)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	0f 92       	push	r0
    140e:	0f 92       	push	r0
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  reg_val;
    CPU_INT08U  clk_src;

    reg_val = OSC.XOSCCTRL & BSP_XOSCCTRL_XOSCSEL_MASK;
    1414:	80 e5       	ldi	r24, 0x50	; 80
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	fc 01       	movw	r30, r24
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	8f 70       	andi	r24, 0x0F	; 15
    141e:	8a 83       	std	Y+2, r24	; 0x02

    switch (reg_val) {
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	b1 f0       	breq	.+44     	; 0x1458 <BSP_XOSC_SrcGet+0x50>
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	91 05       	cpc	r25, r1
    1430:	34 f4       	brge	.+12     	; 0x143e <BSP_XOSC_SrcGet+0x36>
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	59 f0       	breq	.+22     	; 0x144c <BSP_XOSC_SrcGet+0x44>
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	91 05       	cpc	r25, r1
    143a:	59 f0       	breq	.+22     	; 0x1452 <BSP_XOSC_SrcGet+0x4a>
    143c:	10 c0       	rjmp	.+32     	; 0x145e <BSP_XOSC_SrcGet+0x56>
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	91 05       	cpc	r25, r1
    1442:	51 f0       	breq	.+20     	; 0x1458 <BSP_XOSC_SrcGet+0x50>
    1444:	8b 30       	cpi	r24, 0x0B	; 11
    1446:	91 05       	cpc	r25, r1
    1448:	39 f0       	breq	.+14     	; 0x1458 <BSP_XOSC_SrcGet+0x50>
    144a:	09 c0       	rjmp	.+18     	; 0x145e <BSP_XOSC_SrcGet+0x56>
        case 0x00:
             clk_src = BSP_XTAL_NET_SRC_EXT_CLK;
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	89 83       	std	Y+1, r24	; 0x01
             break;
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <BSP_XOSC_SrcGet+0x5c>

        case 0x02:
             clk_src = BSP_XTAL_NET_SRC_LOW_XTAL;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
             break;
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <BSP_XOSC_SrcGet+0x5c>

        case 0x03:
        case 0x07:
        case 0x0B:
             clk_src = BSP_XTAL_NET_SRC_HIGH_XTAL;
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	89 83       	std	Y+1, r24	; 0x01
             break;
    145c:	03 c0       	rjmp	.+6      	; 0x1464 <BSP_XOSC_SrcGet+0x5c>
             
        default:
             clk_src = BSP_XTAL_NET_SRC_UNKNOWN;
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	89 83       	std	Y+1, r24	; 0x01
             break;
    1462:	00 00       	nop
    }
    
    return clk_src;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <BSP_XOSC_FreqGet>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  BSP_XOSC_FreqGet  (void)
{
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    CPU_INT08U  reg_val;
    
    
    reg_val = OSC.XOSCCTRL & BSP_XOSCCTRL_XOSCSEL_MASK;
    147a:	80 e5       	ldi	r24, 0x50	; 80
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	fc 01       	movw	r30, r24
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	8f 70       	andi	r24, 0x0F	; 15
    1484:	89 83       	std	Y+1, r24	; 0x01

    if (reg_val == 0x00) {
    1486:	89 81       	ldd	r24, Y+1	; 0x01
    1488:	88 23       	and	r24, r24
    148a:	29 f4       	brne	.+10     	; 0x1496 <BSP_XOSC_FreqGet+0x26>
        return (CPU_INT32U)BSP_CLK_IN_EXT_CLK_FREQ;
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	98 e4       	ldi	r25, 0x48	; 72
    1490:	a8 ee       	ldi	r26, 0xE8	; 232
    1492:	b1 e0       	ldi	r27, 0x01	; 1
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <BSP_XOSC_FreqGet+0x3e>
    } else if (reg_val == 0x01){
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	29 f4       	brne	.+10     	; 0x14a6 <BSP_XOSC_FreqGet+0x36>
        return (CPU_INT32U)BSP_CLK_IN_EXT_LOW_XTAL_FREQ;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e8       	ldi	r25, 0x80	; 128
    14a0:	a0 e0       	ldi	r26, 0x00	; 0
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	04 c0       	rjmp	.+8      	; 0x14ae <BSP_XOSC_FreqGet+0x3e>
    } else {
        return (CPU_INT32U)BSP_CLK_IN_EXT_HIGH_XTAL_FREQ;
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	94 e2       	ldi	r25, 0x24	; 36
    14aa:	a4 ef       	ldi	r26, 0xF4	; 244
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    }

}
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <BSP_LED_On>:
* Note(s)     : none. 
*********************************************************************************************************
*/

void  BSP_LED_On (CPU_INT08U led)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	0f 92       	push	r0
    14c0:	0f 92       	push	r0
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	8a 83       	std	Y+2, r24	; 0x02
    CPU_INT08U  reg_val;
    
    
    if (led == 0) {
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	88 23       	and	r24, r24
    14cc:	19 f4       	brne	.+6      	; 0x14d4 <BSP_LED_On+0x1a>
        reg_val = BSP_GPIOX_LED_GRP;
    14ce:	8f ef       	ldi	r24, 0xFF	; 255
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	0e c0       	rjmp	.+28     	; 0x14f0 <BSP_LED_On+0x36>
    } else {
       reg_val  = DEF_BIT(led - 1);
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 01       	movw	r18, r24
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	30 40       	sbci	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <BSP_LED_On+0x30>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	2a 95       	dec	r18
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <BSP_LED_On+0x2c>
    14ee:	89 83       	std	Y+1, r24	; 0x01
#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_C)        
    PORTC.OUTCLR = reg_val;            
#endif

#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_D)        
    PORTD.OUTCLR = reg_val;            
    14f0:	80 e6       	ldi	r24, 0x60	; 96
    14f2:	96 e0       	ldi	r25, 0x06	; 6
    14f4:	29 81       	ldd	r18, Y+1	; 0x01
    14f6:	fc 01       	movw	r30, r24
    14f8:	26 83       	std	Z+6, r18	; 0x06
#endif    

}
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <BSP_LED_Off>:
* Note(s)     : none. 
*********************************************************************************************************
*/

void  BSP_LED_Off (CPU_INT08U led)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	0f 92       	push	r0
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	8a 83       	std	Y+2, r24	; 0x02
    CPU_INT08U  reg_val;
    
    
    if (led == 0) {
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	88 23       	and	r24, r24
    1516:	19 f4       	brne	.+6      	; 0x151e <BSP_LED_Off+0x1a>
        reg_val = BSP_GPIOX_LED_GRP;
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	0e c0       	rjmp	.+28     	; 0x153a <BSP_LED_Off+0x36>
    } else {
       reg_val  = DEF_BIT(led - 1);
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 01       	movw	r18, r24
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	30 40       	sbci	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <BSP_LED_Off+0x30>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	2a 95       	dec	r18
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <BSP_LED_Off+0x2c>
    1538:	89 83       	std	Y+1, r24	; 0x01
#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_C)        
    PORTC.OUTSET = reg_val;            
#endif

#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_D)        
    PORTD.OUTSET = reg_val;            
    153a:	80 e6       	ldi	r24, 0x60	; 96
    153c:	96 e0       	ldi	r25, 0x06	; 6
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	fc 01       	movw	r30, r24
    1542:	25 83       	std	Z+5, r18	; 0x05
#endif    
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <BSP_LED_Toggle>:
* Note(s)     : none. 
*********************************************************************************************************
*/

void  BSP_LED_Toggle (CPU_INT08U led)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	0f 92       	push	r0
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	8a 83       	std	Y+2, r24	; 0x02
    CPU_INT08U  reg_val;
    
    
    if (led == 0) {
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 23       	and	r24, r24
    1560:	19 f4       	brne	.+6      	; 0x1568 <BSP_LED_Toggle+0x1a>
        reg_val = BSP_GPIOX_LED_GRP;
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	89 83       	std	Y+1, r24	; 0x01
    1566:	0e c0       	rjmp	.+28     	; 0x1584 <BSP_LED_Toggle+0x36>
    } else {
       reg_val  = DEF_BIT(led - 1);
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9c 01       	movw	r18, r24
    1570:	21 50       	subi	r18, 0x01	; 1
    1572:	30 40       	sbci	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <BSP_LED_Toggle+0x30>
    157a:	88 0f       	add	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	2a 95       	dec	r18
    1580:	e2 f7       	brpl	.-8      	; 0x157a <BSP_LED_Toggle+0x2c>
    1582:	89 83       	std	Y+1, r24	; 0x01
#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_C)        
    PORTC.OUTTGL = reg_val;            
#endif

#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_D)        
    PORTD.OUTTGL = reg_val;            
    1584:	80 e6       	ldi	r24, 0x60	; 96
    1586:	96 e0       	ldi	r25, 0x06	; 6
    1588:	29 81       	ldd	r18, Y+1	; 0x01
    158a:	fc 01       	movw	r30, r24
    158c:	27 83       	std	Z+7, r18	; 0x07
#endif    

}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <BSP_PB_GetStatus>:
* Note(s)     : none. 
*********************************************************************************************************
*/

CPU_BOOLEAN  BSP_PB_GetStatus (CPU_INT08U  pb)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <BSP_PB_GetStatus+0x6>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    CPU_INT08U  reg_mask;
    CPU_INT08U  reg_val;
    
    
    reg_mask = DEF_BIT(pb);
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <BSP_PB_GetStatus+0x1e>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <BSP_PB_GetStatus+0x1a>
    15ba:	89 83       	std	Y+1, r24	; 0x01
#if (BSP_CFG_PB_PORT_SEL == BSP_PORT_B)        
    reg_val = PORTB.IN;            
#endif

#if (BSP_CFG_PB_PORT_SEL == BSP_PORT_C)        
    reg_val = PORTC.IN;            
    15bc:	80 e4       	ldi	r24, 0x40	; 64
    15be:	96 e0       	ldi	r25, 0x06	; 6
    15c0:	fc 01       	movw	r30, r24
    15c2:	80 85       	ldd	r24, Z+8	; 0x08
    15c4:	8a 83       	std	Y+2, r24	; 0x02

#if (BSP_CFG_PB_PODT_SEL == BSP_PORT_D)        
    reg_val = PORTA.IN;            
#endif
    
    if (DEF_BIT_IS_CLR(reg_val, reg_mask)) {
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	89 23       	and	r24, r25
    15cc:	88 23       	and	r24, r24
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <BSP_PB_GetStatus+0x3c>
        return DEF_TRUE;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <BSP_PB_GetStatus+0x3e>
    } else {
        return DEF_FALSE;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    15d6:	23 96       	adiw	r28, 0x03	; 3
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <BSP_Ser_Init>:
* Caller(s)  : Application
*********************************************************************************************************
*/

void  BSP_Ser_Init (CPU_INT32U  baud_rate)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	60 97       	sbiw	r28, 0x10	; 16
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	6d 87       	std	Y+13, r22	; 0x0d
    15f2:	7e 87       	std	Y+14, r23	; 0x0e
    15f4:	8f 87       	std	Y+15, r24	; 0x0f
    15f6:	98 8b       	std	Y+16, r25	; 0x10
              CPU_INT32U   clk_div;                             /* Clock divider                                            */
              CPU_INT32U   per_freq;                            /* UASRT peripheral clk                                     */

              
#if  (BSP_CFG_UART_PORT_SEL  == BSP_PORT_C)
    port  = &PORTC;
    15f8:	80 e4       	ldi	r24, 0x40	; 64
    15fa:	96 e0       	ldi	r25, 0x06	; 6
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	9a 83       	std	Y+2, r25	; 0x02
    usart = &USARTC0;
    1600:	80 ea       	ldi	r24, 0xA0	; 160
    1602:	98 e0       	ldi	r25, 0x08	; 8
    1604:	8b 83       	std	Y+3, r24	; 0x03
    1606:	9c 83       	std	Y+4, r25	; 0x04
    port  = &PORTF;
    usart = &USARTF0;
#endif
    
#if (BSP_CFG_UART_NBR_SEL == BSP_UART_0)
    port->OUTSET = BSP_GPIOX_USART0_TX;                         /* Set Px3 (TXD0) state as high                             */ 
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	28 e0       	ldi	r18, 0x08	; 8
    160e:	fc 01       	movw	r30, r24
    1610:	25 83       	std	Z+5, r18	; 0x05
    port->DIRSET = BSP_GPIOX_USART0_TX;                         /* Set Px3 (TXD0) as output pin                             */
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	28 e0       	ldi	r18, 0x08	; 8
    1618:	fc 01       	movw	r30, r24
    161a:	21 83       	std	Z+1, r18	; 0x01
    port->DIRCLR = BSP_GPIOX_USART0_RX;                         /* set Px2 (RXD0) as input pin                              */
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	24 e0       	ldi	r18, 0x04	; 4
    1622:	fc 01       	movw	r30, r24
    1624:	22 83       	std	Z+2, r18	; 0x02
    port->DIRSET = BSP_GPIOX_USART1_TX;                         /* Set Px7 (TXD0) as output pin                             */
    port->DIRCLR = BSP_GPIOX_USART1_RX;                         /* set Px6 (RXD0) as input pin                              */
    usart        = (USART_t *)((CPU_INT16U)usart + 0x10);
#endif    

    usart->CTRLA      = 0x00;                                   /* Disable all interrupts                                   */
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	fc 01       	movw	r30, r24
    162c:	13 82       	std	Z+3, r1	; 0x03
    usart->CTRLC      = BSP_USART_CMODE_ASYNC                   /* Asynchronous USART                                       */
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	23 e0       	ldi	r18, 0x03	; 3
    1634:	fc 01       	movw	r30, r24
    1636:	25 83       	std	Z+5, r18	; 0x05
                      | BSP_USART_PMODE_PARITY_DIS              /* Parity disable                                           */
                      | BSP_USART_SBMODE_ONE                    /* Stop bit : 1                                             */
                      | BSP_USART_CHSIZE_8;                     /* 8-bit chatacter                                          */
   
   
    per_freq          =  BSP_SysClk_DevGetFreq(BSP_SYS_CLK_OUT_PER);    
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	0e 94 a4 07 	call	0xf48	; 0xf48 <BSP_SysClk_DevGetFreq>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	af 83       	std	Y+7, r26	; 0x07
    1648:	b8 87       	std	Y+8, r27	; 0x08
    clk_div           =  ((per_freq / baud_rate) - 1) / 16;     /* Calculate the clk divider for the baud rate generator    */
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	af 81       	ldd	r26, Y+7	; 0x07
    1650:	b8 85       	ldd	r27, Y+8	; 0x08
    1652:	2d 85       	ldd	r18, Y+13	; 0x0d
    1654:	3e 85       	ldd	r19, Y+14	; 0x0e
    1656:	4f 85       	ldd	r20, Y+15	; 0x0f
    1658:	58 89       	ldd	r21, Y+16	; 0x10
    165a:	bc 01       	movw	r22, r24
    165c:	cd 01       	movw	r24, r26
    165e:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    1662:	da 01       	movw	r26, r20
    1664:	c9 01       	movw	r24, r18
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	a1 09       	sbc	r26, r1
    166a:	b1 09       	sbc	r27, r1
    166c:	68 94       	set
    166e:	13 f8       	bld	r1, 3
    1670:	b6 95       	lsr	r27
    1672:	a7 95       	ror	r26
    1674:	97 95       	ror	r25
    1676:	87 95       	ror	r24
    1678:	16 94       	lsr	r1
    167a:	d1 f7       	brne	.-12     	; 0x1670 <BSP_Ser_Init+0x8e>
    167c:	89 87       	std	Y+9, r24	; 0x09
    167e:	9a 87       	std	Y+10, r25	; 0x0a
    1680:	ab 87       	std	Y+11, r26	; 0x0b
    1682:	bc 87       	std	Y+12, r27	; 0x0c

    usart->BAUDCTRLA  =  (CPU_INT08U)((CPU_INT16U)clk_div & 0xFF);
    1684:	29 85       	ldd	r18, Y+9	; 0x09
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	fc 01       	movw	r30, r24
    168c:	26 83       	std	Z+6, r18	; 0x06
    usart->BAUDCTRLB  =  (CPU_INT08U)((CPU_INT16U)clk_div      >> 8);
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	89 2f       	mov	r24, r25
    1694:	99 27       	eor	r25, r25
    1696:	28 2f       	mov	r18, r24
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	fc 01       	movw	r30, r24
    169e:	27 83       	std	Z+7, r18	; 0x07

    usart->CTRLB      =  BSP_USART_CTRLB_RX_EN
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	28 e1       	ldi	r18, 0x18	; 24
    16a6:	fc 01       	movw	r30, r24
    16a8:	24 83       	std	Z+4, r18	; 0x04
                      |  BSP_USART_CTRLB_TX_EN;                  /* Enable RX & TX                                           */

}
    16aa:	60 96       	adiw	r28, 0x10	; 16
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <BSP_Ser_WrByte>:
* Caller(s)   : Applicaiton.
*********************************************************************************************************
*/

void   BSP_Ser_WrByte (CPU_CHAR tx_byte)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <BSP_Ser_WrByte+0x6>
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    volatile  USART_t     *usart;

#if  (BSP_CFG_UART_PORT_SEL  == BSP_PORT_C)
    usart = &USARTC0;
    16c2:	80 ea       	ldi	r24, 0xA0	; 160
    16c4:	98 e0       	ldi	r25, 0x08	; 8
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	9a 83       	std	Y+2, r25	; 0x02
    
#if (BSP_CFG_UART_NBR_SEL == BSP_UART_1)    
    usart        = (USART_t *)((CPU_INT16U)usart + 0x10);
#endif    
    
    while (DEF_BIT_IS_CLR(usart->STATUS, BSP_USART_STATUS_DREIF)) {
    16ca:	00 00       	nop
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	fc 01       	movw	r30, r24
    16d2:	81 81       	ldd	r24, Z+1	; 0x01
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	80 72       	andi	r24, 0x20	; 32
    16da:	90 70       	andi	r25, 0x00	; 0
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	b1 f3       	breq	.-20     	; 0x16cc <BSP_Ser_WrByte+0x16>
        ;
    }

    usart->DATA = tx_byte;
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	9a 81       	ldd	r25, Y+2	; 0x02
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
}
    16ea:	23 96       	adiw	r28, 0x03	; 3
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <BSP_Ser_RdByte>:
* Caller(s)   : none.
*********************************************************************************************************
*/

CPU_INT08U   BSP_Ser_RdByte (void)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <BSP_Ser_RdByte+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    volatile  USART_t     *usart;
              CPU_INT08U   rx_byte;

#if  (BSP_CFG_UART_PORT_SEL  == BSP_PORT_C)
    usart = &USARTC0;
    1700:	80 ea       	ldi	r24, 0xA0	; 160
    1702:	98 e0       	ldi	r25, 0x08	; 8
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	9a 83       	std	Y+2, r25	; 0x02
    
#if (BSP_CFG_UART_NBR_SEL == BSP_UART_1)    
    usart        = (USART_t *)((CPU_INT16U)usart + 0x10);
#endif    
                                                                /*  Wait for a byte to show up.                             */
    while (DEF_BIT_IS_SET(usart->STATUS, BSP_USART_STATUS_RXCIF)) {     
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <BSP_Ser_RdByte+0x1c>
        OSTimeDly(2);
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    
#if (BSP_CFG_UART_NBR_SEL == BSP_UART_1)    
    usart        = (USART_t *)((CPU_INT16U)usart + 0x10);
#endif    
                                                                /*  Wait for a byte to show up.                             */
    while (DEF_BIT_IS_SET(usart->STATUS, BSP_USART_STATUS_RXCIF)) {     
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	fc 01       	movw	r30, r24
    1718:	81 81       	ldd	r24, Z+1	; 0x01
    171a:	88 23       	and	r24, r24
    171c:	b4 f3       	brlt	.-20     	; 0x170a <BSP_Ser_RdByte+0x14>
        OSTimeDly(2);
    }

    rx_byte = (CPU_INT08U)(usart->DATA & 0x00FF);               /* Read the character.                                      */
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	8b 83       	std	Y+3, r24	; 0x03

    return (rx_byte);
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
}
    172a:	23 96       	adiw	r28, 0x03	; 3
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <BSP_Ser_WrStr>:
* Returns     :   None.
*********************************************************************************************************
*/

void  BSP_Ser_WrStr (CPU_INT08U *tx_str)
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	0f 92       	push	r0
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	9a 83       	std	Y+2, r25	; 0x02
    while (*tx_str) {
    1746:	0c c0       	rjmp	.+24     	; 0x1760 <BSP_Ser_WrStr+0x2a>
        BSP_Ser_WrByte(*tx_str++);
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	9a 81       	ldd	r25, Y+2	; 0x02
    174c:	fc 01       	movw	r30, r24
    174e:	20 81       	ld	r18, Z
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	82 2f       	mov	r24, r18
    175c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <BSP_Ser_WrByte>
*********************************************************************************************************
*/

void  BSP_Ser_WrStr (CPU_INT08U *tx_str)
{
    while (*tx_str) {
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	fc 01       	movw	r30, r24
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	71 f7       	brne	.-36     	; 0x1748 <BSP_Ser_WrStr+0x12>
        BSP_Ser_WrByte(*tx_str++);
    }
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <BSP_Ser_RdStr>:
*********************************************************************************************************
*/

void  BSP_Ser_RdStr (CPU_CHAR    *rx_str,
                     CPU_INT32U   len)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	28 97       	sbiw	r28, 0x08	; 8
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	9c 83       	std	Y+4, r25	; 0x04
    1788:	4d 83       	std	Y+5, r20	; 0x05
    178a:	5e 83       	std	Y+6, r21	; 0x06
    178c:	6f 83       	std	Y+7, r22	; 0x07
    178e:	78 87       	std	Y+8, r23	; 0x08
    CPU_CHAR  rx_data;
    CPU_CHAR  input_ix;


    input_ix  = 0;
    1790:	19 82       	std	Y+1, r1	; 0x01
    rx_str[0] = 0;
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	9c 81       	ldd	r25, Y+4	; 0x04
    1796:	fc 01       	movw	r30, r24
    1798:	10 82       	st	Z, r1
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <BSP_Ser_RdStr+0x2c>
            input_ix++;
            if (input_ix >= len) {
               input_ix = len;
            }
        }
    }
    179c:	00 00       	nop
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <BSP_Ser_RdStr+0x2c>
    17a0:	00 00       	nop
    input_ix  = 0;
    rx_str[0] = 0;

    while (1)
    {
        rx_data = BSP_Ser_RdByte();
    17a2:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <BSP_Ser_RdByte>
    17a6:	8a 83       	std	Y+2, r24	; 0x02

        if ((rx_data == '\r') ||
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	8d 30       	cpi	r24, 0x0D	; 13
    17ac:	19 f0       	breq	.+6      	; 0x17b4 <BSP_Ser_RdStr+0x3e>
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	8a 30       	cpi	r24, 0x0A	; 10
    17b2:	e9 f4       	brne	.+58     	; 0x17ee <BSP_Ser_RdStr+0x78>
            (rx_data == '\n')) {
            BSP_Ser_Printf((CPU_CHAR *)"\n");
    17b4:	0f 92       	push	r0
    17b6:	0f 92       	push	r0
    17b8:	8d b7       	in	r24, 0x3d	; 61
    17ba:	9e b7       	in	r25, 0x3e	; 62
    17bc:	01 96       	adiw	r24, 0x01	; 1
    17be:	2b eb       	ldi	r18, 0xBB	; 187
    17c0:	30 e2       	ldi	r19, 0x20	; 32
    17c2:	fc 01       	movw	r30, r24
    17c4:	20 83       	st	Z, r18
    17c6:	31 83       	std	Z+1, r19	; 0x01
    17c8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <BSP_Ser_Printf>
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
            rx_str[input_ix] = 0;
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	2b 81       	ldd	r18, Y+3	; 0x03
    17d8:	3c 81       	ldd	r19, Y+4	; 0x04
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	fc 01       	movw	r30, r24
    17e0:	10 82       	st	Z, r1
            if (input_ix >= len) {
               input_ix = len;
            }
        }
    }
}
    17e2:	28 96       	adiw	r28, 0x08	; 8
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret
            BSP_Ser_Printf((CPU_CHAR *)"\n");
            rx_str[input_ix] = 0;
            break;
        }

        if (rx_data == '\b') {
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	88 30       	cpi	r24, 0x08	; 8
    17f2:	e9 f4       	brne	.+58     	; 0x182e <BSP_Ser_RdStr+0xb8>
            if (input_ix > 0) {
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	88 23       	and	r24, r24
    17f8:	d1 f0       	breq	.+52     	; 0x182e <BSP_Ser_RdStr+0xb8>
                BSP_Ser_Printf((CPU_CHAR *)"\b \b");
    17fa:	0f 92       	push	r0
    17fc:	0f 92       	push	r0
    17fe:	8d b7       	in	r24, 0x3d	; 61
    1800:	9e b7       	in	r25, 0x3e	; 62
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	2d eb       	ldi	r18, 0xBD	; 189
    1806:	30 e2       	ldi	r19, 0x20	; 32
    1808:	fc 01       	movw	r30, r24
    180a:	20 83       	st	Z, r18
    180c:	31 83       	std	Z+1, r19	; 0x01
    180e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <BSP_Ser_Printf>
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
                input_ix--;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
                rx_str[input_ix] = 0;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2b 81       	ldd	r18, Y+3	; 0x03
    1824:	3c 81       	ldd	r19, Y+4	; 0x04
    1826:	82 0f       	add	r24, r18
    1828:	93 1f       	adc	r25, r19
    182a:	fc 01       	movw	r30, r24
    182c:	10 82       	st	Z, r1
            }
        }

        if (ASCII_IsPrint(rx_data)) {
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <ASCII_IsPrint>
    1834:	88 23       	and	r24, r24
    1836:	09 f4       	brne	.+2      	; 0x183a <BSP_Ser_RdStr+0xc4>
    1838:	b1 cf       	rjmp	.-158    	; 0x179c <BSP_Ser_RdStr+0x26>
            BSP_Ser_Printf((CPU_CHAR *)"%c", rx_data);
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	00 d0       	rcall	.+0      	; 0x1842 <BSP_Ser_RdStr+0xcc>
    1842:	0f 92       	push	r0
    1844:	8d b7       	in	r24, 0x3d	; 61
    1846:	9e b7       	in	r25, 0x3e	; 62
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	41 ec       	ldi	r20, 0xC1	; 193
    184c:	50 e2       	ldi	r21, 0x20	; 32
    184e:	fc 01       	movw	r30, r24
    1850:	40 83       	st	Z, r20
    1852:	51 83       	std	Z+1, r21	; 0x01
    1854:	fc 01       	movw	r30, r24
    1856:	22 83       	std	Z+2, r18	; 0x02
    1858:	33 83       	std	Z+3, r19	; 0x03
    185a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <BSP_Ser_Printf>
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
            rx_str[input_ix] = rx_data;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	82 0f       	add	r24, r18
    1872:	93 1f       	adc	r25, r19
    1874:	2a 81       	ldd	r18, Y+2	; 0x02
    1876:	fc 01       	movw	r30, r24
    1878:	20 83       	st	Z, r18
            input_ix++;
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	89 83       	std	Y+1, r24	; 0x01
            if (input_ix >= len) {
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	af 81       	ldd	r26, Y+7	; 0x07
    1890:	b8 85       	ldd	r27, Y+8	; 0x08
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	4a 07       	cpc	r20, r26
    1898:	5b 07       	cpc	r21, r27
    189a:	08 f4       	brcc	.+2      	; 0x189e <BSP_Ser_RdStr+0x128>
    189c:	81 cf       	rjmp	.-254    	; 0x17a0 <BSP_Ser_RdStr+0x2a>
               input_ix = len;
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	89 83       	std	Y+1, r24	; 0x01
            }
        }
    }
    18a2:	7f cf       	rjmp	.-258    	; 0x17a2 <BSP_Ser_RdStr+0x2c>

000018a4 <BSP_Ser_Printf>:
* Return(s)   : none.
*********************************************************************************************************
*/

void  BSP_Ser_Printf (CPU_CHAR *format, ...)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	0f 92       	push	r0
    18aa:	0f 92       	push	r0
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    static  CPU_CHAR  buffer[80 + 1];
            va_list   vArgs;


    va_start(vArgs, format);
    18b0:	ce 01       	movw	r24, r28
    18b2:	0a 96       	adiw	r24, 0x0a	; 10
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    vsprintf((char *)buffer, (char const *)format, vArgs);
    18b8:	29 81       	ldd	r18, Y+1	; 0x01
    18ba:	3a 81       	ldd	r19, Y+2	; 0x02
    18bc:	81 e8       	ldi	r24, 0x81	; 129
    18be:	97 e2       	ldi	r25, 0x27	; 39
    18c0:	48 85       	ldd	r20, Y+8	; 0x08
    18c2:	59 85       	ldd	r21, Y+9	; 0x09
    18c4:	ba 01       	movw	r22, r20
    18c6:	a9 01       	movw	r20, r18
    18c8:	0e 94 6d 57 	call	0xaeda	; 0xaeda <vsprintf>
    va_end(vArgs);

    BSP_Ser_WrStr((CPU_CHAR*) buffer);
    18cc:	81 e8       	ldi	r24, 0x81	; 129
    18ce:	97 e2       	ldi	r25, 0x27	; 39
    18d0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <BSP_Ser_WrStr>
}
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <BSP_CPU_Init>:
* Return(s)     : none.         
*********************************************************************************************************
*/

static  void  BSP_CPU_Init(void)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    
	BSP_SysClk_SrcEn(BSP_SYS_CLK_SRC_RC32M, 0xFFFF);            /* Enable the Int. 32M Hz. Oscillator                        */
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	6f ef       	ldi	r22, 0xFF	; 255
    18ea:	7f ef       	ldi	r23, 0xFF	; 255
    18ec:	0e 94 e5 08 	call	0x11ca	; 0x11ca <BSP_SysClk_SrcEn>
	
	BSP_PLL_SrcSet(BSP_PLL_SRC_RC32M);	                        /* Select Pll Source  = Int 32Mhz Oscillator                 */
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 46 07 	call	0xe8c	; 0xe8c <BSP_PLL_SrcSet>
    BSP_PLL_FreqSet(32000000);                                  /* Set the PLL frequency = 32 Mhz                            */
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	78 e4       	ldi	r23, 0x48	; 72
    18fa:	88 ee       	ldi	r24, 0xE8	; 232
    18fc:	91 e0       	ldi	r25, 0x01	; 1
    18fe:	0e 94 76 06 	call	0xcec	; 0xcec <BSP_PLL_FreqSet>

    BSP_SysClk_SrcEn(BSP_SYS_CLK_SRC_PLL  , 0xFFFF);            /* Enable the PLL clk source  in the System Clk              */    
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	6f ef       	ldi	r22, 0xFF	; 255
    1906:	7f ef       	ldi	r23, 0xFF	; 255
    1908:	0e 94 e5 08 	call	0x11ca	; 0x11ca <BSP_SysClk_SrcEn>
    BSP_SysClk_SrcSet(BSP_SYS_CLK_SRC_PLL);                     /* Select the system clk = PLL Clk                           */
    190c:	85 e0       	ldi	r24, 0x05	; 5
    190e:	0e 94 50 09 	call	0x12a0	; 0x12a0 <BSP_SysClk_SrcSet>
    BSP_SysClk_DevSetPre(BSP_SYS_CLK_DIV_A, 0);                 /* Set the divider to generate the peripherals and CPU Clk   */
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	0e 94 77 07 	call	0xeee	; 0xeee <BSP_SysClk_DevSetPre>
    BSP_SysClk_DevSetPre(BSP_SYS_CLK_DIV_BC, 0);    
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	0e 94 77 07 	call	0xeee	; 0xeee <BSP_SysClk_DevSetPre>
  
  
    
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <BSP_TmrInit>:
*             in integer math, this is equivalent to adding 0.5
*********************************************************************************************************
*/

static  void  BSP_TmrInit (void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	28 97       	sbiw	r28, 0x08	; 8
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	de bf       	out	0x3e, r29	; 62
    CPU_INT32U  clk_per_freq;
    CPU_INT32U  period;


    TCC0.CTRLA     =  0x06;                                              /* Set TIMER C0 prescaler to CLK/256                       */
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	98 e0       	ldi	r25, 0x08	; 8
    193a:	26 e0       	ldi	r18, 0x06	; 6
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
    TCC0.CTRLB     =  0x00;
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	98 e0       	ldi	r25, 0x08	; 8
    1944:	fc 01       	movw	r30, r24
    1946:	11 82       	std	Z+1, r1	; 0x01
    TCC0.CTRLC     =  0x00;
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	98 e0       	ldi	r25, 0x08	; 8
    194c:	fc 01       	movw	r30, r24
    194e:	12 82       	std	Z+2, r1	; 0x02
    TCC0.CTRLD     =  0x00;
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	98 e0       	ldi	r25, 0x08	; 8
    1954:	fc 01       	movw	r30, r24
    1956:	13 82       	std	Z+3, r1	; 0x03
    
    clk_per_freq   =  BSP_SysClk_DevGetFreq(BSP_SYS_CLK_OUT_PER);
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	0e 94 a4 07 	call	0xf48	; 0xf48 <BSP_SysClk_DevGetFreq>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	ab 83       	std	Y+3, r26	; 0x03
    1968:	bc 83       	std	Y+4, r27	; 0x04
    period         =  (CPU_INT32U)(((2 * clk_per_freq) + (256 * 2 * (CPU_INT32U)OS_TICKS_PER_SEC))
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	ab 81       	ldd	r26, Y+3	; 0x03
    1970:	bc 81       	ldd	r27, Y+4	; 0x04
    1972:	80 50       	subi	r24, 0x00	; 0
    1974:	98 41       	sbci	r25, 0x18	; 24
    1976:	ac 4f       	sbci	r26, 0xFC	; 252
    1978:	bf 4f       	sbci	r27, 0xFF	; 255
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 ed       	ldi	r19, 0xD0	; 208
    1986:	47 e0       	ldi	r20, 0x07	; 7
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    1992:	2d 83       	std	Y+5, r18	; 0x05
    1994:	3e 83       	std	Y+6, r19	; 0x06
    1996:	4f 83       	std	Y+7, r20	; 0x07
    1998:	58 87       	std	Y+8, r21	; 0x08
                   /               ((256 * 2 * (CPU_INT32U)OS_TICKS_PER_SEC)));

    
    TCC0.PER       = (CPU_INT16U)period;                                /* Load 16-bit TIMER0 period                                */
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	98 e0       	ldi	r25, 0x08	; 8
    199e:	2d 81       	ldd	r18, Y+5	; 0x05
    19a0:	3e 81       	ldd	r19, Y+6	; 0x06
    19a2:	fc 01       	movw	r30, r24
    19a4:	26 a3       	std	Z+38, r18	; 0x26
    19a6:	37 a3       	std	Z+39, r19	; 0x27
    TCC0.INTCTRLA  = (0x02);                                            /* Enable interrupt on TIMER0 at level 2                    */
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	98 e0       	ldi	r25, 0x08	; 8
    19ac:	22 e0       	ldi	r18, 0x02	; 2
    19ae:	fc 01       	movw	r30, r24
    19b0:	26 83       	std	Z+6, r18	; 0x06
 
    TCC0.CTRLFSET  = DEF_BIT_02;                                        /* Update the timer                                         */
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	98 e0       	ldi	r25, 0x08	; 8
    19b6:	24 e0       	ldi	r18, 0x04	; 4
    19b8:	fc 01       	movw	r30, r24
    19ba:	21 87       	std	Z+9, r18	; 0x09
    TCC0.CTRLFCLR  = DEF_BIT_02;
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	98 e0       	ldi	r25, 0x08	; 8
    19c0:	24 e0       	ldi	r18, 0x04	; 4
    19c2:	fc 01       	movw	r30, r24
    19c4:	20 87       	std	Z+8, r18	; 0x08

    PMIC.CTRL     |= DEF_BIT_01;                                        /* Enable interrupt level two in PMIC                       */
    19c6:	80 ea       	ldi	r24, 0xA0	; 160
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	20 ea       	ldi	r18, 0xA0	; 160
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	22 81       	ldd	r18, Z+2	; 0x02
    19d2:	22 60       	ori	r18, 0x02	; 2
    19d4:	fc 01       	movw	r30, r24
    19d6:	22 83       	std	Z+2, r18	; 0x02
    
    TCC0.CTRLFSET  = DEF_BIT_03;                                        /* Restart the timer                                        */
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	98 e0       	ldi	r25, 0x08	; 8
    19dc:	28 e0       	ldi	r18, 0x08	; 8
    19de:	fc 01       	movw	r30, r24
    19e0:	21 87       	std	Z+9, r18	; 0x09
    TCC0.CTRLFCLR  = DEF_BIT_03;
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	98 e0       	ldi	r25, 0x08	; 8
    19e6:	28 e0       	ldi	r18, 0x08	; 8
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 87       	std	Z+8, r18	; 0x08
}
    19ec:	28 96       	adiw	r28, 0x08	; 8
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <BSP_TmrHandler>:
*                                     HANDLE THE TICK INTERRUPT
*********************************************************************************************************
*/

void  BSP_TmrHandler (void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    OSTimeTick();
    1a00:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <OSTimeTick>
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <BSP_LED_Init>:
* Note(s)     : none. 
*********************************************************************************************************
*/

static  void  BSP_LED_Init (void)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_C)        
    PORTC.DIRSET = BSP_GPIOX_LED_GRP;            
#endif

#if (BSP_CFG_LED_PORT_SEL == BSP_PORT_D)        
    PORTD.DIRSET = BSP_GPIOX_LED_GRP;            
    1a12:	80 e6       	ldi	r24, 0x60	; 96
    1a14:	96 e0       	ldi	r25, 0x06	; 6
    1a16:	2f ef       	ldi	r18, 0xFF	; 255
    1a18:	fc 01       	movw	r30, r24
    1a1a:	21 83       	std	Z+1, r18	; 0x01
#endif    
    
    BSP_LED_Off(0);                                                       /* Turn Off all the LEDs                                     */
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	0e 94 82 0a 	call	0x1504	; 0x1504 <BSP_LED_Off>
}
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	08 95       	ret

00001a28 <BSP_PB_Init>:
* Note(s)     : none. 
*********************************************************************************************************
*/

static  void  BSP_PB_Init (void)
{
    1a28:	df 93       	push	r29
    1a2a:	cf 93       	push	r28
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
#if (BSP_CFG_PB_PORT_SEL == BSP_PORT_B)        
    PORTB.DIRCLR = BSP_GPIOX_PB_GRP;            
#endif

#if (BSP_CFG_PB_PORT_SEL == BSP_PORT_C)        
    PORTC.DIRCLR = BSP_GPIOX_PB_GRP;            
    1a30:	80 e4       	ldi	r24, 0x40	; 64
    1a32:	96 e0       	ldi	r25, 0x06	; 6
    1a34:	2f ef       	ldi	r18, 0xFF	; 255
    1a36:	fc 01       	movw	r30, r24
    1a38:	22 83       	std	Z+2, r18	; 0x02

#if (BSP_CFG_PB_PORT_SEL == BSP_PORT_D)        
    PORTD.DIRCLR = BSP_GPIOX_PB_GRP;            
#endif    
    
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <BSP_TickISR>:
;               Return from interrupt
;********************************************************************************************************

               
BSP_TickISR:       
		PUSH_ALL                                                ; Save all registers and status register        	
    1a40:	0f 92       	push	r0
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	0f 92       	push	r0
    1a46:	1f 92       	push	r1
    1a48:	11 24       	eor	r1, r1
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	2f 93       	push	r18
    1a6c:	3f 93       	push	r19
    1a6e:	4f 93       	push	r20
    1a70:	5f 93       	push	r21
    1a72:	6f 93       	push	r22
    1a74:	7f 93       	push	r23
    1a76:	8f 93       	push	r24
    1a78:	9f 93       	push	r25
    1a7a:	af 93       	push	r26
    1a7c:	bf 93       	push	r27
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	ef 93       	push	r30
    1a84:	ff 93       	push	r31
    1a86:	0c b7       	in	r16, 0x3c	; 60
    1a88:	0f 93       	push	r16
    1a8a:	08 b7       	in	r16, 0x38	; 56
    1a8c:	0f 93       	push	r16
    1a8e:	09 b7       	in	r16, 0x39	; 57
    1a90:	0f 93       	push	r16
    1a92:	0a b7       	in	r16, 0x3a	; 58
    1a94:	0f 93       	push	r16
    1a96:	0b b7       	in	r16, 0x3b	; 59
    1a98:	0f 93       	push	r16
		LDS     R16,OSIntNesting                                ; Notify uC/OS-II of ISR
    1a9a:	00 91 07 2e 	lds	r16, 0x2E07
        INC     R16                                             ;
    1a9e:	03 95       	inc	r16
        STS     OSIntNesting,R16                                ;
    1aa0:	00 93 07 2e 	sts	0x2E07, r16

        CPI     R16,1                                           ; if (OSIntNesting == 1) {
    1aa4:	01 30       	cpi	r16, 0x01	; 1
        BRNE    BSP_TickISR_1
    1aa6:	41 f4       	brne	.+16     	; 0x1ab8 <BSP_TickISR_1>

        SAVE_SP				                                    ; X = SP 		
    1aa8:	ad b7       	in	r26, 0x3d	; 61
    1aaa:	be b7       	in	r27, 0x3e	; 62
		LDS     R28,OSTCBCur                                    ; OSTCBCur->OSTCBStkPtr = X
    1aac:	c0 91 08 2e 	lds	r28, 0x2E08
        LDS     R29,OSTCBCur+1                                  ;    
    1ab0:	d0 91 09 2e 	lds	r29, 0x2E09
        
		ST      Y+,R26
    1ab4:	a9 93       	st	Y+, r26
        ST      Y+,R27                                          ; }
    1ab6:	b9 93       	st	Y+, r27

00001ab8 <BSP_TickISR_1>:

BSP_TickISR_1:
        CALL    BSP_TmrHandler                                  ; Handle the tick ISR
    1ab8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <BSP_TmrHandler>

        CALL    OSIntExit                                       ; Notify uC/OS-II about end of ISR
    1abc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <OSIntExit>
        		
        POP_ALL                                                 ; Restore all registers
    1ac0:	0f 91       	pop	r16
    1ac2:	0b bf       	out	0x3b, r16	; 59
    1ac4:	0f 91       	pop	r16
    1ac6:	0a bf       	out	0x3a, r16	; 58
    1ac8:	0f 91       	pop	r16
    1aca:	09 bf       	out	0x39, r16	; 57
    1acc:	0f 91       	pop	r16
    1ace:	08 bf       	out	0x38, r16	; 56
    1ad0:	0f 91       	pop	r16
    1ad2:	0c bf       	out	0x3c, r16	; 60
    1ad4:	ff 91       	pop	r31
    1ad6:	ef 91       	pop	r30
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	bf 91       	pop	r27
    1ade:	af 91       	pop	r26
    1ae0:	9f 91       	pop	r25
    1ae2:	8f 91       	pop	r24
    1ae4:	7f 91       	pop	r23
    1ae6:	6f 91       	pop	r22
    1ae8:	5f 91       	pop	r21
    1aea:	4f 91       	pop	r20
    1aec:	3f 91       	pop	r19
    1aee:	2f 91       	pop	r18
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	6f 90       	pop	r6
    1b08:	5f 90       	pop	r5
    1b0a:	4f 90       	pop	r4
    1b0c:	3f 90       	pop	r3
    1b0e:	2f 90       	pop	r2
    1b10:	1f 90       	pop	r1
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f 90       	pop	r0
        
        RETI
    1b18:	18 95       	reti

00001b1a <CPU_SR_Save>:
*                     Return
*********************************************************************************************************
*/

CPU_SR_Save:
        IN      R16,SREG                                        /* Get current state of interrupts disable flag         */
    1b1a:	0f b7       	in	r16, 0x3f	; 63
        CLI                                                     /* Disable interrupts                                   */
    1b1c:	f8 94       	cli
        RET                                                     /* Return original SREG value in R16                    */
    1b1e:	08 95       	ret

00001b20 <CPU_SR_Restore>:


CPU_SR_Restore:
        OUT     SREG,R16                                        /* Restore SREG                                         */
    1b20:	0f bf       	out	0x3f, r16	; 63
        RET                                                     /* Return                                               */
    1b22:	08 95       	ret

00001b24 <ASCII_IsAlpha>:
*                   characters for which isupper() or islower() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsAlpha (CPU_CHAR  c)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	0f 92       	push	r0
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  alpha;


    alpha = ASCII_IS_ALPHA(c);
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	81 34       	cpi	r24, 0x41	; 65
    1b36:	30 f0       	brcs	.+12     	; 0x1b44 <ASCII_IsAlpha+0x20>
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	8b 35       	cpi	r24, 0x5B	; 91
    1b3c:	18 f4       	brcc	.+6      	; 0x1b44 <ASCII_IsAlpha+0x20>
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <ASCII_IsAlpha+0x24>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	71 f0       	breq	.+28     	; 0x1b6a <ASCII_IsAlpha+0x46>
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	81 36       	cpi	r24, 0x61	; 97
    1b52:	30 f0       	brcs	.+12     	; 0x1b60 <ASCII_IsAlpha+0x3c>
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	8b 37       	cpi	r24, 0x7B	; 123
    1b58:	18 f4       	brcc	.+6      	; 0x1b60 <ASCII_IsAlpha+0x3c>
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <ASCII_IsAlpha+0x40>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	19 f4       	brne	.+6      	; 0x1b70 <ASCII_IsAlpha+0x4c>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <ASCII_IsAlpha+0x50>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	89 83       	std	Y+1, r24	; 0x01

    return (alpha);
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <ASCII_IsAlnum>:
*                   for which isalpha() or isdigit() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsAlnum (CPU_CHAR  c)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	0f 92       	push	r0
    1b88:	0f 92       	push	r0
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  alnum;


    alnum = ASCII_IS_ALNUM(c);
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	81 34       	cpi	r24, 0x41	; 65
    1b94:	30 f0       	brcs	.+12     	; 0x1ba2 <ASCII_IsAlnum+0x20>
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	8b 35       	cpi	r24, 0x5B	; 91
    1b9a:	18 f4       	brcc	.+6      	; 0x1ba2 <ASCII_IsAlnum+0x20>
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <ASCII_IsAlnum+0x24>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	71 f0       	breq	.+28     	; 0x1bc8 <ASCII_IsAlnum+0x46>
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	81 36       	cpi	r24, 0x61	; 97
    1bb0:	30 f0       	brcs	.+12     	; 0x1bbe <ASCII_IsAlnum+0x3c>
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	8b 37       	cpi	r24, 0x7B	; 123
    1bb6:	18 f4       	brcc	.+6      	; 0x1bbe <ASCII_IsAlnum+0x3c>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <ASCII_IsAlnum+0x40>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <ASCII_IsAlnum+0x4c>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <ASCII_IsAlnum+0x50>
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	71 f0       	breq	.+28     	; 0x1bf4 <ASCII_IsAlnum+0x72>
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	80 33       	cpi	r24, 0x30	; 48
    1bdc:	30 f0       	brcs	.+12     	; 0x1bea <ASCII_IsAlnum+0x68>
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	8a 33       	cpi	r24, 0x3A	; 58
    1be2:	18 f4       	brcc	.+6      	; 0x1bea <ASCII_IsAlnum+0x68>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <ASCII_IsAlnum+0x6c>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	19 f4       	brne	.+6      	; 0x1bfa <ASCII_IsAlnum+0x78>
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <ASCII_IsAlnum+0x7c>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	89 83       	std	Y+1, r24	; 0x01

    return (alnum);
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <ASCII_IsLower>:
*                   the lowercase letters".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsLower (CPU_CHAR  c)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	0f 92       	push	r0
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  lower;


    lower = ASCII_IS_LOWER(c);
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	81 36       	cpi	r24, 0x61	; 97
    1c1e:	30 f0       	brcs	.+12     	; 0x1c2c <ASCII_IsLower+0x20>
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	8b 37       	cpi	r24, 0x7B	; 123
    1c24:	18 f4       	brcc	.+6      	; 0x1c2c <ASCII_IsLower+0x20>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <ASCII_IsLower+0x24>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	89 83       	std	Y+1, r24	; 0x01

    return (lower);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <ASCII_IsUpper>:
*                   the uppercase letters".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsUpper (CPU_CHAR  c)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	0f 92       	push	r0
    1c44:	0f 92       	push	r0
    1c46:	cd b7       	in	r28, 0x3d	; 61
    1c48:	de b7       	in	r29, 0x3e	; 62
    1c4a:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  upper;


    upper = ASCII_IS_UPPER(c);
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	81 34       	cpi	r24, 0x41	; 65
    1c50:	30 f0       	brcs	.+12     	; 0x1c5e <ASCII_IsUpper+0x20>
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	8b 35       	cpi	r24, 0x5B	; 91
    1c56:	18 f4       	brcc	.+6      	; 0x1c5e <ASCII_IsUpper+0x20>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <ASCII_IsUpper+0x24>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	89 83       	std	Y+1, r24	; 0x01

    return (upper);
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <ASCII_IsDig>:
*                       decimal-digit character".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsDig (CPU_CHAR  c)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	0f 92       	push	r0
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  dig;


    dig = ASCII_IS_DIG(c);
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	80 33       	cpi	r24, 0x30	; 48
    1c82:	30 f0       	brcs	.+12     	; 0x1c90 <ASCII_IsDig+0x20>
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	8a 33       	cpi	r24, 0x3A	; 58
    1c88:	18 f4       	brcc	.+6      	; 0x1c90 <ASCII_IsDig+0x20>
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <ASCII_IsDig+0x24>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	89 83       	std	Y+1, r24	; 0x01

    return (dig);
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <ASCII_IsDigHex>:
*                   hexadecimal-digit character".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsDigHex (CPU_CHAR  c)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	0f 92       	push	r0
    1ca8:	0f 92       	push	r0
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  dig_hex;


    dig_hex = ASCII_IS_DIG_HEX(c);
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 33       	cpi	r24, 0x30	; 48
    1cb4:	18 f0       	brcs	.+6      	; 0x1cbc <ASCII_IsDigHex+0x1a>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	8a 33       	cpi	r24, 0x3A	; 58
    1cba:	60 f0       	brcs	.+24     	; 0x1cd4 <ASCII_IsDigHex+0x32>
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	81 34       	cpi	r24, 0x41	; 65
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <ASCII_IsDigHex+0x26>
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	87 34       	cpi	r24, 0x47	; 71
    1cc6:	30 f0       	brcs	.+12     	; 0x1cd4 <ASCII_IsDigHex+0x32>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	81 36       	cpi	r24, 0x61	; 97
    1ccc:	30 f0       	brcs	.+12     	; 0x1cda <ASCII_IsDigHex+0x38>
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	87 36       	cpi	r24, 0x67	; 103
    1cd2:	18 f4       	brcc	.+6      	; 0x1cda <ASCII_IsDigHex+0x38>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <ASCII_IsDigHex+0x3c>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	89 83       	std	Y+1, r24	; 0x01

    return (dig_hex);
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <ASCII_IsBlank>:
*                       the "space (' '), and horizontal tab ('\t')".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsBlank (CPU_CHAR  c)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	0f 92       	push	r0
    1cf2:	0f 92       	push	r0
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  blank;


    blank = ASCII_IS_BLANK(c);
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	80 32       	cpi	r24, 0x20	; 32
    1cfe:	19 f0       	breq	.+6      	; 0x1d06 <ASCII_IsBlank+0x1a>
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	89 30       	cpi	r24, 0x09	; 9
    1d04:	19 f4       	brne	.+6      	; 0x1d0c <ASCII_IsBlank+0x20>
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <ASCII_IsBlank+0x24>
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	89 83       	std	Y+1, r24	; 0x01

    return (blank);
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <ASCII_IsSpace>:
*                       horizontal tab ('\t'), and vertical tab ('\v')".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsSpace (CPU_CHAR  c)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	0f 92       	push	r0
    1d24:	0f 92       	push	r0
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  space;


    space = ASCII_IS_SPACE(c);
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	80 32       	cpi	r24, 0x20	; 32
    1d30:	79 f0       	breq	.+30     	; 0x1d50 <ASCII_IsSpace+0x32>
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	8d 30       	cpi	r24, 0x0D	; 13
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <ASCII_IsSpace+0x32>
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8a 30       	cpi	r24, 0x0A	; 10
    1d3c:	49 f0       	breq	.+18     	; 0x1d50 <ASCII_IsSpace+0x32>
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	8c 30       	cpi	r24, 0x0C	; 12
    1d42:	31 f0       	breq	.+12     	; 0x1d50 <ASCII_IsSpace+0x32>
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	89 30       	cpi	r24, 0x09	; 9
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <ASCII_IsSpace+0x32>
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	8b 30       	cpi	r24, 0x0B	; 11
    1d4e:	19 f4       	brne	.+6      	; 0x1d56 <ASCII_IsSpace+0x38>
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <ASCII_IsSpace+0x3c>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	89 83       	std	Y+1, r24	; 0x01

    return (space);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <ASCII_IsPrint>:
*                       0x20 (space) through 0x7E (tilde)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsPrint (CPU_CHAR  c)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	0f 92       	push	r0
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  print;


    print = ASCII_IS_PRINT(c);
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	80 32       	cpi	r24, 0x20	; 32
    1d7a:	30 f0       	brcs	.+12     	; 0x1d88 <ASCII_IsPrint+0x20>
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	8f 37       	cpi	r24, 0x7F	; 127
    1d80:	18 f4       	brcc	.+6      	; 0x1d88 <ASCII_IsPrint+0x20>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <ASCII_IsPrint+0x24>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	89 83       	std	Y+1, r24	; 0x01

    return (print);
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <ASCII_IsGraph>:
*                       0x20 (space) through 0x7E (tilde)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsGraph (CPU_CHAR  c)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	0f 92       	push	r0
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  graph;


    graph = ASCII_IS_GRAPH(c);
    1da8:	8a 81       	ldd	r24, Y+2	; 0x02
    1daa:	81 32       	cpi	r24, 0x21	; 33
    1dac:	30 f0       	brcs	.+12     	; 0x1dba <ASCII_IsGraph+0x20>
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	8f 37       	cpi	r24, 0x7F	; 127
    1db2:	18 f4       	brcc	.+6      	; 0x1dba <ASCII_IsGraph+0x20>
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <ASCII_IsGraph+0x24>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	89 83       	std	Y+1, r24	; 0x01

    return (graph);
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <ASCII_IsPunct>:
*                   printing character for which neither isspace() nor isalnum() is true".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsPunct (CPU_CHAR  c)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	0f 92       	push	r0
    1dd2:	0f 92       	push	r0
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  punct;


    punct = ASCII_IS_PUNCT(c);
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	80 32       	cpi	r24, 0x20	; 32
    1dde:	30 f0       	brcs	.+12     	; 0x1dec <ASCII_IsPunct+0x20>
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	8f 37       	cpi	r24, 0x7F	; 127
    1de4:	18 f4       	brcc	.+6      	; 0x1dec <ASCII_IsPunct+0x20>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <ASCII_IsPunct+0x24>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	91 05       	cpc	r25, r1
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <ASCII_IsPunct+0x2c>
    1df6:	55 c0       	rjmp	.+170    	; 0x1ea2 <ASCII_IsPunct+0xd6>
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	80 32       	cpi	r24, 0x20	; 32
    1dfc:	79 f0       	breq	.+30     	; 0x1e1c <ASCII_IsPunct+0x50>
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	8d 30       	cpi	r24, 0x0D	; 13
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <ASCII_IsPunct+0x50>
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	8a 30       	cpi	r24, 0x0A	; 10
    1e08:	49 f0       	breq	.+18     	; 0x1e1c <ASCII_IsPunct+0x50>
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	8c 30       	cpi	r24, 0x0C	; 12
    1e0e:	31 f0       	breq	.+12     	; 0x1e1c <ASCII_IsPunct+0x50>
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	89 30       	cpi	r24, 0x09	; 9
    1e14:	19 f0       	breq	.+6      	; 0x1e1c <ASCII_IsPunct+0x50>
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	8b 30       	cpi	r24, 0x0B	; 11
    1e1a:	19 f4       	brne	.+6      	; 0x1e22 <ASCII_IsPunct+0x56>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <ASCII_IsPunct+0x5a>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	e1 f5       	brne	.+120    	; 0x1ea2 <ASCII_IsPunct+0xd6>
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	81 34       	cpi	r24, 0x41	; 65
    1e2e:	30 f0       	brcs	.+12     	; 0x1e3c <ASCII_IsPunct+0x70>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	8b 35       	cpi	r24, 0x5B	; 91
    1e34:	18 f4       	brcc	.+6      	; 0x1e3c <ASCII_IsPunct+0x70>
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <ASCII_IsPunct+0x74>
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	91 05       	cpc	r25, r1
    1e44:	71 f0       	breq	.+28     	; 0x1e62 <ASCII_IsPunct+0x96>
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	81 36       	cpi	r24, 0x61	; 97
    1e4a:	30 f0       	brcs	.+12     	; 0x1e58 <ASCII_IsPunct+0x8c>
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	8b 37       	cpi	r24, 0x7B	; 123
    1e50:	18 f4       	brcc	.+6      	; 0x1e58 <ASCII_IsPunct+0x8c>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <ASCII_IsPunct+0x90>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	19 f4       	brne	.+6      	; 0x1e68 <ASCII_IsPunct+0x9c>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <ASCII_IsPunct+0xa0>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 05       	cpc	r25, r1
    1e70:	71 f0       	breq	.+28     	; 0x1e8e <ASCII_IsPunct+0xc2>
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	80 33       	cpi	r24, 0x30	; 48
    1e76:	30 f0       	brcs	.+12     	; 0x1e84 <ASCII_IsPunct+0xb8>
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	8a 33       	cpi	r24, 0x3A	; 58
    1e7c:	18 f4       	brcc	.+6      	; 0x1e84 <ASCII_IsPunct+0xb8>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 c0       	rjmp	.+4      	; 0x1e88 <ASCII_IsPunct+0xbc>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	19 f4       	brne	.+6      	; 0x1e94 <ASCII_IsPunct+0xc8>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <ASCII_IsPunct+0xcc>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	00 97       	sbiw	r24, 0x00	; 0
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <ASCII_IsPunct+0xd6>
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <ASCII_IsPunct+0xda>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	89 83       	std	Y+1, r24	; 0x01

    return (punct);
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <ASCII_IsCtrl>:
*                       0 (NUL) through 0x1F (US), and the character 0x7F (DEL)".
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_IsCtrl (CPU_CHAR  c)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	0f 92       	push	r0
    1eba:	0f 92       	push	r0
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
    CPU_BOOLEAN  ctrl;


    ctrl = ASCII_IS_CTRL(c);
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	88 23       	and	r24, r24
    1ec6:	1c f0       	brlt	.+6      	; 0x1ece <ASCII_IsCtrl+0x1a>
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 32       	cpi	r24, 0x20	; 32
    1ecc:	18 f0       	brcs	.+6      	; 0x1ed4 <ASCII_IsCtrl+0x20>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	8f 37       	cpi	r24, 0x7F	; 127
    1ed2:	19 f4       	brne	.+6      	; 0x1eda <ASCII_IsCtrl+0x26>
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <ASCII_IsCtrl+0x2a>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	89 83       	std	Y+1, r24	; 0x01

    return (ctrl);
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <ASCII_ToLower>:
*                       (2) "otherwise, the argument is returned unchanged."
*********************************************************************************************************
*/

CPU_CHAR  ASCII_ToLower (CPU_CHAR  c)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	0f 92       	push	r0
    1ef2:	0f 92       	push	r0
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	8a 83       	std	Y+2, r24	; 0x02
    CPU_CHAR  lower;


    lower = ASCII_TO_LOWER(c);
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	81 34       	cpi	r24, 0x41	; 65
    1efe:	30 f0       	brcs	.+12     	; 0x1f0c <ASCII_ToLower+0x20>
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	8b 35       	cpi	r24, 0x5B	; 91
    1f04:	18 f4       	brcc	.+6      	; 0x1f0c <ASCII_ToLower+0x20>
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <ASCII_ToLower+0x24>
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <ASCII_ToLower+0x30>
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	80 5e       	subi	r24, 0xE0	; 224
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <ASCII_ToLower+0x32>
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01

    return (lower);
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	08 95       	ret

00001f2c <ASCII_ToUpper>:
*                       (2) "otherwise, the argument is returned unchanged."
*********************************************************************************************************
*/

CPU_CHAR  ASCII_ToUpper (CPU_CHAR  c)
{
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	0f 92       	push	r0
    1f32:	0f 92       	push	r0
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    CPU_CHAR  upper;


    upper = ASCII_TO_UPPER(c);
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	81 36       	cpi	r24, 0x61	; 97
    1f3e:	30 f0       	brcs	.+12     	; 0x1f4c <ASCII_ToUpper+0x20>
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	8b 37       	cpi	r24, 0x7B	; 123
    1f44:	18 f4       	brcc	.+6      	; 0x1f4c <ASCII_ToUpper+0x20>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <ASCII_ToUpper+0x24>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	91 05       	cpc	r25, r1
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <ASCII_ToUpper+0x30>
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	80 52       	subi	r24, 0x20	; 32
    1f5a:	01 c0       	rjmp	.+2      	; 0x1f5e <ASCII_ToUpper+0x32>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	89 83       	std	Y+1, r24	; 0x01

    return (upper);
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <ASCII_Cmp>:
*********************************************************************************************************
*/

CPU_BOOLEAN  ASCII_Cmp (CPU_CHAR  c1,
                        CPU_CHAR  c2)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	25 97       	sbiw	r28, 0x05	; 5
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	8c 83       	std	Y+4, r24	; 0x04
    1f7c:	6d 83       	std	Y+5, r22	; 0x05
    CPU_CHAR     c1_upper;
    CPU_CHAR     c2_upper;
    CPU_BOOLEAN  cmp;


    c1_upper =  ASCII_TO_UPPER(c1);
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	81 36       	cpi	r24, 0x61	; 97
    1f82:	30 f0       	brcs	.+12     	; 0x1f90 <ASCII_Cmp+0x24>
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	8b 37       	cpi	r24, 0x7B	; 123
    1f88:	18 f4       	brcc	.+6      	; 0x1f90 <ASCII_Cmp+0x24>
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <ASCII_Cmp+0x28>
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	91 05       	cpc	r25, r1
    1f98:	19 f4       	brne	.+6      	; 0x1fa0 <ASCII_Cmp+0x34>
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	80 52       	subi	r24, 0x20	; 32
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <ASCII_Cmp+0x36>
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    c2_upper =  ASCII_TO_UPPER(c2);
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	81 36       	cpi	r24, 0x61	; 97
    1fa8:	30 f0       	brcs	.+12     	; 0x1fb6 <ASCII_Cmp+0x4a>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	8b 37       	cpi	r24, 0x7B	; 123
    1fae:	18 f4       	brcc	.+6      	; 0x1fb6 <ASCII_Cmp+0x4a>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <ASCII_Cmp+0x4e>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <ASCII_Cmp+0x5a>
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	80 52       	subi	r24, 0x20	; 32
    1fc4:	01 c0       	rjmp	.+2      	; 0x1fc8 <ASCII_Cmp+0x5c>
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    cmp      = (c1_upper == c2_upper) ? (DEF_YES) : (DEF_NO);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	29 81       	ldd	r18, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	29 17       	cp	r18, r25
    1fd2:	09 f0       	breq	.+2      	; 0x1fd6 <ASCII_Cmp+0x6a>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	8b 83       	std	Y+3, r24	; 0x03

    return (cmp);
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fda:	25 96       	adiw	r28, 0x05	; 5
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <Mem_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  Mem_Init (void)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;

                                                                        /* ------------ INIT MEM POOL TBL ------------- */
    Mem_PoolTbl = &Mem_PoolHeap;
#endif
}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <Mem_Clr+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	9a 83       	std	Y+2, r25	; 0x02
    2002:	6b 83       	std	Y+3, r22	; 0x03
    Mem_Set((void     *)pmem,
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	4b 81       	ldd	r20, Y+3	; 0x03
    200c:	0e 94 0e 10 	call	0x201c	; 0x201c <Mem_Set>
            (CPU_INT08U)0,                                      /* See Note #2.                                         */
            (CPU_SIZE_T)size);
}
    2010:	23 96       	adiw	r28, 0x03	; 3
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	cd b7       	in	r28, 0x3d	; 61
    2022:	de b7       	in	r29, 0x3e	; 62
    2024:	2c 97       	sbiw	r28, 0x0c	; 12
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	89 87       	std	Y+9, r24	; 0x09
    202c:	9a 87       	std	Y+10, r25	; 0x0a
    202e:	6b 87       	std	Y+11, r22	; 0x0b
    2030:	4c 87       	std	Y+12, r20	; 0x0c
    CPU_INT08U  *pmem_08;
    CPU_INT08U   mem_align_modulo;
    CPU_INT08U   i;


    if (size < 1) {                                             /* See Note #1.                                         */
    2032:	8c 85       	ldd	r24, Y+12	; 0x0c
    2034:	88 23       	and	r24, r24
    2036:	09 f4       	brne	.+2      	; 0x203a <Mem_Set+0x1e>
    2038:	61 c0       	rjmp	.+194    	; 0x20fc <Mem_Set+0xe0>
        return;
    }
    if (pmem == (void *)0) {
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	09 f4       	brne	.+2      	; 0x2044 <Mem_Set+0x28>
    2042:	5e c0       	rjmp	.+188    	; 0x2100 <Mem_Set+0xe4>
        return;
    }


    data_align = 0;
    2044:	1a 82       	std	Y+2, r1	; 0x02
    for (i = 0; i < sizeof(CPU_ALIGN); i++) {                   /* Fill each data_align octet with data val.            */
    2046:	1f 82       	std	Y+7, r1	; 0x07
    2048:	08 c0       	rjmp	.+16     	; 0x205a <Mem_Set+0x3e>
        data_align <<=  DEF_OCTET_NBR_BITS;
    204a:	1a 82       	std	Y+2, r1	; 0x02
        data_align  |= (CPU_ALIGN)data_val;
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2050:	89 2b       	or	r24, r25
    2052:	8a 83       	std	Y+2, r24	; 0x02
        return;
    }


    data_align = 0;
    for (i = 0; i < sizeof(CPU_ALIGN); i++) {                   /* Fill each data_align octet with data val.            */
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8f 83       	std	Y+7, r24	; 0x07
    205a:	8f 81       	ldd	r24, Y+7	; 0x07
    205c:	88 23       	and	r24, r24
    205e:	a9 f3       	breq	.-22     	; 0x204a <Mem_Set+0x2e>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem         = (CPU_SIZE_T)size;
    2060:	8c 85       	ldd	r24, Y+12	; 0x0c
    2062:	89 83       	std	Y+1, r24	; 0x01
    mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */
    2064:	18 86       	std	Y+8, r1	; 0x08

    pmem_08 = (CPU_INT08U *)pmem;
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	9e 83       	std	Y+6, r25	; 0x06
    if (mem_align_modulo != 0) {                                /* If leading octets avail,                   ...       */
    206e:	88 85       	ldd	r24, Y+8	; 0x08
    2070:	88 23       	and	r24, r24
    2072:	c9 f0       	breq	.+50     	; 0x20a6 <Mem_Set+0x8a>
        i = mem_align_modulo;
    2074:	88 85       	ldd	r24, Y+8	; 0x08
    2076:	8f 83       	std	Y+7, r24	; 0x07
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
    2078:	10 c0       	rjmp	.+32     	; 0x209a <Mem_Set+0x7e>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2080:	fc 01       	movw	r30, r24
    2082:	20 83       	st	Z, r18
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	9e 83       	std	Y+6, r25	; 0x06
            size_rem -= sizeof(CPU_INT08U);
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	81 50       	subi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
            i++;
    2094:	8f 81       	ldd	r24, Y+7	; 0x07
    2096:	8f 5f       	subi	r24, 0xFF	; 255
    2098:	8f 83       	std	Y+7, r24	; 0x07
    mem_align_modulo = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));    /* See Note #3.                             */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_modulo != 0) {                                /* If leading octets avail,                   ...       */
        i = mem_align_modulo;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	88 23       	and	r24, r24
    209e:	19 f0       	breq	.+6      	; 0x20a6 <Mem_Set+0x8a>
    20a0:	8f 81       	ldd	r24, Y+7	; 0x07
    20a2:	88 23       	and	r24, r24
    20a4:	51 f3       	breq	.-44     	; 0x207a <Mem_Set+0x5e>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	8b 83       	std	Y+3, r24	; 0x03
    20ac:	9c 83       	std	Y+4, r25	; 0x04
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <Mem_Set+0xae>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	9c 81       	ldd	r25, Y+4	; 0x04
    20b4:	2a 81       	ldd	r18, Y+2	; 0x02
    20b6:	fc 01       	movw	r30, r24
    20b8:	20 83       	st	Z, r18
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	8b 83       	std	Y+3, r24	; 0x03
    20c2:	9c 83       	std	Y+4, r25	; 0x04
        size_rem    -= sizeof(CPU_ALIGN);
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	81 50       	subi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	88 23       	and	r24, r24
    20ce:	81 f7       	brne	.-32     	; 0x20b0 <Mem_Set+0x94>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	8d 83       	std	Y+5, r24	; 0x05
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <Mem_Set+0xd8>
       *pmem_08++   = data_val;
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	2b 85       	ldd	r18, Y+11	; 0x0b
    20e0:	fc 01       	movw	r30, r24
    20e2:	20 83       	st	Z, r18
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	01 96       	adiw	r24, 0x01	; 1
    20ea:	8d 83       	std	Y+5, r24	; 0x05
    20ec:	9e 83       	std	Y+6, r25	; 0x06
        size_rem   -= sizeof(CPU_INT08U);
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	81 50       	subi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
    20f6:	88 23       	and	r24, r24
    20f8:	81 f7       	brne	.-32     	; 0x20da <Mem_Set+0xbe>
    20fa:	03 c0       	rjmp	.+6      	; 0x2102 <Mem_Set+0xe6>
    CPU_INT08U   mem_align_modulo;
    CPU_INT08U   i;


    if (size < 1) {                                             /* See Note #1.                                         */
        return;
    20fc:	00 00       	nop
    20fe:	01 c0       	rjmp	.+2      	; 0x2102 <Mem_Set+0xe6>
    }
    if (pmem == (void *)0) {
        return;
    2100:	00 00       	nop
    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
    2102:	2c 96       	adiw	r28, 0x0c	; 12
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <Mem_Copy>:
     ((defined(uC_CFG_OPTIMIZE_ASM_EN)) && \
              (uC_CFG_OPTIMIZE_ASM_EN   != DEF_ENABLED)))
void  Mem_Copy (void        *pdest,
                void        *psrc,
                CPU_SIZE_T   size)
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	62 97       	sbiw	r28, 0x12	; 18
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	8e 87       	std	Y+14, r24	; 0x0e
    211e:	9f 87       	std	Y+15, r25	; 0x0f
    2120:	68 8b       	std	Y+16, r22	; 0x10
    2122:	79 8b       	std	Y+17, r23	; 0x11
    2124:	4a 8b       	std	Y+18, r20	; 0x12
    CPU_INT08U    mem_align_modulo_dest;
    CPU_INT08U    mem_align_modulo_src;
    CPU_BOOLEAN   mem_aligned;


    if (size < 1) {                                             /* See Note #1.                                         */
    2126:	8a 89       	ldd	r24, Y+18	; 0x12
    2128:	88 23       	and	r24, r24
    212a:	09 f4       	brne	.+2      	; 0x212e <Mem_Copy+0x20>
    212c:	88 c0       	rjmp	.+272    	; 0x223e <Mem_Copy+0x130>
        return;
    }
    if (pdest == (void *)0) {
    212e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2130:	9f 85       	ldd	r25, Y+15	; 0x0f
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	09 f4       	brne	.+2      	; 0x2138 <Mem_Copy+0x2a>
    2136:	85 c0       	rjmp	.+266    	; 0x2242 <Mem_Copy+0x134>
        return;
    }
    if (psrc  == (void *)0) {
    2138:	88 89       	ldd	r24, Y+16	; 0x10
    213a:	99 89       	ldd	r25, Y+17	; 0x11
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	09 f4       	brne	.+2      	; 0x2142 <Mem_Copy+0x34>
    2140:	82 c0       	rjmp	.+260    	; 0x2246 <Mem_Copy+0x138>
        return;
    }


    size_rem              = (CPU_SIZE_T  )size;
    2142:	8a 89       	ldd	r24, Y+18	; 0x12
    2144:	89 83       	std	Y+1, r24	; 0x01

    pmem_08_dest          = (CPU_INT08U *)pdest;
    2146:	8e 85       	ldd	r24, Y+14	; 0x0e
    2148:	9f 85       	ldd	r25, Y+15	; 0x0f
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	9f 83       	std	Y+7, r25	; 0x07
    pmem_08_src           = (CPU_INT08U *)psrc;
    214e:	88 89       	ldd	r24, Y+16	; 0x10
    2150:	99 89       	ldd	r25, Y+17	; 0x11
    2152:	88 87       	std	Y+8, r24	; 0x08
    2154:	99 87       	std	Y+9, r25	; 0x09
                                                                /* See Note #4.                                         */
    mem_align_modulo_dest = (CPU_INT08U  )((CPU_ADDR)pmem_08_dest % sizeof(CPU_ALIGN));
    2156:	1b 86       	std	Y+11, r1	; 0x0b
    mem_align_modulo_src  = (CPU_INT08U  )((CPU_ADDR)pmem_08_src  % sizeof(CPU_ALIGN));
    2158:	1c 86       	std	Y+12, r1	; 0x0c

    mem_aligned           = (mem_align_modulo_dest == mem_align_modulo_src) ? DEF_YES : DEF_NO;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	2b 85       	ldd	r18, Y+11	; 0x0b
    215e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2160:	29 17       	cp	r18, r25
    2162:	09 f0       	breq	.+2      	; 0x2166 <Mem_Copy+0x58>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	8d 87       	std	Y+13, r24	; 0x0d

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
    2168:	8d 85       	ldd	r24, Y+13	; 0x0d
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	09 f0       	breq	.+2      	; 0x2170 <Mem_Copy+0x62>
    216e:	63 c0       	rjmp	.+198    	; 0x2236 <Mem_Copy+0x128>
                                                                /* ... optimize copy for mem buf alignment.             */
        if (mem_align_modulo_dest != 0) {                       /* If leading octets avail,                   ...       */
    2170:	8b 85       	ldd	r24, Y+11	; 0x0b
    2172:	88 23       	and	r24, r24
    2174:	09 f1       	breq	.+66     	; 0x21b8 <Mem_Copy+0xaa>
            i = mem_align_modulo_dest;
    2176:	8b 85       	ldd	r24, Y+11	; 0x0b
    2178:	8a 87       	std	Y+10, r24	; 0x0a
            while ((size_rem   >  0) &&                         /* ... start mem buf copy with leading octets ...       */
    217a:	18 c0       	rjmp	.+48     	; 0x21ac <Mem_Copy+0x9e>
                   (i          <  sizeof(CPU_ALIGN ))) {        /* ... until next CPU_ALIGN word boundary.              */
               *pmem_08_dest++ = *pmem_08_src++;
    217c:	88 85       	ldd	r24, Y+8	; 0x08
    217e:	99 85       	ldd	r25, Y+9	; 0x09
    2180:	fc 01       	movw	r30, r24
    2182:	20 81       	ld	r18, Z
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	fc 01       	movw	r30, r24
    218a:	20 83       	st	Z, r18
    218c:	8e 81       	ldd	r24, Y+6	; 0x06
    218e:	9f 81       	ldd	r25, Y+7	; 0x07
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	8e 83       	std	Y+6, r24	; 0x06
    2194:	9f 83       	std	Y+7, r25	; 0x07
    2196:	88 85       	ldd	r24, Y+8	; 0x08
    2198:	99 85       	ldd	r25, Y+9	; 0x09
    219a:	01 96       	adiw	r24, 0x01	; 1
    219c:	88 87       	std	Y+8, r24	; 0x08
    219e:	99 87       	std	Y+9, r25	; 0x09
                size_rem      -=  sizeof(CPU_INT08U);
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
                i++;
    21a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a8:	8f 5f       	subi	r24, 0xFF	; 255
    21aa:	8a 87       	std	Y+10, r24	; 0x0a

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
                                                                /* ... optimize copy for mem buf alignment.             */
        if (mem_align_modulo_dest != 0) {                       /* If leading octets avail,                   ...       */
            i = mem_align_modulo_dest;
            while ((size_rem   >  0) &&                         /* ... start mem buf copy with leading octets ...       */
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	88 23       	and	r24, r24
    21b0:	19 f0       	breq	.+6      	; 0x21b8 <Mem_Copy+0xaa>
    21b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21b4:	88 23       	and	r24, r24
    21b6:	11 f3       	breq	.-60     	; 0x217c <Mem_Copy+0x6e>
                size_rem      -=  sizeof(CPU_INT08U);
                i++;
            }
        }

        pmem_align_dest = (CPU_ALIGN *)pmem_08_dest;            /* See Note #3a.                                        */
    21b8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ba:	9f 81       	ldd	r25, Y+7	; 0x07
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	9b 83       	std	Y+3, r25	; 0x03
        pmem_align_src  = (CPU_ALIGN *)pmem_08_src;
    21c0:	88 85       	ldd	r24, Y+8	; 0x08
    21c2:	99 85       	ldd	r25, Y+9	; 0x09
    21c4:	8c 83       	std	Y+4, r24	; 0x04
    21c6:	9d 83       	std	Y+5, r25	; 0x05
        while (size_rem      >=  sizeof(CPU_ALIGN)) {           /* While mem bufs aligned on CPU_ALIGN word boundaries, */
    21c8:	15 c0       	rjmp	.+42     	; 0x21f4 <Mem_Copy+0xe6>
           *pmem_align_dest++ = *pmem_align_src++;              /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	fc 01       	movw	r30, r24
    21d0:	20 81       	ld	r18, Z
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	20 83       	st	Z, r18
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	9b 81       	ldd	r25, Y+3	; 0x03
    21de:	01 96       	adiw	r24, 0x01	; 1
    21e0:	8a 83       	std	Y+2, r24	; 0x02
    21e2:	9b 83       	std	Y+3, r25	; 0x03
    21e4:	8c 81       	ldd	r24, Y+4	; 0x04
    21e6:	9d 81       	ldd	r25, Y+5	; 0x05
    21e8:	01 96       	adiw	r24, 0x01	; 1
    21ea:	8c 83       	std	Y+4, r24	; 0x04
    21ec:	9d 83       	std	Y+5, r25	; 0x05
            size_rem         -=  sizeof(CPU_ALIGN);
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	89 83       	std	Y+1, r24	; 0x01
            }
        }

        pmem_align_dest = (CPU_ALIGN *)pmem_08_dest;            /* See Note #3a.                                        */
        pmem_align_src  = (CPU_ALIGN *)pmem_08_src;
        while (size_rem      >=  sizeof(CPU_ALIGN)) {           /* While mem bufs aligned on CPU_ALIGN word boundaries, */
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	88 23       	and	r24, r24
    21f8:	41 f7       	brne	.-48     	; 0x21ca <Mem_Copy+0xbc>
           *pmem_align_dest++ = *pmem_align_src++;              /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
            size_rem         -=  sizeof(CPU_ALIGN);
        }

        pmem_08_dest = (CPU_INT08U *)pmem_align_dest;
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	8e 83       	std	Y+6, r24	; 0x06
    2200:	9f 83       	std	Y+7, r25	; 0x07
        pmem_08_src  = (CPU_INT08U *)pmem_align_src;
    2202:	8c 81       	ldd	r24, Y+4	; 0x04
    2204:	9d 81       	ldd	r25, Y+5	; 0x05
    2206:	88 87       	std	Y+8, r24	; 0x08
    2208:	99 87       	std	Y+9, r25	; 0x09
    }

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
    220a:	15 c0       	rjmp	.+42     	; 0x2236 <Mem_Copy+0x128>
       *pmem_08_dest++ = *pmem_08_src++;                        /* ... copy psrc to pdest by octets.                    */
    220c:	88 85       	ldd	r24, Y+8	; 0x08
    220e:	99 85       	ldd	r25, Y+9	; 0x09
    2210:	fc 01       	movw	r30, r24
    2212:	20 81       	ld	r18, Z
    2214:	8e 81       	ldd	r24, Y+6	; 0x06
    2216:	9f 81       	ldd	r25, Y+7	; 0x07
    2218:	fc 01       	movw	r30, r24
    221a:	20 83       	st	Z, r18
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	9f 81       	ldd	r25, Y+7	; 0x07
    2220:	01 96       	adiw	r24, 0x01	; 1
    2222:	8e 83       	std	Y+6, r24	; 0x06
    2224:	9f 83       	std	Y+7, r25	; 0x07
    2226:	88 85       	ldd	r24, Y+8	; 0x08
    2228:	99 85       	ldd	r25, Y+9	; 0x09
    222a:	01 96       	adiw	r24, 0x01	; 1
    222c:	88 87       	std	Y+8, r24	; 0x08
    222e:	99 87       	std	Y+9, r25	; 0x09
        size_rem      -=  sizeof(CPU_INT08U);
    2230:	89 81       	ldd	r24, Y+1	; 0x01
    2232:	81 50       	subi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01

        pmem_08_dest = (CPU_INT08U *)pmem_align_dest;
        pmem_08_src  = (CPU_INT08U *)pmem_align_src;
    }

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	88 23       	and	r24, r24
    223a:	41 f7       	brne	.-48     	; 0x220c <Mem_Copy+0xfe>
    223c:	05 c0       	rjmp	.+10     	; 0x2248 <Mem_Copy+0x13a>
    CPU_INT08U    mem_align_modulo_src;
    CPU_BOOLEAN   mem_aligned;


    if (size < 1) {                                             /* See Note #1.                                         */
        return;
    223e:	00 00       	nop
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <Mem_Copy+0x13a>
    }
    if (pdest == (void *)0) {
        return;
    2242:	00 00       	nop
    2244:	01 c0       	rjmp	.+2      	; 0x2248 <Mem_Copy+0x13a>
    }
    if (psrc  == (void *)0) {
        return;
    2246:	00 00       	nop

    while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
       *pmem_08_dest++ = *pmem_08_src++;                        /* ... copy psrc to pdest by octets.                    */
        size_rem      -=  sizeof(CPU_INT08U);
    }
}
    2248:	62 96       	adiw	r28, 0x12	; 18
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <Mem_Cmp>:
*/
/*$PAGE*/
CPU_BOOLEAN  Mem_Cmp (void        *p1_mem,
                      void        *p2_mem,
                      CPU_SIZE_T   size)
{
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	63 97       	sbiw	r28, 0x13	; 19
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	8f 87       	std	Y+15, r24	; 0x0f
    2264:	98 8b       	std	Y+16, r25	; 0x10
    2266:	69 8b       	std	Y+17, r22	; 0x11
    2268:	7a 8b       	std	Y+18, r23	; 0x12
    226a:	4b 8b       	std	Y+19, r20	; 0x13
    CPU_INT08U    mem_align_modulo_2;
    CPU_BOOLEAN   mem_aligned;
    CPU_BOOLEAN   mem_cmp;


    if (size < 1) {                                             /* See Note #1.                                         */
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	88 23       	and	r24, r24
    2270:	11 f4       	brne	.+4      	; 0x2276 <Mem_Cmp+0x22>
        return (DEF_YES);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	ac c0       	rjmp	.+344    	; 0x23ce <Mem_Cmp+0x17a>
    }
    if (p1_mem == (void *)0) {
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	98 89       	ldd	r25, Y+16	; 0x10
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	11 f4       	brne	.+4      	; 0x2282 <Mem_Cmp+0x2e>
        return (DEF_NO);
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	a6 c0       	rjmp	.+332    	; 0x23ce <Mem_Cmp+0x17a>
    }
    if (p2_mem == (void *)0) {
    2282:	89 89       	ldd	r24, Y+17	; 0x11
    2284:	9a 89       	ldd	r25, Y+18	; 0x12
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	11 f4       	brne	.+4      	; 0x228e <Mem_Cmp+0x3a>
        return (DEF_NO);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	a0 c0       	rjmp	.+320    	; 0x23ce <Mem_Cmp+0x17a>
    }


    mem_cmp            =  DEF_YES;                              /* Assume mem bufs are identical until cmp fails.       */
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    size_rem           =  size;
    2292:	8b 89       	ldd	r24, Y+19	; 0x13
    2294:	89 83       	std	Y+1, r24	; 0x01
                                                                /* Start @ end of mem bufs (see Note #2).               */
    p1_mem_08          = (CPU_INT08U *)p1_mem + size;
    2296:	2f 85       	ldd	r18, Y+15	; 0x0f
    2298:	38 89       	ldd	r19, Y+16	; 0x10
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	88 2f       	mov	r24, r24
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	8e 83       	std	Y+6, r24	; 0x06
    22a6:	9f 83       	std	Y+7, r25	; 0x07
    p2_mem_08          = (CPU_INT08U *)p2_mem + size;
    22a8:	29 89       	ldd	r18, Y+17	; 0x11
    22aa:	3a 89       	ldd	r19, Y+18	; 0x12
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	88 87       	std	Y+8, r24	; 0x08
    22b8:	99 87       	std	Y+9, r25	; 0x09
                                                                /* See Note #4.                                         */
    mem_align_modulo_1 = (CPU_INT08U  )((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
    22ba:	1c 86       	std	Y+12, r1	; 0x0c
    mem_align_modulo_2 = (CPU_INT08U  )((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
    22bc:	1d 86       	std	Y+13, r1	; 0x0d

    mem_aligned        = (mem_align_modulo_1 == mem_align_modulo_2) ? DEF_YES : DEF_NO;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c2:	9d 85       	ldd	r25, Y+13	; 0x0d
    22c4:	29 17       	cp	r18, r25
    22c6:	09 f0       	breq	.+2      	; 0x22ca <Mem_Cmp+0x76>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	8e 87       	std	Y+14, r24	; 0x0e

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
    22cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <Mem_Cmp+0x80>
    22d2:	76 c0       	rjmp	.+236    	; 0x23c0 <Mem_Cmp+0x16c>
                                                                /* ... optimize cmp for mem buf alignment.              */
        if (mem_align_modulo_1 != 0) {                          /* If trailing octets avail,                  ...       */
    22d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    22d6:	88 23       	and	r24, r24
    22d8:	39 f1       	breq	.+78     	; 0x2328 <Mem_Cmp+0xd4>
            i = mem_align_modulo_1;
    22da:	8c 85       	ldd	r24, Y+12	; 0x0c
    22dc:	8a 87       	std	Y+10, r24	; 0x0a
            while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
    22de:	1b c0       	rjmp	.+54     	; 0x2316 <Mem_Cmp+0xc2>
                   (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
                   (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
                p1_mem_08--;
    22e0:	8e 81       	ldd	r24, Y+6	; 0x06
    22e2:	9f 81       	ldd	r25, Y+7	; 0x07
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	8e 83       	std	Y+6, r24	; 0x06
    22e8:	9f 83       	std	Y+7, r25	; 0x07
                p2_mem_08--;
    22ea:	88 85       	ldd	r24, Y+8	; 0x08
    22ec:	99 85       	ldd	r25, Y+9	; 0x09
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	88 87       	std	Y+8, r24	; 0x08
    22f2:	99 87       	std	Y+9, r25	; 0x09
                if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
    22f4:	8e 81       	ldd	r24, Y+6	; 0x06
    22f6:	9f 81       	ldd	r25, Y+7	; 0x07
    22f8:	fc 01       	movw	r30, r24
    22fa:	20 81       	ld	r18, Z
    22fc:	88 85       	ldd	r24, Y+8	; 0x08
    22fe:	99 85       	ldd	r25, Y+9	; 0x09
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	28 17       	cp	r18, r24
    2306:	09 f0       	breq	.+2      	; 0x230a <Mem_Cmp+0xb6>
                     mem_cmp = DEF_NO;
    2308:	1b 86       	std	Y+11, r1	; 0x0b
                }
                size_rem -= sizeof(CPU_INT08U);
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	81 50       	subi	r24, 0x01	; 1
    230e:	89 83       	std	Y+1, r24	; 0x01
                i--;
    2310:	8a 85       	ldd	r24, Y+10	; 0x0a
    2312:	81 50       	subi	r24, 0x01	; 1
    2314:	8a 87       	std	Y+10, r24	; 0x0a

    if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
                                                                /* ... optimize cmp for mem buf alignment.              */
        if (mem_align_modulo_1 != 0) {                          /* If trailing octets avail,                  ...       */
            i = mem_align_modulo_1;
            while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
    2316:	8b 85       	ldd	r24, Y+11	; 0x0b
    2318:	81 30       	cpi	r24, 0x01	; 1
    231a:	31 f4       	brne	.+12     	; 0x2328 <Mem_Cmp+0xd4>
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	88 23       	and	r24, r24
    2320:	19 f0       	breq	.+6      	; 0x2328 <Mem_Cmp+0xd4>
                   (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
    2322:	8a 85       	ldd	r24, Y+10	; 0x0a
    2324:	88 23       	and	r24, r24
    2326:	e1 f6       	brne	.-72     	; 0x22e0 <Mem_Cmp+0x8c>
                size_rem -= sizeof(CPU_INT08U);
                i--;
            }
        }

        if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
    2328:	8b 85       	ldd	r24, Y+11	; 0x0b
    232a:	81 30       	cpi	r24, 0x01	; 1
    232c:	09 f0       	breq	.+2      	; 0x2330 <Mem_Cmp+0xdc>
    232e:	48 c0       	rjmp	.+144    	; 0x23c0 <Mem_Cmp+0x16c>
            p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
    2330:	8e 81       	ldd	r24, Y+6	; 0x06
    2332:	9f 81       	ldd	r25, Y+7	; 0x07
    2334:	8a 83       	std	Y+2, r24	; 0x02
    2336:	9b 83       	std	Y+3, r25	; 0x03
            p2_mem_align = (CPU_ALIGN *)p2_mem_08;
    2338:	88 85       	ldd	r24, Y+8	; 0x08
    233a:	99 85       	ldd	r25, Y+9	; 0x09
    233c:	8c 83       	std	Y+4, r24	; 0x04
    233e:	9d 83       	std	Y+5, r25	; 0x05

            while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
    2340:	18 c0       	rjmp	.+48     	; 0x2372 <Mem_Cmp+0x11e>
                   (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
                p1_mem_align--;
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	8a 83       	std	Y+2, r24	; 0x02
    234a:	9b 83       	std	Y+3, r25	; 0x03
                p2_mem_align--;
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	8c 83       	std	Y+4, r24	; 0x04
    2354:	9d 83       	std	Y+5, r25	; 0x05
                if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	fc 01       	movw	r30, r24
    235c:	20 81       	ld	r18, Z
    235e:	8c 81       	ldd	r24, Y+4	; 0x04
    2360:	9d 81       	ldd	r25, Y+5	; 0x05
    2362:	fc 01       	movw	r30, r24
    2364:	80 81       	ld	r24, Z
    2366:	28 17       	cp	r18, r24
    2368:	09 f0       	breq	.+2      	; 0x236c <Mem_Cmp+0x118>
                     mem_cmp = DEF_NO;
    236a:	1b 86       	std	Y+11, r1	; 0x0b
                }
                size_rem -= sizeof(CPU_ALIGN);
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	81 50       	subi	r24, 0x01	; 1
    2370:	89 83       	std	Y+1, r24	; 0x01

        if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
            p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
            p2_mem_align = (CPU_ALIGN *)p2_mem_08;

            while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
    2372:	8b 85       	ldd	r24, Y+11	; 0x0b
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	19 f4       	brne	.+6      	; 0x237e <Mem_Cmp+0x12a>
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	88 23       	and	r24, r24
    237c:	11 f7       	brne	.-60     	; 0x2342 <Mem_Cmp+0xee>
                     mem_cmp = DEF_NO;
                }
                size_rem -= sizeof(CPU_ALIGN);
            }

            p1_mem_08 = (CPU_INT08U *)p1_mem_align;
    237e:	8a 81       	ldd	r24, Y+2	; 0x02
    2380:	9b 81       	ldd	r25, Y+3	; 0x03
    2382:	8e 83       	std	Y+6, r24	; 0x06
    2384:	9f 83       	std	Y+7, r25	; 0x07
            p2_mem_08 = (CPU_INT08U *)p2_mem_align;
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	88 87       	std	Y+8, r24	; 0x08
    238c:	99 87       	std	Y+9, r25	; 0x09
        }
    }

    while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
    238e:	18 c0       	rjmp	.+48     	; 0x23c0 <Mem_Cmp+0x16c>
           (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
        p1_mem_08--;
    2390:	8e 81       	ldd	r24, Y+6	; 0x06
    2392:	9f 81       	ldd	r25, Y+7	; 0x07
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	8e 83       	std	Y+6, r24	; 0x06
    2398:	9f 83       	std	Y+7, r25	; 0x07
        p2_mem_08--;
    239a:	88 85       	ldd	r24, Y+8	; 0x08
    239c:	99 85       	ldd	r25, Y+9	; 0x09
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	88 87       	std	Y+8, r24	; 0x08
    23a2:	99 87       	std	Y+9, r25	; 0x09
        if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	fc 01       	movw	r30, r24
    23aa:	20 81       	ld	r18, Z
    23ac:	88 85       	ldd	r24, Y+8	; 0x08
    23ae:	99 85       	ldd	r25, Y+9	; 0x09
    23b0:	fc 01       	movw	r30, r24
    23b2:	80 81       	ld	r24, Z
    23b4:	28 17       	cp	r18, r24
    23b6:	09 f0       	breq	.+2      	; 0x23ba <Mem_Cmp+0x166>
             mem_cmp = DEF_NO;
    23b8:	1b 86       	std	Y+11, r1	; 0x0b
        }
        size_rem -= sizeof(CPU_INT08U);
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	81 50       	subi	r24, 0x01	; 1
    23be:	89 83       	std	Y+1, r24	; 0x01
            p1_mem_08 = (CPU_INT08U *)p1_mem_align;
            p2_mem_08 = (CPU_INT08U *)p2_mem_align;
        }
    }

    while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
    23c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    23c2:	81 30       	cpi	r24, 0x01	; 1
    23c4:	19 f4       	brne	.+6      	; 0x23cc <Mem_Cmp+0x178>
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	88 23       	and	r24, r24
    23ca:	11 f7       	brne	.-60     	; 0x2390 <Mem_Cmp+0x13c>
             mem_cmp = DEF_NO;
        }
        size_rem -= sizeof(CPU_INT08U);
    }

    return (mem_cmp);
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    23ce:	63 96       	adiw	r28, 0x13	; 19
    23d0:	cd bf       	out	0x3d, r28	; 61
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <Str_Len>:
*                           the NULL character.
*********************************************************************************************************
*/

CPU_SIZE_T  Str_Len (CPU_CHAR  *pstr)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <Str_Len+0x6>
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	8a 83       	std	Y+2, r24	; 0x02
    23e6:	9b 83       	std	Y+3, r25	; 0x03
    CPU_SIZE_T  len;


    len = 0;
    23e8:	19 82       	std	Y+1, r1	; 0x01
    while (( pstr != (CPU_CHAR *)0) &&                          /* Calc str len until NULL ptr (see Note #2a) ...       */
    23ea:	08 c0       	rjmp	.+16     	; 0x23fc <Str_Len+0x22>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found      (see Note #2b).          */
        len++;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	8f 5f       	subi	r24, 0xFF	; 255
    23f0:	89 83       	std	Y+1, r24	; 0x01
        pstr++;
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	01 96       	adiw	r24, 0x01	; 1
    23f8:	8a 83       	std	Y+2, r24	; 0x02
    23fa:	9b 83       	std	Y+3, r25	; 0x03
{
    CPU_SIZE_T  len;


    len = 0;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Calc str len until NULL ptr (see Note #2a) ...       */
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	31 f0       	breq	.+12     	; 0x2410 <Str_Len+0x36>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found      (see Note #2b).          */
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	9b 81       	ldd	r25, Y+3	; 0x03
    2408:	fc 01       	movw	r30, r24
    240a:	80 81       	ld	r24, Z
{
    CPU_SIZE_T  len;


    len = 0;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Calc str len until NULL ptr (see Note #2a) ...       */
    240c:	88 23       	and	r24, r24
    240e:	71 f7       	brne	.-36     	; 0x23ec <Str_Len+0x12>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found      (see Note #2b).          */
        len++;
        pstr++;
    }

    return (len);
    2410:	89 81       	ldd	r24, Y+1	; 0x01
}
    2412:	23 96       	adiw	r28, 0x03	; 3
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <Str_Copy>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Copy (CPU_CHAR  *pdest,
                     CPU_CHAR  *psrc)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	28 97       	sbiw	r28, 0x08	; 8
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	6f 83       	std	Y+7, r22	; 0x07
    2432:	78 87       	std	Y+8, r23	; 0x08
    CPU_CHAR  *pstr;
    CPU_CHAR  *pstr_next;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
    if (pdest == (CPU_CHAR *)0) {
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	19 f4       	brne	.+6      	; 0x2442 <Str_Copy+0x24>
        return  ((CPU_CHAR *)0);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	40 c0       	rjmp	.+128    	; 0x24c2 <Str_Copy+0xa4>
    }
    if (psrc  == (CPU_CHAR *)0) {
    2442:	8f 81       	ldd	r24, Y+7	; 0x07
    2444:	98 85       	ldd	r25, Y+8	; 0x08
    2446:	00 97       	sbiw	r24, 0x00	; 0
    2448:	19 f4       	brne	.+6      	; 0x2450 <Str_Copy+0x32>
        return  ((CPU_CHAR *)0);
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	39 c0       	rjmp	.+114    	; 0x24c2 <Str_Copy+0xa4>
    }


    pstr      = pdest;
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	9e 81       	ldd	r25, Y+6	; 0x06
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	9a 83       	std	Y+2, r25	; 0x02
    pstr_next = pstr;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    pstr_next++;
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	01 96       	adiw	r24, 0x01	; 1
    2466:	8b 83       	std	Y+3, r24	; 0x03
    2468:	9c 83       	std	Y+4, r25	; 0x04
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s) (see Note #2b) ...        */
    246a:	17 c0       	rjmp	.+46     	; 0x249a <Str_Copy+0x7c>
           ( psrc      != (CPU_CHAR *)0) &&
           (*psrc      != (CPU_CHAR  )0)) {                     /* ... or NULL char found     (see Note #2c).           */
       *pstr = *psrc;
    246c:	8f 81       	ldd	r24, Y+7	; 0x07
    246e:	98 85       	ldd	r25, Y+8	; 0x08
    2470:	fc 01       	movw	r30, r24
    2472:	20 81       	ld	r18, Z
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	9a 81       	ldd	r25, Y+2	; 0x02
    2478:	fc 01       	movw	r30, r24
    247a:	20 83       	st	Z, r18
        pstr++;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	9a 83       	std	Y+2, r25	; 0x02
        pstr_next++;
    2486:	8b 81       	ldd	r24, Y+3	; 0x03
    2488:	9c 81       	ldd	r25, Y+4	; 0x04
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	9c 83       	std	Y+4, r25	; 0x04
        psrc++;
    2490:	8f 81       	ldd	r24, Y+7	; 0x07
    2492:	98 85       	ldd	r25, Y+8	; 0x08
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	8f 83       	std	Y+7, r24	; 0x07
    2498:	98 87       	std	Y+8, r25	; 0x08


    pstr      = pdest;
    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s) (see Note #2b) ...        */
    249a:	8b 81       	ldd	r24, Y+3	; 0x03
    249c:	9c 81       	ldd	r25, Y+4	; 0x04
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	51 f0       	breq	.+20     	; 0x24b6 <Str_Copy+0x98>
    24a2:	8f 81       	ldd	r24, Y+7	; 0x07
    24a4:	98 85       	ldd	r25, Y+8	; 0x08
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	31 f0       	breq	.+12     	; 0x24b6 <Str_Copy+0x98>
           ( psrc      != (CPU_CHAR *)0) &&
           (*psrc      != (CPU_CHAR  )0)) {                     /* ... or NULL char found     (see Note #2c).           */
    24aa:	8f 81       	ldd	r24, Y+7	; 0x07
    24ac:	98 85       	ldd	r25, Y+8	; 0x08
    24ae:	fc 01       	movw	r30, r24
    24b0:	80 81       	ld	r24, Z

    pstr      = pdest;
    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s) (see Note #2b) ...        */
           ( psrc      != (CPU_CHAR *)0) &&
    24b2:	88 23       	and	r24, r24
    24b4:	d9 f6       	brne	.-74     	; 0x246c <Str_Copy+0x4e>
        pstr++;
        pstr_next++;
        psrc++;
    }

   *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	9a 81       	ldd	r25, Y+2	; 0x02
    24ba:	fc 01       	movw	r30, r24
    24bc:	10 82       	st	Z, r1


    return (pdest);
    24be:	8d 81       	ldd	r24, Y+5	; 0x05
    24c0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    24c2:	28 96       	adiw	r28, 0x08	; 8
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <Str_Copy_N>:
*/

CPU_CHAR  *Str_Copy_N (CPU_CHAR    *pdest,
                       CPU_CHAR    *psrc,
                       CPU_SIZE_T   len_max)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	2a 97       	sbiw	r28, 0x0a	; 10
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	8e 83       	std	Y+6, r24	; 0x06
    24de:	9f 83       	std	Y+7, r25	; 0x07
    24e0:	68 87       	std	Y+8, r22	; 0x08
    24e2:	79 87       	std	Y+9, r23	; 0x09
    24e4:	4a 87       	std	Y+10, r20	; 0x0a
    CPU_CHAR    *pstr;
    CPU_CHAR    *pstr_next;
    CPU_SIZE_T   len_copy;

                                                                /* Rtn NULL if str ptr(s) NULL      (see Note #2a).     */
    if (pdest == (CPU_CHAR *)0) {
    24e6:	8e 81       	ldd	r24, Y+6	; 0x06
    24e8:	9f 81       	ldd	r25, Y+7	; 0x07
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	19 f4       	brne	.+6      	; 0x24f4 <Str_Copy_N+0x26>
        return  ((CPU_CHAR *)0);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	4e c0       	rjmp	.+156    	; 0x2590 <Str_Copy_N+0xc2>
    }
    if (psrc  == (CPU_CHAR *)0) {
    24f4:	88 85       	ldd	r24, Y+8	; 0x08
    24f6:	99 85       	ldd	r25, Y+9	; 0x09
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	19 f4       	brne	.+6      	; 0x2502 <Str_Copy_N+0x34>
        return  ((CPU_CHAR *)0);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	47 c0       	rjmp	.+142    	; 0x2590 <Str_Copy_N+0xc2>
    }

    if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if copy len equals zero (see Note #2d).     */
    2502:	8a 85       	ldd	r24, Y+10	; 0x0a
    2504:	88 23       	and	r24, r24
    2506:	19 f4       	brne	.+6      	; 0x250e <Str_Copy_N+0x40>
        return  ((CPU_CHAR *)0);
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	41 c0       	rjmp	.+130    	; 0x2590 <Str_Copy_N+0xc2>
    }


    pstr      = pdest;
    250e:	8e 81       	ldd	r24, Y+6	; 0x06
    2510:	9f 81       	ldd	r25, Y+7	; 0x07
    2512:	89 83       	std	Y+1, r24	; 0x01
    2514:	9a 83       	std	Y+2, r25	; 0x02
    pstr_next = pstr;
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	8b 83       	std	Y+3, r24	; 0x03
    251c:	9c 83       	std	Y+4, r25	; 0x04
    pstr_next++;
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	8b 83       	std	Y+3, r24	; 0x03
    2526:	9c 83       	std	Y+4, r25	; 0x04
    len_copy  = 0;
    2528:	1d 82       	std	Y+5, r1	; 0x05

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s)  (see Note #2b)  ...      */
    252a:	1a c0       	rjmp	.+52     	; 0x2560 <Str_Copy_N+0x92>
           ( psrc      != (CPU_CHAR *)0) &&
           (*psrc      != (CPU_CHAR  )0) &&                     /* ... or NULL char found      (see Note #2c); ...      */
           ( len_copy  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars copied (see Note #2d).          */
       *pstr = *psrc;
    252c:	88 85       	ldd	r24, Y+8	; 0x08
    252e:	99 85       	ldd	r25, Y+9	; 0x09
    2530:	fc 01       	movw	r30, r24
    2532:	20 81       	ld	r18, Z
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	9a 81       	ldd	r25, Y+2	; 0x02
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
        pstr++;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	89 83       	std	Y+1, r24	; 0x01
    2544:	9a 83       	std	Y+2, r25	; 0x02
        pstr_next++;
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	01 96       	adiw	r24, 0x01	; 1
    254c:	8b 83       	std	Y+3, r24	; 0x03
    254e:	9c 83       	std	Y+4, r25	; 0x04
        psrc++;
    2550:	88 85       	ldd	r24, Y+8	; 0x08
    2552:	99 85       	ldd	r25, Y+9	; 0x09
    2554:	01 96       	adiw	r24, 0x01	; 1
    2556:	88 87       	std	Y+8, r24	; 0x08
    2558:	99 87       	std	Y+9, r25	; 0x09
        len_copy++;
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8d 83       	std	Y+5, r24	; 0x05
    pstr      = pdest;
    pstr_next = pstr;
    pstr_next++;
    len_copy  = 0;

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s)  (see Note #2b)  ...      */
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	71 f0       	breq	.+28     	; 0x2584 <Str_Copy_N+0xb6>
    2568:	88 85       	ldd	r24, Y+8	; 0x08
    256a:	99 85       	ldd	r25, Y+9	; 0x09
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	51 f0       	breq	.+20     	; 0x2584 <Str_Copy_N+0xb6>
           ( psrc      != (CPU_CHAR *)0) &&
           (*psrc      != (CPU_CHAR  )0) &&                     /* ... or NULL char found      (see Note #2c); ...      */
    2570:	88 85       	ldd	r24, Y+8	; 0x08
    2572:	99 85       	ldd	r25, Y+9	; 0x09
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    pstr_next = pstr;
    pstr_next++;
    len_copy  = 0;

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Copy str until NULL ptr(s)  (see Note #2b)  ...      */
           ( psrc      != (CPU_CHAR *)0) &&
    2578:	88 23       	and	r24, r24
    257a:	21 f0       	breq	.+8      	; 0x2584 <Str_Copy_N+0xb6>
           (*psrc      != (CPU_CHAR  )0) &&                     /* ... or NULL char found      (see Note #2c); ...      */
    257c:	9d 81       	ldd	r25, Y+5	; 0x05
    257e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2580:	98 17       	cp	r25, r24
    2582:	a0 f2       	brcs	.-88     	; 0x252c <Str_Copy_N+0x5e>
        pstr_next++;
        psrc++;
        len_copy++;
    }

   *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2b2).                    */
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	fc 01       	movw	r30, r24
    258a:	10 82       	st	Z, r1


    return (pdest);
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	9f 81       	ldd	r25, Y+7	; 0x07
}
    2590:	2a 96       	adiw	r28, 0x0a	; 10
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	cf 91       	pop	r28
    2598:	df 91       	pop	r29
    259a:	08 95       	ret

0000259c <Str_Cat>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Cat (CPU_CHAR  *pdest,
                    CPU_CHAR  *pstr_cat)
{
    259c:	df 93       	push	r29
    259e:	cf 93       	push	r28
    25a0:	cd b7       	in	r28, 0x3d	; 61
    25a2:	de b7       	in	r29, 0x3e	; 62
    25a4:	28 97       	sbiw	r28, 0x08	; 8
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	8d 83       	std	Y+5, r24	; 0x05
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	6f 83       	std	Y+7, r22	; 0x07
    25b0:	78 87       	std	Y+8, r23	; 0x08
    CPU_CHAR  *pstr;
    CPU_CHAR  *pstr_next;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
    if (pdest == (CPU_CHAR *)0) {
    25b2:	8d 81       	ldd	r24, Y+5	; 0x05
    25b4:	9e 81       	ldd	r25, Y+6	; 0x06
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	19 f4       	brne	.+6      	; 0x25c0 <Str_Cat+0x24>
        return  ((CPU_CHAR *)0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	57 c0       	rjmp	.+174    	; 0x266e <Str_Cat+0xd2>
    }
    if (pstr_cat == (CPU_CHAR *)0) {
    25c0:	8f 81       	ldd	r24, Y+7	; 0x07
    25c2:	98 85       	ldd	r25, Y+8	; 0x08
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	19 f4       	brne	.+6      	; 0x25ce <Str_Cat+0x32>
        return  ((CPU_CHAR *)0);
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	50 c0       	rjmp	.+160    	; 0x266e <Str_Cat+0xd2>
    }


    pstr = pdest;
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	9a 83       	std	Y+2, r25	; 0x02
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    25d6:	05 c0       	rjmp	.+10     	; 0x25e2 <Str_Cat+0x46>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
        pstr++;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	01 96       	adiw	r24, 0x01	; 1
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	9a 83       	std	Y+2, r25	; 0x02
        return  ((CPU_CHAR *)0);
    }


    pstr = pdest;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	31 f0       	breq	.+12     	; 0x25f6 <Str_Cat+0x5a>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	fc 01       	movw	r30, r24
    25f0:	80 81       	ld	r24, Z
        return  ((CPU_CHAR *)0);
    }


    pstr = pdest;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    25f2:	88 23       	and	r24, r24
    25f4:	89 f7       	brne	.-30     	; 0x25d8 <Str_Cat+0x3c>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
        pstr++;
    }
    if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	9a 81       	ldd	r25, Y+2	; 0x02
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	19 f4       	brne	.+6      	; 0x2604 <Str_Cat+0x68>
        return ((CPU_CHAR *)0);
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	35 c0       	rjmp	.+106    	; 0x266e <Str_Cat+0xd2>
    }

    pstr_next = pstr;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	9a 81       	ldd	r25, Y+2	; 0x02
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	9c 83       	std	Y+4, r25	; 0x04
    pstr_next++;
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	9c 83       	std	Y+4, r25	; 0x04
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s) (see Note #2c) ...         */
    2616:	17 c0       	rjmp	.+46     	; 0x2646 <Str_Cat+0xaa>
           ( pstr_cat  != (CPU_CHAR *)0) &&
           (*pstr_cat  != (CPU_CHAR  )0)) {                     /* ... or NULL char found    (see Note #2d).            */
       *pstr = *pstr_cat;
    2618:	8f 81       	ldd	r24, Y+7	; 0x07
    261a:	98 85       	ldd	r25, Y+8	; 0x08
    261c:	fc 01       	movw	r30, r24
    261e:	20 81       	ld	r18, Z
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	fc 01       	movw	r30, r24
    2626:	20 83       	st	Z, r18
        pstr++;
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	9a 81       	ldd	r25, Y+2	; 0x02
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	9a 83       	std	Y+2, r25	; 0x02
        pstr_next++;
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	9c 83       	std	Y+4, r25	; 0x04
        pstr_cat++;
    263c:	8f 81       	ldd	r24, Y+7	; 0x07
    263e:	98 85       	ldd	r25, Y+8	; 0x08
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	8f 83       	std	Y+7, r24	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
        return ((CPU_CHAR *)0);
    }

    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s) (see Note #2c) ...         */
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	51 f0       	breq	.+20     	; 0x2662 <Str_Cat+0xc6>
    264e:	8f 81       	ldd	r24, Y+7	; 0x07
    2650:	98 85       	ldd	r25, Y+8	; 0x08
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	31 f0       	breq	.+12     	; 0x2662 <Str_Cat+0xc6>
           ( pstr_cat  != (CPU_CHAR *)0) &&
           (*pstr_cat  != (CPU_CHAR  )0)) {                     /* ... or NULL char found    (see Note #2d).            */
    2656:	8f 81       	ldd	r24, Y+7	; 0x07
    2658:	98 85       	ldd	r25, Y+8	; 0x08
    265a:	fc 01       	movw	r30, r24
    265c:	80 81       	ld	r24, Z
    }

    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s) (see Note #2c) ...         */
           ( pstr_cat  != (CPU_CHAR *)0) &&
    265e:	88 23       	and	r24, r24
    2660:	d9 f6       	brne	.-74     	; 0x2618 <Str_Cat+0x7c>
        pstr++;
        pstr_next++;
        pstr_cat++;
    }

   *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	fc 01       	movw	r30, r24
    2668:	10 82       	st	Z, r1


    return (pdest);
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
}
    266e:	28 96       	adiw	r28, 0x08	; 8
    2670:	cd bf       	out	0x3d, r28	; 61
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <Str_Cat_N>:
*/
/*$PAGE*/
CPU_CHAR  *Str_Cat_N (CPU_CHAR    *pdest,
                      CPU_CHAR    *pstr_cat,
                      CPU_SIZE_T   len_max)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
    2682:	2a 97       	sbiw	r28, 0x0a	; 10
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	8e 83       	std	Y+6, r24	; 0x06
    268a:	9f 83       	std	Y+7, r25	; 0x07
    268c:	68 87       	std	Y+8, r22	; 0x08
    268e:	79 87       	std	Y+9, r23	; 0x09
    2690:	4a 87       	std	Y+10, r20	; 0x0a
    CPU_CHAR    *pstr;
    CPU_CHAR    *pstr_next;
    CPU_SIZE_T   len_cat;

                                                                /* Rtn NULL if str ptr(s) NULL     (see Note #2a).      */
    if (pdest == (CPU_CHAR *)0) {
    2692:	8e 81       	ldd	r24, Y+6	; 0x06
    2694:	9f 81       	ldd	r25, Y+7	; 0x07
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	19 f4       	brne	.+6      	; 0x26a0 <Str_Cat_N+0x26>
        return  ((CPU_CHAR *)0);
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	65 c0       	rjmp	.+202    	; 0x276a <Str_Cat_N+0xf0>
    }
    if (pstr_cat == (CPU_CHAR *)0) {
    26a0:	88 85       	ldd	r24, Y+8	; 0x08
    26a2:	99 85       	ldd	r25, Y+9	; 0x09
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	19 f4       	brne	.+6      	; 0x26ae <Str_Cat_N+0x34>
        return  ((CPU_CHAR *)0);
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	5e c0       	rjmp	.+188    	; 0x276a <Str_Cat_N+0xf0>
    }

    if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if cat len equals zero (see Note #2e).      */
    26ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    26b0:	88 23       	and	r24, r24
    26b2:	19 f4       	brne	.+6      	; 0x26ba <Str_Cat_N+0x40>
        return  ((CPU_CHAR *)0);
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	58 c0       	rjmp	.+176    	; 0x276a <Str_Cat_N+0xf0>
    }


    pstr = pdest;
    26ba:	8e 81       	ldd	r24, Y+6	; 0x06
    26bc:	9f 81       	ldd	r25, Y+7	; 0x07
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <Str_Cat_N+0x54>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
        pstr++;
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	9a 81       	ldd	r25, Y+2	; 0x02
    26c8:	01 96       	adiw	r24, 0x01	; 1
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	9a 83       	std	Y+2, r25	; 0x02
        return  ((CPU_CHAR *)0);
    }


    pstr = pdest;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	9a 81       	ldd	r25, Y+2	; 0x02
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	31 f0       	breq	.+12     	; 0x26e2 <Str_Cat_N+0x68>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	fc 01       	movw	r30, r24
    26dc:	80 81       	ld	r24, Z
        return  ((CPU_CHAR *)0);
    }


    pstr = pdest;
    while (( pstr != (CPU_CHAR *)0) &&                          /* Adv to end of cur dest str until NULL ptr ...        */
    26de:	88 23       	and	r24, r24
    26e0:	89 f7       	brne	.-30     	; 0x26c4 <Str_Cat_N+0x4a>
           (*pstr != (CPU_CHAR  )0)) {                          /* ... or NULL char found..                             */
        pstr++;
    }
    if (pstr == (CPU_CHAR *)0) {                                /* If NULL str overrun, rtn NULL (see Note #2b).        */
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	9a 81       	ldd	r25, Y+2	; 0x02
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	19 f4       	brne	.+6      	; 0x26f0 <Str_Cat_N+0x76>
        return ((CPU_CHAR *)0);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	3d c0       	rjmp	.+122    	; 0x276a <Str_Cat_N+0xf0>
    }

    pstr_next = pstr;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	9a 81       	ldd	r25, Y+2	; 0x02
    26f4:	8b 83       	std	Y+3, r24	; 0x03
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    pstr_next++;
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	01 96       	adiw	r24, 0x01	; 1
    26fe:	8b 83       	std	Y+3, r24	; 0x03
    2700:	9c 83       	std	Y+4, r25	; 0x04
    len_cat   = 0;
    2702:	1d 82       	std	Y+5, r1	; 0x05

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s)  (see Note #2c)  ...       */
    2704:	1a c0       	rjmp	.+52     	; 0x273a <Str_Cat_N+0xc0>
           ( pstr_cat  != (CPU_CHAR *)0) &&
           (*pstr_cat  != (CPU_CHAR  )0) &&                     /* ... or NULL char found     (see Note #2d); ...       */
           ( len_cat   <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars cat'd (see Note #2d).           */
       *pstr = *pstr_cat;
    2706:	88 85       	ldd	r24, Y+8	; 0x08
    2708:	99 85       	ldd	r25, Y+9	; 0x09
    270a:	fc 01       	movw	r30, r24
    270c:	20 81       	ld	r18, Z
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	fc 01       	movw	r30, r24
    2714:	20 83       	st	Z, r18
        pstr++;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	9a 83       	std	Y+2, r25	; 0x02
        pstr_next++;
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	8b 83       	std	Y+3, r24	; 0x03
    2728:	9c 83       	std	Y+4, r25	; 0x04
        pstr_cat++;
    272a:	88 85       	ldd	r24, Y+8	; 0x08
    272c:	99 85       	ldd	r25, Y+9	; 0x09
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	88 87       	std	Y+8, r24	; 0x08
    2732:	99 87       	std	Y+9, r25	; 0x09
        len_cat++;
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	8f 5f       	subi	r24, 0xFF	; 255
    2738:	8d 83       	std	Y+5, r24	; 0x05

    pstr_next = pstr;
    pstr_next++;
    len_cat   = 0;

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s)  (see Note #2c)  ...       */
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	71 f0       	breq	.+28     	; 0x275e <Str_Cat_N+0xe4>
    2742:	88 85       	ldd	r24, Y+8	; 0x08
    2744:	99 85       	ldd	r25, Y+9	; 0x09
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	51 f0       	breq	.+20     	; 0x275e <Str_Cat_N+0xe4>
           ( pstr_cat  != (CPU_CHAR *)0) &&
           (*pstr_cat  != (CPU_CHAR  )0) &&                     /* ... or NULL char found     (see Note #2d); ...       */
    274a:	88 85       	ldd	r24, Y+8	; 0x08
    274c:	99 85       	ldd	r25, Y+9	; 0x09
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    pstr_next = pstr;
    pstr_next++;
    len_cat   = 0;

    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Cat str until NULL ptr(s)  (see Note #2c)  ...       */
           ( pstr_cat  != (CPU_CHAR *)0) &&
    2752:	88 23       	and	r24, r24
    2754:	21 f0       	breq	.+8      	; 0x275e <Str_Cat_N+0xe4>
           (*pstr_cat  != (CPU_CHAR  )0) &&                     /* ... or NULL char found     (see Note #2d); ...       */
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	8a 85       	ldd	r24, Y+10	; 0x0a
    275a:	98 17       	cp	r25, r24
    275c:	a0 f2       	brcs	.-88     	; 0x2706 <Str_Cat_N+0x8c>
        pstr_next++;
        pstr_cat++;
        len_cat++;
    }

   *pstr = (CPU_CHAR)0;                                         /* Append NULL char (see Note #2c2).                    */
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	fc 01       	movw	r30, r24
    2764:	10 82       	st	Z, r1


    return (pdest);
    2766:	8e 81       	ldd	r24, Y+6	; 0x06
    2768:	9f 81       	ldd	r25, Y+7	; 0x07
}
    276a:	2a 96       	adiw	r28, 0x0a	; 10
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <Str_Cmp>:
*********************************************************************************************************
*/
/*$PAGE*/
CPU_INT16S  Str_Cmp (CPU_CHAR  *p1_str,
                     CPU_CHAR  *p2_str)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	2a 97       	sbiw	r28, 0x0a	; 10
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	8f 83       	std	Y+7, r24	; 0x07
    2786:	98 87       	std	Y+8, r25	; 0x08
    2788:	69 87       	std	Y+9, r22	; 0x09
    278a:	7a 87       	std	Y+10, r23	; 0x0a
    CPU_CHAR    *p1_str_next;
    CPU_CHAR    *p2_str_next;
    CPU_INT16S   cmp_val;


    if (p1_str == (CPU_CHAR *)0) {
    278c:	8f 81       	ldd	r24, Y+7	; 0x07
    278e:	98 85       	ldd	r25, Y+8	; 0x08
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	a9 f4       	brne	.+42     	; 0x27be <Str_Cmp+0x48>
        if (p2_str == (CPU_CHAR *)0) {
    2794:	89 85       	ldd	r24, Y+9	; 0x09
    2796:	9a 85       	ldd	r25, Y+10	; 0x0a
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	19 f4       	brne	.+6      	; 0x27a2 <Str_Cmp+0x2c>
            return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL, rtn 0 (see Note #2a).         */
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a3 c0       	rjmp	.+326    	; 0x28e8 <Str_Cmp+0x172>
        }
        cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	fc 01       	movw	r30, r24
    27a8:	80 81       	ld	r24, Z
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	90 95       	com	r25
    27b0:	81 95       	neg	r24
    27b2:	9f 4f       	sbci	r25, 0xFF	; 255
    27b4:	8d 83       	std	Y+5, r24	; 0x05
    27b6:	9e 83       	std	Y+6, r25	; 0x06
        return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	95 c0       	rjmp	.+298    	; 0x28e8 <Str_Cmp+0x172>
    }
    if (p2_str == (CPU_CHAR *)0) {
    27be:	89 85       	ldd	r24, Y+9	; 0x09
    27c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c2:	00 97       	sbiw	r24, 0x00	; 0
    27c4:	59 f4       	brne	.+22     	; 0x27dc <Str_Cmp+0x66>
        cmp_val = (CPU_INT16S)(*p1_str);
    27c6:	8f 81       	ldd	r24, Y+7	; 0x07
    27c8:	98 85       	ldd	r25, Y+8	; 0x08
    27ca:	fc 01       	movw	r30, r24
    27cc:	80 81       	ld	r24, Z
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	9e 83       	std	Y+6, r25	; 0x06
        return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	86 c0       	rjmp	.+268    	; 0x28e8 <Str_Cmp+0x172>
    }


    p1_str_next = p1_str;
    27dc:	8f 81       	ldd	r24, Y+7	; 0x07
    27de:	98 85       	ldd	r25, Y+8	; 0x08
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    p2_str_next = p2_str;
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	8b 83       	std	Y+3, r24	; 0x03
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    p1_str_next++;
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	89 83       	std	Y+1, r24	; 0x01
    27f4:	9a 83       	std	Y+2, r25	; 0x02
    p2_str_next++;
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	9c 83       	std	Y+4, r25	; 0x04
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    2800:	14 c0       	rjmp	.+40     	; 0x282a <Str_Cmp+0xb4>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
           ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h). */
           ( p2_str_next != (CPU_CHAR *)0)) {
        p1_str_next++;
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	01 96       	adiw	r24, 0x01	; 1
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	9a 83       	std	Y+2, r25	; 0x02
        p2_str_next++;
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	9c 81       	ldd	r25, Y+4	; 0x04
    2810:	01 96       	adiw	r24, 0x01	; 1
    2812:	8b 83       	std	Y+3, r24	; 0x03
    2814:	9c 83       	std	Y+4, r25	; 0x04
        p1_str++;
    2816:	8f 81       	ldd	r24, Y+7	; 0x07
    2818:	98 85       	ldd	r25, Y+8	; 0x08
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	8f 83       	std	Y+7, r24	; 0x07
    281e:	98 87       	std	Y+8, r25	; 0x08
        p2_str++;
    2820:	89 85       	ldd	r24, Y+9	; 0x09
    2822:	9a 85       	ldd	r25, Y+10	; 0x0a
    2824:	01 96       	adiw	r24, 0x01	; 1
    2826:	89 87       	std	Y+9, r24	; 0x09
    2828:	9a 87       	std	Y+10, r25	; 0x0a

    p1_str_next = p1_str;
    p2_str_next = p2_str;
    p1_str_next++;
    p2_str_next++;
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    282a:	8f 81       	ldd	r24, Y+7	; 0x07
    282c:	98 85       	ldd	r25, Y+8	; 0x08
    282e:	fc 01       	movw	r30, r24
    2830:	20 81       	ld	r18, Z
    2832:	89 85       	ldd	r24, Y+9	; 0x09
    2834:	9a 85       	ldd	r25, Y+10	; 0x0a
    2836:	fc 01       	movw	r30, r24
    2838:	80 81       	ld	r24, Z
    283a:	28 17       	cp	r18, r24
    283c:	71 f4       	brne	.+28     	; 0x285a <Str_Cmp+0xe4>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
    283e:	8f 81       	ldd	r24, Y+7	; 0x07
    2840:	98 85       	ldd	r25, Y+8	; 0x08
    2842:	fc 01       	movw	r30, r24
    2844:	80 81       	ld	r24, Z

    p1_str_next = p1_str;
    p2_str_next = p2_str;
    p1_str_next++;
    p2_str_next++;
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    2846:	88 23       	and	r24, r24
    2848:	41 f0       	breq	.+16     	; 0x285a <Str_Cmp+0xe4>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	9a 81       	ldd	r25, Y+2	; 0x02
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	21 f0       	breq	.+8      	; 0x285a <Str_Cmp+0xe4>
           ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h). */
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	a1 f6       	brne	.-88     	; 0x2802 <Str_Cmp+0x8c>
        p1_str++;
        p2_str++;
    }


    if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
    285a:	8f 81       	ldd	r24, Y+7	; 0x07
    285c:	98 85       	ldd	r25, Y+8	; 0x08
    285e:	fc 01       	movw	r30, r24
    2860:	20 81       	ld	r18, Z
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	fc 01       	movw	r30, r24
    2868:	80 81       	ld	r24, Z
    286a:	28 17       	cp	r18, r24
    286c:	99 f0       	breq	.+38     	; 0x2894 <Str_Cmp+0x11e>
         cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
    286e:	8f 81       	ldd	r24, Y+7	; 0x07
    2870:	98 85       	ldd	r25, Y+8	; 0x08
    2872:	fc 01       	movw	r30, r24
    2874:	80 81       	ld	r24, Z
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	89 85       	ldd	r24, Y+9	; 0x09
    287c:	9a 85       	ldd	r25, Y+10	; 0x0a
    287e:	fc 01       	movw	r30, r24
    2880:	80 81       	ld	r24, Z
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a9 01       	movw	r20, r18
    2888:	48 1b       	sub	r20, r24
    288a:	59 0b       	sbc	r21, r25
    288c:	ca 01       	movw	r24, r20
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	28 c0       	rjmp	.+80     	; 0x28e4 <Str_Cmp+0x16e>

    } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
    2894:	8f 81       	ldd	r24, Y+7	; 0x07
    2896:	98 85       	ldd	r25, Y+8	; 0x08
    2898:	fc 01       	movw	r30, r24
    289a:	80 81       	ld	r24, Z
    289c:	88 23       	and	r24, r24
    289e:	19 f4       	brne	.+6      	; 0x28a6 <Str_Cmp+0x130>
         cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
    28a0:	1d 82       	std	Y+5, r1	; 0x05
    28a2:	1e 82       	std	Y+6, r1	; 0x06
    28a4:	1f c0       	rjmp	.+62     	; 0x28e4 <Str_Cmp+0x16e>

    } else {
        if (p1_str_next == (CPU_CHAR *)0) {
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	00 97       	sbiw	r24, 0x00	; 0
    28ac:	99 f4       	brne	.+38     	; 0x28d4 <Str_Cmp+0x15e>
            if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	19 f4       	brne	.+6      	; 0x28bc <Str_Cmp+0x146>
                cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
    28b6:	1d 82       	std	Y+5, r1	; 0x05
    28b8:	1e 82       	std	Y+6, r1	; 0x06
    28ba:	14 c0       	rjmp	.+40     	; 0x28e4 <Str_Cmp+0x16e>
            } else {                                                    /* If p1_str_next NULL, ...                     */
                cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	9c 81       	ldd	r25, Y+4	; 0x04
    28c0:	fc 01       	movw	r30, r24
    28c2:	80 81       	ld	r24, Z
    28c4:	88 2f       	mov	r24, r24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	90 95       	com	r25
    28ca:	81 95       	neg	r24
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	08 c0       	rjmp	.+16     	; 0x28e4 <Str_Cmp+0x16e>
            }
        } else {                                                        /* If p2_str_next NULL, ...                     */
            cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	80 81       	ld	r24, Z
    28dc:	88 2f       	mov	r24, r24
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	8d 83       	std	Y+5, r24	; 0x05
    28e2:	9e 83       	std	Y+6, r25	; 0x06
        }
    }


    return (cmp_val);
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	9e 81       	ldd	r25, Y+6	; 0x06
}
    28e8:	2a 96       	adiw	r28, 0x0a	; 10
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <Str_Cmp_N>:
*/
/*$PAGE*/
CPU_INT16S  Str_Cmp_N (CPU_CHAR    *p1_str,
                       CPU_CHAR    *p2_str,
                       CPU_SIZE_T   len_max)
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	2c 97       	sbiw	r28, 0x0c	; 12
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	88 87       	std	Y+8, r24	; 0x08
    2904:	99 87       	std	Y+9, r25	; 0x09
    2906:	6a 87       	std	Y+10, r22	; 0x0a
    2908:	7b 87       	std	Y+11, r23	; 0x0b
    290a:	4c 87       	std	Y+12, r20	; 0x0c
    CPU_CHAR    *p2_str_next;
    CPU_INT16S   cmp_val;
    CPU_SIZE_T   cmp_len;


    if (len_max == 0) {                                         /* If cmp len equals zero, rtn 0      (see Note #2i).   */
    290c:	8c 85       	ldd	r24, Y+12	; 0x0c
    290e:	88 23       	and	r24, r24
    2910:	19 f4       	brne	.+6      	; 0x2918 <Str_Cmp_N+0x24>
        return ((CPU_INT16S)0);
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	bd c0       	rjmp	.+378    	; 0x2a92 <Str_Cmp_N+0x19e>
    }

    if (p1_str == (CPU_CHAR *)0) {
    2918:	88 85       	ldd	r24, Y+8	; 0x08
    291a:	99 85       	ldd	r25, Y+9	; 0x09
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	a9 f4       	brne	.+42     	; 0x294a <Str_Cmp_N+0x56>
        if (p2_str == (CPU_CHAR *)0) {
    2920:	8a 85       	ldd	r24, Y+10	; 0x0a
    2922:	9b 85       	ldd	r25, Y+11	; 0x0b
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	19 f4       	brne	.+6      	; 0x292e <Str_Cmp_N+0x3a>
            return ((CPU_INT16S)0);                             /* If BOTH str ptrs NULL,  rtn 0      (see Note #2a).   */
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	b2 c0       	rjmp	.+356    	; 0x2a92 <Str_Cmp_N+0x19e>
        }
        cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
    292e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2930:	9b 85       	ldd	r25, Y+11	; 0x0b
    2932:	fc 01       	movw	r30, r24
    2934:	80 81       	ld	r24, Z
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	90 95       	com	r25
    293c:	81 95       	neg	r24
    293e:	9f 4f       	sbci	r25, 0xFF	; 255
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	9e 83       	std	Y+6, r25	; 0x06
        return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #2b).   */
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	a4 c0       	rjmp	.+328    	; 0x2a92 <Str_Cmp_N+0x19e>
    }
    if (p2_str == (CPU_CHAR *)0) {
    294a:	8a 85       	ldd	r24, Y+10	; 0x0a
    294c:	9b 85       	ldd	r25, Y+11	; 0x0b
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	59 f4       	brne	.+22     	; 0x2968 <Str_Cmp_N+0x74>
        cmp_val = (CPU_INT16S)(*p1_str);
    2952:	88 85       	ldd	r24, Y+8	; 0x08
    2954:	99 85       	ldd	r25, Y+9	; 0x09
    2956:	fc 01       	movw	r30, r24
    2958:	80 81       	ld	r24, Z
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	9e 83       	std	Y+6, r25	; 0x06
        return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #2c).   */
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	95 c0       	rjmp	.+298    	; 0x2a92 <Str_Cmp_N+0x19e>
    }


    p1_str_next = p1_str;
    2968:	88 85       	ldd	r24, Y+8	; 0x08
    296a:	99 85       	ldd	r25, Y+9	; 0x09
    296c:	89 83       	std	Y+1, r24	; 0x01
    296e:	9a 83       	std	Y+2, r25	; 0x02
    p2_str_next = p2_str;
    2970:	8a 85       	ldd	r24, Y+10	; 0x0a
    2972:	9b 85       	ldd	r25, Y+11	; 0x0b
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	9c 83       	std	Y+4, r25	; 0x04
    p1_str_next++;
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	01 96       	adiw	r24, 0x01	; 1
    297e:	89 83       	std	Y+1, r24	; 0x01
    2980:	9a 83       	std	Y+2, r25	; 0x02
    p2_str_next++;
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	01 96       	adiw	r24, 0x01	; 1
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	9c 83       	std	Y+4, r25	; 0x04
    cmp_len     = 0;
    298c:	1f 82       	std	Y+7, r1	; 0x07
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    298e:	17 c0       	rjmp	.+46     	; 0x29be <Str_Cmp_N+0xca>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
           ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h); */
           ( p2_str_next != (CPU_CHAR *)0) &&
           ( cmp_len     <  (CPU_SIZE_T)len_max)) {             /* .. or len nbr chars cmp'd        (see Note #2j).     */
        p1_str_next++;
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	01 96       	adiw	r24, 0x01	; 1
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	9a 83       	std	Y+2, r25	; 0x02
        p2_str_next++;
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	01 96       	adiw	r24, 0x01	; 1
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	9c 83       	std	Y+4, r25	; 0x04
        p1_str++;
    29a4:	88 85       	ldd	r24, Y+8	; 0x08
    29a6:	99 85       	ldd	r25, Y+9	; 0x09
    29a8:	01 96       	adiw	r24, 0x01	; 1
    29aa:	88 87       	std	Y+8, r24	; 0x08
    29ac:	99 87       	std	Y+9, r25	; 0x09
        p2_str++;
    29ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    29b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29b2:	01 96       	adiw	r24, 0x01	; 1
    29b4:	8a 87       	std	Y+10, r24	; 0x0a
    29b6:	9b 87       	std	Y+11, r25	; 0x0b
        cmp_len++;
    29b8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	8f 83       	std	Y+7, r24	; 0x07
    p1_str_next = p1_str;
    p2_str_next = p2_str;
    p1_str_next++;
    p2_str_next++;
    cmp_len     = 0;
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    29be:	88 85       	ldd	r24, Y+8	; 0x08
    29c0:	99 85       	ldd	r25, Y+9	; 0x09
    29c2:	fc 01       	movw	r30, r24
    29c4:	20 81       	ld	r18, Z
    29c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ca:	fc 01       	movw	r30, r24
    29cc:	80 81       	ld	r24, Z
    29ce:	28 17       	cp	r18, r24
    29d0:	91 f4       	brne	.+36     	; 0x29f6 <Str_Cmp_N+0x102>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
    29d2:	88 85       	ldd	r24, Y+8	; 0x08
    29d4:	99 85       	ldd	r25, Y+9	; 0x09
    29d6:	fc 01       	movw	r30, r24
    29d8:	80 81       	ld	r24, Z
    p1_str_next = p1_str;
    p2_str_next = p2_str;
    p1_str_next++;
    p2_str_next++;
    cmp_len     = 0;
    while ((*p1_str      == *p2_str)       &&                   /* Cmp strs until non-matching char (see Note #2d) ..   */
    29da:	88 23       	and	r24, r24
    29dc:	61 f0       	breq	.+24     	; 0x29f6 <Str_Cmp_N+0x102>
           (*p1_str      != (CPU_CHAR  )0) &&                   /* .. or NULL char(s)               (see Note #2e) ..   */
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	41 f0       	breq	.+16     	; 0x29f6 <Str_Cmp_N+0x102>
           ( p1_str_next != (CPU_CHAR *)0) &&                   /* .. or NULL ptr(s) found (see Notes #2f, #2g, & #2h); */
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	21 f0       	breq	.+8      	; 0x29f6 <Str_Cmp_N+0x102>
           ( p2_str_next != (CPU_CHAR *)0) &&
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	8c 85       	ldd	r24, Y+12	; 0x0c
    29f2:	98 17       	cp	r25, r24
    29f4:	68 f2       	brcs	.-102    	; 0x2990 <Str_Cmp_N+0x9c>
        p2_str++;
        cmp_len++;
    }


    if (cmp_len == len_max) {                                           /* If strs     identical for len nbr of chars,  */
    29f6:	9f 81       	ldd	r25, Y+7	; 0x07
    29f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    29fa:	98 17       	cp	r25, r24
    29fc:	19 f4       	brne	.+6      	; 0x2a04 <Str_Cmp_N+0x110>
        return ((CPU_INT16S)0);                                         /* ... rtn 0 (see Note #2j).                    */
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	47 c0       	rjmp	.+142    	; 0x2a92 <Str_Cmp_N+0x19e>
    }

    if (*p1_str != *p2_str) {                                           /* If strs NOT identical, ...                   */
    2a04:	88 85       	ldd	r24, Y+8	; 0x08
    2a06:	99 85       	ldd	r25, Y+9	; 0x09
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 81       	ld	r18, Z
    2a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a10:	fc 01       	movw	r30, r24
    2a12:	80 81       	ld	r24, Z
    2a14:	28 17       	cp	r18, r24
    2a16:	99 f0       	breq	.+38     	; 0x2a3e <Str_Cmp_N+0x14a>
         cmp_val = (CPU_INT16S)(*p1_str) - (CPU_INT16S)(*p2_str);       /* ... calc & rtn char diff  (see Note #2d1).   */
    2a18:	88 85       	ldd	r24, Y+8	; 0x08
    2a1a:	99 85       	ldd	r25, Y+9	; 0x09
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	80 81       	ld	r24, Z
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a28:	fc 01       	movw	r30, r24
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a9 01       	movw	r20, r18
    2a32:	48 1b       	sub	r20, r24
    2a34:	59 0b       	sbc	r21, r25
    2a36:	ca 01       	movw	r24, r20
    2a38:	8d 83       	std	Y+5, r24	; 0x05
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	28 c0       	rjmp	.+80     	; 0x2a8e <Str_Cmp_N+0x19a>

    } else if (*p1_str == (CPU_CHAR)0) {                                /* If NULL char(s) found, ...                   */
    2a3e:	88 85       	ldd	r24, Y+8	; 0x08
    2a40:	99 85       	ldd	r25, Y+9	; 0x09
    2a42:	fc 01       	movw	r30, r24
    2a44:	80 81       	ld	r24, Z
    2a46:	88 23       	and	r24, r24
    2a48:	19 f4       	brne	.+6      	; 0x2a50 <Str_Cmp_N+0x15c>
         cmp_val = 0;                                                   /* ... strs identical; rtn 0 (see Note #2e).    */
    2a4a:	1d 82       	std	Y+5, r1	; 0x05
    2a4c:	1e 82       	std	Y+6, r1	; 0x06
    2a4e:	1f c0       	rjmp	.+62     	; 0x2a8e <Str_Cmp_N+0x19a>

    } else {
        if (p1_str_next == (CPU_CHAR *)0) {
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	99 f4       	brne	.+38     	; 0x2a7e <Str_Cmp_N+0x18a>
            if (p2_str_next == (CPU_CHAR *)0) {                         /* If BOTH next str ptrs NULL, ...              */
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	19 f4       	brne	.+6      	; 0x2a66 <Str_Cmp_N+0x172>
                cmp_val = (CPU_INT16S)0;                                /* ... rtn 0                   (see Note #2f).  */
    2a60:	1d 82       	std	Y+5, r1	; 0x05
    2a62:	1e 82       	std	Y+6, r1	; 0x06
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <Str_Cmp_N+0x19a>
            } else {                                                    /* If p1_str_next NULL, ...                     */
                cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_next);   /* ... rtn neg p2_str_next val (see Note #2g).  */
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	90 95       	com	r25
    2a74:	81 95       	neg	r24
    2a76:	9f 4f       	sbci	r25, 0xFF	; 255
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	08 c0       	rjmp	.+16     	; 0x2a8e <Str_Cmp_N+0x19a>
            }
        } else {                                                        /* If p2_str_next NULL, ...                     */
            cmp_val = (CPU_INT16S)(*p1_str_next);                       /* ... rtn pos p1_str_next val (see Note #2h).  */
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	fc 01       	movw	r30, r24
    2a84:	80 81       	ld	r24, Z
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
        }
    }


    return (cmp_val);
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a90:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2a92:	2c 96       	adiw	r28, 0x0c	; 12
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <Str_Char>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Char (CPU_CHAR  *pstr,
                     CPU_CHAR   srch_char)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	25 97       	sbiw	r28, 0x05	; 5
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	8b 83       	std	Y+3, r24	; 0x03
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	6d 83       	std	Y+5, r22	; 0x05
    CPU_CHAR  *pstr_next;


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <Str_Char+0x22>
        return ((CPU_CHAR *)0);
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	31 c0       	rjmp	.+98     	; 0x2b22 <Str_Char+0x84>
    }


    pstr_next = pstr;
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    pstr_next++;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	9a 81       	ldd	r25, Y+2	; 0x02
    2acc:	01 96       	adiw	r24, 0x01	; 1
    2ace:	89 83       	std	Y+1, r24	; 0x01
    2ad0:	9a 83       	std	Y+2, r25	; 0x02
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
    2ad2:	0a c0       	rjmp	.+20     	; 0x2ae8 <Str_Char+0x4a>
           (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
           (*pstr      != (CPU_CHAR  )srch_char)) {             /* ... or srch char found     (see Note #2d).           */
        pstr++;
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	8b 83       	std	Y+3, r24	; 0x03
    2adc:	9c 83       	std	Y+4, r25	; 0x04
        pstr_next++;
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    }


    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f0       	breq	.+26     	; 0x2b0a <Str_Char+0x6c>
           (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	fc 01       	movw	r30, r24
    2af6:	80 81       	ld	r24, Z
    }


    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
    2af8:	88 23       	and	r24, r24
    2afa:	39 f0       	breq	.+14     	; 0x2b0a <Str_Char+0x6c>
           (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
           (*pstr      != (CPU_CHAR  )srch_char)) {             /* ... or srch char found     (see Note #2d).           */
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	9c 81       	ldd	r25, Y+4	; 0x04
    2b00:	fc 01       	movw	r30, r24
    2b02:	90 81       	ld	r25, Z


    pstr_next = pstr;
    pstr_next++;
    while (( pstr_next != (CPU_CHAR *)0) &&                     /* Srch str until NULL ptr(s) (see Note #2b) ...        */
           (*pstr      != (CPU_CHAR  )0) &&                     /* ... or NULL char           (see Note #2c) ...        */
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	98 17       	cp	r25, r24
    2b08:	29 f7       	brne	.-54     	; 0x2ad4 <Str_Char+0x36>
        pstr++;
        pstr_next++;
    }


    if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
    2b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0e:	fc 01       	movw	r30, r24
    2b10:	90 81       	ld	r25, Z
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	98 17       	cp	r25, r24
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <Str_Char+0x80>
         return ((CPU_CHAR *)0);                                /* ... rtn NULL (see Notes #2b & #2c).                  */
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <Str_Char+0x84>
    }

    return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2b22:	25 96       	adiw	r28, 0x05	; 5
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <Str_Char_N>:
*/

CPU_CHAR  *Str_Char_N (CPU_CHAR    *pstr,
                       CPU_SIZE_T   len_max,
                       CPU_CHAR     srch_char)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	27 97       	sbiw	r28, 0x07	; 7
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	8c 83       	std	Y+4, r24	; 0x04
    2b3e:	9d 83       	std	Y+5, r25	; 0x05
    2b40:	6e 83       	std	Y+6, r22	; 0x06
    2b42:	4f 83       	std	Y+7, r20	; 0x07
    CPU_CHAR    *pstr_next;
    CPU_SIZE_T   len_srch;


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL    (see Note #2a).     */
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	9d 81       	ldd	r25, Y+5	; 0x05
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	19 f4       	brne	.+6      	; 0x2b52 <Str_Char_N+0x24>
        return ((CPU_CHAR *)0);
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	3f c0       	rjmp	.+126    	; 0x2bd0 <Str_Char_N+0xa2>
    }

    if (len_max == (CPU_SIZE_T)0) {                             /* Rtn NULL if srch len equals zero (see Note #2e).     */
    2b52:	8e 81       	ldd	r24, Y+6	; 0x06
    2b54:	88 23       	and	r24, r24
    2b56:	19 f4       	brne	.+6      	; 0x2b5e <Str_Char_N+0x30>
        return ((CPU_CHAR *)0);
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	39 c0       	rjmp	.+114    	; 0x2bd0 <Str_Char_N+0xa2>
    }


    pstr_next = pstr;
    2b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b60:	9d 81       	ldd	r25, Y+5	; 0x05
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    pstr_next++;
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    len_srch  = 0;
    2b70:	1b 82       	std	Y+3, r1	; 0x03
    while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
    2b72:	0d c0       	rjmp	.+26     	; 0x2b8e <Str_Char_N+0x60>
           (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
           (*pstr      != (CPU_CHAR  )srch_char) &&             /* ... or srch char found      (see Note #2d); ...      */
           ( len_srch  <  (CPU_SIZE_T)len_max)) {               /* ... or max nbr chars srch'd (see Note #2e).          */
        pstr++;
    2b74:	8c 81       	ldd	r24, Y+4	; 0x04
    2b76:	9d 81       	ldd	r25, Y+5	; 0x05
    2b78:	01 96       	adiw	r24, 0x01	; 1
    2b7a:	8c 83       	std	Y+4, r24	; 0x04
    2b7c:	9d 83       	std	Y+5, r25	; 0x05
        pstr_next++;
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	01 96       	adiw	r24, 0x01	; 1
    2b84:	89 83       	std	Y+1, r24	; 0x01
    2b86:	9a 83       	std	Y+2, r25	; 0x02
        len_srch++;
    2b88:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8a:	8f 5f       	subi	r24, 0xFF	; 255
    2b8c:	8b 83       	std	Y+3, r24	; 0x03


    pstr_next = pstr;
    pstr_next++;
    len_srch  = 0;
    while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	9a 81       	ldd	r25, Y+2	; 0x02
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	89 f0       	breq	.+34     	; 0x2bb8 <Str_Char_N+0x8a>
           (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	80 81       	ld	r24, Z


    pstr_next = pstr;
    pstr_next++;
    len_srch  = 0;
    while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
    2b9e:	88 23       	and	r24, r24
    2ba0:	59 f0       	breq	.+22     	; 0x2bb8 <Str_Char_N+0x8a>
           (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
           (*pstr      != (CPU_CHAR  )srch_char) &&             /* ... or srch char found      (see Note #2d); ...      */
    2ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	90 81       	ld	r25, Z

    pstr_next = pstr;
    pstr_next++;
    len_srch  = 0;
    while (( pstr_next != (CPU_CHAR *)0)         &&             /* Srch str until NULL ptr(s)  (see Note #2b)  ...      */
           (*pstr      != (CPU_CHAR  )0)         &&             /* ... or NULL char            (see Note #2c)  ...      */
    2baa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bac:	98 17       	cp	r25, r24
    2bae:	21 f0       	breq	.+8      	; 0x2bb8 <Str_Char_N+0x8a>
           (*pstr      != (CPU_CHAR  )srch_char) &&             /* ... or srch char found      (see Note #2d); ...      */
    2bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb4:	98 17       	cp	r25, r24
    2bb6:	f0 f2       	brcs	.-68     	; 0x2b74 <Str_Char_N+0x46>
        pstr_next++;
        len_srch++;
    }


    if (*pstr != srch_char) {                                   /* If srch char NOT found, str points to NULL; ...      */
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	fc 01       	movw	r30, r24
    2bbe:	90 81       	ld	r25, Z
    2bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc2:	98 17       	cp	r25, r24
    2bc4:	19 f0       	breq	.+6      	; 0x2bcc <Str_Char_N+0x9e>
         return ((CPU_CHAR *)0);                                /* ... rtn NULL (see Notes #2b & #2c).                  */
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	02 c0       	rjmp	.+4      	; 0x2bd0 <Str_Char_N+0xa2>
    }

    return (pstr);                                              /* Else rtn ptr to found srch char (see Note #2d).      */
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	9d 81       	ldd	r25, Y+5	; 0x05
}
    2bd0:	27 96       	adiw	r28, 0x07	; 7
    2bd2:	cd bf       	out	0x3d, r28	; 61
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <Str_Char_Last>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Char_Last (CPU_CHAR  *pstr,
                          CPU_CHAR   srch_char)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <Str_Char_Last+0x6>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <Str_Char_Last+0x8>
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	8c 83       	std	Y+4, r24	; 0x04
    2bea:	9d 83       	std	Y+5, r25	; 0x05
    2bec:	6e 83       	std	Y+6, r22	; 0x06
    CPU_CHAR    *pstr_next;
    CPU_SIZE_T   str_len;


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if srch str ptr NULL (see Note #2a).        */
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	19 f4       	brne	.+6      	; 0x2bfc <Str_Char_Last+0x20>
        return ((CPU_CHAR *)0);
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	32 c0       	rjmp	.+100    	; 0x2c60 <Str_Char_Last+0x84>
    }


    pstr_next  = pstr;
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2c00:	89 83       	std	Y+1, r24	; 0x01
    2c02:	9a 83       	std	Y+2, r25	; 0x02
    str_len    = Str_Len(pstr);
    2c04:	8c 81       	ldd	r24, Y+4	; 0x04
    2c06:	9d 81       	ldd	r25, Y+5	; 0x05
    2c08:	0e 94 ed 11 	call	0x23da	; 0x23da <Str_Len>
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
    pstr_next += str_len;
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	29 81       	ldd	r18, Y+1	; 0x01
    2c16:	3a 81       	ldd	r19, Y+2	; 0x02
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	9a 83       	std	Y+2, r25	; 0x02
    while (( pstr_next != pstr) &&                              /* Srch str from end until beg (see Note #2c) ...       */
    2c20:	05 c0       	rjmp	.+10     	; 0x2c2c <Str_Char_Last+0x50>
           (*pstr_next != srch_char)) {                         /* ... until srch char found   (see Note #2d).          */
        pstr_next--;
    2c22:	89 81       	ldd	r24, Y+1	; 0x01
    2c24:	9a 81       	ldd	r25, Y+2	; 0x02
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	89 83       	std	Y+1, r24	; 0x01
    2c2a:	9a 83       	std	Y+2, r25	; 0x02


    pstr_next  = pstr;
    str_len    = Str_Len(pstr);
    pstr_next += str_len;
    while (( pstr_next != pstr) &&                              /* Srch str from end until beg (see Note #2c) ...       */
    2c2c:	29 81       	ldd	r18, Y+1	; 0x01
    2c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c30:	8c 81       	ldd	r24, Y+4	; 0x04
    2c32:	9d 81       	ldd	r25, Y+5	; 0x05
    2c34:	28 17       	cp	r18, r24
    2c36:	39 07       	cpc	r19, r25
    2c38:	39 f0       	breq	.+14     	; 0x2c48 <Str_Char_Last+0x6c>
           (*pstr_next != srch_char)) {                         /* ... until srch char found   (see Note #2d).          */
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	fc 01       	movw	r30, r24
    2c40:	90 81       	ld	r25, Z


    pstr_next  = pstr;
    str_len    = Str_Len(pstr);
    pstr_next += str_len;
    while (( pstr_next != pstr) &&                              /* Srch str from end until beg (see Note #2c) ...       */
    2c42:	8e 81       	ldd	r24, Y+6	; 0x06
    2c44:	98 17       	cp	r25, r24
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <Str_Char_Last+0x46>
           (*pstr_next != srch_char)) {                         /* ... until srch char found   (see Note #2d).          */
        pstr_next--;
    }


    if (*pstr_next != srch_char) {                              /* If srch char NOT found, str points to NULL; ...      */
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	90 81       	ld	r25, Z
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	98 17       	cp	r25, r24
    2c54:	19 f0       	breq	.+6      	; 0x2c5c <Str_Char_Last+0x80>
         return ((CPU_CHAR *)0);                                /* ... rtn NULL (see Notes #2b & #2c).                  */
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <Str_Char_Last+0x84>
    }

    return (pstr_next);                                         /* Else rtn ptr to found srch char (see Note #2d).      */
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c60:	26 96       	adiw	r28, 0x06	; 6
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <Str_Str>:
*********************************************************************************************************
*/

CPU_CHAR  *Str_Str (CPU_CHAR  *pstr,
                    CPU_CHAR  *psrch_str)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	2d 97       	sbiw	r28, 0x0d	; 13
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	8a 87       	std	Y+10, r24	; 0x0a
    2c7c:	9b 87       	std	Y+11, r25	; 0x0b
    2c7e:	6c 87       	std	Y+12, r22	; 0x0c
    2c80:	7d 87       	std	Y+13, r23	; 0x0d
    CPU_BOOLEAN   srch_done;
    CPU_INT16S    srch_cmp;
    CPU_CHAR     *pstr_srch_ix;

                                                                /* Rtn NULL if str ptr(s) NULL (see Note #2a).          */
    if (pstr == (CPU_CHAR *)0) {
    2c82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c84:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <Str_Str+0x24>
        return ((CPU_CHAR *)0);
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	5d c0       	rjmp	.+186    	; 0x2d4a <Str_Str+0xde>
    }
    if (psrch_str == (CPU_CHAR *)0) {
    2c90:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c92:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	19 f4       	brne	.+6      	; 0x2c9e <Str_Str+0x32>
        return ((CPU_CHAR *)0);
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	56 c0       	rjmp	.+172    	; 0x2d4a <Str_Str+0xde>
    }


    str_len      = Str_Len(pstr);
    2c9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca2:	0e 94 ed 11 	call	0x23da	; 0x23da <Str_Len>
    2ca6:	8f 83       	std	Y+7, r24	; 0x07
    srch_str_len = Str_Len(psrch_str);
    2ca8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2caa:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cac:	0e 94 ed 11 	call	0x23da	; 0x23da <Str_Len>
    2cb0:	88 87       	std	Y+8, r24	; 0x08
    if (srch_str_len > str_len) {                               /* If srch str len > str len, rtn NULL  (see Note #2b). */
    2cb2:	98 85       	ldd	r25, Y+8	; 0x08
    2cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb6:	89 17       	cp	r24, r25
    2cb8:	18 f4       	brcc	.+6      	; 0x2cc0 <Str_Str+0x54>
        return ((CPU_CHAR *)0);
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	45 c0       	rjmp	.+138    	; 0x2d4a <Str_Str+0xde>
    }
    if (srch_str_len == 0) {                                    /* If srch str len = 0, srch str equal NULL str; ...    */
    2cc0:	88 85       	ldd	r24, Y+8	; 0x08
    2cc2:	88 23       	and	r24, r24
    2cc4:	61 f4       	brne	.+24     	; 0x2cde <Str_Str+0x72>
        pstr_srch_ix = (CPU_CHAR *)(pstr + str_len);            /* ... rtn ptr to NULL str found in str (see Note #2c). */
    2cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2cc8:	88 2f       	mov	r24, r24
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cce:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cd0:	82 0f       	add	r24, r18
    2cd2:	93 1f       	adc	r25, r19
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	9e 83       	std	Y+6, r25	; 0x06
        return (pstr_srch_ix);
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	36 c0       	rjmp	.+108    	; 0x2d4a <Str_Str+0xde>
    }

    srch_len  = str_len - srch_str_len;                         /* Determine srch len (see Note #2d1).                  */
    2cde:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce0:	88 85       	ldd	r24, Y+8	; 0x08
    2ce2:	29 2f       	mov	r18, r25
    2ce4:	28 1b       	sub	r18, r24
    2ce6:	82 2f       	mov	r24, r18
    2ce8:	89 87       	std	Y+9, r24	; 0x09
    srch_ix   = 0;
    2cea:	19 82       	std	Y+1, r1	; 0x01
    srch_done = DEF_NO;
    2cec:	1a 82       	std	Y+2, r1	; 0x02
    while ((srch_done == DEF_NO) && (srch_ix <= srch_len)) {
    2cee:	1d c0       	rjmp	.+58     	; 0x2d2a <Str_Str+0xbe>
        pstr_srch_ix = (CPU_CHAR *)(pstr + srch_ix);
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	2a 85       	ldd	r18, Y+10	; 0x0a
    2cf8:	3b 85       	ldd	r19, Y+11	; 0x0b
    2cfa:	82 0f       	add	r24, r18
    2cfc:	93 1f       	adc	r25, r19
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	9e 83       	std	Y+6, r25	; 0x06
        srch_cmp     =  Str_Cmp_N(pstr_srch_ix, psrch_str, srch_str_len);
    2d02:	8d 81       	ldd	r24, Y+5	; 0x05
    2d04:	9e 81       	ldd	r25, Y+6	; 0x06
    2d06:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d08:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d0a:	b9 01       	movw	r22, r18
    2d0c:	48 85       	ldd	r20, Y+8	; 0x08
    2d0e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <Str_Cmp_N>
    2d12:	8b 83       	std	Y+3, r24	; 0x03
    2d14:	9c 83       	std	Y+4, r25	; 0x04
        srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
    2d16:	21 e0       	ldi	r18, 0x01	; 1
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <Str_Str+0xb6>
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	2a 83       	std	Y+2, r18	; 0x02
        srch_ix++;
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	8f 5f       	subi	r24, 0xFF	; 255
    2d28:	89 83       	std	Y+1, r24	; 0x01
    }

    srch_len  = str_len - srch_str_len;                         /* Determine srch len (see Note #2d1).                  */
    srch_ix   = 0;
    srch_done = DEF_NO;
    while ((srch_done == DEF_NO) && (srch_ix <= srch_len)) {
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	88 23       	and	r24, r24
    2d2e:	21 f4       	brne	.+8      	; 0x2d38 <Str_Str+0xcc>
    2d30:	99 81       	ldd	r25, Y+1	; 0x01
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	89 17       	cp	r24, r25
    2d36:	e0 f6       	brcc	.-72     	; 0x2cf0 <Str_Str+0x84>
        srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
        srch_ix++;
    }


    if (srch_cmp != 0) {                                        /* If srch str NOT found, rtn NULL  (see Note #2d).     */
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	19 f0       	breq	.+6      	; 0x2d46 <Str_Str+0xda>
        return ((CPU_CHAR *)0);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <Str_Str+0xde>
    }

    return (pstr_srch_ix);                                      /* Rtn ptr to srch str found in str (see Note #2e).     */
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2d4a:	2d 96       	adiw	r28, 0x0d	; 13
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <Str_FmtNbr_Int32U>:
                              CPU_INT08U    nbr_base,
                              CPU_BOOLEAN   lead_zeros,
                              CPU_BOOLEAN   lower_case,
                              CPU_BOOLEAN   nul,
                              CPU_CHAR     *pstr)
{
    2d56:	af 92       	push	r10
    2d58:	bf 92       	push	r11
    2d5a:	cf 92       	push	r12
    2d5c:	ef 92       	push	r14
    2d5e:	0f 93       	push	r16
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	6c 97       	sbiw	r28, 0x1c	; 28
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	de bf       	out	0x3e, r29	; 62
    2d6e:	6a 8b       	std	Y+18, r22	; 0x12
    2d70:	7b 8b       	std	Y+19, r23	; 0x13
    2d72:	8c 8b       	std	Y+20, r24	; 0x14
    2d74:	9d 8b       	std	Y+21, r25	; 0x15
    2d76:	4e 8b       	std	Y+22, r20	; 0x16
    2d78:	2f 8b       	std	Y+23, r18	; 0x17
    2d7a:	08 8f       	std	Y+24, r16	; 0x18
    2d7c:	e9 8e       	std	Y+25, r14	; 0x19
    2d7e:	ca 8e       	std	Y+26, r12	; 0x1a
    2d80:	ab 8e       	std	Y+27, r10	; 0x1b
    2d82:	bc 8e       	std	Y+28, r11	; 0x1c
    CPU_INT08U    log_ceil;
    CPU_INT08U    i;
    CPU_BOOLEAN   ovf;


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if str ptr NULL (see Note #6a).             */
    2d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	19 f4       	brne	.+6      	; 0x2d92 <Str_FmtNbr_Int32U+0x3c>
        return ((CPU_CHAR *)0);
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	e5 c0       	rjmp	.+458    	; 0x2f5c <Str_FmtNbr_Int32U+0x206>
    }
                                                                /* Rtn NULL if invalid base (see Note #6b).             */
    if ((nbr_base <  2) ||
    2d92:	8f 89       	ldd	r24, Y+23	; 0x17
    2d94:	82 30       	cpi	r24, 0x02	; 2
    2d96:	18 f0       	brcs	.+6      	; 0x2d9e <Str_FmtNbr_Int32U+0x48>
    2d98:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9a:	85 32       	cpi	r24, 0x25	; 37
    2d9c:	18 f0       	brcs	.+6      	; 0x2da4 <Str_FmtNbr_Int32U+0x4e>
        (nbr_base > 36)) {
        return ((CPU_CHAR *)0);
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	dc c0       	rjmp	.+440    	; 0x2f5c <Str_FmtNbr_Int32U+0x206>
    }


    if (lead_zeros != DEF_YES) {                                /* If lead zeros NOT ENABLED, ...                       */
    2da4:	88 8d       	ldd	r24, Y+24	; 0x18
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <Str_FmtNbr_Int32U+0x56>
    2daa:	54 c0       	rjmp	.+168    	; 0x2e54 <Str_FmtNbr_Int32U+0xfe>
        log_ceil = 1;                                           /* ... calc ceil[log(nbr)]    ...                       */
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	8b 87       	std	Y+11, r24	; 0x0b
        nbr_exp  = nbr_base;
    2db0:	8f 89       	ldd	r24, Y+23	; 0x17
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a0 e0       	ldi	r26, 0x00	; 0
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	98 87       	std	Y+8, r25	; 0x08
    2dbe:	a9 87       	std	Y+9, r26	; 0x09
    2dc0:	ba 87       	std	Y+10, r27	; 0x0a
        ovf      = DEF_NO;
    2dc2:	1d 86       	std	Y+13, r1	; 0x0d
        while ((nbr_exp <= nbr) &&
    2dc4:	30 c0       	rjmp	.+96     	; 0x2e26 <Str_FmtNbr_Int32U+0xd0>
               (ovf     == DEF_NO)) {
            if (nbr_exp  < Str_FmtNbr_Int32U_MultOvfThTbl[nbr_base]) {
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	88 2f       	mov	r24, r24
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	8c 53       	subi	r24, 0x3C	; 60
    2dd6:	9f 4d       	sbci	r25, 0xDF	; 223
    2dd8:	fc 01       	movw	r30, r24
    2dda:	20 81       	ld	r18, Z
    2ddc:	31 81       	ldd	r19, Z+1	; 0x01
    2dde:	42 81       	ldd	r20, Z+2	; 0x02
    2de0:	53 81       	ldd	r21, Z+3	; 0x03
    2de2:	8f 81       	ldd	r24, Y+7	; 0x07
    2de4:	98 85       	ldd	r25, Y+8	; 0x08
    2de6:	a9 85       	ldd	r26, Y+9	; 0x09
    2de8:	ba 85       	ldd	r27, Y+10	; 0x0a
    2dea:	82 17       	cp	r24, r18
    2dec:	93 07       	cpc	r25, r19
    2dee:	a4 07       	cpc	r26, r20
    2df0:	b5 07       	cpc	r27, r21
    2df2:	a0 f4       	brcc	.+40     	; 0x2e1c <Str_FmtNbr_Int32U+0xc6>
                nbr_exp *= nbr_base;
    2df4:	8f 89       	ldd	r24, Y+23	; 0x17
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e0       	ldi	r20, 0x00	; 0
    2dfc:	50 e0       	ldi	r21, 0x00	; 0
    2dfe:	8f 81       	ldd	r24, Y+7	; 0x07
    2e00:	98 85       	ldd	r25, Y+8	; 0x08
    2e02:	a9 85       	ldd	r26, Y+9	; 0x09
    2e04:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e06:	bc 01       	movw	r22, r24
    2e08:	cd 01       	movw	r24, r26
    2e0a:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8f 83       	std	Y+7, r24	; 0x07
    2e14:	98 87       	std	Y+8, r25	; 0x08
    2e16:	a9 87       	std	Y+9, r26	; 0x09
    2e18:	ba 87       	std	Y+10, r27	; 0x0a
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <Str_FmtNbr_Int32U+0xca>
            } else {
                ovf      = DEF_YES;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	8d 87       	std	Y+13, r24	; 0x0d
            }
            log_ceil++;
    2e20:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	8b 87       	std	Y+11, r24	; 0x0b

    if (lead_zeros != DEF_YES) {                                /* If lead zeros NOT ENABLED, ...                       */
        log_ceil = 1;                                           /* ... calc ceil[log(nbr)]    ...                       */
        nbr_exp  = nbr_base;
        ovf      = DEF_NO;
        while ((nbr_exp <= nbr) &&
    2e26:	2f 81       	ldd	r18, Y+7	; 0x07
    2e28:	38 85       	ldd	r19, Y+8	; 0x08
    2e2a:	49 85       	ldd	r20, Y+9	; 0x09
    2e2c:	5a 85       	ldd	r21, Y+10	; 0x0a
    2e2e:	8a 89       	ldd	r24, Y+18	; 0x12
    2e30:	9b 89       	ldd	r25, Y+19	; 0x13
    2e32:	ac 89       	ldd	r26, Y+20	; 0x14
    2e34:	bd 89       	ldd	r27, Y+21	; 0x15
    2e36:	82 17       	cp	r24, r18
    2e38:	93 07       	cpc	r25, r19
    2e3a:	a4 07       	cpc	r26, r20
    2e3c:	b5 07       	cpc	r27, r21
    2e3e:	20 f0       	brcs	.+8      	; 0x2e48 <Str_FmtNbr_Int32U+0xf2>
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	88 23       	and	r24, r24
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <Str_FmtNbr_Int32U+0xf2>
    2e46:	bf cf       	rjmp	.-130    	; 0x2dc6 <Str_FmtNbr_Int32U+0x70>
            } else {
                ovf      = DEF_YES;
            }
            log_ceil++;
        }
        if (nbr_dig > log_ceil) {
    2e48:	9e 89       	ldd	r25, Y+22	; 0x16
    2e4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4c:	89 17       	cp	r24, r25
    2e4e:	10 f4       	brcc	.+4      	; 0x2e54 <Str_FmtNbr_Int32U+0xfe>
            nbr_dig = log_ceil;                                 /* ... & lim max nbr digs.                              */
    2e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e52:	8e 8b       	std	Y+22, r24	; 0x16
        }
    }

    nbr_fmt  = nbr;
    2e54:	8a 89       	ldd	r24, Y+18	; 0x12
    2e56:	9b 89       	ldd	r25, Y+19	; 0x13
    2e58:	ac 89       	ldd	r26, Y+20	; 0x14
    2e5a:	bd 89       	ldd	r27, Y+21	; 0x15
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	ad 83       	std	Y+5, r26	; 0x05
    2e62:	be 83       	std	Y+6, r27	; 0x06
    pstr_fmt = pstr + nbr_dig;
    2e64:	8e 89       	ldd	r24, Y+22	; 0x16
    2e66:	88 2f       	mov	r24, r24
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2e6c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	89 83       	std	Y+1, r24	; 0x01
    2e74:	9a 83       	std	Y+2, r25	; 0x02

    if (nul != DEF_NO) {                                        /* If NOT DISABLED, append NULL char (see Note #4).     */
    2e76:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e78:	88 23       	and	r24, r24
    2e7a:	21 f0       	breq	.+8      	; 0x2e84 <Str_FmtNbr_Int32U+0x12e>
       *pstr_fmt = (CPU_CHAR)0;
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e80:	fc 01       	movw	r30, r24
    2e82:	10 82       	st	Z, r1
    }
    pstr_fmt--;
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	9a 81       	ldd	r25, Y+2	; 0x02
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	9a 83       	std	Y+2, r25	; 0x02

    if (nbr_dig > 0) {
    2e8e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e90:	88 23       	and	r24, r24
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <Str_FmtNbr_Int32U+0x140>
    2e94:	61 c0       	rjmp	.+194    	; 0x2f58 <Str_FmtNbr_Int32U+0x202>
        for (i = 1; i <= nbr_dig; i++) {                        /* Fmt str for desired nbr digs.                        */
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	8c 87       	std	Y+12, r24	; 0x0c
    2e9a:	59 c0       	rjmp	.+178    	; 0x2f4e <Str_FmtNbr_Int32U+0x1f8>
            nbr_dig_val = nbr_fmt % nbr_base;
    2e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eaa:	ad 81       	ldd	r26, Y+5	; 0x05
    2eac:	be 81       	ldd	r27, Y+6	; 0x06
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	8e 87       	std	Y+14, r24	; 0x0e
    2ebc:	9f 87       	std	Y+15, r25	; 0x0f
    2ebe:	a8 8b       	std	Y+16, r26	; 0x10
    2ec0:	b9 8b       	std	Y+17, r27	; 0x11
            if (nbr_dig_val <= 9) {
    2ec2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ec4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ec6:	a8 89       	ldd	r26, Y+16	; 0x10
    2ec8:	b9 89       	ldd	r27, Y+17	; 0x11
    2eca:	8a 30       	cpi	r24, 0x0A	; 10
    2ecc:	91 05       	cpc	r25, r1
    2ece:	a1 05       	cpc	r26, r1
    2ed0:	b1 05       	cpc	r27, r1
    2ed2:	68 f4       	brcc	.+26     	; 0x2eee <Str_FmtNbr_Int32U+0x198>
               *pstr_fmt-- = (CPU_CHAR)(nbr_dig_val + '0');
    2ed4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ed6:	28 2f       	mov	r18, r24
    2ed8:	20 5d       	subi	r18, 0xD0	; 208
    2eda:	89 81       	ldd	r24, Y+1	; 0x01
    2edc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ede:	fc 01       	movw	r30, r24
    2ee0:	20 83       	st	Z, r18
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	1c c0       	rjmp	.+56     	; 0x2f26 <Str_FmtNbr_Int32U+0x1d0>
            } else {
                if (lower_case !=  DEF_YES) {
    2eee:	89 8d       	ldd	r24, Y+25	; 0x19
    2ef0:	81 30       	cpi	r24, 0x01	; 1
    2ef2:	69 f0       	breq	.+26     	; 0x2f0e <Str_FmtNbr_Int32U+0x1b8>
                   *pstr_fmt--  = (CPU_CHAR)(nbr_dig_val + 'A' - 10);
    2ef4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ef6:	28 2f       	mov	r18, r24
    2ef8:	29 5c       	subi	r18, 0xC9	; 201
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	9a 81       	ldd	r25, Y+2	; 0x02
    2efe:	fc 01       	movw	r30, r24
    2f00:	20 83       	st	Z, r18
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	9a 83       	std	Y+2, r25	; 0x02
    2f0c:	0c c0       	rjmp	.+24     	; 0x2f26 <Str_FmtNbr_Int32U+0x1d0>
                } else {
                   *pstr_fmt--  = (CPU_CHAR)(nbr_dig_val + 'a' - 10);
    2f0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f10:	28 2f       	mov	r18, r24
    2f12:	29 5a       	subi	r18, 0xA9	; 169
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	9a 81       	ldd	r25, Y+2	; 0x02
    2f18:	fc 01       	movw	r30, r24
    2f1a:	20 83       	st	Z, r18
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	89 83       	std	Y+1, r24	; 0x01
    2f24:	9a 83       	std	Y+2, r25	; 0x02
                }
            }
            nbr_fmt /= nbr_base;                                /* Shift nbr to next more significant dig.              */
    2f26:	8f 89       	ldd	r24, Y+23	; 0x17
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	50 e0       	ldi	r21, 0x00	; 0
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	ad 81       	ldd	r26, Y+5	; 0x05
    2f36:	be 81       	ldd	r27, Y+6	; 0x06
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    2f40:	2b 83       	std	Y+3, r18	; 0x03
    2f42:	3c 83       	std	Y+4, r19	; 0x04
    2f44:	4d 83       	std	Y+5, r20	; 0x05
    2f46:	5e 83       	std	Y+6, r21	; 0x06
       *pstr_fmt = (CPU_CHAR)0;
    }
    pstr_fmt--;

    if (nbr_dig > 0) {
        for (i = 1; i <= nbr_dig; i++) {                        /* Fmt str for desired nbr digs.                        */
    2f48:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f4a:	8f 5f       	subi	r24, 0xFF	; 255
    2f4c:	8c 87       	std	Y+12, r24	; 0x0c
    2f4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f50:	8e 89       	ldd	r24, Y+22	; 0x16
    2f52:	89 17       	cp	r24, r25
    2f54:	08 f0       	brcs	.+2      	; 0x2f58 <Str_FmtNbr_Int32U+0x202>
    2f56:	a2 cf       	rjmp	.-188    	; 0x2e9c <Str_FmtNbr_Int32U+0x146>
            nbr_fmt /= nbr_base;                                /* Shift nbr to next more significant dig.              */
        }
    }


    return (pstr);                                              /* Rtn ptr to fmt'd str (see Note #6c).                 */
    2f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
    2f5c:	6c 96       	adiw	r28, 0x1c	; 28
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	0f 91       	pop	r16
    2f68:	ef 90       	pop	r14
    2f6a:	cf 90       	pop	r12
    2f6c:	bf 90       	pop	r11
    2f6e:	af 90       	pop	r10
    2f70:	08 95       	ret

00002f72 <Str_FmtNbr_Int32S>:
                              CPU_INT08U    nbr_base,
                              CPU_BOOLEAN   lead_zeros,
                              CPU_BOOLEAN   lower_case,
                              CPU_BOOLEAN   nul,
                              CPU_CHAR     *pstr)
{
    2f72:	af 92       	push	r10
    2f74:	bf 92       	push	r11
    2f76:	cf 92       	push	r12
    2f78:	ef 92       	push	r14
    2f7a:	0f 93       	push	r16
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	63 97       	sbiw	r28, 0x13	; 19
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	69 87       	std	Y+9, r22	; 0x09
    2f8c:	7a 87       	std	Y+10, r23	; 0x0a
    2f8e:	8b 87       	std	Y+11, r24	; 0x0b
    2f90:	9c 87       	std	Y+12, r25	; 0x0c
    2f92:	4d 87       	std	Y+13, r20	; 0x0d
    2f94:	2e 87       	std	Y+14, r18	; 0x0e
    2f96:	0f 87       	std	Y+15, r16	; 0x0f
    2f98:	e8 8a       	std	Y+16, r14	; 0x10
    2f9a:	c9 8a       	std	Y+17, r12	; 0x11
    2f9c:	aa 8a       	std	Y+18, r10	; 0x12
    2f9e:	bb 8a       	std	Y+19, r11	; 0x13
    CPU_CHAR    *pstr_fmt;
    CPU_CHAR    *pstr_nbr;
    CPU_INT32S   nbr_fmt;


    if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if str ptr NULL (see Note #6a).             */
    2fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fa2:	9b 89       	ldd	r25, Y+19	; 0x13
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	19 f4       	brne	.+6      	; 0x2fae <Str_FmtNbr_Int32S+0x3c>
        return ((CPU_CHAR *)0);
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	52 c0       	rjmp	.+164    	; 0x3052 <Str_FmtNbr_Int32S+0xe0>
    }
                                                                /* Rtn NULL if invalid base (see Note #6b).             */
    if ((nbr_base <  2) ||
    2fae:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	18 f0       	brcs	.+6      	; 0x2fba <Str_FmtNbr_Int32S+0x48>
    2fb4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb6:	85 32       	cpi	r24, 0x25	; 37
    2fb8:	18 f0       	brcs	.+6      	; 0x2fc0 <Str_FmtNbr_Int32S+0x4e>
        (nbr_base > 36)) {
        return ((CPU_CHAR *)0);
    2fba:	80 e0       	ldi	r24, 0x00	; 0
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	49 c0       	rjmp	.+146    	; 0x3052 <Str_FmtNbr_Int32S+0xe0>
    }


    nbr_fmt  = nbr;
    2fc0:	89 85       	ldd	r24, Y+9	; 0x09
    2fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2fc6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
    2fca:	9c 83       	std	Y+4, r25	; 0x04
    2fcc:	ad 83       	std	Y+5, r26	; 0x05
    2fce:	be 83       	std	Y+6, r27	; 0x06
    pstr_fmt = pstr;
    2fd0:	8a 89       	ldd	r24, Y+18	; 0x12
    2fd2:	9b 89       	ldd	r25, Y+19	; 0x13
    2fd4:	89 83       	std	Y+1, r24	; 0x01
    2fd6:	9a 83       	std	Y+2, r25	; 0x02

    if (nbr_fmt < 0) {                                          /* If nbr neg,                ...                       */
    2fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fda:	9c 81       	ldd	r25, Y+4	; 0x04
    2fdc:	ad 81       	ldd	r26, Y+5	; 0x05
    2fde:	be 81       	ldd	r27, Y+6	; 0x06
    2fe0:	bb 23       	and	r27, r27
    2fe2:	e4 f4       	brge	.+56     	; 0x301c <Str_FmtNbr_Int32S+0xaa>
        nbr_fmt = -nbr_fmt;                                     /* ... negate nbr;            ...                       */
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	ad 81       	ldd	r26, Y+5	; 0x05
    2fea:	be 81       	ldd	r27, Y+6	; 0x06
    2fec:	b0 95       	com	r27
    2fee:	a0 95       	com	r26
    2ff0:	90 95       	com	r25
    2ff2:	81 95       	neg	r24
    2ff4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff6:	af 4f       	sbci	r26, 0xFF	; 255
    2ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	9c 83       	std	Y+4, r25	; 0x04
    2ffe:	ad 83       	std	Y+5, r26	; 0x05
    3000:	be 83       	std	Y+6, r27	; 0x06
        if (nbr_dig > 0) {                                      /* ... & if at least one dig, ...                       */
    3002:	8d 85       	ldd	r24, Y+13	; 0x0d
    3004:	88 23       	and	r24, r24
    3006:	51 f0       	breq	.+20     	; 0x301c <Str_FmtNbr_Int32S+0xaa>
           *pstr_fmt++ = '-';                                   /* ... prepend a neg sign.                              */
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	9a 81       	ldd	r25, Y+2	; 0x02
    300c:	2d e2       	ldi	r18, 0x2D	; 45
    300e:	fc 01       	movw	r30, r24
    3010:	20 83       	st	Z, r18
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	9a 81       	ldd	r25, Y+2	; 0x02
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	9a 83       	std	Y+2, r25	; 0x02
        }
    }

                                                                /* Fmt rem'ing unsigned nbr.                            */
    pstr_nbr = Str_FmtNbr_Int32U((CPU_INT32U )nbr_fmt,
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	ad 81       	ldd	r26, Y+5	; 0x05
    3022:	be 81       	ldd	r27, Y+6	; 0x06
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	bc 01       	movw	r22, r24
    302a:	cd 01       	movw	r24, r26
    302c:	4d 85       	ldd	r20, Y+13	; 0x0d
    302e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3030:	0f 85       	ldd	r16, Y+15	; 0x0f
    3032:	e8 88       	ldd	r14, Y+16	; 0x10
    3034:	c9 88       	ldd	r12, Y+17	; 0x11
    3036:	5f 01       	movw	r10, r30
    3038:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <Str_FmtNbr_Int32U>
    303c:	8f 83       	std	Y+7, r24	; 0x07
    303e:	98 87       	std	Y+8, r25	; 0x08
                                 (CPU_INT08U )nbr_base,
                                 (CPU_BOOLEAN)lead_zeros,
                                 (CPU_BOOLEAN)lower_case,
                                 (CPU_BOOLEAN)nul,
                                 (CPU_CHAR  *)pstr_fmt);
    if (pstr_nbr == (CPU_CHAR *)0) {
    3040:	8f 81       	ldd	r24, Y+7	; 0x07
    3042:	98 85       	ldd	r25, Y+8	; 0x08
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	19 f4       	brne	.+6      	; 0x304e <Str_FmtNbr_Int32S+0xdc>
        return ((CPU_CHAR *)0);
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <Str_FmtNbr_Int32S+0xe0>
    }


    return (pstr);                                              /* Rtn ptr to fmt'd str (see Note #6c).                 */
    304e:	8a 89       	ldd	r24, Y+18	; 0x12
    3050:	9b 89       	ldd	r25, Y+19	; 0x13
}
    3052:	63 96       	adiw	r28, 0x13	; 19
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	0f 91       	pop	r16
    305e:	ef 90       	pop	r14
    3060:	cf 90       	pop	r12
    3062:	bf 90       	pop	r11
    3064:	af 90       	pop	r10
    3066:	08 95       	ret

00003068 <OS_CPU_SR_Save>:
;                     Set SREG to cpu_sr
;                     Return
;********************************************************************************************************

OS_CPU_SR_Save:
        IN      R16,SREG                                        ; Get current state of interrupts disable flag
    3068:	0f b7       	in	r16, 0x3f	; 63
        CLI                                                     ; Disable interrupts
    306a:	f8 94       	cli
        RET                                                     ; Return original SREG value in R16
    306c:	08 95       	ret

0000306e <OS_CPU_SR_Restore>:


OS_CPU_SR_Restore:
        OUT     SREG,R16                                        ; Restore SREG
    306e:	0f bf       	out	0x3f, r16	; 63
        RET                                                     ; Return
    3070:	08 95       	ret

00003072 <OSStartHighRdy>:
;                      b) Set OSRunning to TRUE,
;                      c) Switch to the highest priority task.
;********************************************************************************************************

OSStartHighRdy:
        CALL    OSTaskSwHook                                    ; Invoke user defined context switch hook
    3072:	0e 94 4b 1b 	call	0x3696	; 0x3696 <OSTaskSwHook>

        LDS     R16,OSRunning                                   ; Indicate that we are multitasking
    3076:	00 91 fd 27 	lds	r16, 0x27FD
        INC     R16                                             ;
    307a:	03 95       	inc	r16
        STS     OSRunning,R16                                   ;
    307c:	00 93 fd 27 	sts	0x27FD, r16

        LDS     R26,OSTCBHighRdy                                ; Let X point to TCB of highest priority task
    3080:	a0 91 90 2c 	lds	r26, 0x2C90
        LDS     R27,OSTCBHighRdy+1                              ; ready to run
    3084:	b0 91 91 2c 	lds	r27, 0x2C91

        RESTORE_SP                                              ; SP = MEM[X];	
    3088:	cd 91       	ld	r28, X+
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	dd 91       	ld	r29, X+
    308e:	de bf       	out	0x3e, r29	; 62
        POP_ALL                                                 ; Restore all registers
    3090:	0f 91       	pop	r16
    3092:	0b bf       	out	0x3b, r16	; 59
    3094:	0f 91       	pop	r16
    3096:	0a bf       	out	0x3a, r16	; 58
    3098:	0f 91       	pop	r16
    309a:	09 bf       	out	0x39, r16	; 57
    309c:	0f 91       	pop	r16
    309e:	08 bf       	out	0x38, r16	; 56
    30a0:	0f 91       	pop	r16
    30a2:	0c bf       	out	0x3c, r16	; 60
    30a4:	ff 91       	pop	r31
    30a6:	ef 91       	pop	r30
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	bf 91       	pop	r27
    30ae:	af 91       	pop	r26
    30b0:	9f 91       	pop	r25
    30b2:	8f 91       	pop	r24
    30b4:	7f 91       	pop	r23
    30b6:	6f 91       	pop	r22
    30b8:	5f 91       	pop	r21
    30ba:	4f 91       	pop	r20
    30bc:	3f 91       	pop	r19
    30be:	2f 91       	pop	r18
    30c0:	1f 91       	pop	r17
    30c2:	0f 91       	pop	r16
    30c4:	ff 90       	pop	r15
    30c6:	ef 90       	pop	r14
    30c8:	df 90       	pop	r13
    30ca:	cf 90       	pop	r12
    30cc:	bf 90       	pop	r11
    30ce:	af 90       	pop	r10
    30d0:	9f 90       	pop	r9
    30d2:	8f 90       	pop	r8
    30d4:	7f 90       	pop	r7
    30d6:	6f 90       	pop	r6
    30d8:	5f 90       	pop	r5
    30da:	4f 90       	pop	r4
    30dc:	3f 90       	pop	r3
    30de:	2f 90       	pop	r2
    30e0:	1f 90       	pop	r1
    30e2:	0f 90       	pop	r0
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	0f 90       	pop	r0
        RETI                                                    ; Start task
    30e8:	18 95       	reti

000030ea <OSCtxSw>:
;                     - SP                         = OSTCBHighRdy->OSTCBStrkPtr
;                     - Pop all the register from the new stack
;********************************************************************************************************

OSCtxSw:
        PUSH_ALL                                                ; Save current task's context   				
    30ea:	0f 92       	push	r0
    30ec:	0f b6       	in	r0, 0x3f	; 63
    30ee:	0f 92       	push	r0
    30f0:	1f 92       	push	r1
    30f2:	11 24       	eor	r1, r1
    30f4:	2f 92       	push	r2
    30f6:	3f 92       	push	r3
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	2f 93       	push	r18
    3116:	3f 93       	push	r19
    3118:	4f 93       	push	r20
    311a:	5f 93       	push	r21
    311c:	6f 93       	push	r22
    311e:	7f 93       	push	r23
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	af 93       	push	r26
    3126:	bf 93       	push	r27
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	ef 93       	push	r30
    312e:	ff 93       	push	r31
    3130:	0c b7       	in	r16, 0x3c	; 60
    3132:	0f 93       	push	r16
    3134:	08 b7       	in	r16, 0x38	; 56
    3136:	0f 93       	push	r16
    3138:	09 b7       	in	r16, 0x39	; 57
    313a:	0f 93       	push	r16
    313c:	0a b7       	in	r16, 0x3a	; 58
    313e:	0f 93       	push	r16
    3140:	0b b7       	in	r16, 0x3b	; 59
    3142:	0f 93       	push	r16
		      
		IN      R26,  SPL                                       ; X = SP
    3144:	ad b7       	in	r26, 0x3d	; 61
		IN      R27,  SPH                                       ;              
    3146:	be b7       	in	r27, 0x3e	; 62
		
		LDS     R28,OSTCBCur                                    ; Y = OSTCBCur->OSTCBStkPtr
    3148:	c0 91 08 2e 	lds	r28, 0x2E08
        LDS     R29,OSTCBCur+1                                  ;        		
    314c:	d0 91 09 2e 	lds	r29, 0x2E09
        ST      Y+,R26                                          ; Y = SP
    3150:	a9 93       	st	Y+, r26
        ST      Y+,R27                                          ;
    3152:	b9 93       	st	Y+, r27

        CALL    OSTaskSwHook                                    ; Call user defined task switch hook
    3154:	0e 94 4b 1b 	call	0x3696	; 0x3696 <OSTaskSwHook>

        LDS     R16,OSPrioHighRdy                               ; OSPrioCur = OSPrioHighRdy
    3158:	00 91 04 28 	lds	r16, 0x2804
        STS     OSPrioCur,R16
    315c:	00 93 de 2a 	sts	0x2ADE, r16

        LDS     R26,OSTCBHighRdy                                ; Let X point to TCB of highest priority task
    3160:	a0 91 90 2c 	lds	r26, 0x2C90
        LDS     R27,OSTCBHighRdy+1                              ; ready to run
    3164:	b0 91 91 2c 	lds	r27, 0x2C91
        STS     OSTCBCur,R26                                    ; OSTCBCur = OSTCBHighRdy
    3168:	a0 93 08 2e 	sts	0x2E08, r26
        STS     OSTCBCur+1,R27                                  
    316c:	b0 93 09 2e 	sts	0x2E09, r27
     
	    RESTORE_SP                                              ; SP = MEM[X];						        
    3170:	cd 91       	ld	r28, X+
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	dd 91       	ld	r29, X+
    3176:	de bf       	out	0x3e, r29	; 62
		POP_ALL
    3178:	0f 91       	pop	r16
    317a:	0b bf       	out	0x3b, r16	; 59
    317c:	0f 91       	pop	r16
    317e:	0a bf       	out	0x3a, r16	; 58
    3180:	0f 91       	pop	r16
    3182:	09 bf       	out	0x39, r16	; 57
    3184:	0f 91       	pop	r16
    3186:	08 bf       	out	0x38, r16	; 56
    3188:	0f 91       	pop	r16
    318a:	0c bf       	out	0x3c, r16	; 60
    318c:	ff 91       	pop	r31
    318e:	ef 91       	pop	r30
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	bf 91       	pop	r27
    3196:	af 91       	pop	r26
    3198:	9f 91       	pop	r25
    319a:	8f 91       	pop	r24
    319c:	7f 91       	pop	r23
    319e:	6f 91       	pop	r22
    31a0:	5f 91       	pop	r21
    31a2:	4f 91       	pop	r20
    31a4:	3f 91       	pop	r19
    31a6:	2f 91       	pop	r18
    31a8:	1f 91       	pop	r17
    31aa:	0f 91       	pop	r16
    31ac:	ff 90       	pop	r15
    31ae:	ef 90       	pop	r14
    31b0:	df 90       	pop	r13
    31b2:	cf 90       	pop	r12
    31b4:	bf 90       	pop	r11
    31b6:	af 90       	pop	r10
    31b8:	9f 90       	pop	r9
    31ba:	8f 90       	pop	r8
    31bc:	7f 90       	pop	r7
    31be:	6f 90       	pop	r6
    31c0:	5f 90       	pop	r5
    31c2:	4f 90       	pop	r4
    31c4:	3f 90       	pop	r3
    31c6:	2f 90       	pop	r2
    31c8:	1f 90       	pop	r1
    31ca:	0f 90       	pop	r0
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	0f 90       	pop	r0
		RET
    31d0:	08 95       	ret

000031d2 <OSIntCtxSw>:
;                                                PCH
;                                                PCL                                     (High memory)
;*********************************************************************************************************

OSIntCtxSw:
        CALL    OSTaskSwHook                                    ; Call user defined task switch hook
    31d2:	0e 94 4b 1b 	call	0x3696	; 0x3696 <OSTaskSwHook>

        LDS     R16,OSPrioHighRdy                               ; OSPrioCur = OSPrioHighRdy
    31d6:	00 91 04 28 	lds	r16, 0x2804
        STS     OSPrioCur,R16                                   ;
    31da:	00 93 de 2a 	sts	0x2ADE, r16

        LDS     R26,OSTCBHighRdy                                ; X = OSTCBHighRdy->OSTCBStkPtr
    31de:	a0 91 90 2c 	lds	r26, 0x2C90
        LDS     R27,OSTCBHighRdy+1                              ;
    31e2:	b0 91 91 2c 	lds	r27, 0x2C91
        STS     OSTCBCur,R26                                    ; OSTCBCur = OSTCBHighRdy
    31e6:	a0 93 08 2e 	sts	0x2E08, r26
        STS     OSTCBCur+1,R27                                  ;
    31ea:	b0 93 09 2e 	sts	0x2E09, r27

        RESTORE_SP                                              ; SP = MEM[X];					     
    31ee:	cd 91       	ld	r28, X+
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	dd 91       	ld	r29, X+
    31f4:	de bf       	out	0x3e, r29	; 62
		POP_ALL                                                 ; Restore all registers
    31f6:	0f 91       	pop	r16
    31f8:	0b bf       	out	0x3b, r16	; 59
    31fa:	0f 91       	pop	r16
    31fc:	0a bf       	out	0x3a, r16	; 58
    31fe:	0f 91       	pop	r16
    3200:	09 bf       	out	0x39, r16	; 57
    3202:	0f 91       	pop	r16
    3204:	08 bf       	out	0x38, r16	; 56
    3206:	0f 91       	pop	r16
    3208:	0c bf       	out	0x3c, r16	; 60
    320a:	ff 91       	pop	r31
    320c:	ef 91       	pop	r30
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	bf 91       	pop	r27
    3214:	af 91       	pop	r26
    3216:	9f 91       	pop	r25
    3218:	8f 91       	pop	r24
    321a:	7f 91       	pop	r23
    321c:	6f 91       	pop	r22
    321e:	5f 91       	pop	r21
    3220:	4f 91       	pop	r20
    3222:	3f 91       	pop	r19
    3224:	2f 91       	pop	r18
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
    322a:	ff 90       	pop	r15
    322c:	ef 90       	pop	r14
    322e:	df 90       	pop	r13
    3230:	cf 90       	pop	r12
    3232:	bf 90       	pop	r11
    3234:	af 90       	pop	r10
    3236:	9f 90       	pop	r9
    3238:	8f 90       	pop	r8
    323a:	7f 90       	pop	r7
    323c:	6f 90       	pop	r6
    323e:	5f 90       	pop	r5
    3240:	4f 90       	pop	r4
    3242:	3f 90       	pop	r3
    3244:	2f 90       	pop	r2
    3246:	1f 90       	pop	r1
    3248:	0f 90       	pop	r0
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	0f 90       	pop	r0
        RETI
    324e:	18 95       	reti

00003250 <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	cd b7       	in	r28, 0x3d	; 61
    3256:	de b7       	in	r29, 0x3e	; 62
#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr = 0;
    3258:	10 92 d2 27 	sts	0x27D2, r1
    325c:	10 92 d3 27 	sts	0x27D3, r1
#endif
}
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	08 95       	ret

00003266 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
    3266:	df 93       	push	r29
    3268:	cf 93       	push	r28
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
}
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskCreateHook (OS_TCB *ptcb)
{
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	0f 92       	push	r0
    327a:	0f 92       	push	r0
    327c:	cd b7       	in	r28, 0x3d	; 61
    327e:	de b7       	in	r29, 0x3e	; 62
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	9a 83       	std	Y+2, r25	; 0x02
#if OS_APP_HOOKS_EN > 0
    App_TaskCreateHook(ptcb);
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	0e 94 ca 05 	call	0xb94	; 0xb94 <App_TaskCreateHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskDelHook (OS_TCB *ptcb)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	0f 92       	push	r0
    329c:	0f 92       	push	r0
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	9a 83       	std	Y+2, r25	; 0x02
#if OS_APP_HOOKS_EN > 0
    App_TaskDelHook(ptcb);
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	0e 94 d7 05 	call	0xbae	; 0xbae <App_TaskDelHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void  OSTaskIdleHook (void)
{
    32b8:	df 93       	push	r29
    32ba:	cf 93       	push	r28
    32bc:	cd b7       	in	r28, 0x3d	; 61
    32be:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskIdleHook();
    32c0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <App_TaskIdleHook>
#endif
}
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0
void  OSTaskStatHook (void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskStatHook();
    32d2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <App_TaskStatHook>
#endif
}
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <OSTaskStkInit>:
*              stack.
**********************************************************************************************************
*/

OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
{
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	2c 97       	sbiw	r28, 0x0c	; 12
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	6f 83       	std	Y+7, r22	; 0x07
    32f0:	78 87       	std	Y+8, r23	; 0x08
    32f2:	49 87       	std	Y+9, r20	; 0x09
    32f4:	5a 87       	std	Y+10, r21	; 0x0a
    32f6:	2b 87       	std	Y+11, r18	; 0x0b
    32f8:	3c 87       	std	Y+12, r19	; 0x0c
    INT32U  tmp;

    (void)opt;                              /* 'opt' is not used, prevent warning                       */
	tmp      = (INT32U)task;
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	aa 27       	eor	r26, r26
    3300:	97 fd       	sbrc	r25, 7
    3302:	a0 95       	com	r26
    3304:	ba 2f       	mov	r27, r26
    3306:	89 83       	std	Y+1, r24	; 0x01
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	ab 83       	std	Y+3, r26	; 0x03
    330c:	bc 83       	std	Y+4, r27	; 0x04
                                            /* Put task start address on top of "hardware stack"        */
    *ptos--  = (INT8U)(tmp & 0xFF);    		/* Save PC return address                                   */
    330e:	29 81       	ldd	r18, Y+1	; 0x01
    3310:	89 85       	ldd	r24, Y+9	; 0x09
    3312:	9a 85       	ldd	r25, Y+10	; 0x0a
    3314:	fc 01       	movw	r30, r24
    3316:	20 83       	st	Z, r18
    3318:	89 85       	ldd	r24, Y+9	; 0x09
    331a:	9a 85       	ldd	r25, Y+10	; 0x0a
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	89 87       	std	Y+9, r24	; 0x09
    3320:	9a 87       	std	Y+10, r25	; 0x0a
    tmp    >>= 8;
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	ab 81       	ldd	r26, Y+3	; 0x03
    3328:	bc 81       	ldd	r27, Y+4	; 0x04
    332a:	89 2f       	mov	r24, r25
    332c:	9a 2f       	mov	r25, r26
    332e:	ab 2f       	mov	r26, r27
    3330:	bb 27       	eor	r27, r27
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	ab 83       	std	Y+3, r26	; 0x03
    3338:	bc 83       	std	Y+4, r27	; 0x04
    *ptos--  = (INT8U)(tmp & 0xFF);
    333a:	29 81       	ldd	r18, Y+1	; 0x01
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	fc 01       	movw	r30, r24
    3342:	20 83       	st	Z, r18
    3344:	89 85       	ldd	r24, Y+9	; 0x09
    3346:	9a 85       	ldd	r25, Y+10	; 0x0a
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	89 87       	std	Y+9, r24	; 0x09
    334c:	9a 87       	std	Y+10, r25	; 0x0a
    tmp    >>= 8;
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	9a 81       	ldd	r25, Y+2	; 0x02
    3352:	ab 81       	ldd	r26, Y+3	; 0x03
    3354:	bc 81       	ldd	r27, Y+4	; 0x04
    3356:	89 2f       	mov	r24, r25
    3358:	9a 2f       	mov	r25, r26
    335a:	ab 2f       	mov	r26, r27
    335c:	bb 27       	eor	r27, r27
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	9a 83       	std	Y+2, r25	; 0x02
    3362:	ab 83       	std	Y+3, r26	; 0x03
    3364:	bc 83       	std	Y+4, r27	; 0x04
    *ptos--  = (INT8U)(tmp & 0xFF);
    3366:	29 81       	ldd	r18, Y+1	; 0x01
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	fc 01       	movw	r30, r24
    336e:	20 83       	st	Z, r18
    3370:	89 85       	ldd	r24, Y+9	; 0x09
    3372:	9a 85       	ldd	r25, Y+10	; 0x0a
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	89 87       	std	Y+9, r24	; 0x09
    3378:	9a 87       	std	Y+10, r25	; 0x0a

    *ptos--  = (INT8U)0x00;            		/* R0    = 0x00                                             */
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	fc 01       	movw	r30, r24
    3380:	10 82       	st	Z, r1
    3382:	89 85       	ldd	r24, Y+9	; 0x09
    3384:	9a 85       	ldd	r25, Y+10	; 0x0a
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	89 87       	std	Y+9, r24	; 0x09
    338a:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x80;            		/* SREG  = Interrupts enabled                               */
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e8       	ldi	r18, 0x80	; 128
    3392:	fc 01       	movw	r30, r24
    3394:	20 83       	st	Z, r18
    3396:	89 85       	ldd	r24, Y+9	; 0x09
    3398:	9a 85       	ldd	r25, Y+10	; 0x0a
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	89 87       	std	Y+9, r24	; 0x09
    339e:	9a 87       	std	Y+10, r25	; 0x0a

    *ptos--  = (INT8U)0x00;            		/* R1    = 0x00                                             */
    33a0:	89 85       	ldd	r24, Y+9	; 0x09
    33a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a4:	fc 01       	movw	r30, r24
    33a6:	10 82       	st	Z, r1
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	89 87       	std	Y+9, r24	; 0x09
    33b0:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x02;            		/* R2    = 0x02                                             */
    33b2:	89 85       	ldd	r24, Y+9	; 0x09
    33b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b6:	22 e0       	ldi	r18, 0x02	; 2
    33b8:	fc 01       	movw	r30, r24
    33ba:	20 83       	st	Z, r18
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	89 87       	std	Y+9, r24	; 0x09
    33c4:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x03;            		/* R3    = 0x03                                             */
    33c6:	89 85       	ldd	r24, Y+9	; 0x09
    33c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ca:	23 e0       	ldi	r18, 0x03	; 3
    33cc:	fc 01       	movw	r30, r24
    33ce:	20 83       	st	Z, r18
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	89 87       	std	Y+9, r24	; 0x09
    33d8:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x04;            		/* R4    = 0x04                                             */
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	24 e0       	ldi	r18, 0x04	; 4
    33e0:	fc 01       	movw	r30, r24
    33e2:	20 83       	st	Z, r18
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	89 87       	std	Y+9, r24	; 0x09
    33ec:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x05;            		/* R5    = 0x05                                             */
    33ee:	89 85       	ldd	r24, Y+9	; 0x09
    33f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f2:	25 e0       	ldi	r18, 0x05	; 5
    33f4:	fc 01       	movw	r30, r24
    33f6:	20 83       	st	Z, r18
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	89 87       	std	Y+9, r24	; 0x09
    3400:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x06;            		/* R6    = 0x06                                             */
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	9a 85       	ldd	r25, Y+10	; 0x0a
    3406:	26 e0       	ldi	r18, 0x06	; 6
    3408:	fc 01       	movw	r30, r24
    340a:	20 83       	st	Z, r18
    340c:	89 85       	ldd	r24, Y+9	; 0x09
    340e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	89 87       	std	Y+9, r24	; 0x09
    3414:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x07;            		/* R7    = 0x07                                             */
    3416:	89 85       	ldd	r24, Y+9	; 0x09
    3418:	9a 85       	ldd	r25, Y+10	; 0x0a
    341a:	27 e0       	ldi	r18, 0x07	; 7
    341c:	fc 01       	movw	r30, r24
    341e:	20 83       	st	Z, r18
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	9a 85       	ldd	r25, Y+10	; 0x0a
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	89 87       	std	Y+9, r24	; 0x09
    3428:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x08;            		/* R8    = 0x08                                             */
    342a:	89 85       	ldd	r24, Y+9	; 0x09
    342c:	9a 85       	ldd	r25, Y+10	; 0x0a
    342e:	28 e0       	ldi	r18, 0x08	; 8
    3430:	fc 01       	movw	r30, r24
    3432:	20 83       	st	Z, r18
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	89 87       	std	Y+9, r24	; 0x09
    343c:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x09;            		/* R9    = 0x09                                             */
    343e:	89 85       	ldd	r24, Y+9	; 0x09
    3440:	9a 85       	ldd	r25, Y+10	; 0x0a
    3442:	29 e0       	ldi	r18, 0x09	; 9
    3444:	fc 01       	movw	r30, r24
    3446:	20 83       	st	Z, r18
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	89 87       	std	Y+9, r24	; 0x09
    3450:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x10;            		/* R10   = 0x10                                             */
    3452:	89 85       	ldd	r24, Y+9	; 0x09
    3454:	9a 85       	ldd	r25, Y+10	; 0x0a
    3456:	20 e1       	ldi	r18, 0x10	; 16
    3458:	fc 01       	movw	r30, r24
    345a:	20 83       	st	Z, r18
    345c:	89 85       	ldd	r24, Y+9	; 0x09
    345e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3460:	01 97       	sbiw	r24, 0x01	; 1
    3462:	89 87       	std	Y+9, r24	; 0x09
    3464:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x11;           		/* R11   = 0x11                                             */
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	21 e1       	ldi	r18, 0x11	; 17
    346c:	fc 01       	movw	r30, r24
    346e:	20 83       	st	Z, r18
    3470:	89 85       	ldd	r24, Y+9	; 0x09
    3472:	9a 85       	ldd	r25, Y+10	; 0x0a
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	89 87       	std	Y+9, r24	; 0x09
    3478:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x12;            		/* R12   = 0x12                                             */
    347a:	89 85       	ldd	r24, Y+9	; 0x09
    347c:	9a 85       	ldd	r25, Y+10	; 0x0a
    347e:	22 e1       	ldi	r18, 0x12	; 18
    3480:	fc 01       	movw	r30, r24
    3482:	20 83       	st	Z, r18
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	01 97       	sbiw	r24, 0x01	; 1
    348a:	89 87       	std	Y+9, r24	; 0x09
    348c:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x13;            		/* R13   = 0x13                                             */
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	9a 85       	ldd	r25, Y+10	; 0x0a
    3492:	23 e1       	ldi	r18, 0x13	; 19
    3494:	fc 01       	movw	r30, r24
    3496:	20 83       	st	Z, r18
    3498:	89 85       	ldd	r24, Y+9	; 0x09
    349a:	9a 85       	ldd	r25, Y+10	; 0x0a
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	89 87       	std	Y+9, r24	; 0x09
    34a0:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x14;            		/* R14   = 0x14                                             */
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	24 e1       	ldi	r18, 0x14	; 20
    34a8:	fc 01       	movw	r30, r24
    34aa:	20 83       	st	Z, r18
    34ac:	89 85       	ldd	r24, Y+9	; 0x09
    34ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	89 87       	std	Y+9, r24	; 0x09
    34b4:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x15;            		/* R15   = 0x15                                             */
    34b6:	89 85       	ldd	r24, Y+9	; 0x09
    34b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ba:	25 e1       	ldi	r18, 0x15	; 21
    34bc:	fc 01       	movw	r30, r24
    34be:	20 83       	st	Z, r18
    34c0:	89 85       	ldd	r24, Y+9	; 0x09
    34c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c4:	01 97       	sbiw	r24, 0x01	; 1
    34c6:	89 87       	std	Y+9, r24	; 0x09
    34c8:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x16;            		/* R16   = 0x16                                             */
    34ca:	89 85       	ldd	r24, Y+9	; 0x09
    34cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ce:	26 e1       	ldi	r18, 0x16	; 22
    34d0:	fc 01       	movw	r30, r24
    34d2:	20 83       	st	Z, r18
    34d4:	89 85       	ldd	r24, Y+9	; 0x09
    34d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	89 87       	std	Y+9, r24	; 0x09
    34dc:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x17;            		/* R17   = 0x17                                             */
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    34e2:	27 e1       	ldi	r18, 0x17	; 23
    34e4:	fc 01       	movw	r30, r24
    34e6:	20 83       	st	Z, r18
    34e8:	89 85       	ldd	r24, Y+9	; 0x09
    34ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	89 87       	std	Y+9, r24	; 0x09
    34f0:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x18;            		/* R18   = 0x18                                             */
    34f2:	89 85       	ldd	r24, Y+9	; 0x09
    34f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f6:	28 e1       	ldi	r18, 0x18	; 24
    34f8:	fc 01       	movw	r30, r24
    34fa:	20 83       	st	Z, r18
    34fc:	89 85       	ldd	r24, Y+9	; 0x09
    34fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	89 87       	std	Y+9, r24	; 0x09
    3504:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x19;            		/* R19   = 0x19                                             */
    3506:	89 85       	ldd	r24, Y+9	; 0x09
    3508:	9a 85       	ldd	r25, Y+10	; 0x0a
    350a:	29 e1       	ldi	r18, 0x19	; 25
    350c:	fc 01       	movw	r30, r24
    350e:	20 83       	st	Z, r18
    3510:	89 85       	ldd	r24, Y+9	; 0x09
    3512:	9a 85       	ldd	r25, Y+10	; 0x0a
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	89 87       	std	Y+9, r24	; 0x09
    3518:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x20;            		/* R20   = 0x20                                             */
    351a:	89 85       	ldd	r24, Y+9	; 0x09
    351c:	9a 85       	ldd	r25, Y+10	; 0x0a
    351e:	20 e2       	ldi	r18, 0x20	; 32
    3520:	fc 01       	movw	r30, r24
    3522:	20 83       	st	Z, r18
    3524:	89 85       	ldd	r24, Y+9	; 0x09
    3526:	9a 85       	ldd	r25, Y+10	; 0x0a
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	89 87       	std	Y+9, r24	; 0x09
    352c:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x21;            		/* R21   = 0x21                                             */
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	21 e2       	ldi	r18, 0x21	; 33
    3534:	fc 01       	movw	r30, r24
    3536:	20 83       	st	Z, r18
    3538:	89 85       	ldd	r24, Y+9	; 0x09
    353a:	9a 85       	ldd	r25, Y+10	; 0x0a
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	89 87       	std	Y+9, r24	; 0x09
    3540:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x22;            		/* R22   = 0x22                                             */
    3542:	89 85       	ldd	r24, Y+9	; 0x09
    3544:	9a 85       	ldd	r25, Y+10	; 0x0a
    3546:	22 e2       	ldi	r18, 0x22	; 34
    3548:	fc 01       	movw	r30, r24
    354a:	20 83       	st	Z, r18
    354c:	89 85       	ldd	r24, Y+9	; 0x09
    354e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	89 87       	std	Y+9, r24	; 0x09
    3554:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x23;            		/* R23   = 0x23                                             */
    3556:	89 85       	ldd	r24, Y+9	; 0x09
    3558:	9a 85       	ldd	r25, Y+10	; 0x0a
    355a:	23 e2       	ldi	r18, 0x23	; 35
    355c:	fc 01       	movw	r30, r24
    355e:	20 83       	st	Z, r18
    3560:	89 85       	ldd	r24, Y+9	; 0x09
    3562:	9a 85       	ldd	r25, Y+10	; 0x0a
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	89 87       	std	Y+9, r24	; 0x09
    3568:	9a 87       	std	Y+10, r25	; 0x0a
    tmp      = (INT16U)p_arg;
    356a:	8f 81       	ldd	r24, Y+7	; 0x07
    356c:	98 85       	ldd	r25, Y+8	; 0x08
    356e:	cc 01       	movw	r24, r24
    3570:	a0 e0       	ldi	r26, 0x00	; 0
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	89 83       	std	Y+1, r24	; 0x01
    3576:	9a 83       	std	Y+2, r25	; 0x02
    3578:	ab 83       	std	Y+3, r26	; 0x03
    357a:	bc 83       	std	Y+4, r27	; 0x04
    *ptos--  = (INT8U)tmp;             		/* 'p_arg' passed in R24:R25                                */
    357c:	29 81       	ldd	r18, Y+1	; 0x01
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	fc 01       	movw	r30, r24
    3584:	20 83       	st	Z, r18
    3586:	89 85       	ldd	r24, Y+9	; 0x09
    3588:	9a 85       	ldd	r25, Y+10	; 0x0a
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	89 87       	std	Y+9, r24	; 0x09
    358e:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)(tmp >> 8);
    3590:	89 81       	ldd	r24, Y+1	; 0x01
    3592:	9a 81       	ldd	r25, Y+2	; 0x02
    3594:	ab 81       	ldd	r26, Y+3	; 0x03
    3596:	bc 81       	ldd	r27, Y+4	; 0x04
    3598:	89 2f       	mov	r24, r25
    359a:	9a 2f       	mov	r25, r26
    359c:	ab 2f       	mov	r26, r27
    359e:	bb 27       	eor	r27, r27
    35a0:	28 2f       	mov	r18, r24
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a6:	fc 01       	movw	r30, r24
    35a8:	20 83       	st	Z, r18
    35aa:	89 85       	ldd	r24, Y+9	; 0x09
    35ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	89 87       	std	Y+9, r24	; 0x09
    35b2:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x26;            		/* R26 X = 0x26                                             */
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	26 e2       	ldi	r18, 0x26	; 38
    35ba:	fc 01       	movw	r30, r24
    35bc:	20 83       	st	Z, r18
    35be:	89 85       	ldd	r24, Y+9	; 0x09
    35c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	89 87       	std	Y+9, r24	; 0x09
    35c6:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x27;            		/* R27   = 0x27                                             */
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	27 e2       	ldi	r18, 0x27	; 39
    35ce:	fc 01       	movw	r30, r24
    35d0:	20 83       	st	Z, r18
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	01 97       	sbiw	r24, 0x01	; 1
    35d8:	89 87       	std	Y+9, r24	; 0x09
    35da:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x28;            		/* R28 Y = 0x28                                             */
    35dc:	89 85       	ldd	r24, Y+9	; 0x09
    35de:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e0:	28 e2       	ldi	r18, 0x28	; 40
    35e2:	fc 01       	movw	r30, r24
    35e4:	20 83       	st	Z, r18
    35e6:	89 85       	ldd	r24, Y+9	; 0x09
    35e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ea:	01 97       	sbiw	r24, 0x01	; 1
    35ec:	89 87       	std	Y+9, r24	; 0x09
    35ee:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x29;            		/* R29   = 0x29                                             */
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	29 e2       	ldi	r18, 0x29	; 41
    35f6:	fc 01       	movw	r30, r24
    35f8:	20 83       	st	Z, r18
    35fa:	89 85       	ldd	r24, Y+9	; 0x09
    35fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fe:	01 97       	sbiw	r24, 0x01	; 1
    3600:	89 87       	std	Y+9, r24	; 0x09
    3602:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x30;            		/* R30 Z = 0x30                                             */
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	20 e3       	ldi	r18, 0x30	; 48
    360a:	fc 01       	movw	r30, r24
    360c:	20 83       	st	Z, r18
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	89 87       	std	Y+9, r24	; 0x09
    3616:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x31;            		/* R31   = 0x31                                             */
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	21 e3       	ldi	r18, 0x31	; 49
    361e:	fc 01       	movw	r30, r24
    3620:	20 83       	st	Z, r18
    3622:	89 85       	ldd	r24, Y+9	; 0x09
    3624:	9a 85       	ldd	r25, Y+10	; 0x0a
    3626:	01 97       	sbiw	r24, 0x01	; 1
    3628:	89 87       	std	Y+9, r24	; 0x09
    362a:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x00;            		/* EIND  = 0x00                                             */
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	fc 01       	movw	r30, r24
    3632:	10 82       	st	Z, r1
    3634:	89 85       	ldd	r24, Y+9	; 0x09
    3636:	9a 85       	ldd	r25, Y+10	; 0x0a
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	89 87       	std	Y+9, r24	; 0x09
    363c:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x00;            		/* RAMPD = 0x00                                             */    
    363e:	89 85       	ldd	r24, Y+9	; 0x09
    3640:	9a 85       	ldd	r25, Y+10	; 0x0a
    3642:	fc 01       	movw	r30, r24
    3644:	10 82       	st	Z, r1
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	9a 85       	ldd	r25, Y+10	; 0x0a
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	89 87       	std	Y+9, r24	; 0x09
    364e:	9a 87       	std	Y+10, r25	; 0x0a
	*ptos--  = (INT8U)0x00;            		/* RAMPX = 0x00                                             */
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	fc 01       	movw	r30, r24
    3656:	10 82       	st	Z, r1
    3658:	89 85       	ldd	r24, Y+9	; 0x09
    365a:	9a 85       	ldd	r25, Y+10	; 0x0a
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	89 87       	std	Y+9, r24	; 0x09
    3660:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x00;            		/* RAMPY = 0x00                                             */
    3662:	89 85       	ldd	r24, Y+9	; 0x09
    3664:	9a 85       	ldd	r25, Y+10	; 0x0a
    3666:	fc 01       	movw	r30, r24
    3668:	10 82       	st	Z, r1
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	89 87       	std	Y+9, r24	; 0x09
    3672:	9a 87       	std	Y+10, r25	; 0x0a
    *ptos--  = (INT8U)0x00;            		/* RAMPZ = 0x00                                             */
    3674:	89 85       	ldd	r24, Y+9	; 0x09
    3676:	9a 85       	ldd	r25, Y+10	; 0x0a
    3678:	fc 01       	movw	r30, r24
    367a:	10 82       	st	Z, r1
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	89 87       	std	Y+9, r24	; 0x09
    3684:	9a 87       	std	Y+10, r25	; 0x0a

    return ((OS_STK *)ptos);
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    368a:	2c 96       	adiw	r28, 0x0c	; 12
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	de bf       	out	0x3e, r29	; 62
    3690:	cf 91       	pop	r28
    3692:	df 91       	pop	r29
    3694:	08 95       	ret

00003696 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void  OSTaskSwHook (void)
{
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskSwHook();
    369e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <App_TaskSwHook>
#endif
}
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSTCBInitHook (OS_TCB *ptcb)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	0f 92       	push	r0
    36ae:	0f 92       	push	r0
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	9a 83       	std	Y+2, r25	; 0x02
#if OS_APP_HOOKS_EN > 0
    App_TCBInitHook(ptcb);
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <App_TCBInitHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
    36c0:	0f 90       	pop	r0
    36c2:	0f 90       	pop	r0
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void  OSTimeTickHook (void)
{
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TimeTickHook();
    36d2:	0e 94 06 06 	call	0xc0c	; 0xc0c <App_TimeTickHook>
#endif

#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr++;
    36d6:	80 91 d2 27 	lds	r24, 0x27D2
    36da:	90 91 d3 27 	lds	r25, 0x27D3
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	80 93 d2 27 	sts	0x27D2, r24
    36e4:	90 93 d3 27 	sts	0x27D3, r25
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
    36e8:	80 91 d2 27 	lds	r24, 0x27D2
    36ec:	90 91 d3 27 	lds	r25, 0x27D3
    36f0:	84 36       	cpi	r24, 0x64	; 100
    36f2:	91 05       	cpc	r25, r1
    36f4:	30 f0       	brcs	.+12     	; 0x3702 <OSTimeTickHook+0x38>
        OSTmrCtr = 0;
    36f6:	10 92 d2 27 	sts	0x27D2, r1
    36fa:	10 92 d3 27 	sts	0x27D3, r1
        OSTmrSignal();
    36fe:	0e 94 73 53 	call	0xa6e6	; 0xa6e6 <OSTmrSignal>
    }
#endif
}
    3702:	cf 91       	pop	r28
    3704:	df 91       	pop	r29
    3706:	08 95       	ret

00003708 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_VERSION >= 270 && OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	0f 92       	push	r0
    370e:	0f 92       	push	r0
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    3714:	88 e5       	ldi	r24, 0x58	; 88
    3716:	91 e2       	ldi	r25, 0x21	; 33
    3718:	89 83       	std	Y+1, r24	; 0x01
    371a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSEndiannessTest;
    371c:	8a e5       	ldi	r24, 0x5A	; 90
    371e:	91 e2       	ldi	r25, 0x21	; 33
    3720:	89 83       	std	Y+1, r24	; 0x01
    3722:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSEventMax;
    3724:	8e e5       	ldi	r24, 0x5E	; 94
    3726:	91 e2       	ldi	r25, 0x21	; 33
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSEventNameSize;
    372c:	80 e6       	ldi	r24, 0x60	; 96
    372e:	91 e2       	ldi	r25, 0x21	; 33
    3730:	89 83       	std	Y+1, r24	; 0x01
    3732:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSEventEn;
    3734:	82 e6       	ldi	r24, 0x62	; 98
    3736:	91 e2       	ldi	r25, 0x21	; 33
    3738:	89 83       	std	Y+1, r24	; 0x01
    373a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSEventSize;
    373c:	84 e6       	ldi	r24, 0x64	; 100
    373e:	91 e2       	ldi	r25, 0x21	; 33
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSEventTblSize;
    3744:	86 e6       	ldi	r24, 0x66	; 102
    3746:	91 e2       	ldi	r25, 0x21	; 33
    3748:	89 83       	std	Y+1, r24	; 0x01
    374a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSFlagEn;
    374c:	88 e6       	ldi	r24, 0x68	; 104
    374e:	91 e2       	ldi	r25, 0x21	; 33
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSFlagGrpSize;
    3754:	8a e6       	ldi	r24, 0x6A	; 106
    3756:	91 e2       	ldi	r25, 0x21	; 33
    3758:	89 83       	std	Y+1, r24	; 0x01
    375a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSFlagNodeSize;
    375c:	8c e6       	ldi	r24, 0x6C	; 108
    375e:	91 e2       	ldi	r25, 0x21	; 33
    3760:	89 83       	std	Y+1, r24	; 0x01
    3762:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSFlagWidth;
    3764:	8e e6       	ldi	r24, 0x6E	; 110
    3766:	91 e2       	ldi	r25, 0x21	; 33
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSFlagMax;
    376c:	80 e7       	ldi	r24, 0x70	; 112
    376e:	91 e2       	ldi	r25, 0x21	; 33
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSFlagNameSize;
    3774:	82 e7       	ldi	r24, 0x72	; 114
    3776:	91 e2       	ldi	r25, 0x21	; 33
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSLowestPrio;
    377c:	84 e7       	ldi	r24, 0x74	; 116
    377e:	91 e2       	ldi	r25, 0x21	; 33
    3780:	89 83       	std	Y+1, r24	; 0x01
    3782:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSMboxEn;
    3784:	86 e7       	ldi	r24, 0x76	; 118
    3786:	91 e2       	ldi	r25, 0x21	; 33
    3788:	89 83       	std	Y+1, r24	; 0x01
    378a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSMemEn;
    378c:	88 e7       	ldi	r24, 0x78	; 120
    378e:	91 e2       	ldi	r25, 0x21	; 33
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSMemMax;
    3794:	8a e7       	ldi	r24, 0x7A	; 122
    3796:	91 e2       	ldi	r25, 0x21	; 33
    3798:	89 83       	std	Y+1, r24	; 0x01
    379a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSMemNameSize;
    379c:	8c e7       	ldi	r24, 0x7C	; 124
    379e:	91 e2       	ldi	r25, 0x21	; 33
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSMemSize;
    37a4:	8e e7       	ldi	r24, 0x7E	; 126
    37a6:	91 e2       	ldi	r25, 0x21	; 33
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSMemTblSize;
    37ac:	80 e8       	ldi	r24, 0x80	; 128
    37ae:	91 e2       	ldi	r25, 0x21	; 33
    37b0:	89 83       	std	Y+1, r24	; 0x01
    37b2:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSMutexEn;
    37b4:	82 e8       	ldi	r24, 0x82	; 130
    37b6:	91 e2       	ldi	r25, 0x21	; 33
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSPtrSize;
    37bc:	84 e8       	ldi	r24, 0x84	; 132
    37be:	91 e2       	ldi	r25, 0x21	; 33
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSQEn;
    37c4:	86 e8       	ldi	r24, 0x86	; 134
    37c6:	91 e2       	ldi	r25, 0x21	; 33
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSQMax;
    37cc:	88 e8       	ldi	r24, 0x88	; 136
    37ce:	91 e2       	ldi	r25, 0x21	; 33
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSQSize;
    37d4:	8a e8       	ldi	r24, 0x8A	; 138
    37d6:	91 e2       	ldi	r25, 0x21	; 33
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSRdyTblSize;
    37dc:	8c e8       	ldi	r24, 0x8C	; 140
    37de:	91 e2       	ldi	r25, 0x21	; 33
    37e0:	89 83       	std	Y+1, r24	; 0x01
    37e2:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSSemEn;
    37e4:	8e e8       	ldi	r24, 0x8E	; 142
    37e6:	91 e2       	ldi	r25, 0x21	; 33
    37e8:	89 83       	std	Y+1, r24	; 0x01
    37ea:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSStkWidth;
    37ec:	80 e9       	ldi	r24, 0x90	; 144
    37ee:	91 e2       	ldi	r25, 0x21	; 33
    37f0:	89 83       	std	Y+1, r24	; 0x01
    37f2:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSTaskCreateEn;
    37f4:	82 e9       	ldi	r24, 0x92	; 146
    37f6:	91 e2       	ldi	r25, 0x21	; 33
    37f8:	89 83       	std	Y+1, r24	; 0x01
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskCreateExtEn;
    37fc:	84 e9       	ldi	r24, 0x94	; 148
    37fe:	91 e2       	ldi	r25, 0x21	; 33
    3800:	89 83       	std	Y+1, r24	; 0x01
    3802:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskDelEn;
    3804:	86 e9       	ldi	r24, 0x96	; 150
    3806:	91 e2       	ldi	r25, 0x21	; 33
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskIdleStkSize;
    380c:	88 e9       	ldi	r24, 0x98	; 152
    380e:	91 e2       	ldi	r25, 0x21	; 33
    3810:	89 83       	std	Y+1, r24	; 0x01
    3812:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskProfileEn;
    3814:	8a e9       	ldi	r24, 0x9A	; 154
    3816:	91 e2       	ldi	r25, 0x21	; 33
    3818:	89 83       	std	Y+1, r24	; 0x01
    381a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskMax;
    381c:	8c e9       	ldi	r24, 0x9C	; 156
    381e:	91 e2       	ldi	r25, 0x21	; 33
    3820:	89 83       	std	Y+1, r24	; 0x01
    3822:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskNameSize;
    3824:	8e e9       	ldi	r24, 0x9E	; 158
    3826:	91 e2       	ldi	r25, 0x21	; 33
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskStatEn;
    382c:	80 ea       	ldi	r24, 0xA0	; 160
    382e:	91 e2       	ldi	r25, 0x21	; 33
    3830:	89 83       	std	Y+1, r24	; 0x01
    3832:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskStatStkSize;
    3834:	82 ea       	ldi	r24, 0xA2	; 162
    3836:	91 e2       	ldi	r25, 0x21	; 33
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskStatStkChkEn;
    383c:	84 ea       	ldi	r24, 0xA4	; 164
    383e:	91 e2       	ldi	r25, 0x21	; 33
    3840:	89 83       	std	Y+1, r24	; 0x01
    3842:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTaskSwHookEn;
    3844:	86 ea       	ldi	r24, 0xA6	; 166
    3846:	91 e2       	ldi	r25, 0x21	; 33
    3848:	89 83       	std	Y+1, r24	; 0x01
    384a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSTCBPrioTblMax;
    384c:	88 ea       	ldi	r24, 0xA8	; 168
    384e:	91 e2       	ldi	r25, 0x21	; 33
    3850:	89 83       	std	Y+1, r24	; 0x01
    3852:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTCBSize;
    3854:	8a ea       	ldi	r24, 0xAA	; 170
    3856:	91 e2       	ldi	r25, 0x21	; 33
    3858:	89 83       	std	Y+1, r24	; 0x01
    385a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSTicksPerSec;
    385c:	8c ea       	ldi	r24, 0xAC	; 172
    385e:	91 e2       	ldi	r25, 0x21	; 33
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTimeTickHookEn;
    3864:	8e ea       	ldi	r24, 0xAE	; 174
    3866:	91 e2       	ldi	r25, 0x21	; 33
    3868:	89 83       	std	Y+1, r24	; 0x01
    386a:	9a 83       	std	Y+2, r25	; 0x02

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
    386c:	8e e6       	ldi	r24, 0x6E	; 110
    386e:	98 e2       	ldi	r25, 0x28	; 40
    3870:	89 83       	std	Y+1, r24	; 0x01
    3872:	9a 83       	std	Y+2, r25	; 0x02
    ptemp = (void *)&OSTmrWheelTbl[0];
    3874:	8a ed       	ldi	r24, 0xDA	; 218
    3876:	97 e2       	ldi	r25, 0x27	; 39
    3878:	89 83       	std	Y+1, r24	; 0x01
    387a:	9a 83       	std	Y+2, r25	; 0x02
#endif

    ptemp = (void *)&OSVersionNbr;
    387c:	84 eb       	ldi	r24, 0xB4	; 180
    387e:	91 e2       	ldi	r25, 0x21	; 33
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = (void *)&OSDataSize;
    3884:	86 eb       	ldi	r24, 0xB6	; 182
    3886:	91 e2       	ldi	r25, 0x21	; 33
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	9a 83       	std	Y+2, r25	; 0x02

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    388c:	0f 90       	pop	r0
    388e:	0f 90       	pop	r0
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	08 95       	ret

00003896 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3896:	df 93       	push	r29
    3898:	cf 93       	push	r28
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	28 97       	sbiw	r28, 0x08	; 8
    38a0:	cd bf       	out	0x3d, r28	; 61
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	8b 83       	std	Y+3, r24	; 0x03
    38a6:	9c 83       	std	Y+4, r25	; 0x04
    38a8:	6d 83       	std	Y+5, r22	; 0x05
    38aa:	7e 83       	std	Y+6, r23	; 0x06
    38ac:	4f 83       	std	Y+7, r20	; 0x07
    38ae:	58 87       	std	Y+8, r21	; 0x08
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    38b0:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    38b2:	80 91 07 2e 	lds	r24, 0x2E07
    38b6:	88 23       	and	r24, r24
    38b8:	39 f0       	breq	.+14     	; 0x38c8 <OSEventNameGet+0x32>
        *perr  = OS_ERR_NAME_GET_ISR;
    38ba:	8f 81       	ldd	r24, Y+7	; 0x07
    38bc:	98 85       	ldd	r25, Y+8	; 0x08
    38be:	21 e1       	ldi	r18, 0x11	; 17
    38c0:	fc 01       	movw	r30, r24
    38c2:	20 83       	st	Z, r18
        return (0);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	27 c0       	rjmp	.+78     	; 0x3916 <OSEventNameGet+0x80>
    }
    switch (pevent->OSEventType) {
    38c8:	8b 81       	ldd	r24, Y+3	; 0x03
    38ca:	9c 81       	ldd	r25, Y+4	; 0x04
    38cc:	fc 01       	movw	r30, r24
    38ce:	80 81       	ld	r24, Z
    38d0:	88 2f       	mov	r24, r24
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	84 30       	cpi	r24, 0x04	; 4
    38d8:	91 05       	cpc	r25, r1
    38da:	b8 f4       	brcc	.+46     	; 0x390a <OSEventNameGet+0x74>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    38dc:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    38e0:	89 83       	std	Y+1, r24	; 0x01
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	9c 01       	movw	r18, r24
    38e8:	22 5f       	subi	r18, 0xF2	; 242
    38ea:	3f 4f       	sbci	r19, 0xFF	; 255
    38ec:	8d 81       	ldd	r24, Y+5	; 0x05
    38ee:	9e 81       	ldd	r25, Y+6	; 0x06
    38f0:	b9 01       	movw	r22, r18
    38f2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    38f6:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    38f8:	89 81       	ldd	r24, Y+1	; 0x01
    38fa:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    38fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3900:	98 85       	ldd	r25, Y+8	; 0x08
    3902:	fc 01       	movw	r30, r24
    3904:	10 82       	st	Z, r1
    return (len);
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <OSEventNameGet+0x80>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    390a:	8f 81       	ldd	r24, Y+7	; 0x07
    390c:	98 85       	ldd	r25, Y+8	; 0x08
    390e:	21 e0       	ldi	r18, 0x01	; 1
    3910:	fc 01       	movw	r30, r24
    3912:	20 83       	st	Z, r18
             return (0);
    3914:	80 e0       	ldi	r24, 0x00	; 0
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
    3916:	28 96       	adiw	r28, 0x08	; 8
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	28 97       	sbiw	r28, 0x08	; 8
    392c:	cd bf       	out	0x3d, r28	; 61
    392e:	de bf       	out	0x3e, r29	; 62
    3930:	8b 83       	std	Y+3, r24	; 0x03
    3932:	9c 83       	std	Y+4, r25	; 0x04
    3934:	6d 83       	std	Y+5, r22	; 0x05
    3936:	7e 83       	std	Y+6, r23	; 0x06
    3938:	4f 83       	std	Y+7, r20	; 0x07
    393a:	58 87       	std	Y+8, r21	; 0x08
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    393c:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    393e:	80 91 07 2e 	lds	r24, 0x2E07
    3942:	88 23       	and	r24, r24
    3944:	31 f0       	breq	.+12     	; 0x3952 <OSEventNameSet+0x30>
        *perr = OS_ERR_NAME_SET_ISR;
    3946:	8f 81       	ldd	r24, Y+7	; 0x07
    3948:	98 85       	ldd	r25, Y+8	; 0x08
    394a:	22 e1       	ldi	r18, 0x12	; 18
    394c:	fc 01       	movw	r30, r24
    394e:	20 83       	st	Z, r18
        return;
    3950:	34 c0       	rjmp	.+104    	; 0x39ba <OSEventNameSet+0x98>
    }
    switch (pevent->OSEventType) {
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	9c 81       	ldd	r25, Y+4	; 0x04
    3956:	fc 01       	movw	r30, r24
    3958:	80 81       	ld	r24, Z
    395a:	88 2f       	mov	r24, r24
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	84 30       	cpi	r24, 0x04	; 4
    3962:	91 05       	cpc	r25, r1
    3964:	60 f4       	brcc	.+24     	; 0x397e <OSEventNameSet+0x5c>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3966:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    396a:	89 83       	std	Y+1, r24	; 0x01
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    396c:	8d 81       	ldd	r24, Y+5	; 0x05
    396e:	9e 81       	ldd	r25, Y+6	; 0x06
    3970:	0e 94 28 27 	call	0x4e50	; 0x4e50 <OS_StrLen>
    3974:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	80 31       	cpi	r24, 0x10	; 16
    397a:	38 f4       	brcc	.+14     	; 0x398a <OSEventNameSet+0x68>
    397c:	0f c0       	rjmp	.+30     	; 0x399c <OSEventNameSet+0x7a>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    397e:	8f 81       	ldd	r24, Y+7	; 0x07
    3980:	98 85       	ldd	r25, Y+8	; 0x08
    3982:	21 e0       	ldi	r18, 0x01	; 1
    3984:	fc 01       	movw	r30, r24
    3986:	20 83       	st	Z, r18
             return;
    3988:	18 c0       	rjmp	.+48     	; 0x39ba <OSEventNameSet+0x98>
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3990:	8f 81       	ldd	r24, Y+7	; 0x07
    3992:	98 85       	ldd	r25, Y+8	; 0x08
    3994:	2b e0       	ldi	r18, 0x0B	; 11
    3996:	fc 01       	movw	r30, r24
    3998:	20 83       	st	Z, r18
        return;
    399a:	0f c0       	rjmp	.+30     	; 0x39ba <OSEventNameSet+0x98>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	0e 96       	adiw	r24, 0x0e	; 14
    39a2:	2d 81       	ldd	r18, Y+5	; 0x05
    39a4:	3e 81       	ldd	r19, Y+6	; 0x06
    39a6:	b9 01       	movw	r22, r18
    39a8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    OS_EXIT_CRITICAL();
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    39b2:	8f 81       	ldd	r24, Y+7	; 0x07
    39b4:	98 85       	ldd	r25, Y+8	; 0x08
    39b6:	fc 01       	movw	r30, r24
    39b8:	10 82       	st	Z, r1
}
    39ba:	28 96       	adiw	r28, 0x08	; 8
    39bc:	cd bf       	out	0x3d, r28	; 61
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret

000039c6 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    39c6:	0f 93       	push	r16
    39c8:	1f 93       	push	r17
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	65 97       	sbiw	r28, 0x15	; 21
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	8c 87       	std	Y+12, r24	; 0x0c
    39da:	9d 87       	std	Y+13, r25	; 0x0d
    39dc:	6e 87       	std	Y+14, r22	; 0x0e
    39de:	7f 87       	std	Y+15, r23	; 0x0f
    39e0:	48 8b       	std	Y+16, r20	; 0x10
    39e2:	59 8b       	std	Y+17, r21	; 0x11
    39e4:	2a 8b       	std	Y+18, r18	; 0x12
    39e6:	3b 8b       	std	Y+19, r19	; 0x13
    39e8:	0c 8b       	std	Y+20, r16	; 0x14
    39ea:	1d 8b       	std	Y+21, r17	; 0x15
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    39ec:	19 86       	std	Y+9, r1	; 0x09
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    39ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    39f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    39f2:	fc 01       	movw	r30, r24
    39f4:	10 82       	st	Z, r1
    39f6:	11 82       	std	Z+1, r1	; 0x01

    pevents     =  pevents_pend;
    39f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	9a 83       	std	Y+2, r25	; 0x02
    pevent      = *pevents;
    3a00:	89 81       	ldd	r24, Y+1	; 0x01
    3a02:	9a 81       	ldd	r25, Y+2	; 0x02
    3a04:	fc 01       	movw	r30, r24
    3a06:	80 81       	ld	r24, Z
    3a08:	91 81       	ldd	r25, Z+1	; 0x01
    3a0a:	8b 83       	std	Y+3, r24	; 0x03
    3a0c:	9c 83       	std	Y+4, r25	; 0x04
    while  (pevent != (OS_EVENT *)0) {
    3a0e:	28 c0       	rjmp	.+80     	; 0x3a60 <OSEventPendMulti+0x9a>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    3a10:	8b 81       	ldd	r24, Y+3	; 0x03
    3a12:	9c 81       	ldd	r25, Y+4	; 0x04
    3a14:	fc 01       	movw	r30, r24
    3a16:	80 81       	ld	r24, Z
    3a18:	88 2f       	mov	r24, r24
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	82 30       	cpi	r24, 0x02	; 2
    3a1e:	91 05       	cpc	r25, r1
    3a20:	71 f0       	breq	.+28     	; 0x3a3e <OSEventPendMulti+0x78>
    3a22:	83 30       	cpi	r24, 0x03	; 3
    3a24:	91 05       	cpc	r25, r1
    3a26:	69 f0       	breq	.+26     	; 0x3a42 <OSEventPendMulti+0x7c>
    3a28:	81 30       	cpi	r24, 0x01	; 1
    3a2a:	91 05       	cpc	r25, r1
    3a2c:	61 f0       	breq	.+24     	; 0x3a46 <OSEventPendMulti+0x80>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    3a2e:	8c 89       	ldd	r24, Y+20	; 0x14
    3a30:	9d 89       	ldd	r25, Y+21	; 0x15
    3a32:	21 e0       	ldi	r18, 0x01	; 1
    3a34:	fc 01       	movw	r30, r24
    3a36:	20 83       	st	Z, r18
                 return (0);
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	5f c2       	rjmp	.+1214   	; 0x3efc <OSEventPendMulti+0x536>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    3a3e:	00 00       	nop
    3a40:	03 c0       	rjmp	.+6      	; 0x3a48 <OSEventPendMulti+0x82>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    3a42:	00 00       	nop
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <OSEventPendMulti+0x82>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    3a46:	00 00       	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	02 96       	adiw	r24, 0x02	; 2
    3a4e:	89 83       	std	Y+1, r24	; 0x01
    3a50:	9a 83       	std	Y+2, r25	; 0x02
        pevent = *pevents;
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	9a 81       	ldd	r25, Y+2	; 0x02
    3a56:	fc 01       	movw	r30, r24
    3a58:	80 81       	ld	r24, Z
    3a5a:	91 81       	ldd	r25, Z+1	; 0x01
    3a5c:	8b 83       	std	Y+3, r24	; 0x03
    3a5e:	9c 83       	std	Y+4, r25	; 0x04

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    3a60:	8b 81       	ldd	r24, Y+3	; 0x03
    3a62:	9c 81       	ldd	r25, Y+4	; 0x04
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	a1 f6       	brne	.-88     	; 0x3a10 <OSEventPendMulti+0x4a>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    3a68:	80 91 07 2e 	lds	r24, 0x2E07
    3a6c:	88 23       	and	r24, r24
    3a6e:	41 f0       	breq	.+16     	; 0x3a80 <OSEventPendMulti+0xba>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    3a70:	8c 89       	ldd	r24, Y+20	; 0x14
    3a72:	9d 89       	ldd	r25, Y+21	; 0x15
    3a74:	22 e0       	ldi	r18, 0x02	; 2
    3a76:	fc 01       	movw	r30, r24
    3a78:	20 83       	st	Z, r18
        return (0);
    3a7a:	80 e0       	ldi	r24, 0x00	; 0
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	3e c2       	rjmp	.+1148   	; 0x3efc <OSEventPendMulti+0x536>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    3a80:	80 91 fa 27 	lds	r24, 0x27FA
    3a84:	88 23       	and	r24, r24
    3a86:	41 f0       	breq	.+16     	; 0x3a98 <OSEventPendMulti+0xd2>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    3a88:	8c 89       	ldd	r24, Y+20	; 0x14
    3a8a:	9d 89       	ldd	r25, Y+21	; 0x15
    3a8c:	2d e0       	ldi	r18, 0x0D	; 13
    3a8e:	fc 01       	movw	r30, r24
    3a90:	20 83       	st	Z, r18
        return (0);
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	32 c2       	rjmp	.+1124   	; 0x3efc <OSEventPendMulti+0x536>
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    3a98:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    3a9c:	89 87       	std	Y+9, r24	; 0x09
    events_rdy     =  OS_FALSE;
    3a9e:	1d 82       	std	Y+5, r1	; 0x05
    events_rdy_nbr =  0;
    3aa0:	1e 82       	std	Y+6, r1	; 0x06
    3aa2:	1f 82       	std	Y+7, r1	; 0x07
    events_stat    =  OS_STAT_RDY;
    3aa4:	18 86       	std	Y+8, r1	; 0x08
    pevents        =  pevents_pend;
    3aa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3aa8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	9a 83       	std	Y+2, r25	; 0x02
    pevent         = *pevents;
    3aae:	89 81       	ldd	r24, Y+1	; 0x01
    3ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	80 81       	ld	r24, Z
    3ab6:	91 81       	ldd	r25, Z+1	; 0x01
    3ab8:	8b 83       	std	Y+3, r24	; 0x03
    3aba:	9c 83       	std	Y+4, r25	; 0x04
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3abc:	fc c0       	rjmp	.+504    	; 0x3cb6 <OSEventPendMulti+0x2f0>
        switch (pevent->OSEventType) {
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ac2:	fc 01       	movw	r30, r24
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	82 30       	cpi	r24, 0x02	; 2
    3acc:	91 05       	cpc	r25, r1
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <OSEventPendMulti+0x10c>
    3ad0:	70 c0       	rjmp	.+224    	; 0x3bb2 <OSEventPendMulti+0x1ec>
    3ad2:	83 30       	cpi	r24, 0x03	; 3
    3ad4:	91 05       	cpc	r25, r1
    3ad6:	21 f0       	breq	.+8      	; 0x3ae0 <OSEventPendMulti+0x11a>
    3ad8:	81 30       	cpi	r24, 0x01	; 1
    3ada:	91 05       	cpc	r25, r1
    3adc:	b9 f1       	breq	.+110    	; 0x3b4c <OSEventPendMulti+0x186>
    3ade:	cf c0       	rjmp	.+414    	; 0x3c7e <OSEventPendMulti+0x2b8>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    3ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	83 81       	ldd	r24, Z+3	; 0x03
    3ae8:	94 81       	ldd	r25, Z+4	; 0x04
    3aea:	00 97       	sbiw	r24, 0x00	; 0
    3aec:	59 f1       	breq	.+86     	; 0x3b44 <OSEventPendMulti+0x17e>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    3aee:	8b 81       	ldd	r24, Y+3	; 0x03
    3af0:	9c 81       	ldd	r25, Y+4	; 0x04
    3af2:	fc 01       	movw	r30, r24
    3af4:	83 81       	ldd	r24, Z+3	; 0x03
    3af6:	94 81       	ldd	r25, Z+4	; 0x04
    3af8:	9c 01       	movw	r18, r24
    3afa:	21 50       	subi	r18, 0x01	; 1
    3afc:	30 40       	sbci	r19, 0x00	; 0
    3afe:	8b 81       	ldd	r24, Y+3	; 0x03
    3b00:	9c 81       	ldd	r25, Y+4	; 0x04
    3b02:	fc 01       	movw	r30, r24
    3b04:	23 83       	std	Z+3, r18	; 0x03
    3b06:	34 83       	std	Z+4, r19	; 0x04
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    3b08:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b0a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    3b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    3b10:	fc 01       	movw	r30, r24
    3b12:	20 83       	st	Z, r18
    3b14:	31 83       	std	Z+1, r19	; 0x01
    3b16:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b18:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b1a:	02 96       	adiw	r24, 0x02	; 2
    3b1c:	8e 87       	std	Y+14, r24	; 0x0e
    3b1e:	9f 87       	std	Y+15, r25	; 0x0f
                      events_rdy   =  OS_TRUE;
    3b20:	81 e0       	ldi	r24, 0x01	; 1
    3b22:	8d 83       	std	Y+5, r24	; 0x05
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    3b24:	88 89       	ldd	r24, Y+16	; 0x10
    3b26:	99 89       	ldd	r25, Y+17	; 0x11
    3b28:	fc 01       	movw	r30, r24
    3b2a:	10 82       	st	Z, r1
    3b2c:	11 82       	std	Z+1, r1	; 0x01
    3b2e:	88 89       	ldd	r24, Y+16	; 0x10
    3b30:	99 89       	ldd	r25, Y+17	; 0x11
    3b32:	02 96       	adiw	r24, 0x02	; 2
    3b34:	88 8b       	std	Y+16, r24	; 0x10
    3b36:	99 8b       	std	Y+17, r25	; 0x11
                      events_rdy_nbr++;
    3b38:	8e 81       	ldd	r24, Y+6	; 0x06
    3b3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b3c:	01 96       	adiw	r24, 0x01	; 1
    3b3e:	8e 83       	std	Y+6, r24	; 0x06
    3b40:	9f 83       	std	Y+7, r25	; 0x07

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    3b42:	ad c0       	rjmp	.+346    	; 0x3c9e <OSEventPendMulti+0x2d8>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    3b44:	88 85       	ldd	r24, Y+8	; 0x08
    3b46:	81 60       	ori	r24, 0x01	; 1
    3b48:	88 87       	std	Y+8, r24	; 0x08
                 }
                 break;
    3b4a:	a9 c0       	rjmp	.+338    	; 0x3c9e <OSEventPendMulti+0x2d8>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b50:	fc 01       	movw	r30, r24
    3b52:	81 81       	ldd	r24, Z+1	; 0x01
    3b54:	92 81       	ldd	r25, Z+2	; 0x02
    3b56:	00 97       	sbiw	r24, 0x00	; 0
    3b58:	41 f1       	breq	.+80     	; 0x3baa <OSEventPendMulti+0x1e4>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5e:	fc 01       	movw	r30, r24
    3b60:	21 81       	ldd	r18, Z+1	; 0x01
    3b62:	32 81       	ldd	r19, Z+2	; 0x02
    3b64:	88 89       	ldd	r24, Y+16	; 0x10
    3b66:	99 89       	ldd	r25, Y+17	; 0x11
    3b68:	fc 01       	movw	r30, r24
    3b6a:	20 83       	st	Z, r18
    3b6c:	31 83       	std	Z+1, r19	; 0x01
    3b6e:	88 89       	ldd	r24, Y+16	; 0x10
    3b70:	99 89       	ldd	r25, Y+17	; 0x11
    3b72:	02 96       	adiw	r24, 0x02	; 2
    3b74:	88 8b       	std	Y+16, r24	; 0x10
    3b76:	99 8b       	std	Y+17, r25	; 0x11
                     pevent->OSEventPtr  = (void *)0;
    3b78:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	11 82       	std	Z+1, r1	; 0x01
    3b80:	12 82       	std	Z+2, r1	; 0x02
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    3b82:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b84:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b86:	2b 81       	ldd	r18, Y+3	; 0x03
    3b88:	3c 81       	ldd	r19, Y+4	; 0x04
    3b8a:	fc 01       	movw	r30, r24
    3b8c:	20 83       	st	Z, r18
    3b8e:	31 83       	std	Z+1, r19	; 0x01
    3b90:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b92:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b94:	02 96       	adiw	r24, 0x02	; 2
    3b96:	8e 87       	std	Y+14, r24	; 0x0e
    3b98:	9f 87       	std	Y+15, r25	; 0x0f
                      events_rdy         =  OS_TRUE;
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
                      events_rdy_nbr++;
    3b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    3ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba2:	01 96       	adiw	r24, 0x01	; 1
    3ba4:	8e 83       	std	Y+6, r24	; 0x06
    3ba6:	9f 83       	std	Y+7, r25	; 0x07

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    3ba8:	7a c0       	rjmp	.+244    	; 0x3c9e <OSEventPendMulti+0x2d8>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    3baa:	88 85       	ldd	r24, Y+8	; 0x08
    3bac:	82 60       	ori	r24, 0x02	; 2
    3bae:	88 87       	std	Y+8, r24	; 0x08
                 }
                 break;
    3bb0:	76 c0       	rjmp	.+236    	; 0x3c9e <OSEventPendMulti+0x2d8>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    3bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	81 81       	ldd	r24, Z+1	; 0x01
    3bba:	92 81       	ldd	r25, Z+2	; 0x02
    3bbc:	8a 87       	std	Y+10, r24	; 0x0a
    3bbe:	9b 87       	std	Y+11, r25	; 0x0b
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    3bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	84 85       	ldd	r24, Z+12	; 0x0c
    3bc8:	95 85       	ldd	r25, Z+13	; 0x0d
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	09 f4       	brne	.+2      	; 0x3bd0 <OSEventPendMulti+0x20a>
    3bce:	53 c0       	rjmp	.+166    	; 0x3c76 <OSEventPendMulti+0x2b0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    3bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	80 85       	ldd	r24, Z+8	; 0x08
    3bd8:	91 85       	ldd	r25, Z+9	; 0x09
    3bda:	fc 01       	movw	r30, r24
    3bdc:	40 81       	ld	r20, Z
    3bde:	51 81       	ldd	r21, Z+1	; 0x01
    3be0:	28 89       	ldd	r18, Y+16	; 0x10
    3be2:	39 89       	ldd	r19, Y+17	; 0x11
    3be4:	f9 01       	movw	r30, r18
    3be6:	40 83       	st	Z, r20
    3be8:	51 83       	std	Z+1, r21	; 0x01
    3bea:	28 89       	ldd	r18, Y+16	; 0x10
    3bec:	39 89       	ldd	r19, Y+17	; 0x11
    3bee:	2e 5f       	subi	r18, 0xFE	; 254
    3bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf2:	28 8b       	std	Y+16, r18	; 0x10
    3bf4:	39 8b       	std	Y+17, r19	; 0x11
    3bf6:	9c 01       	movw	r18, r24
    3bf8:	2e 5f       	subi	r18, 0xFE	; 254
    3bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c00:	fc 01       	movw	r30, r24
    3c02:	20 87       	std	Z+8, r18	; 0x08
    3c04:	31 87       	std	Z+9, r19	; 0x09
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    3c06:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c08:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	20 85       	ldd	r18, Z+8	; 0x08
    3c0e:	31 85       	ldd	r19, Z+9	; 0x09
    3c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c14:	fc 01       	movw	r30, r24
    3c16:	84 81       	ldd	r24, Z+4	; 0x04
    3c18:	95 81       	ldd	r25, Z+5	; 0x05
    3c1a:	28 17       	cp	r18, r24
    3c1c:	39 07       	cpc	r19, r25
    3c1e:	51 f4       	brne	.+20     	; 0x3c34 <OSEventPendMulti+0x26e>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    3c20:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c22:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c24:	fc 01       	movw	r30, r24
    3c26:	22 81       	ldd	r18, Z+2	; 0x02
    3c28:	33 81       	ldd	r19, Z+3	; 0x03
    3c2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c2e:	fc 01       	movw	r30, r24
    3c30:	20 87       	std	Z+8, r18	; 0x08
    3c32:	31 87       	std	Z+9, r19	; 0x09
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    3c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c36:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c38:	fc 01       	movw	r30, r24
    3c3a:	84 85       	ldd	r24, Z+12	; 0x0c
    3c3c:	95 85       	ldd	r25, Z+13	; 0x0d
    3c3e:	9c 01       	movw	r18, r24
    3c40:	21 50       	subi	r18, 0x01	; 1
    3c42:	30 40       	sbci	r19, 0x00	; 0
    3c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c48:	fc 01       	movw	r30, r24
    3c4a:	24 87       	std	Z+12, r18	; 0x0c
    3c4c:	35 87       	std	Z+13, r19	; 0x0d
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    3c4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c52:	2b 81       	ldd	r18, Y+3	; 0x03
    3c54:	3c 81       	ldd	r19, Y+4	; 0x04
    3c56:	fc 01       	movw	r30, r24
    3c58:	20 83       	st	Z, r18
    3c5a:	31 83       	std	Z+1, r19	; 0x01
    3c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c60:	02 96       	adiw	r24, 0x02	; 2
    3c62:	8e 87       	std	Y+14, r24	; 0x0e
    3c64:	9f 87       	std	Y+15, r25	; 0x0f
                      events_rdy   = OS_TRUE;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	8d 83       	std	Y+5, r24	; 0x05
                      events_rdy_nbr++;
    3c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	8e 83       	std	Y+6, r24	; 0x06
    3c72:	9f 83       	std	Y+7, r25	; 0x07

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    3c74:	14 c0       	rjmp	.+40     	; 0x3c9e <OSEventPendMulti+0x2d8>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    3c76:	88 85       	ldd	r24, Y+8	; 0x08
    3c78:	84 60       	ori	r24, 0x04	; 4
    3c7a:	88 87       	std	Y+8, r24	; 0x08
                 }
                 break;
    3c7c:	10 c0       	rjmp	.+32     	; 0x3c9e <OSEventPendMulti+0x2d8>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
    3c7e:	89 85       	ldd	r24, Y+9	; 0x09
    3c80:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    3c84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c86:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c88:	fc 01       	movw	r30, r24
    3c8a:	10 82       	st	Z, r1
    3c8c:	11 82       	std	Z+1, r1	; 0x01
                *perr        =  OS_ERR_EVENT_TYPE;
    3c8e:	8c 89       	ldd	r24, Y+20	; 0x14
    3c90:	9d 89       	ldd	r25, Y+21	; 0x15
    3c92:	21 e0       	ldi	r18, 0x01	; 1
    3c94:	fc 01       	movw	r30, r24
    3c96:	20 83       	st	Z, r18
                 return (events_rdy_nbr);
    3c98:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c9c:	2f c1       	rjmp	.+606    	; 0x3efc <OSEventPendMulti+0x536>
        }
        pevents++;
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca2:	02 96       	adiw	r24, 0x02	; 2
    3ca4:	89 83       	std	Y+1, r24	; 0x01
    3ca6:	9a 83       	std	Y+2, r25	; 0x02
        pevent = *pevents;
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	9a 81       	ldd	r25, Y+2	; 0x02
    3cac:	fc 01       	movw	r30, r24
    3cae:	80 81       	ld	r24, Z
    3cb0:	91 81       	ldd	r25, Z+1	; 0x01
    3cb2:	8b 83       	std	Y+3, r24	; 0x03
    3cb4:	9c 83       	std	Y+4, r25	; 0x04
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	09 f0       	breq	.+2      	; 0x3cc0 <OSEventPendMulti+0x2fa>
    3cbe:	ff ce       	rjmp	.-514    	; 0x3abe <OSEventPendMulti+0xf8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    3cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc2:	81 30       	cpi	r24, 0x01	; 1
    3cc4:	79 f4       	brne	.+30     	; 0x3ce4 <OSEventPendMulti+0x31e>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    3cc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cca:	fc 01       	movw	r30, r24
    3ccc:	10 82       	st	Z, r1
    3cce:	11 82       	std	Z+1, r1	; 0x01
        OS_EXIT_CRITICAL();
    3cd0:	89 85       	ldd	r24, Y+9	; 0x09
    3cd2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
       *perr        =  OS_ERR_NONE;
    3cd6:	8c 89       	ldd	r24, Y+20	; 0x14
    3cd8:	9d 89       	ldd	r25, Y+21	; 0x15
    3cda:	fc 01       	movw	r30, r24
    3cdc:	10 82       	st	Z, r1
        return (events_rdy_nbr);
    3cde:	8e 81       	ldd	r24, Y+6	; 0x06
    3ce0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ce2:	0c c1       	rjmp	.+536    	; 0x3efc <OSEventPendMulti+0x536>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    3ce4:	80 91 08 2e 	lds	r24, 0x2E08
    3ce8:	90 91 09 2e 	lds	r25, 0x2E09
    3cec:	20 91 08 2e 	lds	r18, 0x2E08
    3cf0:	30 91 09 2e 	lds	r19, 0x2E09
    3cf4:	f9 01       	movw	r30, r18
    3cf6:	36 8d       	ldd	r19, Z+30	; 0x1e
    3cf8:	28 85       	ldd	r18, Y+8	; 0x08
    3cfa:	23 2b       	or	r18, r19
    3cfc:	20 68       	ori	r18, 0x80	; 128
    3cfe:	fc 01       	movw	r30, r24
    3d00:	26 8f       	std	Z+30, r18	; 0x1e
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    3d02:	80 91 08 2e 	lds	r24, 0x2E08
    3d06:	90 91 09 2e 	lds	r25, 0x2E09
    3d0a:	fc 01       	movw	r30, r24
    3d0c:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    3d0e:	80 91 08 2e 	lds	r24, 0x2E08
    3d12:	90 91 09 2e 	lds	r25, 0x2E09
    3d16:	2a 89       	ldd	r18, Y+18	; 0x12
    3d18:	3b 89       	ldd	r19, Y+19	; 0x13
    3d1a:	fc 01       	movw	r30, r24
    3d1c:	24 8f       	std	Z+28, r18	; 0x1c
    3d1e:	35 8f       	std	Z+29, r19	; 0x1d
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    3d20:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d22:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d24:	0e 94 db 22 	call	0x45b6	; 0x45b6 <OS_EventTaskWaitMulti>

    OS_EXIT_CRITICAL();
    3d28:	89 85       	ldd	r24, Y+9	; 0x09
    3d2a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Sched();                                         /* Find next highest priority task ready       */
    3d2e:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    3d32:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    3d36:	89 87       	std	Y+9, r24	; 0x09

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    3d38:	80 91 08 2e 	lds	r24, 0x2E08
    3d3c:	90 91 09 2e 	lds	r25, 0x2E09
    3d40:	fc 01       	movw	r30, r24
    3d42:	87 8d       	ldd	r24, Z+31	; 0x1f
    3d44:	88 2f       	mov	r24, r24
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	19 f0       	breq	.+6      	; 0x3d52 <OSEventPendMulti+0x38c>
    3d4c:	82 30       	cpi	r24, 0x02	; 2
    3d4e:	91 05       	cpc	r25, r1
    3d50:	a9 f5       	brne	.+106    	; 0x3dbc <OSEventPendMulti+0x3f6>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    3d52:	80 91 08 2e 	lds	r24, 0x2E08
    3d56:	90 91 09 2e 	lds	r25, 0x2E09
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	82 89       	ldd	r24, Z+18	; 0x12
    3d5e:	93 89       	ldd	r25, Z+19	; 0x13
    3d60:	8b 83       	std	Y+3, r24	; 0x03
    3d62:	9c 83       	std	Y+4, r25	; 0x04
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    3d64:	8b 81       	ldd	r24, Y+3	; 0x03
    3d66:	9c 81       	ldd	r25, Y+4	; 0x04
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	b9 f0       	breq	.+46     	; 0x3d9a <OSEventPendMulti+0x3d4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    3d6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d70:	2b 81       	ldd	r18, Y+3	; 0x03
    3d72:	3c 81       	ldd	r19, Y+4	; 0x04
    3d74:	fc 01       	movw	r30, r24
    3d76:	20 83       	st	Z, r18
    3d78:	31 83       	std	Z+1, r19	; 0x01
    3d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d7e:	02 96       	adiw	r24, 0x02	; 2
    3d80:	8e 87       	std	Y+14, r24	; 0x0e
    3d82:	9f 87       	std	Y+15, r25	; 0x0f
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    3d84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d86:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d88:	fc 01       	movw	r30, r24
    3d8a:	10 82       	st	Z, r1
    3d8c:	11 82       	std	Z+1, r1	; 0x01
                  events_rdy_nbr++;
    3d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d90:	9f 81       	ldd	r25, Y+7	; 0x07
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	8e 83       	std	Y+6, r24	; 0x06
    3d96:	9f 83       	std	Y+7, r25	; 0x07

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    3d98:	1b c0       	rjmp	.+54     	; 0x3dd0 <OSEventPendMulti+0x40a>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    3d9a:	80 91 08 2e 	lds	r24, 0x2E08
    3d9e:	90 91 09 2e 	lds	r25, 0x2E09
    3da2:	21 e0       	ldi	r18, 0x01	; 1
    3da4:	fc 01       	movw	r30, r24
    3da6:	27 8f       	std	Z+31, r18	; 0x1f
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3da8:	80 91 08 2e 	lds	r24, 0x2E08
    3dac:	90 91 09 2e 	lds	r25, 0x2E09
    3db0:	2c 85       	ldd	r18, Y+12	; 0x0c
    3db2:	3d 85       	ldd	r19, Y+13	; 0x0d
    3db4:	b9 01       	movw	r22, r18
    3db6:	0e 94 cf 23 	call	0x479e	; 0x479e <OS_EventTaskRemoveMulti>
             }
			 break;
    3dba:	0a c0       	rjmp	.+20     	; 0x3dd0 <OSEventPendMulti+0x40a>

        case OS_STAT_PEND_TO:                           /* If events timed out, ...                    */
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3dbc:	80 91 08 2e 	lds	r24, 0x2E08
    3dc0:	90 91 09 2e 	lds	r25, 0x2E09
    3dc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    3dc6:	3d 85       	ldd	r19, Y+13	; 0x0d
    3dc8:	b9 01       	movw	r22, r18
    3dca:	0e 94 cf 23 	call	0x479e	; 0x479e <OS_EventTaskRemoveMulti>
             break;
    3dce:	00 00       	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    3dd0:	80 91 08 2e 	lds	r24, 0x2E08
    3dd4:	90 91 09 2e 	lds	r25, 0x2E09
    3dd8:	fc 01       	movw	r30, r24
    3dda:	87 8d       	ldd	r24, Z+31	; 0x1f
    3ddc:	88 2f       	mov	r24, r24
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	00 97       	sbiw	r24, 0x00	; 0
    3de2:	29 f0       	breq	.+10     	; 0x3dee <OSEventPendMulti+0x428>
    3de4:	82 30       	cpi	r24, 0x02	; 2
    3de6:	91 05       	cpc	r25, r1
    3de8:	09 f4       	brne	.+2      	; 0x3dec <OSEventPendMulti+0x426>
    3dea:	42 c0       	rjmp	.+132    	; 0x3e70 <OSEventPendMulti+0x4aa>
    3dec:	51 c0       	rjmp	.+162    	; 0x3e90 <OSEventPendMulti+0x4ca>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	fc 01       	movw	r30, r24
    3df4:	80 81       	ld	r24, Z
    3df6:	88 2f       	mov	r24, r24
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	81 30       	cpi	r24, 0x01	; 1
    3dfc:	91 05       	cpc	r25, r1
    3dfe:	1c f1       	brlt	.+70     	; 0x3e46 <OSEventPendMulti+0x480>
    3e00:	83 30       	cpi	r24, 0x03	; 3
    3e02:	91 05       	cpc	r25, r1
    3e04:	74 f0       	brlt	.+28     	; 0x3e22 <OSEventPendMulti+0x45c>
    3e06:	83 30       	cpi	r24, 0x03	; 3
    3e08:	91 05       	cpc	r25, r1
    3e0a:	e9 f4       	brne	.+58     	; 0x3e46 <OSEventPendMulti+0x480>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    3e0c:	88 89       	ldd	r24, Y+16	; 0x10
    3e0e:	99 89       	ldd	r25, Y+17	; 0x11
    3e10:	fc 01       	movw	r30, r24
    3e12:	10 82       	st	Z, r1
    3e14:	11 82       	std	Z+1, r1	; 0x01
    3e16:	88 89       	ldd	r24, Y+16	; 0x10
    3e18:	99 89       	ldd	r25, Y+17	; 0x11
    3e1a:	02 96       	adiw	r24, 0x02	; 2
    3e1c:	88 8b       	std	Y+16, r24	; 0x10
    3e1e:	99 8b       	std	Y+17, r25	; 0x11
                      break;
    3e20:	22 c0       	rjmp	.+68     	; 0x3e66 <OSEventPendMulti+0x4a0>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    3e22:	80 91 08 2e 	lds	r24, 0x2E08
    3e26:	90 91 09 2e 	lds	r25, 0x2E09
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	26 89       	ldd	r18, Z+22	; 0x16
    3e2e:	37 89       	ldd	r19, Z+23	; 0x17
    3e30:	88 89       	ldd	r24, Y+16	; 0x10
    3e32:	99 89       	ldd	r25, Y+17	; 0x11
    3e34:	fc 01       	movw	r30, r24
    3e36:	20 83       	st	Z, r18
    3e38:	31 83       	std	Z+1, r19	; 0x01
    3e3a:	88 89       	ldd	r24, Y+16	; 0x10
    3e3c:	99 89       	ldd	r25, Y+17	; 0x11
    3e3e:	02 96       	adiw	r24, 0x02	; 2
    3e40:	88 8b       	std	Y+16, r24	; 0x10
    3e42:	99 8b       	std	Y+17, r25	; 0x11
                      break;
    3e44:	10 c0       	rjmp	.+32     	; 0x3e66 <OSEventPendMulti+0x4a0>
#endif

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
    3e46:	89 85       	ldd	r24, Y+9	; 0x09
    3e48:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    3e4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e50:	fc 01       	movw	r30, r24
    3e52:	10 82       	st	Z, r1
    3e54:	11 82       	std	Z+1, r1	; 0x01
                     *perr        =  OS_ERR_EVENT_TYPE;
    3e56:	8c 89       	ldd	r24, Y+20	; 0x14
    3e58:	9d 89       	ldd	r25, Y+21	; 0x15
    3e5a:	21 e0       	ldi	r18, 0x01	; 1
    3e5c:	fc 01       	movw	r30, r24
    3e5e:	20 83       	st	Z, r18
                      return (events_rdy_nbr);
    3e60:	8e 81       	ldd	r24, Y+6	; 0x06
    3e62:	9f 81       	ldd	r25, Y+7	; 0x07
    3e64:	4b c0       	rjmp	.+150    	; 0x3efc <OSEventPendMulti+0x536>
             }
            *perr = OS_ERR_NONE;
    3e66:	8c 89       	ldd	r24, Y+20	; 0x14
    3e68:	9d 89       	ldd	r25, Y+21	; 0x15
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	10 82       	st	Z, r1
             break;
    3e6e:	20 c0       	rjmp	.+64     	; 0x3eb0 <OSEventPendMulti+0x4ea>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    3e70:	88 89       	ldd	r24, Y+16	; 0x10
    3e72:	99 89       	ldd	r25, Y+17	; 0x11
    3e74:	fc 01       	movw	r30, r24
    3e76:	10 82       	st	Z, r1
    3e78:	11 82       	std	Z+1, r1	; 0x01
    3e7a:	88 89       	ldd	r24, Y+16	; 0x10
    3e7c:	99 89       	ldd	r25, Y+17	; 0x11
    3e7e:	02 96       	adiw	r24, 0x02	; 2
    3e80:	88 8b       	std	Y+16, r24	; 0x10
    3e82:	99 8b       	std	Y+17, r25	; 0x11
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    3e84:	8c 89       	ldd	r24, Y+20	; 0x14
    3e86:	9d 89       	ldd	r25, Y+21	; 0x15
    3e88:	2e e0       	ldi	r18, 0x0E	; 14
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	20 83       	st	Z, r18
             break;
    3e8e:	10 c0       	rjmp	.+32     	; 0x3eb0 <OSEventPendMulti+0x4ea>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    3e90:	88 89       	ldd	r24, Y+16	; 0x10
    3e92:	99 89       	ldd	r25, Y+17	; 0x11
    3e94:	fc 01       	movw	r30, r24
    3e96:	10 82       	st	Z, r1
    3e98:	11 82       	std	Z+1, r1	; 0x01
    3e9a:	88 89       	ldd	r24, Y+16	; 0x10
    3e9c:	99 89       	ldd	r25, Y+17	; 0x11
    3e9e:	02 96       	adiw	r24, 0x02	; 2
    3ea0:	88 8b       	std	Y+16, r24	; 0x10
    3ea2:	99 8b       	std	Y+17, r25	; 0x11
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    3ea4:	8c 89       	ldd	r24, Y+20	; 0x14
    3ea6:	9d 89       	ldd	r25, Y+21	; 0x15
    3ea8:	2a e0       	ldi	r18, 0x0A	; 10
    3eaa:	fc 01       	movw	r30, r24
    3eac:	20 83       	st	Z, r18
             break;
    3eae:	00 00       	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    3eb0:	80 91 08 2e 	lds	r24, 0x2E08
    3eb4:	90 91 09 2e 	lds	r25, 0x2E09
    3eb8:	fc 01       	movw	r30, r24
    3eba:	16 8e       	std	Z+30, r1	; 0x1e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    3ebc:	80 91 08 2e 	lds	r24, 0x2E08
    3ec0:	90 91 09 2e 	lds	r25, 0x2E09
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    3ec8:	80 91 08 2e 	lds	r24, 0x2E08
    3ecc:	90 91 09 2e 	lds	r25, 0x2E09
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	12 8a       	std	Z+18, r1	; 0x12
    3ed4:	13 8a       	std	Z+19, r1	; 0x13
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    3ed6:	80 91 08 2e 	lds	r24, 0x2E08
    3eda:	90 91 09 2e 	lds	r25, 0x2E09
    3ede:	fc 01       	movw	r30, r24
    3ee0:	14 8a       	std	Z+20, r1	; 0x14
    3ee2:	15 8a       	std	Z+21, r1	; 0x15
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    3ee4:	80 91 08 2e 	lds	r24, 0x2E08
    3ee8:	90 91 09 2e 	lds	r25, 0x2E09
    3eec:	fc 01       	movw	r30, r24
    3eee:	16 8a       	std	Z+22, r1	; 0x16
    3ef0:	17 8a       	std	Z+23, r1	; 0x17
    OS_EXIT_CRITICAL();
    3ef2:	89 85       	ldd	r24, Y+9	; 0x09
    3ef4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>

    return (events_rdy_nbr);
    3ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    3efa:	9f 81       	ldd	r25, Y+7	; 0x07
}
    3efc:	65 96       	adiw	r28, 0x15	; 21
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    3f0c:	df 93       	push	r29
    3f0e:	cf 93       	push	r28
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    3f14:	0e 94 28 19 	call	0x3250	; 0x3250 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    3f18:	0e 94 c5 24 	call	0x498a	; 0x498a <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    3f1c:	0e 94 fe 24 	call	0x49fc	; 0x49fc <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    3f20:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    3f24:	0e 94 68 24 	call	0x48d0	; 0x48d0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    3f28:	0e 94 03 31 	call	0x6206	; 0x6206 <OS_FlagInit>
#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    3f2c:	0e 94 5b 42 	call	0x84b6	; 0x84b6 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    3f30:	0e 94 2c 25 	call	0x4a58	; 0x4a58 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    3f34:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
    3f38:	0e 94 21 54 	call	0xa842	; 0xa842 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    3f3c:	0e 94 33 19 	call	0x3266	; 0x3266 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    3f40:	0e 94 84 1b 	call	0x3708	; 0x3708 <OSDebugInit>
#endif
}
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_TRUE) {
    3f52:	80 91 fd 27 	lds	r24, 0x27FD
    3f56:	81 30       	cpi	r24, 0x01	; 1
    3f58:	49 f4       	brne	.+18     	; 0x3f6c <OSIntEnter+0x22>
        if (OSIntNesting < 255u) {
    3f5a:	80 91 07 2e 	lds	r24, 0x2E07
    3f5e:	8f 3f       	cpi	r24, 0xFF	; 255
    3f60:	29 f0       	breq	.+10     	; 0x3f6c <OSIntEnter+0x22>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    3f62:	80 91 07 2e 	lds	r24, 0x2E07
    3f66:	8f 5f       	subi	r24, 0xFF	; 255
    3f68:	80 93 07 2e 	sts	0x2E07, r24
        }
    }
}
    3f6c:	cf 91       	pop	r28
    3f6e:	df 91       	pop	r29
    3f70:	08 95       	ret

00003f72 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    3f72:	df 93       	push	r29
    3f74:	cf 93       	push	r28
    3f76:	0f 92       	push	r0
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3f7c:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {
    3f7e:	80 91 fd 27 	lds	r24, 0x27FD
    3f82:	81 30       	cpi	r24, 0x01	; 1
    3f84:	09 f0       	breq	.+2      	; 0x3f88 <OSIntExit+0x16>
    3f86:	55 c0       	rjmp	.+170    	; 0x4032 <__stack+0x33>
        OS_ENTER_CRITICAL();
    3f88:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    3f8c:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    3f8e:	80 91 07 2e 	lds	r24, 0x2E07
    3f92:	88 23       	and	r24, r24
    3f94:	29 f0       	breq	.+10     	; 0x3fa0 <OSIntExit+0x2e>
            OSIntNesting--;
    3f96:	80 91 07 2e 	lds	r24, 0x2E07
    3f9a:	81 50       	subi	r24, 0x01	; 1
    3f9c:	80 93 07 2e 	sts	0x2E07, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    3fa0:	80 91 07 2e 	lds	r24, 0x2E07
    3fa4:	88 23       	and	r24, r24
    3fa6:	09 f0       	breq	.+2      	; 0x3faa <OSIntExit+0x38>
    3fa8:	41 c0       	rjmp	.+130    	; 0x402c <__stack+0x2d>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    3faa:	80 91 fa 27 	lds	r24, 0x27FA
    3fae:	88 23       	and	r24, r24
    3fb0:	e9 f5       	brne	.+122    	; 0x402c <__stack+0x2d>
                OS_SchedNew();
    3fb2:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    3fb6:	90 91 04 28 	lds	r25, 0x2804
    3fba:	80 91 de 2a 	lds	r24, 0x2ADE
    3fbe:	98 17       	cp	r25, r24
    3fc0:	a9 f1       	breq	.+106    	; 0x402c <__stack+0x2d>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    3fc2:	80 91 04 28 	lds	r24, 0x2804
    3fc6:	88 2f       	mov	r24, r24
    3fc8:	90 e0       	ldi	r25, 0x00	; 0
    3fca:	88 0f       	add	r24, r24
    3fcc:	99 1f       	adc	r25, r25
    3fce:	8d 58       	subi	r24, 0x8D	; 141
    3fd0:	9a 4c       	sbci	r25, 0xCA	; 202
    3fd2:	fc 01       	movw	r30, r24
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	80 93 90 2c 	sts	0x2C90, r24
    3fdc:	90 93 91 2c 	sts	0x2C91, r25
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    3fe0:	20 91 90 2c 	lds	r18, 0x2C90
    3fe4:	30 91 91 2c 	lds	r19, 0x2C91
    3fe8:	f9 01       	movw	r30, r18
    3fea:	86 a1       	ldd	r24, Z+38	; 0x26
    3fec:	97 a1       	ldd	r25, Z+39	; 0x27
    3fee:	a0 a5       	ldd	r26, Z+40	; 0x28
    3ff0:	b1 a5       	ldd	r27, Z+41	; 0x29
    3ff2:	01 96       	adiw	r24, 0x01	; 1
    3ff4:	a1 1d       	adc	r26, r1
    3ff6:	b1 1d       	adc	r27, r1
    3ff8:	f9 01       	movw	r30, r18
    3ffa:	86 a3       	std	Z+38, r24	; 0x26
    3ffc:	97 a3       	std	Z+39, r25	; 0x27
    3ffe:	a0 a7       	std	Z+40, r26	; 0x28
    4000:	b1 a7       	std	Z+41, r27	; 0x29
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    4002:	80 91 4a 2c 	lds	r24, 0x2C4A
    4006:	90 91 4b 2c 	lds	r25, 0x2C4B
    400a:	a0 91 4c 2c 	lds	r26, 0x2C4C
    400e:	b0 91 4d 2c 	lds	r27, 0x2C4D
    4012:	01 96       	adiw	r24, 0x01	; 1
    4014:	a1 1d       	adc	r26, r1
    4016:	b1 1d       	adc	r27, r1
    4018:	80 93 4a 2c 	sts	0x2C4A, r24
    401c:	90 93 4b 2c 	sts	0x2C4B, r25
    4020:	a0 93 4c 2c 	sts	0x2C4C, r26
    4024:	b0 93 4d 2c 	sts	0x2C4D, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    4028:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
    402c:	89 81       	ldd	r24, Y+1	; 0x01
    402e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    }
}
    4032:	0f 90       	pop	r0
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	0f 92       	push	r0
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4044:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    4046:	80 91 fd 27 	lds	r24, 0x27FD
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	99 f4       	brne	.+38     	; 0x4074 <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
    404e:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4052:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    4054:	80 91 07 2e 	lds	r24, 0x2E07
    4058:	88 23       	and	r24, r24
    405a:	49 f4       	brne	.+18     	; 0x406e <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    405c:	80 91 fa 27 	lds	r24, 0x27FA
    4060:	8f 3f       	cpi	r24, 0xFF	; 255
    4062:	29 f0       	breq	.+10     	; 0x406e <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    4064:	80 91 fa 27 	lds	r24, 0x27FA
    4068:	8f 5f       	subi	r24, 0xFF	; 255
    406a:	80 93 fa 27 	sts	0x27FA, r24
            }
        }
        OS_EXIT_CRITICAL();
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    }
}
    4074:	0f 90       	pop	r0
    4076:	cf 91       	pop	r28
    4078:	df 91       	pop	r29
    407a:	08 95       	ret

0000407c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    407c:	df 93       	push	r29
    407e:	cf 93       	push	r28
    4080:	0f 92       	push	r0
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4086:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    4088:	80 91 fd 27 	lds	r24, 0x27FD
    408c:	81 30       	cpi	r24, 0x01	; 1
    408e:	29 f5       	brne	.+74     	; 0x40da <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
    4090:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4094:	89 83       	std	Y+1, r24	; 0x01
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    4096:	80 91 fa 27 	lds	r24, 0x27FA
    409a:	88 23       	and	r24, r24
    409c:	d9 f0       	breq	.+54     	; 0x40d4 <OSSchedUnlock+0x58>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    409e:	80 91 fa 27 	lds	r24, 0x27FA
    40a2:	81 50       	subi	r24, 0x01	; 1
    40a4:	80 93 fa 27 	sts	0x27FA, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    40a8:	80 91 fa 27 	lds	r24, 0x27FA
    40ac:	88 23       	and	r24, r24
    40ae:	71 f4       	brne	.+28     	; 0x40cc <OSSchedUnlock+0x50>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    40b0:	80 91 07 2e 	lds	r24, 0x2E07
    40b4:	88 23       	and	r24, r24
    40b6:	31 f4       	brne	.+12     	; 0x40c4 <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
    40be:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    40c2:	0b c0       	rjmp	.+22     	; 0x40da <OSSchedUnlock+0x5e>
                } else {
                    OS_EXIT_CRITICAL();
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    40ca:	07 c0       	rjmp	.+14     	; 0x40da <OSSchedUnlock+0x5e>
                }
            } else {
                OS_EXIT_CRITICAL();
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    40d2:	03 c0       	rjmp	.+6      	; 0x40da <OSSchedUnlock+0x5e>
            }
        } else {
            OS_EXIT_CRITICAL();
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        }
    }
}
    40da:	0f 90       	pop	r0
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_FALSE) {
    40ea:	80 91 fd 27 	lds	r24, 0x27FD
    40ee:	88 23       	and	r24, r24
    40f0:	f9 f4       	brne	.+62     	; 0x4130 <OSStart+0x4e>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    40f2:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    40f6:	80 91 04 28 	lds	r24, 0x2804
    40fa:	80 93 de 2a 	sts	0x2ADE, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    40fe:	80 91 04 28 	lds	r24, 0x2804
    4102:	88 2f       	mov	r24, r24
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	88 0f       	add	r24, r24
    4108:	99 1f       	adc	r25, r25
    410a:	8d 58       	subi	r24, 0x8D	; 141
    410c:	9a 4c       	sbci	r25, 0xCA	; 202
    410e:	fc 01       	movw	r30, r24
    4110:	80 81       	ld	r24, Z
    4112:	91 81       	ldd	r25, Z+1	; 0x01
    4114:	80 93 90 2c 	sts	0x2C90, r24
    4118:	90 93 91 2c 	sts	0x2C91, r25
        OSTCBCur      = OSTCBHighRdy;
    411c:	80 91 90 2c 	lds	r24, 0x2C90
    4120:	90 91 91 2c 	lds	r25, 0x2C91
    4124:	80 93 08 2e 	sts	0x2E08, r24
    4128:	90 93 09 2e 	sts	0x2E09, r25
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    412c:	0e 94 39 18 	call	0x3072	; 0x3072 <OSStartHighRdy>
    }
}
    4130:	cf 91       	pop	r28
    4132:	df 91       	pop	r29
    4134:	08 95       	ret

00004136 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	0f 92       	push	r0
    413c:	cd b7       	in	r28, 0x3d	; 61
    413e:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4140:	19 82       	std	Y+1, r1	; 0x01
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    4142:	82 e0       	ldi	r24, 0x02	; 2
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    OS_ENTER_CRITICAL();
    414a:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    414e:	89 83       	std	Y+1, r24	; 0x01
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    4150:	10 92 fe 27 	sts	0x27FE, r1
    4154:	10 92 ff 27 	sts	0x27FF, r1
    4158:	10 92 00 28 	sts	0x2800, r1
    415c:	10 92 01 28 	sts	0x2801, r1
    OS_EXIT_CRITICAL();
    4160:	89 81       	ldd	r24, Y+1	; 0x01
    4162:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    4166:	84 e6       	ldi	r24, 0x64	; 100
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    OS_ENTER_CRITICAL();
    416e:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4172:	89 83       	std	Y+1, r24	; 0x01
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    4174:	80 91 fe 27 	lds	r24, 0x27FE
    4178:	90 91 ff 27 	lds	r25, 0x27FF
    417c:	a0 91 00 28 	lds	r26, 0x2800
    4180:	b0 91 01 28 	lds	r27, 0x2801
    4184:	80 93 50 2c 	sts	0x2C50, r24
    4188:	90 93 51 2c 	sts	0x2C51, r25
    418c:	a0 93 52 2c 	sts	0x2C52, r26
    4190:	b0 93 53 2c 	sts	0x2C53, r27
    OSStatRdy    = OS_TRUE;
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	80 93 72 35 	sts	0x3572, r24
    OS_EXIT_CRITICAL();
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    41a0:	0f 90       	pop	r0
    41a2:	cf 91       	pop	r28
    41a4:	df 91       	pop	r29
    41a6:	08 95       	ret

000041a8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    41a8:	df 93       	push	r29
    41aa:	cf 93       	push	r28
    41ac:	00 d0       	rcall	.+0      	; 0x41ae <OSTimeTick+0x6>
    41ae:	0f 92       	push	r0
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    41b4:	1c 82       	std	Y+4, r1	; 0x04
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    41b6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    41ba:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    41be:	8c 83       	std	Y+4, r24	; 0x04
    OSTime++;
    41c0:	80 91 0e 2e 	lds	r24, 0x2E0E
    41c4:	90 91 0f 2e 	lds	r25, 0x2E0F
    41c8:	a0 91 10 2e 	lds	r26, 0x2E10
    41cc:	b0 91 11 2e 	lds	r27, 0x2E11
    41d0:	01 96       	adiw	r24, 0x01	; 1
    41d2:	a1 1d       	adc	r26, r1
    41d4:	b1 1d       	adc	r27, r1
    41d6:	80 93 0e 2e 	sts	0x2E0E, r24
    41da:	90 93 0f 2e 	sts	0x2E0F, r25
    41de:	a0 93 10 2e 	sts	0x2E10, r26
    41e2:	b0 93 11 2e 	sts	0x2E11, r27
    OS_EXIT_CRITICAL();
    41e6:	8c 81       	ldd	r24, Y+4	; 0x04
    41e8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
    41ec:	80 91 fd 27 	lds	r24, 0x27FD
    41f0:	81 30       	cpi	r24, 0x01	; 1
    41f2:	09 f0       	breq	.+2      	; 0x41f6 <OSTimeTick+0x4e>
    41f4:	a4 c0       	rjmp	.+328    	; 0x433e <OSTimeTick+0x196>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    41f6:	80 91 e1 2a 	lds	r24, 0x2AE1
    41fa:	88 2f       	mov	r24, r24
    41fc:	90 e0       	ldi	r25, 0x00	; 0
    41fe:	81 30       	cpi	r24, 0x01	; 1
    4200:	91 05       	cpc	r25, r1
    4202:	41 f0       	breq	.+16     	; 0x4214 <OSTimeTick+0x6c>
    4204:	82 30       	cpi	r24, 0x02	; 2
    4206:	91 05       	cpc	r25, r1
    4208:	39 f0       	breq	.+14     	; 0x4218 <OSTimeTick+0x70>
    420a:	00 97       	sbiw	r24, 0x00	; 0
    420c:	59 f4       	brne	.+22     	; 0x4224 <OSTimeTick+0x7c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	8b 83       	std	Y+3, r24	; 0x03
                 break;
    4212:	0d c0       	rjmp	.+26     	; 0x422e <OSTimeTick+0x86>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    4214:	1b 82       	std	Y+3, r1	; 0x03
                 break;
    4216:	0b c0       	rjmp	.+22     	; 0x422e <OSTimeTick+0x86>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	8b 83       	std	Y+3, r24	; 0x03
                 OSTickStepState = OS_TICK_STEP_WAIT;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	80 93 e1 2a 	sts	0x2AE1, r24
                 break;
    4222:	05 c0       	rjmp	.+10     	; 0x422e <OSTimeTick+0x86>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    4224:	81 e0       	ldi	r24, 0x01	; 1
    4226:	8b 83       	std	Y+3, r24	; 0x03
                 OSTickStepState = OS_TICK_STEP_DIS;
    4228:	10 92 e1 2a 	sts	0x2AE1, r1
                 break;
    422c:	00 00       	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    422e:	8b 81       	ldd	r24, Y+3	; 0x03
    4230:	88 23       	and	r24, r24
    4232:	09 f4       	brne	.+2      	; 0x4236 <OSTimeTick+0x8e>
    4234:	83 c0       	rjmp	.+262    	; 0x433c <OSTimeTick+0x194>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4236:	80 91 df 2a 	lds	r24, 0x2ADF
    423a:	90 91 e0 2a 	lds	r25, 0x2AE0
    423e:	89 83       	std	Y+1, r24	; 0x01
    4240:	9a 83       	std	Y+2, r25	; 0x02
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4242:	74 c0       	rjmp	.+232    	; 0x432c <OSTimeTick+0x184>
            OS_ENTER_CRITICAL();
    4244:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4248:	8c 83       	std	Y+4, r24	; 0x04
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	fc 01       	movw	r30, r24
    4250:	84 8d       	ldd	r24, Z+28	; 0x1c
    4252:	95 8d       	ldd	r25, Z+29	; 0x1d
    4254:	00 97       	sbiw	r24, 0x00	; 0
    4256:	09 f4       	brne	.+2      	; 0x425a <OSTimeTick+0xb2>
    4258:	5f c0       	rjmp	.+190    	; 0x4318 <OSTimeTick+0x170>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
    425e:	fc 01       	movw	r30, r24
    4260:	84 8d       	ldd	r24, Z+28	; 0x1c
    4262:	95 8d       	ldd	r25, Z+29	; 0x1d
    4264:	9c 01       	movw	r18, r24
    4266:	21 50       	subi	r18, 0x01	; 1
    4268:	30 40       	sbci	r19, 0x00	; 0
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	9a 81       	ldd	r25, Y+2	; 0x02
    426e:	fc 01       	movw	r30, r24
    4270:	24 8f       	std	Z+28, r18	; 0x1c
    4272:	35 8f       	std	Z+29, r19	; 0x1d
    4274:	89 81       	ldd	r24, Y+1	; 0x01
    4276:	9a 81       	ldd	r25, Y+2	; 0x02
    4278:	fc 01       	movw	r30, r24
    427a:	84 8d       	ldd	r24, Z+28	; 0x1c
    427c:	95 8d       	ldd	r25, Z+29	; 0x1d
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	09 f0       	breq	.+2      	; 0x4284 <OSTimeTick+0xdc>
    4282:	4a c0       	rjmp	.+148    	; 0x4318 <OSTimeTick+0x170>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	9a 81       	ldd	r25, Y+2	; 0x02
    4288:	fc 01       	movw	r30, r24
    428a:	86 8d       	ldd	r24, Z+30	; 0x1e
    428c:	88 2f       	mov	r24, r24
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	87 73       	andi	r24, 0x37	; 55
    4292:	90 70       	andi	r25, 0x00	; 0
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	81 f0       	breq	.+32     	; 0x42b8 <OSTimeTick+0x110>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	9a 81       	ldd	r25, Y+2	; 0x02
    429c:	fc 01       	movw	r30, r24
    429e:	86 8d       	ldd	r24, Z+30	; 0x1e
    42a0:	28 2f       	mov	r18, r24
    42a2:	28 7c       	andi	r18, 0xC8	; 200
    42a4:	89 81       	ldd	r24, Y+1	; 0x01
    42a6:	9a 81       	ldd	r25, Y+2	; 0x02
    42a8:	fc 01       	movw	r30, r24
    42aa:	26 8f       	std	Z+30, r18	; 0x1e
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	9a 81       	ldd	r25, Y+2	; 0x02
    42b0:	21 e0       	ldi	r18, 0x01	; 1
    42b2:	fc 01       	movw	r30, r24
    42b4:	27 8f       	std	Z+31, r18	; 0x1f
    42b6:	04 c0       	rjmp	.+8      	; 0x42c0 <OSTimeTick+0x118>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    42b8:	89 81       	ldd	r24, Y+1	; 0x01
    42ba:	9a 81       	ldd	r25, Y+2	; 0x02
    42bc:	fc 01       	movw	r30, r24
    42be:	17 8e       	std	Z+31, r1	; 0x1f
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    42c0:	89 81       	ldd	r24, Y+1	; 0x01
    42c2:	9a 81       	ldd	r25, Y+2	; 0x02
    42c4:	fc 01       	movw	r30, r24
    42c6:	86 8d       	ldd	r24, Z+30	; 0x1e
    42c8:	88 2f       	mov	r24, r24
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	88 70       	andi	r24, 0x08	; 8
    42ce:	90 70       	andi	r25, 0x00	; 0
    42d0:	00 97       	sbiw	r24, 0x00	; 0
    42d2:	11 f5       	brne	.+68     	; 0x4318 <OSTimeTick+0x170>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	9a 81       	ldd	r25, Y+2	; 0x02
    42d8:	fc 01       	movw	r30, r24
    42da:	94 a1       	ldd	r25, Z+36	; 0x24
    42dc:	80 91 94 2c 	lds	r24, 0x2C94
    42e0:	89 2b       	or	r24, r25
    42e2:	80 93 94 2c 	sts	0x2C94, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    42e6:	89 81       	ldd	r24, Y+1	; 0x01
    42e8:	9a 81       	ldd	r25, Y+2	; 0x02
    42ea:	fc 01       	movw	r30, r24
    42ec:	82 a1       	ldd	r24, Z+34	; 0x22
    42ee:	88 2f       	mov	r24, r24
    42f0:	90 e0       	ldi	r25, 0x00	; 0
    42f2:	29 81       	ldd	r18, Y+1	; 0x01
    42f4:	3a 81       	ldd	r19, Y+2	; 0x02
    42f6:	f9 01       	movw	r30, r18
    42f8:	22 a1       	ldd	r18, Z+34	; 0x22
    42fa:	22 2f       	mov	r18, r18
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	2b 56       	subi	r18, 0x6B	; 107
    4300:	33 4d       	sbci	r19, 0xD3	; 211
    4302:	f9 01       	movw	r30, r18
    4304:	40 81       	ld	r20, Z
    4306:	29 81       	ldd	r18, Y+1	; 0x01
    4308:	3a 81       	ldd	r19, Y+2	; 0x02
    430a:	f9 01       	movw	r30, r18
    430c:	23 a1       	ldd	r18, Z+35	; 0x23
    430e:	24 2b       	or	r18, r20
    4310:	8b 56       	subi	r24, 0x6B	; 107
    4312:	93 4d       	sbci	r25, 0xD3	; 211
    4314:	fc 01       	movw	r30, r24
    4316:	20 83       	st	Z, r18
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	9a 81       	ldd	r25, Y+2	; 0x02
    431c:	fc 01       	movw	r30, r24
    431e:	86 85       	ldd	r24, Z+14	; 0x0e
    4320:	97 85       	ldd	r25, Z+15	; 0x0f
    4322:	89 83       	std	Y+1, r24	; 0x01
    4324:	9a 83       	std	Y+2, r25	; 0x02
            OS_EXIT_CRITICAL();
    4326:	8c 81       	ldd	r24, Y+4	; 0x04
    4328:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    432c:	89 81       	ldd	r24, Y+1	; 0x01
    432e:	9a 81       	ldd	r25, Y+2	; 0x02
    4330:	fc 01       	movw	r30, r24
    4332:	80 a1       	ldd	r24, Z+32	; 0x20
    4334:	8f 33       	cpi	r24, 0x3F	; 63
    4336:	09 f0       	breq	.+2      	; 0x433a <OSTimeTick+0x192>
    4338:	85 cf       	rjmp	.-246    	; 0x4244 <OSTimeTick+0x9c>
    433a:	01 c0       	rjmp	.+2      	; 0x433e <OSTimeTick+0x196>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    433c:	00 00       	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    433e:	24 96       	adiw	r28, 0x04	; 4
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	cf 91       	pop	r28
    4346:	df 91       	pop	r29
    4348:	08 95       	ret

0000434a <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    434a:	df 93       	push	r29
    434c:	cf 93       	push	r28
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
    return (OS_VERSION);
    4352:	8e e1       	ldi	r24, 0x1E	; 30
    4354:	91 e0       	ldi	r25, 0x01	; 1
}
    4356:	cf 91       	pop	r28
    4358:	df 91       	pop	r29
    435a:	08 95       	ret

0000435c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
}
    4364:	cf 91       	pop	r28
    4366:	df 91       	pop	r29
    4368:	08 95       	ret

0000436a <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    436a:	df 93       	push	r29
    436c:	cf 93       	push	r28
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	2b 97       	sbiw	r28, 0x0b	; 11
    4374:	cd bf       	out	0x3d, r28	; 61
    4376:	de bf       	out	0x3e, r29	; 62
    4378:	8e 83       	std	Y+6, r24	; 0x06
    437a:	9f 83       	std	Y+7, r25	; 0x07
    437c:	68 87       	std	Y+8, r22	; 0x08
    437e:	79 87       	std	Y+9, r23	; 0x09
    4380:	4a 87       	std	Y+10, r20	; 0x0a
    4382:	2b 87       	std	Y+11, r18	; 0x0b
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4384:	8e 81       	ldd	r24, Y+6	; 0x06
    4386:	9f 81       	ldd	r25, Y+7	; 0x07
    4388:	fc 01       	movw	r30, r24
    438a:	85 81       	ldd	r24, Z+5	; 0x05
    438c:	88 2f       	mov	r24, r24
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	88 54       	subi	r24, 0x48	; 72
    4392:	9e 4d       	sbci	r25, 0xDE	; 222
    4394:	fc 01       	movw	r30, r24
    4396:	80 81       	ld	r24, Z
    4398:	89 83       	std	Y+1, r24	; 0x01
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	88 2f       	mov	r24, r24
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	2e 81       	ldd	r18, Y+6	; 0x06
    43a2:	3f 81       	ldd	r19, Y+7	; 0x07
    43a4:	82 0f       	add	r24, r18
    43a6:	93 1f       	adc	r25, r19
    43a8:	06 96       	adiw	r24, 0x06	; 6
    43aa:	fc 01       	movw	r30, r24
    43ac:	80 81       	ld	r24, Z
    43ae:	88 2f       	mov	r24, r24
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	88 54       	subi	r24, 0x48	; 72
    43b4:	9e 4d       	sbci	r25, 0xDE	; 222
    43b6:	fc 01       	movw	r30, r24
    43b8:	80 81       	ld	r24, Z
    43ba:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    43bc:	89 81       	ldd	r24, Y+1	; 0x01
    43be:	98 2f       	mov	r25, r24
    43c0:	99 0f       	add	r25, r25
    43c2:	99 0f       	add	r25, r25
    43c4:	99 0f       	add	r25, r25
    43c6:	8a 81       	ldd	r24, Y+2	; 0x02
    43c8:	89 0f       	add	r24, r25
    43ca:	8b 83       	std	Y+3, r24	; 0x03
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    43cc:	8b 81       	ldd	r24, Y+3	; 0x03
    43ce:	88 2f       	mov	r24, r24
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	88 0f       	add	r24, r24
    43d4:	99 1f       	adc	r25, r25
    43d6:	8d 58       	subi	r24, 0x8D	; 141
    43d8:	9a 4c       	sbci	r25, 0xCA	; 202
    43da:	fc 01       	movw	r30, r24
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	8c 83       	std	Y+4, r24	; 0x04
    43e2:	9d 83       	std	Y+5, r25	; 0x05
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    43e4:	8c 81       	ldd	r24, Y+4	; 0x04
    43e6:	9d 81       	ldd	r25, Y+5	; 0x05
    43e8:	fc 01       	movw	r30, r24
    43ea:	14 8e       	std	Z+28, r1	; 0x1c
    43ec:	15 8e       	std	Z+29, r1	; 0x1d
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    43ee:	8c 81       	ldd	r24, Y+4	; 0x04
    43f0:	9d 81       	ldd	r25, Y+5	; 0x05
    43f2:	28 85       	ldd	r18, Y+8	; 0x08
    43f4:	39 85       	ldd	r19, Y+9	; 0x09
    43f6:	fc 01       	movw	r30, r24
    43f8:	26 8b       	std	Z+22, r18	; 0x16
    43fa:	37 8b       	std	Z+23, r19	; 0x17
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    43fc:	8c 81       	ldd	r24, Y+4	; 0x04
    43fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4400:	fc 01       	movw	r30, r24
    4402:	86 8d       	ldd	r24, Z+30	; 0x1e
    4404:	98 2f       	mov	r25, r24
    4406:	8a 85       	ldd	r24, Y+10	; 0x0a
    4408:	80 95       	com	r24
    440a:	89 23       	and	r24, r25
    440c:	28 2f       	mov	r18, r24
    440e:	8c 81       	ldd	r24, Y+4	; 0x04
    4410:	9d 81       	ldd	r25, Y+5	; 0x05
    4412:	fc 01       	movw	r30, r24
    4414:	26 8f       	std	Z+30, r18	; 0x1e
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    4416:	8c 81       	ldd	r24, Y+4	; 0x04
    4418:	9d 81       	ldd	r25, Y+5	; 0x05
    441a:	2b 85       	ldd	r18, Y+11	; 0x0b
    441c:	fc 01       	movw	r30, r24
    441e:	27 8f       	std	Z+31, r18	; 0x1f
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4420:	8c 81       	ldd	r24, Y+4	; 0x04
    4422:	9d 81       	ldd	r25, Y+5	; 0x05
    4424:	fc 01       	movw	r30, r24
    4426:	86 8d       	ldd	r24, Z+30	; 0x1e
    4428:	88 2f       	mov	r24, r24
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	88 70       	andi	r24, 0x08	; 8
    442e:	90 70       	andi	r25, 0x00	; 0
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	e1 f4       	brne	.+56     	; 0x446c <OS_EventTaskRdy+0x102>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4434:	8c 81       	ldd	r24, Y+4	; 0x04
    4436:	9d 81       	ldd	r25, Y+5	; 0x05
    4438:	fc 01       	movw	r30, r24
    443a:	94 a1       	ldd	r25, Z+36	; 0x24
    443c:	80 91 94 2c 	lds	r24, 0x2C94
    4440:	89 2b       	or	r24, r25
    4442:	80 93 94 2c 	sts	0x2C94, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	88 2f       	mov	r24, r24
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	29 81       	ldd	r18, Y+1	; 0x01
    444e:	22 2f       	mov	r18, r18
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	2b 56       	subi	r18, 0x6B	; 107
    4454:	33 4d       	sbci	r19, 0xD3	; 211
    4456:	f9 01       	movw	r30, r18
    4458:	40 81       	ld	r20, Z
    445a:	2c 81       	ldd	r18, Y+4	; 0x04
    445c:	3d 81       	ldd	r19, Y+5	; 0x05
    445e:	f9 01       	movw	r30, r18
    4460:	23 a1       	ldd	r18, Z+35	; 0x23
    4462:	24 2b       	or	r18, r20
    4464:	8b 56       	subi	r24, 0x6B	; 107
    4466:	93 4d       	sbci	r25, 0xD3	; 211
    4468:	fc 01       	movw	r30, r24
    446a:	20 83       	st	Z, r18
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    446c:	8c 81       	ldd	r24, Y+4	; 0x04
    446e:	9d 81       	ldd	r25, Y+5	; 0x05
    4470:	2e 81       	ldd	r18, Y+6	; 0x06
    4472:	3f 81       	ldd	r19, Y+7	; 0x07
    4474:	b9 01       	movw	r22, r18
    4476:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    447a:	8c 81       	ldd	r24, Y+4	; 0x04
    447c:	9d 81       	ldd	r25, Y+5	; 0x05
    447e:	fc 01       	movw	r30, r24
    4480:	84 89       	ldd	r24, Z+20	; 0x14
    4482:	95 89       	ldd	r25, Z+21	; 0x15
    4484:	00 97       	sbiw	r24, 0x00	; 0
    4486:	89 f0       	breq	.+34     	; 0x44aa <OS_EventTaskRdy+0x140>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4488:	8c 81       	ldd	r24, Y+4	; 0x04
    448a:	9d 81       	ldd	r25, Y+5	; 0x05
    448c:	fc 01       	movw	r30, r24
    448e:	24 89       	ldd	r18, Z+20	; 0x14
    4490:	35 89       	ldd	r19, Z+21	; 0x15
    4492:	8c 81       	ldd	r24, Y+4	; 0x04
    4494:	9d 81       	ldd	r25, Y+5	; 0x05
    4496:	b9 01       	movw	r22, r18
    4498:	0e 94 cf 23 	call	0x479e	; 0x479e <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    449c:	8c 81       	ldd	r24, Y+4	; 0x04
    449e:	9d 81       	ldd	r25, Y+5	; 0x05
    44a0:	2e 81       	ldd	r18, Y+6	; 0x06
    44a2:	3f 81       	ldd	r19, Y+7	; 0x07
    44a4:	fc 01       	movw	r30, r24
    44a6:	22 8b       	std	Z+18, r18	; 0x12
    44a8:	33 8b       	std	Z+19, r19	; 0x13
    }
#endif

    return (prio);
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    44ac:	2b 96       	adiw	r28, 0x0b	; 11
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	de bf       	out	0x3e, r29	; 62
    44b2:	cf 91       	pop	r28
    44b4:	df 91       	pop	r29
    44b6:	08 95       	ret

000044b8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    44b8:	df 93       	push	r29
    44ba:	cf 93       	push	r28
    44bc:	00 d0       	rcall	.+0      	; 0x44be <OS_EventTaskWait+0x6>
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	8a 83       	std	Y+2, r24	; 0x02
    44c4:	9b 83       	std	Y+3, r25	; 0x03
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    44c6:	80 91 08 2e 	lds	r24, 0x2E08
    44ca:	90 91 09 2e 	lds	r25, 0x2E09
    44ce:	2a 81       	ldd	r18, Y+2	; 0x02
    44d0:	3b 81       	ldd	r19, Y+3	; 0x03
    44d2:	fc 01       	movw	r30, r24
    44d4:	22 8b       	std	Z+18, r18	; 0x12
    44d6:	33 8b       	std	Z+19, r19	; 0x13

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    44d8:	80 91 08 2e 	lds	r24, 0x2E08
    44dc:	90 91 09 2e 	lds	r25, 0x2E09
    44e0:	fc 01       	movw	r30, r24
    44e2:	82 a1       	ldd	r24, Z+34	; 0x22
    44e4:	88 2f       	mov	r24, r24
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	20 91 08 2e 	lds	r18, 0x2E08
    44ec:	30 91 09 2e 	lds	r19, 0x2E09
    44f0:	f9 01       	movw	r30, r18
    44f2:	22 a1       	ldd	r18, Z+34	; 0x22
    44f4:	22 2f       	mov	r18, r18
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	4a 81       	ldd	r20, Y+2	; 0x02
    44fa:	5b 81       	ldd	r21, Y+3	; 0x03
    44fc:	24 0f       	add	r18, r20
    44fe:	35 1f       	adc	r19, r21
    4500:	2a 5f       	subi	r18, 0xFA	; 250
    4502:	3f 4f       	sbci	r19, 0xFF	; 255
    4504:	f9 01       	movw	r30, r18
    4506:	40 81       	ld	r20, Z
    4508:	20 91 08 2e 	lds	r18, 0x2E08
    450c:	30 91 09 2e 	lds	r19, 0x2E09
    4510:	f9 01       	movw	r30, r18
    4512:	23 a1       	ldd	r18, Z+35	; 0x23
    4514:	42 2b       	or	r20, r18
    4516:	2a 81       	ldd	r18, Y+2	; 0x02
    4518:	3b 81       	ldd	r19, Y+3	; 0x03
    451a:	82 0f       	add	r24, r18
    451c:	93 1f       	adc	r25, r19
    451e:	06 96       	adiw	r24, 0x06	; 6
    4520:	fc 01       	movw	r30, r24
    4522:	40 83       	st	Z, r20
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	9b 81       	ldd	r25, Y+3	; 0x03
    4528:	fc 01       	movw	r30, r24
    452a:	25 81       	ldd	r18, Z+5	; 0x05
    452c:	80 91 08 2e 	lds	r24, 0x2E08
    4530:	90 91 09 2e 	lds	r25, 0x2E09
    4534:	fc 01       	movw	r30, r24
    4536:	84 a1       	ldd	r24, Z+36	; 0x24
    4538:	28 2b       	or	r18, r24
    453a:	8a 81       	ldd	r24, Y+2	; 0x02
    453c:	9b 81       	ldd	r25, Y+3	; 0x03
    453e:	fc 01       	movw	r30, r24
    4540:	25 83       	std	Z+5, r18	; 0x05

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4542:	80 91 08 2e 	lds	r24, 0x2E08
    4546:	90 91 09 2e 	lds	r25, 0x2E09
    454a:	fc 01       	movw	r30, r24
    454c:	82 a1       	ldd	r24, Z+34	; 0x22
    454e:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4550:	89 81       	ldd	r24, Y+1	; 0x01
    4552:	88 2f       	mov	r24, r24
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	29 81       	ldd	r18, Y+1	; 0x01
    4558:	22 2f       	mov	r18, r18
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	2b 56       	subi	r18, 0x6B	; 107
    455e:	33 4d       	sbci	r19, 0xD3	; 211
    4560:	f9 01       	movw	r30, r18
    4562:	20 81       	ld	r18, Z
    4564:	42 2f       	mov	r20, r18
    4566:	20 91 08 2e 	lds	r18, 0x2E08
    456a:	30 91 09 2e 	lds	r19, 0x2E09
    456e:	f9 01       	movw	r30, r18
    4570:	23 a1       	ldd	r18, Z+35	; 0x23
    4572:	20 95       	com	r18
    4574:	24 23       	and	r18, r20
    4576:	8b 56       	subi	r24, 0x6B	; 107
    4578:	93 4d       	sbci	r25, 0xD3	; 211
    457a:	fc 01       	movw	r30, r24
    457c:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	88 2f       	mov	r24, r24
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	8b 56       	subi	r24, 0x6B	; 107
    4586:	93 4d       	sbci	r25, 0xD3	; 211
    4588:	fc 01       	movw	r30, r24
    458a:	80 81       	ld	r24, Z
    458c:	88 23       	and	r24, r24
    458e:	69 f4       	brne	.+26     	; 0x45aa <OS_EventTaskWait+0xf2>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4590:	80 91 08 2e 	lds	r24, 0x2E08
    4594:	90 91 09 2e 	lds	r25, 0x2E09
    4598:	fc 01       	movw	r30, r24
    459a:	84 a1       	ldd	r24, Z+36	; 0x24
    459c:	98 2f       	mov	r25, r24
    459e:	90 95       	com	r25
    45a0:	80 91 94 2c 	lds	r24, 0x2C94
    45a4:	89 23       	and	r24, r25
    45a6:	80 93 94 2c 	sts	0x2C94, r24
    }
}
    45aa:	23 96       	adiw	r28, 0x03	; 3
    45ac:	cd bf       	out	0x3d, r28	; 61
    45ae:	de bf       	out	0x3e, r29	; 62
    45b0:	cf 91       	pop	r28
    45b2:	df 91       	pop	r29
    45b4:	08 95       	ret

000045b6 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    45b6:	df 93       	push	r29
    45b8:	cf 93       	push	r28
    45ba:	cd b7       	in	r28, 0x3d	; 61
    45bc:	de b7       	in	r29, 0x3e	; 62
    45be:	27 97       	sbiw	r28, 0x07	; 7
    45c0:	cd bf       	out	0x3d, r28	; 61
    45c2:	de bf       	out	0x3e, r29	; 62
    45c4:	8e 83       	std	Y+6, r24	; 0x06
    45c6:	9f 83       	std	Y+7, r25	; 0x07
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    45c8:	80 91 08 2e 	lds	r24, 0x2E08
    45cc:	90 91 09 2e 	lds	r25, 0x2E09
    45d0:	fc 01       	movw	r30, r24
    45d2:	12 8a       	std	Z+18, r1	; 0x12
    45d4:	13 8a       	std	Z+19, r1	; 0x13
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    45d6:	80 91 08 2e 	lds	r24, 0x2E08
    45da:	90 91 09 2e 	lds	r25, 0x2E09
    45de:	2e 81       	ldd	r18, Y+6	; 0x06
    45e0:	3f 81       	ldd	r19, Y+7	; 0x07
    45e2:	fc 01       	movw	r30, r24
    45e4:	24 8b       	std	Z+20, r18	; 0x14
    45e6:	35 8b       	std	Z+21, r19	; 0x15

    pevents =  pevents_wait;
    45e8:	8e 81       	ldd	r24, Y+6	; 0x06
    45ea:	9f 81       	ldd	r25, Y+7	; 0x07
    45ec:	89 83       	std	Y+1, r24	; 0x01
    45ee:	9a 83       	std	Y+2, r25	; 0x02
    pevent  = *pevents;
    45f0:	89 81       	ldd	r24, Y+1	; 0x01
    45f2:	9a 81       	ldd	r25, Y+2	; 0x02
    45f4:	fc 01       	movw	r30, r24
    45f6:	80 81       	ld	r24, Z
    45f8:	91 81       	ldd	r25, Z+1	; 0x01
    45fa:	8b 83       	std	Y+3, r24	; 0x03
    45fc:	9c 83       	std	Y+4, r25	; 0x04
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    45fe:	41 c0       	rjmp	.+130    	; 0x4682 <OS_EventTaskWaitMulti+0xcc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    4600:	80 91 08 2e 	lds	r24, 0x2E08
    4604:	90 91 09 2e 	lds	r25, 0x2E09
    4608:	fc 01       	movw	r30, r24
    460a:	82 a1       	ldd	r24, Z+34	; 0x22
    460c:	88 2f       	mov	r24, r24
    460e:	90 e0       	ldi	r25, 0x00	; 0
    4610:	20 91 08 2e 	lds	r18, 0x2E08
    4614:	30 91 09 2e 	lds	r19, 0x2E09
    4618:	f9 01       	movw	r30, r18
    461a:	22 a1       	ldd	r18, Z+34	; 0x22
    461c:	22 2f       	mov	r18, r18
    461e:	30 e0       	ldi	r19, 0x00	; 0
    4620:	4b 81       	ldd	r20, Y+3	; 0x03
    4622:	5c 81       	ldd	r21, Y+4	; 0x04
    4624:	24 0f       	add	r18, r20
    4626:	35 1f       	adc	r19, r21
    4628:	2a 5f       	subi	r18, 0xFA	; 250
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	f9 01       	movw	r30, r18
    462e:	40 81       	ld	r20, Z
    4630:	20 91 08 2e 	lds	r18, 0x2E08
    4634:	30 91 09 2e 	lds	r19, 0x2E09
    4638:	f9 01       	movw	r30, r18
    463a:	23 a1       	ldd	r18, Z+35	; 0x23
    463c:	42 2b       	or	r20, r18
    463e:	2b 81       	ldd	r18, Y+3	; 0x03
    4640:	3c 81       	ldd	r19, Y+4	; 0x04
    4642:	82 0f       	add	r24, r18
    4644:	93 1f       	adc	r25, r19
    4646:	06 96       	adiw	r24, 0x06	; 6
    4648:	fc 01       	movw	r30, r24
    464a:	40 83       	st	Z, r20
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    464c:	8b 81       	ldd	r24, Y+3	; 0x03
    464e:	9c 81       	ldd	r25, Y+4	; 0x04
    4650:	fc 01       	movw	r30, r24
    4652:	25 81       	ldd	r18, Z+5	; 0x05
    4654:	80 91 08 2e 	lds	r24, 0x2E08
    4658:	90 91 09 2e 	lds	r25, 0x2E09
    465c:	fc 01       	movw	r30, r24
    465e:	84 a1       	ldd	r24, Z+36	; 0x24
    4660:	28 2b       	or	r18, r24
    4662:	8b 81       	ldd	r24, Y+3	; 0x03
    4664:	9c 81       	ldd	r25, Y+4	; 0x04
    4666:	fc 01       	movw	r30, r24
    4668:	25 83       	std	Z+5, r18	; 0x05
        pevents++;
    466a:	89 81       	ldd	r24, Y+1	; 0x01
    466c:	9a 81       	ldd	r25, Y+2	; 0x02
    466e:	02 96       	adiw	r24, 0x02	; 2
    4670:	89 83       	std	Y+1, r24	; 0x01
    4672:	9a 83       	std	Y+2, r25	; 0x02
        pevent = *pevents;
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	9a 81       	ldd	r25, Y+2	; 0x02
    4678:	fc 01       	movw	r30, r24
    467a:	80 81       	ld	r24, Z
    467c:	91 81       	ldd	r25, Z+1	; 0x01
    467e:	8b 83       	std	Y+3, r24	; 0x03
    4680:	9c 83       	std	Y+4, r25	; 0x04
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4682:	8b 81       	ldd	r24, Y+3	; 0x03
    4684:	9c 81       	ldd	r25, Y+4	; 0x04
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	09 f0       	breq	.+2      	; 0x468c <OS_EventTaskWaitMulti+0xd6>
    468a:	ba cf       	rjmp	.-140    	; 0x4600 <OS_EventTaskWaitMulti+0x4a>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    468c:	80 91 08 2e 	lds	r24, 0x2E08
    4690:	90 91 09 2e 	lds	r25, 0x2E09
    4694:	fc 01       	movw	r30, r24
    4696:	82 a1       	ldd	r24, Z+34	; 0x22
    4698:	8d 83       	std	Y+5, r24	; 0x05
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    469a:	8d 81       	ldd	r24, Y+5	; 0x05
    469c:	88 2f       	mov	r24, r24
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	2d 81       	ldd	r18, Y+5	; 0x05
    46a2:	22 2f       	mov	r18, r18
    46a4:	30 e0       	ldi	r19, 0x00	; 0
    46a6:	2b 56       	subi	r18, 0x6B	; 107
    46a8:	33 4d       	sbci	r19, 0xD3	; 211
    46aa:	f9 01       	movw	r30, r18
    46ac:	20 81       	ld	r18, Z
    46ae:	42 2f       	mov	r20, r18
    46b0:	20 91 08 2e 	lds	r18, 0x2E08
    46b4:	30 91 09 2e 	lds	r19, 0x2E09
    46b8:	f9 01       	movw	r30, r18
    46ba:	23 a1       	ldd	r18, Z+35	; 0x23
    46bc:	20 95       	com	r18
    46be:	24 23       	and	r18, r20
    46c0:	8b 56       	subi	r24, 0x6B	; 107
    46c2:	93 4d       	sbci	r25, 0xD3	; 211
    46c4:	fc 01       	movw	r30, r24
    46c6:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    46c8:	8d 81       	ldd	r24, Y+5	; 0x05
    46ca:	88 2f       	mov	r24, r24
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	8b 56       	subi	r24, 0x6B	; 107
    46d0:	93 4d       	sbci	r25, 0xD3	; 211
    46d2:	fc 01       	movw	r30, r24
    46d4:	80 81       	ld	r24, Z
    46d6:	88 23       	and	r24, r24
    46d8:	69 f4       	brne	.+26     	; 0x46f4 <OS_EventTaskWaitMulti+0x13e>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    46da:	80 91 08 2e 	lds	r24, 0x2E08
    46de:	90 91 09 2e 	lds	r25, 0x2E09
    46e2:	fc 01       	movw	r30, r24
    46e4:	84 a1       	ldd	r24, Z+36	; 0x24
    46e6:	98 2f       	mov	r25, r24
    46e8:	90 95       	com	r25
    46ea:	80 91 94 2c 	lds	r24, 0x2C94
    46ee:	89 23       	and	r24, r25
    46f0:	80 93 94 2c 	sts	0x2C94, r24
    }
}
    46f4:	27 96       	adiw	r28, 0x07	; 7
    46f6:	cd bf       	out	0x3d, r28	; 61
    46f8:	de bf       	out	0x3e, r29	; 62
    46fa:	cf 91       	pop	r28
    46fc:	df 91       	pop	r29
    46fe:	08 95       	ret

00004700 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    4700:	df 93       	push	r29
    4702:	cf 93       	push	r28
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62
    4708:	25 97       	sbiw	r28, 0x05	; 5
    470a:	cd bf       	out	0x3d, r28	; 61
    470c:	de bf       	out	0x3e, r29	; 62
    470e:	8a 83       	std	Y+2, r24	; 0x02
    4710:	9b 83       	std	Y+3, r25	; 0x03
    4712:	6c 83       	std	Y+4, r22	; 0x04
    4714:	7d 83       	std	Y+5, r23	; 0x05
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4716:	8a 81       	ldd	r24, Y+2	; 0x02
    4718:	9b 81       	ldd	r25, Y+3	; 0x03
    471a:	fc 01       	movw	r30, r24
    471c:	82 a1       	ldd	r24, Z+34	; 0x22
    471e:	89 83       	std	Y+1, r24	; 0x01
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	88 2f       	mov	r24, r24
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	29 81       	ldd	r18, Y+1	; 0x01
    4728:	22 2f       	mov	r18, r18
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	4c 81       	ldd	r20, Y+4	; 0x04
    472e:	5d 81       	ldd	r21, Y+5	; 0x05
    4730:	24 0f       	add	r18, r20
    4732:	35 1f       	adc	r19, r21
    4734:	2a 5f       	subi	r18, 0xFA	; 250
    4736:	3f 4f       	sbci	r19, 0xFF	; 255
    4738:	f9 01       	movw	r30, r18
    473a:	20 81       	ld	r18, Z
    473c:	42 2f       	mov	r20, r18
    473e:	2a 81       	ldd	r18, Y+2	; 0x02
    4740:	3b 81       	ldd	r19, Y+3	; 0x03
    4742:	f9 01       	movw	r30, r18
    4744:	23 a1       	ldd	r18, Z+35	; 0x23
    4746:	20 95       	com	r18
    4748:	24 23       	and	r18, r20
    474a:	42 2f       	mov	r20, r18
    474c:	2c 81       	ldd	r18, Y+4	; 0x04
    474e:	3d 81       	ldd	r19, Y+5	; 0x05
    4750:	82 0f       	add	r24, r18
    4752:	93 1f       	adc	r25, r19
    4754:	06 96       	adiw	r24, 0x06	; 6
    4756:	fc 01       	movw	r30, r24
    4758:	40 83       	st	Z, r20
    if (pevent->OSEventTbl[y] == 0) {
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	88 2f       	mov	r24, r24
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	2c 81       	ldd	r18, Y+4	; 0x04
    4762:	3d 81       	ldd	r19, Y+5	; 0x05
    4764:	82 0f       	add	r24, r18
    4766:	93 1f       	adc	r25, r19
    4768:	06 96       	adiw	r24, 0x06	; 6
    476a:	fc 01       	movw	r30, r24
    476c:	80 81       	ld	r24, Z
    476e:	88 23       	and	r24, r24
    4770:	81 f4       	brne	.+32     	; 0x4792 <OS_EventTaskRemove+0x92>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4772:	8c 81       	ldd	r24, Y+4	; 0x04
    4774:	9d 81       	ldd	r25, Y+5	; 0x05
    4776:	fc 01       	movw	r30, r24
    4778:	85 81       	ldd	r24, Z+5	; 0x05
    477a:	28 2f       	mov	r18, r24
    477c:	8a 81       	ldd	r24, Y+2	; 0x02
    477e:	9b 81       	ldd	r25, Y+3	; 0x03
    4780:	fc 01       	movw	r30, r24
    4782:	84 a1       	ldd	r24, Z+36	; 0x24
    4784:	80 95       	com	r24
    4786:	82 23       	and	r24, r18
    4788:	28 2f       	mov	r18, r24
    478a:	8c 81       	ldd	r24, Y+4	; 0x04
    478c:	9d 81       	ldd	r25, Y+5	; 0x05
    478e:	fc 01       	movw	r30, r24
    4790:	25 83       	std	Z+5, r18	; 0x05
    }
}
    4792:	25 96       	adiw	r28, 0x05	; 5
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	cf 91       	pop	r28
    479a:	df 91       	pop	r29
    479c:	08 95       	ret

0000479e <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    479e:	df 93       	push	r29
    47a0:	cf 93       	push	r28
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	2b 97       	sbiw	r28, 0x0b	; 11
    47a8:	cd bf       	out	0x3d, r28	; 61
    47aa:	de bf       	out	0x3e, r29	; 62
    47ac:	88 87       	std	Y+8, r24	; 0x08
    47ae:	99 87       	std	Y+9, r25	; 0x09
    47b0:	6a 87       	std	Y+10, r22	; 0x0a
    47b2:	7b 87       	std	Y+11, r23	; 0x0b
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    47b4:	88 85       	ldd	r24, Y+8	; 0x08
    47b6:	99 85       	ldd	r25, Y+9	; 0x09
    47b8:	fc 01       	movw	r30, r24
    47ba:	82 a1       	ldd	r24, Z+34	; 0x22
    47bc:	8d 83       	std	Y+5, r24	; 0x05
    bity    =  ptcb->OSTCBBitY;
    47be:	88 85       	ldd	r24, Y+8	; 0x08
    47c0:	99 85       	ldd	r25, Y+9	; 0x09
    47c2:	fc 01       	movw	r30, r24
    47c4:	84 a1       	ldd	r24, Z+36	; 0x24
    47c6:	8e 83       	std	Y+6, r24	; 0x06
    bitx    =  ptcb->OSTCBBitX;
    47c8:	88 85       	ldd	r24, Y+8	; 0x08
    47ca:	99 85       	ldd	r25, Y+9	; 0x09
    47cc:	fc 01       	movw	r30, r24
    47ce:	83 a1       	ldd	r24, Z+35	; 0x23
    47d0:	8f 83       	std	Y+7, r24	; 0x07
    pevents =  pevents_multi;
    47d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    47d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    47d6:	89 83       	std	Y+1, r24	; 0x01
    47d8:	9a 83       	std	Y+2, r25	; 0x02
    pevent  = *pevents;
    47da:	89 81       	ldd	r24, Y+1	; 0x01
    47dc:	9a 81       	ldd	r25, Y+2	; 0x02
    47de:	fc 01       	movw	r30, r24
    47e0:	80 81       	ld	r24, Z
    47e2:	91 81       	ldd	r25, Z+1	; 0x01
    47e4:	8b 83       	std	Y+3, r24	; 0x03
    47e6:	9c 83       	std	Y+4, r25	; 0x04
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    47e8:	3f c0       	rjmp	.+126    	; 0x4868 <OS_EventTaskRemoveMulti+0xca>
        pevent->OSEventTbl[y]  &= ~bitx;
    47ea:	8d 81       	ldd	r24, Y+5	; 0x05
    47ec:	88 2f       	mov	r24, r24
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	2d 81       	ldd	r18, Y+5	; 0x05
    47f2:	22 2f       	mov	r18, r18
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	4b 81       	ldd	r20, Y+3	; 0x03
    47f8:	5c 81       	ldd	r21, Y+4	; 0x04
    47fa:	24 0f       	add	r18, r20
    47fc:	35 1f       	adc	r19, r21
    47fe:	2a 5f       	subi	r18, 0xFA	; 250
    4800:	3f 4f       	sbci	r19, 0xFF	; 255
    4802:	f9 01       	movw	r30, r18
    4804:	20 81       	ld	r18, Z
    4806:	32 2f       	mov	r19, r18
    4808:	2f 81       	ldd	r18, Y+7	; 0x07
    480a:	20 95       	com	r18
    480c:	23 23       	and	r18, r19
    480e:	42 2f       	mov	r20, r18
    4810:	2b 81       	ldd	r18, Y+3	; 0x03
    4812:	3c 81       	ldd	r19, Y+4	; 0x04
    4814:	82 0f       	add	r24, r18
    4816:	93 1f       	adc	r25, r19
    4818:	06 96       	adiw	r24, 0x06	; 6
    481a:	fc 01       	movw	r30, r24
    481c:	40 83       	st	Z, r20
        if (pevent->OSEventTbl[y] == 0) {
    481e:	8d 81       	ldd	r24, Y+5	; 0x05
    4820:	88 2f       	mov	r24, r24
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	2b 81       	ldd	r18, Y+3	; 0x03
    4826:	3c 81       	ldd	r19, Y+4	; 0x04
    4828:	82 0f       	add	r24, r18
    482a:	93 1f       	adc	r25, r19
    482c:	06 96       	adiw	r24, 0x06	; 6
    482e:	fc 01       	movw	r30, r24
    4830:	80 81       	ld	r24, Z
    4832:	88 23       	and	r24, r24
    4834:	69 f4       	brne	.+26     	; 0x4850 <OS_EventTaskRemoveMulti+0xb2>
            pevent->OSEventGrp &= ~bity;
    4836:	8b 81       	ldd	r24, Y+3	; 0x03
    4838:	9c 81       	ldd	r25, Y+4	; 0x04
    483a:	fc 01       	movw	r30, r24
    483c:	85 81       	ldd	r24, Z+5	; 0x05
    483e:	98 2f       	mov	r25, r24
    4840:	8e 81       	ldd	r24, Y+6	; 0x06
    4842:	80 95       	com	r24
    4844:	89 23       	and	r24, r25
    4846:	28 2f       	mov	r18, r24
    4848:	8b 81       	ldd	r24, Y+3	; 0x03
    484a:	9c 81       	ldd	r25, Y+4	; 0x04
    484c:	fc 01       	movw	r30, r24
    484e:	25 83       	std	Z+5, r18	; 0x05
        }
        pevents++;
    4850:	89 81       	ldd	r24, Y+1	; 0x01
    4852:	9a 81       	ldd	r25, Y+2	; 0x02
    4854:	02 96       	adiw	r24, 0x02	; 2
    4856:	89 83       	std	Y+1, r24	; 0x01
    4858:	9a 83       	std	Y+2, r25	; 0x02
        pevent = *pevents;
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	fc 01       	movw	r30, r24
    4860:	80 81       	ld	r24, Z
    4862:	91 81       	ldd	r25, Z+1	; 0x01
    4864:	8b 83       	std	Y+3, r24	; 0x03
    4866:	9c 83       	std	Y+4, r25	; 0x04
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4868:	8b 81       	ldd	r24, Y+3	; 0x03
    486a:	9c 81       	ldd	r25, Y+4	; 0x04
    486c:	00 97       	sbiw	r24, 0x00	; 0
    486e:	09 f0       	breq	.+2      	; 0x4872 <OS_EventTaskRemoveMulti+0xd4>
    4870:	bc cf       	rjmp	.-136    	; 0x47ea <OS_EventTaskRemoveMulti+0x4c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    4872:	2b 96       	adiw	r28, 0x0b	; 11
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	08 95       	ret

0000487e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	25 97       	sbiw	r28, 0x05	; 5
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	8c 83       	std	Y+4, r24	; 0x04
    488e:	9d 83       	std	Y+5, r25	; 0x05
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    4890:	8c 81       	ldd	r24, Y+4	; 0x04
    4892:	9d 81       	ldd	r25, Y+5	; 0x05
    4894:	fc 01       	movw	r30, r24
    4896:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];
    4898:	8c 81       	ldd	r24, Y+4	; 0x04
    489a:	9d 81       	ldd	r25, Y+5	; 0x05
    489c:	06 96       	adiw	r24, 0x06	; 6
    489e:	89 83       	std	Y+1, r24	; 0x01
    48a0:	9a 83       	std	Y+2, r25	; 0x02

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    48a2:	1b 82       	std	Y+3, r1	; 0x03
    48a4:	0c c0       	rjmp	.+24     	; 0x48be <OS_EventWaitListInit+0x40>
        *ptbl++ = 0;
    48a6:	89 81       	ldd	r24, Y+1	; 0x01
    48a8:	9a 81       	ldd	r25, Y+2	; 0x02
    48aa:	fc 01       	movw	r30, r24
    48ac:	10 82       	st	Z, r1
    48ae:	89 81       	ldd	r24, Y+1	; 0x01
    48b0:	9a 81       	ldd	r25, Y+2	; 0x02
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	89 83       	std	Y+1, r24	; 0x01
    48b6:	9a 83       	std	Y+2, r25	; 0x02


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    48b8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ba:	8f 5f       	subi	r24, 0xFF	; 255
    48bc:	8b 83       	std	Y+3, r24	; 0x03
    48be:	8b 81       	ldd	r24, Y+3	; 0x03
    48c0:	88 30       	cpi	r24, 0x08	; 8
    48c2:	88 f3       	brcs	.-30     	; 0x48a6 <OS_EventWaitListInit+0x28>
        *ptbl++ = 0;
    }
}
    48c4:	25 96       	adiw	r28, 0x05	; 5
    48c6:	cd bf       	out	0x3d, r28	; 61
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	cf 91       	pop	r28
    48cc:	df 91       	pop	r29
    48ce:	08 95       	ret

000048d0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    48d0:	df 93       	push	r29
    48d2:	cf 93       	push	r28
    48d4:	00 d0       	rcall	.+0      	; 0x48d6 <OS_InitEventList+0x6>
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <OS_InitEventList+0x8>
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    48dc:	8c e7       	ldi	r24, 0x7C	; 124
    48de:	9f e2       	ldi	r25, 0x2F	; 47
    48e0:	6c e2       	ldi	r22, 0x2C	; 44
    48e2:	71 e0       	ldi	r23, 0x01	; 1
    48e4:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    48e8:	8c e7       	ldi	r24, 0x7C	; 124
    48ea:	9f e2       	ldi	r25, 0x2F	; 47
    48ec:	8b 83       	std	Y+3, r24	; 0x03
    48ee:	9c 83       	std	Y+4, r25	; 0x04
    pevent2 = &OSEventTbl[1];
    48f0:	8a e9       	ldi	r24, 0x9A	; 154
    48f2:	9f e2       	ldi	r25, 0x2F	; 47
    48f4:	8d 83       	std	Y+5, r24	; 0x05
    48f6:	9e 83       	std	Y+6, r25	; 0x06
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    48f8:	19 82       	std	Y+1, r1	; 0x01
    48fa:	1a 82       	std	Y+2, r1	; 0x02
    48fc:	23 c0       	rjmp	.+70     	; 0x4944 <OS_InitEventList+0x74>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    48fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4900:	9c 81       	ldd	r25, Y+4	; 0x04
    4902:	fc 01       	movw	r30, r24
    4904:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    4906:	8b 81       	ldd	r24, Y+3	; 0x03
    4908:	9c 81       	ldd	r25, Y+4	; 0x04
    490a:	2d 81       	ldd	r18, Y+5	; 0x05
    490c:	3e 81       	ldd	r19, Y+6	; 0x06
    490e:	fc 01       	movw	r30, r24
    4910:	21 83       	std	Z+1, r18	; 0x01
    4912:	32 83       	std	Z+2, r19	; 0x02
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    4914:	8b 81       	ldd	r24, Y+3	; 0x03
    4916:	9c 81       	ldd	r25, Y+4	; 0x04
    4918:	2f e3       	ldi	r18, 0x3F	; 63
    491a:	fc 01       	movw	r30, r24
    491c:	26 87       	std	Z+14, r18	; 0x0e
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    491e:	8b 81       	ldd	r24, Y+3	; 0x03
    4920:	9c 81       	ldd	r25, Y+4	; 0x04
    4922:	fc 01       	movw	r30, r24
    4924:	17 86       	std	Z+15, r1	; 0x0f
#endif
        pevent1++;
    4926:	8b 81       	ldd	r24, Y+3	; 0x03
    4928:	9c 81       	ldd	r25, Y+4	; 0x04
    492a:	4e 96       	adiw	r24, 0x1e	; 30
    492c:	8b 83       	std	Y+3, r24	; 0x03
    492e:	9c 83       	std	Y+4, r25	; 0x04
        pevent2++;
    4930:	8d 81       	ldd	r24, Y+5	; 0x05
    4932:	9e 81       	ldd	r25, Y+6	; 0x06
    4934:	4e 96       	adiw	r24, 0x1e	; 30
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	9e 83       	std	Y+6, r25	; 0x06


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	9a 81       	ldd	r25, Y+2	; 0x02
    493e:	01 96       	adiw	r24, 0x01	; 1
    4940:	89 83       	std	Y+1, r24	; 0x01
    4942:	9a 83       	std	Y+2, r25	; 0x02
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	9a 81       	ldd	r25, Y+2	; 0x02
    4948:	89 30       	cpi	r24, 0x09	; 9
    494a:	91 05       	cpc	r25, r1
    494c:	c0 f2       	brcs	.-80     	; 0x48fe <OS_InitEventList+0x2e>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	9c 81       	ldd	r25, Y+4	; 0x04
    4952:	fc 01       	movw	r30, r24
    4954:	10 82       	st	Z, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    4956:	8b 81       	ldd	r24, Y+3	; 0x03
    4958:	9c 81       	ldd	r25, Y+4	; 0x04
    495a:	fc 01       	movw	r30, r24
    495c:	11 82       	std	Z+1, r1	; 0x01
    495e:	12 82       	std	Z+2, r1	; 0x02
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	2f e3       	ldi	r18, 0x3F	; 63
    4966:	fc 01       	movw	r30, r24
    4968:	26 87       	std	Z+14, r18	; 0x0e
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    496a:	8b 81       	ldd	r24, Y+3	; 0x03
    496c:	9c 81       	ldd	r25, Y+4	; 0x04
    496e:	fc 01       	movw	r30, r24
    4970:	17 86       	std	Z+15, r1	; 0x0f
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    4972:	8c e7       	ldi	r24, 0x7C	; 124
    4974:	9f e2       	ldi	r25, 0x2F	; 47
    4976:	80 93 05 2e 	sts	0x2E05, r24
    497a:	90 93 06 2e 	sts	0x2E06, r25
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    497e:	26 96       	adiw	r28, 0x06	; 6
    4980:	cd bf       	out	0x3d, r28	; 61
    4982:	de bf       	out	0x3e, r29	; 62
    4984:	cf 91       	pop	r28
    4986:	df 91       	pop	r29
    4988:	08 95       	ret

0000498a <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    498a:	df 93       	push	r29
    498c:	cf 93       	push	r28
    498e:	cd b7       	in	r28, 0x3d	; 61
    4990:	de b7       	in	r29, 0x3e	; 62
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    4992:	10 92 0e 2e 	sts	0x2E0E, r1
    4996:	10 92 0f 2e 	sts	0x2E0F, r1
    499a:	10 92 10 2e 	sts	0x2E10, r1
    499e:	10 92 11 2e 	sts	0x2E11, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    49a2:	10 92 07 2e 	sts	0x2E07, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    49a6:	10 92 fa 27 	sts	0x27FA, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    49aa:	10 92 57 2c 	sts	0x2C57, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    49ae:	10 92 fd 27 	sts	0x27FD, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    49b2:	10 92 4a 2c 	sts	0x2C4A, r1
    49b6:	10 92 4b 2c 	sts	0x2C4B, r1
    49ba:	10 92 4c 2c 	sts	0x2C4C, r1
    49be:	10 92 4d 2c 	sts	0x2C4D, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    49c2:	10 92 fe 27 	sts	0x27FE, r1
    49c6:	10 92 ff 27 	sts	0x27FF, r1
    49ca:	10 92 00 28 	sts	0x2800, r1
    49ce:	10 92 01 28 	sts	0x2801, r1

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    49d2:	10 92 f3 35 	sts	0x35F3, r1
    49d6:	10 92 f4 35 	sts	0x35F4, r1
    49da:	10 92 f5 35 	sts	0x35F5, r1
    49de:	10 92 f6 35 	sts	0x35F6, r1
    OSIdleCtrMax  = 0L;
    49e2:	10 92 50 2c 	sts	0x2C50, r1
    49e6:	10 92 51 2c 	sts	0x2C51, r1
    49ea:	10 92 52 2c 	sts	0x2C52, r1
    49ee:	10 92 53 2c 	sts	0x2C53, r1
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    49f2:	10 92 72 35 	sts	0x3572, r1
#endif
}
    49f6:	cf 91       	pop	r28
    49f8:	df 91       	pop	r29
    49fa:	08 95       	ret

000049fc <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    49fc:	df 93       	push	r29
    49fe:	cf 93       	push	r28
    4a00:	00 d0       	rcall	.+0      	; 0x4a02 <OS_InitRdyList+0x6>
    4a02:	cd b7       	in	r28, 0x3d	; 61
    4a04:	de b7       	in	r29, 0x3e	; 62
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    4a06:	10 92 94 2c 	sts	0x2C94, r1
    prdytbl       = &OSRdyTbl[0];
    4a0a:	85 e9       	ldi	r24, 0x95	; 149
    4a0c:	9c e2       	ldi	r25, 0x2C	; 44
    4a0e:	8a 83       	std	Y+2, r24	; 0x02
    4a10:	9b 83       	std	Y+3, r25	; 0x03
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4a12:	19 82       	std	Y+1, r1	; 0x01
    4a14:	0c c0       	rjmp	.+24     	; 0x4a2e <OS_InitRdyList+0x32>
        *prdytbl++ = 0;
    4a16:	8a 81       	ldd	r24, Y+2	; 0x02
    4a18:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1a:	fc 01       	movw	r30, r24
    4a1c:	10 82       	st	Z, r1
    4a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a20:	9b 81       	ldd	r25, Y+3	; 0x03
    4a22:	01 96       	adiw	r24, 0x01	; 1
    4a24:	8a 83       	std	Y+2, r24	; 0x02
    4a26:	9b 83       	std	Y+3, r25	; 0x03
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
    4a2a:	8f 5f       	subi	r24, 0xFF	; 255
    4a2c:	89 83       	std	Y+1, r24	; 0x01
    4a2e:	89 81       	ldd	r24, Y+1	; 0x01
    4a30:	88 30       	cpi	r24, 0x08	; 8
    4a32:	88 f3       	brcs	.-30     	; 0x4a16 <OS_InitRdyList+0x1a>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    4a34:	10 92 de 2a 	sts	0x2ADE, r1
    OSPrioHighRdy = 0;
    4a38:	10 92 04 28 	sts	0x2804, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    4a3c:	10 92 90 2c 	sts	0x2C90, r1
    4a40:	10 92 91 2c 	sts	0x2C91, r1
    OSTCBCur      = (OS_TCB *)0;
    4a44:	10 92 08 2e 	sts	0x2E08, r1
    4a48:	10 92 09 2e 	sts	0x2E09, r1
}
    4a4c:	23 96       	adiw	r28, 0x03	; 3
    4a4e:	cd bf       	out	0x3d, r28	; 61
    4a50:	de bf       	out	0x3e, r29	; 62
    4a52:	cf 91       	pop	r28
    4a54:	df 91       	pop	r29
    4a56:	08 95       	ret

00004a58 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    4a58:	8f 92       	push	r8
    4a5a:	9f 92       	push	r9
    4a5c:	af 92       	push	r10
    4a5e:	bf 92       	push	r11
    4a60:	cf 92       	push	r12
    4a62:	df 92       	push	r13
    4a64:	ef 92       	push	r14
    4a66:	ff 92       	push	r15
    4a68:	0f 93       	push	r16
    4a6a:	1f 93       	push	r17
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	0f 92       	push	r0
    4a72:	cd b7       	in	r28, 0x3d	; 61
    4a74:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    4a76:	0f 92       	push	r0
    4a78:	0f 92       	push	r0
    4a7a:	4d b7       	in	r20, 0x3d	; 61
    4a7c:	5e b7       	in	r21, 0x3e	; 62
    4a7e:	4f 5f       	subi	r20, 0xFF	; 255
    4a80:	5f 4f       	sbci	r21, 0xFF	; 255
    4a82:	86 e4       	ldi	r24, 0x46	; 70
    4a84:	97 e2       	ldi	r25, 0x27	; 39
    4a86:	2b e7       	ldi	r18, 0x7B	; 123
    4a88:	3f e2       	ldi	r19, 0x2F	; 47
    4a8a:	e4 e1       	ldi	r30, 0x14	; 20
    4a8c:	fe e2       	ldi	r31, 0x2E	; 46
    4a8e:	63 e0       	ldi	r22, 0x03	; 3
    4a90:	70 e0       	ldi	r23, 0x00	; 0
    4a92:	da 01       	movw	r26, r20
    4a94:	6d 93       	st	X+, r22
    4a96:	7c 93       	st	X, r23
    4a98:	60 e0       	ldi	r22, 0x00	; 0
    4a9a:	70 e0       	ldi	r23, 0x00	; 0
    4a9c:	a9 01       	movw	r20, r18
    4a9e:	2f e3       	ldi	r18, 0x3F	; 63
    4aa0:	0f ef       	ldi	r16, 0xFF	; 255
    4aa2:	1f ef       	ldi	r17, 0xFF	; 255
    4aa4:	7f 01       	movw	r14, r30
    4aa6:	0f 2e       	mov	r0, r31
    4aa8:	f8 e6       	ldi	r31, 0x68	; 104
    4aaa:	af 2e       	mov	r10, r31
    4aac:	f1 e0       	ldi	r31, 0x01	; 1
    4aae:	bf 2e       	mov	r11, r31
    4ab0:	f0 e0       	ldi	r31, 0x00	; 0
    4ab2:	cf 2e       	mov	r12, r31
    4ab4:	f0 e0       	ldi	r31, 0x00	; 0
    4ab6:	df 2e       	mov	r13, r31
    4ab8:	f0 2d       	mov	r31, r0
    4aba:	88 24       	eor	r8, r8
    4abc:	99 24       	eor	r9, r9
    4abe:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
    4ac2:	0f 90       	pop	r0
    4ac4:	0f 90       	pop	r0
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    4ac6:	28 eb       	ldi	r18, 0xB8	; 184
    4ac8:	32 e2       	ldi	r19, 0x22	; 34
    4aca:	8f e3       	ldi	r24, 0x3F	; 63
    4acc:	b9 01       	movw	r22, r18
    4ace:	9e 01       	movw	r18, r28
    4ad0:	2f 5f       	subi	r18, 0xFF	; 255
    4ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ad4:	a9 01       	movw	r20, r18
    4ad6:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    4ada:	0f 90       	pop	r0
    4adc:	cf 91       	pop	r28
    4ade:	df 91       	pop	r29
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	df 90       	pop	r13
    4aea:	cf 90       	pop	r12
    4aec:	bf 90       	pop	r11
    4aee:	af 90       	pop	r10
    4af0:	9f 90       	pop	r9
    4af2:	8f 90       	pop	r8
    4af4:	08 95       	ret

00004af6 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    4af6:	8f 92       	push	r8
    4af8:	9f 92       	push	r9
    4afa:	af 92       	push	r10
    4afc:	bf 92       	push	r11
    4afe:	cf 92       	push	r12
    4b00:	df 92       	push	r13
    4b02:	ef 92       	push	r14
    4b04:	ff 92       	push	r15
    4b06:	0f 93       	push	r16
    4b08:	1f 93       	push	r17
    4b0a:	df 93       	push	r29
    4b0c:	cf 93       	push	r28
    4b0e:	0f 92       	push	r0
    4b10:	cd b7       	in	r28, 0x3d	; 61
    4b12:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    4b14:	0f 92       	push	r0
    4b16:	0f 92       	push	r0
    4b18:	4d b7       	in	r20, 0x3d	; 61
    4b1a:	5e b7       	in	r21, 0x3e	; 62
    4b1c:	4f 5f       	subi	r20, 0xFF	; 255
    4b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b20:	8a e6       	ldi	r24, 0x6A	; 106
    4b22:	97 e2       	ldi	r25, 0x27	; 39
    4b24:	29 e4       	ldi	r18, 0x49	; 73
    4b26:	3c e2       	ldi	r19, 0x2C	; 44
    4b28:	e2 ee       	ldi	r30, 0xE2	; 226
    4b2a:	fa e2       	ldi	r31, 0x2A	; 42
    4b2c:	63 e0       	ldi	r22, 0x03	; 3
    4b2e:	70 e0       	ldi	r23, 0x00	; 0
    4b30:	da 01       	movw	r26, r20
    4b32:	6d 93       	st	X+, r22
    4b34:	7c 93       	st	X, r23
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	a9 01       	movw	r20, r18
    4b3c:	2e e3       	ldi	r18, 0x3E	; 62
    4b3e:	0e ef       	ldi	r16, 0xFE	; 254
    4b40:	1f ef       	ldi	r17, 0xFF	; 255
    4b42:	7f 01       	movw	r14, r30
    4b44:	0f 2e       	mov	r0, r31
    4b46:	f8 e6       	ldi	r31, 0x68	; 104
    4b48:	af 2e       	mov	r10, r31
    4b4a:	f1 e0       	ldi	r31, 0x01	; 1
    4b4c:	bf 2e       	mov	r11, r31
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	cf 2e       	mov	r12, r31
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	df 2e       	mov	r13, r31
    4b56:	f0 2d       	mov	r31, r0
    4b58:	88 24       	eor	r8, r8
    4b5a:	99 24       	eor	r9, r9
    4b5c:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    4b64:	26 ec       	ldi	r18, 0xC6	; 198
    4b66:	32 e2       	ldi	r19, 0x22	; 34
    4b68:	8e e3       	ldi	r24, 0x3E	; 62
    4b6a:	b9 01       	movw	r22, r18
    4b6c:	9e 01       	movw	r18, r28
    4b6e:	2f 5f       	subi	r18, 0xFF	; 255
    4b70:	3f 4f       	sbci	r19, 0xFF	; 255
    4b72:	a9 01       	movw	r20, r18
    4b74:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    4b78:	0f 90       	pop	r0
    4b7a:	cf 91       	pop	r28
    4b7c:	df 91       	pop	r29
    4b7e:	1f 91       	pop	r17
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	df 90       	pop	r13
    4b88:	cf 90       	pop	r12
    4b8a:	bf 90       	pop	r11
    4b8c:	af 90       	pop	r10
    4b8e:	9f 90       	pop	r9
    4b90:	8f 90       	pop	r8
    4b92:	08 95       	ret

00004b94 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    4b94:	df 93       	push	r29
    4b96:	cf 93       	push	r28
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	25 97       	sbiw	r28, 0x05	; 5
    4b9e:	cd bf       	out	0x3d, r28	; 61
    4ba0:	de bf       	out	0x3e, r29	; 62
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    4ba2:	88 ea       	ldi	r24, 0xA8	; 168
    4ba4:	90 e3       	ldi	r25, 0x30	; 48
    4ba6:	68 ec       	ldi	r22, 0xC8	; 200
    4ba8:	74 e0       	ldi	r23, 0x04	; 4
    4baa:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    4bae:	83 e7       	ldi	r24, 0x73	; 115
    4bb0:	95 e3       	ldi	r25, 0x35	; 53
    4bb2:	60 e8       	ldi	r22, 0x80	; 128
    4bb4:	70 e0       	ldi	r23, 0x00	; 0
    4bb6:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    4bba:	88 ea       	ldi	r24, 0xA8	; 168
    4bbc:	90 e3       	ldi	r25, 0x30	; 48
    4bbe:	8a 83       	std	Y+2, r24	; 0x02
    4bc0:	9b 83       	std	Y+3, r25	; 0x03
    ptcb2 = &OSTCBTbl[1];
    4bc2:	80 ef       	ldi	r24, 0xF0	; 240
    4bc4:	90 e3       	ldi	r25, 0x30	; 48
    4bc6:	8c 83       	std	Y+4, r24	; 0x04
    4bc8:	9d 83       	std	Y+5, r25	; 0x05
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    4bca:	19 82       	std	Y+1, r1	; 0x01
    4bcc:	1f c0       	rjmp	.+62     	; 0x4c0c <OS_InitTCBList+0x78>
        ptcb1->OSTCBNext = ptcb2;
    4bce:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    4bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    4bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	26 87       	std	Z+14, r18	; 0x0e
    4bda:	37 87       	std	Z+15, r19	; 0x0f
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    4bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bde:	9b 81       	ldd	r25, Y+3	; 0x03
    4be0:	2f e3       	ldi	r18, 0x3F	; 63
    4be2:	fc 01       	movw	r30, r24
    4be4:	20 af       	std	Z+56, r18	; 0x38
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4be6:	8a 81       	ldd	r24, Y+2	; 0x02
    4be8:	9b 81       	ldd	r25, Y+3	; 0x03
    4bea:	fc 01       	movw	r30, r24
    4bec:	11 ae       	std	Z+57, r1	; 0x39
#endif
        ptcb1++;
    4bee:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf2:	88 5b       	subi	r24, 0xB8	; 184
    4bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    4bf6:	8a 83       	std	Y+2, r24	; 0x02
    4bf8:	9b 83       	std	Y+3, r25	; 0x03
        ptcb2++;
    4bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    4bfe:	88 5b       	subi	r24, 0xB8	; 184
    4c00:	9f 4f       	sbci	r25, 0xFF	; 255
    4c02:	8c 83       	std	Y+4, r24	; 0x04
    4c04:	9d 83       	std	Y+5, r25	; 0x05

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	8f 5f       	subi	r24, 0xFF	; 255
    4c0a:	89 83       	std	Y+1, r24	; 0x01
    4c0c:	89 81       	ldd	r24, Y+1	; 0x01
    4c0e:	80 31       	cpi	r24, 0x10	; 16
    4c10:	f0 f2       	brcs	.-68     	; 0x4bce <OS_InitTCBList+0x3a>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    4c12:	8a 81       	ldd	r24, Y+2	; 0x02
    4c14:	9b 81       	ldd	r25, Y+3	; 0x03
    4c16:	fc 01       	movw	r30, r24
    4c18:	16 86       	std	Z+14, r1	; 0x0e
    4c1a:	17 86       	std	Z+15, r1	; 0x0f
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    4c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c20:	2f e3       	ldi	r18, 0x3F	; 63
    4c22:	fc 01       	movw	r30, r24
    4c24:	20 af       	std	Z+56, r18	; 0x38
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4c26:	8a 81       	ldd	r24, Y+2	; 0x02
    4c28:	9b 81       	ldd	r25, Y+3	; 0x03
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	11 ae       	std	Z+57, r1	; 0x39
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    4c2e:	10 92 df 2a 	sts	0x2ADF, r1
    4c32:	10 92 e0 2a 	sts	0x2AE0, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    4c36:	88 ea       	ldi	r24, 0xA8	; 168
    4c38:	90 e3       	ldi	r25, 0x30	; 48
    4c3a:	80 93 54 2c 	sts	0x2C54, r24
    4c3e:	90 93 55 2c 	sts	0x2C55, r25
}
    4c42:	25 96       	adiw	r28, 0x05	; 5
    4c44:	cd bf       	out	0x3d, r28	; 61
    4c46:	de bf       	out	0x3e, r29	; 62
    4c48:	cf 91       	pop	r28
    4c4a:	df 91       	pop	r29
    4c4c:	08 95       	ret

00004c4e <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    4c4e:	df 93       	push	r29
    4c50:	cf 93       	push	r28
    4c52:	00 d0       	rcall	.+0      	; 0x4c54 <OS_MemClr+0x6>
    4c54:	0f 92       	push	r0
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    4c5a:	89 83       	std	Y+1, r24	; 0x01
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	6b 83       	std	Y+3, r22	; 0x03
    4c60:	7c 83       	std	Y+4, r23	; 0x04
    while (size > 0) {
    4c62:	0e c0       	rjmp	.+28     	; 0x4c80 <OS_MemClr+0x32>
        *pdest++ = (INT8U)0;
    4c64:	89 81       	ldd	r24, Y+1	; 0x01
    4c66:	9a 81       	ldd	r25, Y+2	; 0x02
    4c68:	fc 01       	movw	r30, r24
    4c6a:	10 82       	st	Z, r1
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c70:	01 96       	adiw	r24, 0x01	; 1
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	9a 83       	std	Y+2, r25	; 0x02
        size--;
    4c76:	8b 81       	ldd	r24, Y+3	; 0x03
    4c78:	9c 81       	ldd	r25, Y+4	; 0x04
    4c7a:	01 97       	sbiw	r24, 0x01	; 1
    4c7c:	8b 83       	std	Y+3, r24	; 0x03
    4c7e:	9c 83       	std	Y+4, r25	; 0x04
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    4c80:	8b 81       	ldd	r24, Y+3	; 0x03
    4c82:	9c 81       	ldd	r25, Y+4	; 0x04
    4c84:	00 97       	sbiw	r24, 0x00	; 0
    4c86:	71 f7       	brne	.-36     	; 0x4c64 <OS_MemClr+0x16>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    4c88:	24 96       	adiw	r28, 0x04	; 4
    4c8a:	cd bf       	out	0x3d, r28	; 61
    4c8c:	de bf       	out	0x3e, r29	; 62
    4c8e:	cf 91       	pop	r28
    4c90:	df 91       	pop	r29
    4c92:	08 95       	ret

00004c94 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    4c94:	df 93       	push	r29
    4c96:	cf 93       	push	r28
    4c98:	00 d0       	rcall	.+0      	; 0x4c9a <OS_MemCopy+0x6>
    4c9a:	00 d0       	rcall	.+0      	; 0x4c9c <OS_MemCopy+0x8>
    4c9c:	cd b7       	in	r28, 0x3d	; 61
    4c9e:	de b7       	in	r29, 0x3e	; 62
    4ca0:	89 83       	std	Y+1, r24	; 0x01
    4ca2:	9a 83       	std	Y+2, r25	; 0x02
    4ca4:	6b 83       	std	Y+3, r22	; 0x03
    4ca6:	7c 83       	std	Y+4, r23	; 0x04
    4ca8:	4d 83       	std	Y+5, r20	; 0x05
    4caa:	5e 83       	std	Y+6, r21	; 0x06
    while (size > 0) {
    4cac:	17 c0       	rjmp	.+46     	; 0x4cdc <OS_MemCopy+0x48>
        *pdest++ = *psrc++;
    4cae:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	20 81       	ld	r18, Z
    4cb6:	89 81       	ldd	r24, Y+1	; 0x01
    4cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cba:	fc 01       	movw	r30, r24
    4cbc:	20 83       	st	Z, r18
    4cbe:	89 81       	ldd	r24, Y+1	; 0x01
    4cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4cc2:	01 96       	adiw	r24, 0x01	; 1
    4cc4:	89 83       	std	Y+1, r24	; 0x01
    4cc6:	9a 83       	std	Y+2, r25	; 0x02
    4cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ccc:	01 96       	adiw	r24, 0x01	; 1
    4cce:	8b 83       	std	Y+3, r24	; 0x03
    4cd0:	9c 83       	std	Y+4, r25	; 0x04
        size--;
    4cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd6:	01 97       	sbiw	r24, 0x01	; 1
    4cd8:	8d 83       	std	Y+5, r24	; 0x05
    4cda:	9e 83       	std	Y+6, r25	; 0x06
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    4cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cde:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce0:	00 97       	sbiw	r24, 0x00	; 0
    4ce2:	29 f7       	brne	.-54     	; 0x4cae <OS_MemCopy+0x1a>
        *pdest++ = *psrc++;
        size--;
    }
}
    4ce4:	26 96       	adiw	r28, 0x06	; 6
    4ce6:	cd bf       	out	0x3d, r28	; 61
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	cf 91       	pop	r28
    4cec:	df 91       	pop	r29
    4cee:	08 95       	ret

00004cf0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    4cf0:	df 93       	push	r29
    4cf2:	cf 93       	push	r28
    4cf4:	0f 92       	push	r0
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4cfa:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    4cfc:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4d00:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    4d02:	80 91 07 2e 	lds	r24, 0x2E07
    4d06:	88 23       	and	r24, r24
    4d08:	09 f0       	breq	.+2      	; 0x4d0c <OS_Sched+0x1c>
    4d0a:	41 c0       	rjmp	.+130    	; 0x4d8e <OS_Sched+0x9e>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    4d0c:	80 91 fa 27 	lds	r24, 0x27FA
    4d10:	88 23       	and	r24, r24
    4d12:	e9 f5       	brne	.+122    	; 0x4d8e <OS_Sched+0x9e>
            OS_SchedNew();
    4d14:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    4d18:	90 91 04 28 	lds	r25, 0x2804
    4d1c:	80 91 de 2a 	lds	r24, 0x2ADE
    4d20:	98 17       	cp	r25, r24
    4d22:	a9 f1       	breq	.+106    	; 0x4d8e <OS_Sched+0x9e>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    4d24:	80 91 04 28 	lds	r24, 0x2804
    4d28:	88 2f       	mov	r24, r24
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	88 0f       	add	r24, r24
    4d2e:	99 1f       	adc	r25, r25
    4d30:	8d 58       	subi	r24, 0x8D	; 141
    4d32:	9a 4c       	sbci	r25, 0xCA	; 202
    4d34:	fc 01       	movw	r30, r24
    4d36:	80 81       	ld	r24, Z
    4d38:	91 81       	ldd	r25, Z+1	; 0x01
    4d3a:	80 93 90 2c 	sts	0x2C90, r24
    4d3e:	90 93 91 2c 	sts	0x2C91, r25
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    4d42:	20 91 90 2c 	lds	r18, 0x2C90
    4d46:	30 91 91 2c 	lds	r19, 0x2C91
    4d4a:	f9 01       	movw	r30, r18
    4d4c:	86 a1       	ldd	r24, Z+38	; 0x26
    4d4e:	97 a1       	ldd	r25, Z+39	; 0x27
    4d50:	a0 a5       	ldd	r26, Z+40	; 0x28
    4d52:	b1 a5       	ldd	r27, Z+41	; 0x29
    4d54:	01 96       	adiw	r24, 0x01	; 1
    4d56:	a1 1d       	adc	r26, r1
    4d58:	b1 1d       	adc	r27, r1
    4d5a:	f9 01       	movw	r30, r18
    4d5c:	86 a3       	std	Z+38, r24	; 0x26
    4d5e:	97 a3       	std	Z+39, r25	; 0x27
    4d60:	a0 a7       	std	Z+40, r26	; 0x28
    4d62:	b1 a7       	std	Z+41, r27	; 0x29
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    4d64:	80 91 4a 2c 	lds	r24, 0x2C4A
    4d68:	90 91 4b 2c 	lds	r25, 0x2C4B
    4d6c:	a0 91 4c 2c 	lds	r26, 0x2C4C
    4d70:	b0 91 4d 2c 	lds	r27, 0x2C4D
    4d74:	01 96       	adiw	r24, 0x01	; 1
    4d76:	a1 1d       	adc	r26, r1
    4d78:	b1 1d       	adc	r27, r1
    4d7a:	80 93 4a 2c 	sts	0x2C4A, r24
    4d7e:	90 93 4b 2c 	sts	0x2C4B, r25
    4d82:	a0 93 4c 2c 	sts	0x2C4C, r26
    4d86:	b0 93 4d 2c 	sts	0x2C4D, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    4d8a:	0e 94 75 18 	call	0x30ea	; 0x30ea <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    4d94:	0f 90       	pop	r0
    4d96:	cf 91       	pop	r28
    4d98:	df 91       	pop	r29
    4d9a:	08 95       	ret

00004d9c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    4d9c:	df 93       	push	r29
    4d9e:	cf 93       	push	r28
    4da0:	0f 92       	push	r0
    4da2:	cd b7       	in	r28, 0x3d	; 61
    4da4:	de b7       	in	r29, 0x3e	; 62
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    4da6:	80 91 94 2c 	lds	r24, 0x2C94
    4daa:	88 2f       	mov	r24, r24
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	88 54       	subi	r24, 0x48	; 72
    4db0:	9e 4d       	sbci	r25, 0xDE	; 222
    4db2:	fc 01       	movw	r30, r24
    4db4:	80 81       	ld	r24, Z
    4db6:	89 83       	std	Y+1, r24	; 0x01
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	28 2f       	mov	r18, r24
    4dbc:	22 0f       	add	r18, r18
    4dbe:	22 0f       	add	r18, r18
    4dc0:	22 0f       	add	r18, r18
    4dc2:	89 81       	ldd	r24, Y+1	; 0x01
    4dc4:	88 2f       	mov	r24, r24
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	8b 56       	subi	r24, 0x6B	; 107
    4dca:	93 4d       	sbci	r25, 0xD3	; 211
    4dcc:	fc 01       	movw	r30, r24
    4dce:	80 81       	ld	r24, Z
    4dd0:	88 2f       	mov	r24, r24
    4dd2:	90 e0       	ldi	r25, 0x00	; 0
    4dd4:	88 54       	subi	r24, 0x48	; 72
    4dd6:	9e 4d       	sbci	r25, 0xDE	; 222
    4dd8:	fc 01       	movw	r30, r24
    4dda:	80 81       	ld	r24, Z
    4ddc:	82 0f       	add	r24, r18
    4dde:	80 93 04 28 	sts	0x2804, r24
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    4de2:	0f 90       	pop	r0
    4de4:	cf 91       	pop	r28
    4de6:	df 91       	pop	r29
    4de8:	08 95       	ret

00004dea <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    4dea:	df 93       	push	r29
    4dec:	cf 93       	push	r28
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	25 97       	sbiw	r28, 0x05	; 5
    4df4:	cd bf       	out	0x3d, r28	; 61
    4df6:	de bf       	out	0x3e, r29	; 62
    4df8:	8a 83       	std	Y+2, r24	; 0x02
    4dfa:	9b 83       	std	Y+3, r25	; 0x03
    4dfc:	6c 83       	std	Y+4, r22	; 0x04
    4dfe:	7d 83       	std	Y+5, r23	; 0x05
    INT8U  len;


    len = 0;
    4e00:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    4e02:	15 c0       	rjmp	.+42     	; 0x4e2e <OS_StrCopy+0x44>
        *pdest++ = *psrc++;
    4e04:	8c 81       	ldd	r24, Y+4	; 0x04
    4e06:	9d 81       	ldd	r25, Y+5	; 0x05
    4e08:	fc 01       	movw	r30, r24
    4e0a:	20 81       	ld	r18, Z
    4e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    4e10:	fc 01       	movw	r30, r24
    4e12:	20 83       	st	Z, r18
    4e14:	8a 81       	ldd	r24, Y+2	; 0x02
    4e16:	9b 81       	ldd	r25, Y+3	; 0x03
    4e18:	01 96       	adiw	r24, 0x01	; 1
    4e1a:	8a 83       	std	Y+2, r24	; 0x02
    4e1c:	9b 83       	std	Y+3, r25	; 0x03
    4e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e20:	9d 81       	ldd	r25, Y+5	; 0x05
    4e22:	01 96       	adiw	r24, 0x01	; 1
    4e24:	8c 83       	std	Y+4, r24	; 0x04
    4e26:	9d 83       	std	Y+5, r25	; 0x05
        len++;
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	8f 5f       	subi	r24, 0xFF	; 255
    4e2c:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e30:	9d 81       	ldd	r25, Y+5	; 0x05
    4e32:	fc 01       	movw	r30, r24
    4e34:	80 81       	ld	r24, Z
    4e36:	88 23       	and	r24, r24
    4e38:	29 f7       	brne	.-54     	; 0x4e04 <OS_StrCopy+0x1a>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    4e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e3e:	fc 01       	movw	r30, r24
    4e40:	10 82       	st	Z, r1
    return (len);
    4e42:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e44:	25 96       	adiw	r28, 0x05	; 5
    4e46:	cd bf       	out	0x3d, r28	; 61
    4e48:	de bf       	out	0x3e, r29	; 62
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	08 95       	ret

00004e50 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    4e50:	df 93       	push	r29
    4e52:	cf 93       	push	r28
    4e54:	00 d0       	rcall	.+0      	; 0x4e56 <OS_StrLen+0x6>
    4e56:	cd b7       	in	r28, 0x3d	; 61
    4e58:	de b7       	in	r29, 0x3e	; 62
    4e5a:	8a 83       	std	Y+2, r24	; 0x02
    4e5c:	9b 83       	std	Y+3, r25	; 0x03
    INT8U  len;


    len = 0;
    4e5e:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    4e60:	08 c0       	rjmp	.+16     	; 0x4e72 <OS_StrLen+0x22>
        psrc++;
    4e62:	8a 81       	ldd	r24, Y+2	; 0x02
    4e64:	9b 81       	ldd	r25, Y+3	; 0x03
    4e66:	01 96       	adiw	r24, 0x01	; 1
    4e68:	8a 83       	std	Y+2, r24	; 0x02
    4e6a:	9b 83       	std	Y+3, r25	; 0x03
        len++;
    4e6c:	89 81       	ldd	r24, Y+1	; 0x01
    4e6e:	8f 5f       	subi	r24, 0xFF	; 255
    4e70:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4e72:	8a 81       	ldd	r24, Y+2	; 0x02
    4e74:	9b 81       	ldd	r25, Y+3	; 0x03
    4e76:	fc 01       	movw	r30, r24
    4e78:	80 81       	ld	r24, Z
    4e7a:	88 23       	and	r24, r24
    4e7c:	91 f7       	brne	.-28     	; 0x4e62 <OS_StrLen+0x12>
        psrc++;
        len++;
    }
    return (len);
    4e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e80:	23 96       	adiw	r28, 0x03	; 3
    4e82:	cd bf       	out	0x3d, r28	; 61
    4e84:	de bf       	out	0x3e, r29	; 62
    4e86:	cf 91       	pop	r28
    4e88:	df 91       	pop	r29
    4e8a:	08 95       	ret

00004e8c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    4e8c:	df 93       	push	r29
    4e8e:	cf 93       	push	r28
    4e90:	00 d0       	rcall	.+0      	; 0x4e92 <OS_TaskIdle+0x6>
    4e92:	cd b7       	in	r28, 0x3d	; 61
    4e94:	de b7       	in	r29, 0x3e	; 62
    4e96:	8a 83       	std	Y+2, r24	; 0x02
    4e98:	9b 83       	std	Y+3, r25	; 0x03
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4e9a:	19 82       	std	Y+1, r1	; 0x01



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    4e9c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4ea0:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtr++;
    4ea2:	80 91 fe 27 	lds	r24, 0x27FE
    4ea6:	90 91 ff 27 	lds	r25, 0x27FF
    4eaa:	a0 91 00 28 	lds	r26, 0x2800
    4eae:	b0 91 01 28 	lds	r27, 0x2801
    4eb2:	01 96       	adiw	r24, 0x01	; 1
    4eb4:	a1 1d       	adc	r26, r1
    4eb6:	b1 1d       	adc	r27, r1
    4eb8:	80 93 fe 27 	sts	0x27FE, r24
    4ebc:	90 93 ff 27 	sts	0x27FF, r25
    4ec0:	a0 93 00 28 	sts	0x2800, r26
    4ec4:	b0 93 01 28 	sts	0x2801, r27
        OS_EXIT_CRITICAL();
    4ec8:	89 81       	ldd	r24, Y+1	; 0x01
    4eca:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    4ece:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <OSTaskIdleHook>
    }
    4ed2:	e4 cf       	rjmp	.-56     	; 0x4e9c <OS_TaskIdle+0x10>

00004ed4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    4ed4:	df 93       	push	r29
    4ed6:	cf 93       	push	r28
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <OS_TaskStat+0x6>
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	8a 83       	std	Y+2, r24	; 0x02
    4ee0:	9b 83       	std	Y+3, r25	; 0x03
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4ee2:	19 82       	std	Y+1, r1	; 0x01
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4ee4:	04 c0       	rjmp	.+8      	; 0x4eee <OS_TaskStat+0x1a>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    4ee6:	88 ec       	ldi	r24, 0xC8	; 200
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4eee:	80 91 72 35 	lds	r24, 0x3572
    4ef2:	88 23       	and	r24, r24
    4ef4:	c1 f3       	breq	.-16     	; 0x4ee6 <OS_TaskStat+0x12>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    4ef6:	80 91 50 2c 	lds	r24, 0x2C50
    4efa:	90 91 51 2c 	lds	r25, 0x2C51
    4efe:	a0 91 52 2c 	lds	r26, 0x2C52
    4f02:	b0 91 53 2c 	lds	r27, 0x2C53
    4f06:	24 e6       	ldi	r18, 0x64	; 100
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	40 e0       	ldi	r20, 0x00	; 0
    4f0c:	50 e0       	ldi	r21, 0x00	; 0
    4f0e:	bc 01       	movw	r22, r24
    4f10:	cd 01       	movw	r24, r26
    4f12:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    4f16:	da 01       	movw	r26, r20
    4f18:	c9 01       	movw	r24, r18
    4f1a:	80 93 50 2c 	sts	0x2C50, r24
    4f1e:	90 93 51 2c 	sts	0x2C51, r25
    4f22:	a0 93 52 2c 	sts	0x2C52, r26
    4f26:	b0 93 53 2c 	sts	0x2C53, r27
    if (OSIdleCtrMax == 0L) {
    4f2a:	80 91 50 2c 	lds	r24, 0x2C50
    4f2e:	90 91 51 2c 	lds	r25, 0x2C51
    4f32:	a0 91 52 2c 	lds	r26, 0x2C52
    4f36:	b0 91 53 2c 	lds	r27, 0x2C53
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	a1 05       	cpc	r26, r1
    4f3e:	b1 05       	cpc	r27, r1
    4f40:	29 f4       	brne	.+10     	; 0x4f4c <OS_TaskStat+0x78>
        OSCPUUsage = 0;
    4f42:	10 92 56 2c 	sts	0x2C56, r1
        (void)OSTaskSuspend(OS_PRIO_SELF);
    4f46:	8f ef       	ldi	r24, 0xFF	; 255
    4f48:	0e 94 c1 4c 	call	0x9982	; 0x9982 <OSTaskSuspend>
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    4f4c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    4f50:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    4f52:	80 91 fe 27 	lds	r24, 0x27FE
    4f56:	90 91 ff 27 	lds	r25, 0x27FF
    4f5a:	a0 91 00 28 	lds	r26, 0x2800
    4f5e:	b0 91 01 28 	lds	r27, 0x2801
    4f62:	80 93 f3 35 	sts	0x35F3, r24
    4f66:	90 93 f4 35 	sts	0x35F4, r25
    4f6a:	a0 93 f5 35 	sts	0x35F5, r26
    4f6e:	b0 93 f6 35 	sts	0x35F6, r27
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    4f72:	10 92 fe 27 	sts	0x27FE, r1
    4f76:	10 92 ff 27 	sts	0x27FF, r1
    4f7a:	10 92 00 28 	sts	0x2800, r1
    4f7e:	10 92 01 28 	sts	0x2801, r1
        OS_EXIT_CRITICAL();
    4f82:	89 81       	ldd	r24, Y+1	; 0x01
    4f84:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    4f88:	80 91 f3 35 	lds	r24, 0x35F3
    4f8c:	90 91 f4 35 	lds	r25, 0x35F4
    4f90:	a0 91 f5 35 	lds	r26, 0x35F5
    4f94:	b0 91 f6 35 	lds	r27, 0x35F6
    4f98:	20 91 50 2c 	lds	r18, 0x2C50
    4f9c:	30 91 51 2c 	lds	r19, 0x2C51
    4fa0:	40 91 52 2c 	lds	r20, 0x2C52
    4fa4:	50 91 53 2c 	lds	r21, 0x2C53
    4fa8:	bc 01       	movw	r22, r24
    4faa:	cd 01       	movw	r24, r26
    4fac:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    4fb0:	da 01       	movw	r26, r20
    4fb2:	c9 01       	movw	r24, r18
    4fb4:	94 e6       	ldi	r25, 0x64	; 100
    4fb6:	29 2f       	mov	r18, r25
    4fb8:	28 1b       	sub	r18, r24
    4fba:	82 2f       	mov	r24, r18
    4fbc:	80 93 56 2c 	sts	0x2C56, r24
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    4fc0:	0e 94 65 19 	call	0x32ca	; 0x32ca <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    4fc4:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    4fc8:	84 e6       	ldi	r24, 0x64	; 100
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    }
    4fd0:	bd cf       	rjmp	.-134    	; 0x4f4c <OS_TaskStat+0x78>

00004fd2 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
    4fda:	2c 97       	sbiw	r28, 0x0c	; 12
    4fdc:	cd bf       	out	0x3d, r28	; 61
    4fde:	de bf       	out	0x3e, r29	; 62
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4fe0:	19 82       	std	Y+1, r1	; 0x01
    4fe2:	41 c0       	rjmp	.+130    	; 0x5066 <OS_TaskStatStkChk+0x94>
        err = OSTaskStkChk(prio, &stk_data);
    4fe4:	9e 01       	movw	r18, r28
    4fe6:	2b 5f       	subi	r18, 0xFB	; 251
    4fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fea:	89 81       	ldd	r24, Y+1	; 0x01
    4fec:	b9 01       	movw	r22, r18
    4fee:	0e 94 09 4c 	call	0x9812	; 0x9812 <OSTaskStkChk>
    4ff2:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	88 23       	and	r24, r24
    4ff8:	99 f5       	brne	.+102    	; 0x5060 <OS_TaskStatStkChk+0x8e>
            ptcb = OSTCBPrioTbl[prio];
    4ffa:	89 81       	ldd	r24, Y+1	; 0x01
    4ffc:	88 2f       	mov	r24, r24
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	8d 58       	subi	r24, 0x8D	; 141
    5006:	9a 4c       	sbci	r25, 0xCA	; 202
    5008:	fc 01       	movw	r30, r24
    500a:	80 81       	ld	r24, Z
    500c:	91 81       	ldd	r25, Z+1	; 0x01
    500e:	8b 83       	std	Y+3, r24	; 0x03
    5010:	9c 83       	std	Y+4, r25	; 0x04
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    5012:	8b 81       	ldd	r24, Y+3	; 0x03
    5014:	9c 81       	ldd	r25, Y+4	; 0x04
    5016:	00 97       	sbiw	r24, 0x00	; 0
    5018:	19 f1       	breq	.+70     	; 0x5060 <OS_TaskStatStkChk+0x8e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    501a:	8b 81       	ldd	r24, Y+3	; 0x03
    501c:	9c 81       	ldd	r25, Y+4	; 0x04
    501e:	81 30       	cpi	r24, 0x01	; 1
    5020:	91 05       	cpc	r25, r1
    5022:	f1 f0       	breq	.+60     	; 0x5060 <OS_TaskStatStkChk+0x8e>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    5024:	8b 81       	ldd	r24, Y+3	; 0x03
    5026:	9c 81       	ldd	r25, Y+4	; 0x04
    5028:	fc 01       	movw	r30, r24
    502a:	24 81       	ldd	r18, Z+4	; 0x04
    502c:	35 81       	ldd	r19, Z+5	; 0x05
    502e:	8b 81       	ldd	r24, Y+3	; 0x03
    5030:	9c 81       	ldd	r25, Y+4	; 0x04
    5032:	fc 01       	movw	r30, r24
    5034:	86 81       	ldd	r24, Z+6	; 0x06
    5036:	97 81       	ldd	r25, Z+7	; 0x07
    5038:	a0 85       	ldd	r26, Z+8	; 0x08
    503a:	b1 85       	ldd	r27, Z+9	; 0x09
    503c:	28 0f       	add	r18, r24
    503e:	39 1f       	adc	r19, r25
    5040:	8b 81       	ldd	r24, Y+3	; 0x03
    5042:	9c 81       	ldd	r25, Y+4	; 0x04
    5044:	fc 01       	movw	r30, r24
    5046:	22 ab       	std	Z+50, r18	; 0x32
    5048:	33 ab       	std	Z+51, r19	; 0x33
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    504a:	89 85       	ldd	r24, Y+9	; 0x09
    504c:	9a 85       	ldd	r25, Y+10	; 0x0a
    504e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5050:	bc 85       	ldd	r27, Y+12	; 0x0c
    5052:	2b 81       	ldd	r18, Y+3	; 0x03
    5054:	3c 81       	ldd	r19, Y+4	; 0x04
    5056:	f9 01       	movw	r30, r18
    5058:	84 ab       	std	Z+52, r24	; 0x34
    505a:	95 ab       	std	Z+53, r25	; 0x35
    505c:	a6 ab       	std	Z+54, r26	; 0x36
    505e:	b7 ab       	std	Z+55, r27	; 0x37
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    5060:	89 81       	ldd	r24, Y+1	; 0x01
    5062:	8f 5f       	subi	r24, 0xFF	; 255
    5064:	89 83       	std	Y+1, r24	; 0x01
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	80 34       	cpi	r24, 0x40	; 64
    506a:	08 f4       	brcc	.+2      	; 0x506e <OS_TaskStatStkChk+0x9c>
    506c:	bb cf       	rjmp	.-138    	; 0x4fe4 <OS_TaskStatStkChk+0x12>
#endif
                }
            }
        }
    }
}
    506e:	2c 96       	adiw	r28, 0x0c	; 12
    5070:	cd bf       	out	0x3d, r28	; 61
    5072:	de bf       	out	0x3e, r29	; 62
    5074:	cf 91       	pop	r28
    5076:	df 91       	pop	r29
    5078:	08 95       	ret

0000507a <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    507a:	af 92       	push	r10
    507c:	bf 92       	push	r11
    507e:	cf 92       	push	r12
    5080:	df 92       	push	r13
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	df 93       	push	r29
    508c:	cf 93       	push	r28
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62
    5092:	62 97       	sbiw	r28, 0x12	; 18
    5094:	cd bf       	out	0x3d, r28	; 61
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	8c 83       	std	Y+4, r24	; 0x04
    509a:	6d 83       	std	Y+5, r22	; 0x05
    509c:	7e 83       	std	Y+6, r23	; 0x06
    509e:	4f 83       	std	Y+7, r20	; 0x07
    50a0:	58 87       	std	Y+8, r21	; 0x08
    50a2:	29 87       	std	Y+9, r18	; 0x09
    50a4:	3a 87       	std	Y+10, r19	; 0x0a
    50a6:	eb 86       	std	Y+11, r14	; 0x0b
    50a8:	fc 86       	std	Y+12, r15	; 0x0c
    50aa:	0d 87       	std	Y+13, r16	; 0x0d
    50ac:	1e 87       	std	Y+14, r17	; 0x0e
    50ae:	cf 86       	std	Y+15, r12	; 0x0f
    50b0:	d8 8a       	std	Y+16, r13	; 0x10
    50b2:	a9 8a       	std	Y+17, r10	; 0x11
    50b4:	ba 8a       	std	Y+18, r11	; 0x12
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    50b6:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    50b8:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    50bc:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    50be:	80 91 54 2c 	lds	r24, 0x2C54
    50c2:	90 91 55 2c 	lds	r25, 0x2C55
    50c6:	8a 83       	std	Y+2, r24	; 0x02
    50c8:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb != (OS_TCB *)0) {
    50ca:	8a 81       	ldd	r24, Y+2	; 0x02
    50cc:	9b 81       	ldd	r25, Y+3	; 0x03
    50ce:	00 97       	sbiw	r24, 0x00	; 0
    50d0:	09 f4       	brne	.+2      	; 0x50d4 <OS_TCBInit+0x5a>
    50d2:	28 c1       	rjmp	.+592    	; 0x5324 <OS_TCBInit+0x2aa>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    50d4:	8a 81       	ldd	r24, Y+2	; 0x02
    50d6:	9b 81       	ldd	r25, Y+3	; 0x03
    50d8:	fc 01       	movw	r30, r24
    50da:	86 85       	ldd	r24, Z+14	; 0x0e
    50dc:	97 85       	ldd	r25, Z+15	; 0x0f
    50de:	80 93 54 2c 	sts	0x2C54, r24
    50e2:	90 93 55 2c 	sts	0x2C55, r25
        OS_EXIT_CRITICAL();
    50e6:	89 81       	ldd	r24, Y+1	; 0x01
    50e8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    50ec:	8a 81       	ldd	r24, Y+2	; 0x02
    50ee:	9b 81       	ldd	r25, Y+3	; 0x03
    50f0:	2d 81       	ldd	r18, Y+5	; 0x05
    50f2:	3e 81       	ldd	r19, Y+6	; 0x06
    50f4:	fc 01       	movw	r30, r24
    50f6:	20 83       	st	Z, r18
    50f8:	31 83       	std	Z+1, r19	; 0x01
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	9b 81       	ldd	r25, Y+3	; 0x03
    50fe:	2c 81       	ldd	r18, Y+4	; 0x04
    5100:	fc 01       	movw	r30, r24
    5102:	20 a3       	std	Z+32, r18	; 0x20
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    5104:	8a 81       	ldd	r24, Y+2	; 0x02
    5106:	9b 81       	ldd	r25, Y+3	; 0x03
    5108:	fc 01       	movw	r30, r24
    510a:	16 8e       	std	Z+30, r1	; 0x1e
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    510c:	8a 81       	ldd	r24, Y+2	; 0x02
    510e:	9b 81       	ldd	r25, Y+3	; 0x03
    5110:	fc 01       	movw	r30, r24
    5112:	17 8e       	std	Z+31, r1	; 0x1f
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    5114:	8a 81       	ldd	r24, Y+2	; 0x02
    5116:	9b 81       	ldd	r25, Y+3	; 0x03
    5118:	fc 01       	movw	r30, r24
    511a:	14 8e       	std	Z+28, r1	; 0x1c
    511c:	15 8e       	std	Z+29, r1	; 0x1d

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    511e:	8a 81       	ldd	r24, Y+2	; 0x02
    5120:	9b 81       	ldd	r25, Y+3	; 0x03
    5122:	2f 85       	ldd	r18, Y+15	; 0x0f
    5124:	38 89       	ldd	r19, Y+16	; 0x10
    5126:	fc 01       	movw	r30, r24
    5128:	22 83       	std	Z+2, r18	; 0x02
    512a:	33 83       	std	Z+3, r19	; 0x03
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    512c:	2a 81       	ldd	r18, Y+2	; 0x02
    512e:	3b 81       	ldd	r19, Y+3	; 0x03
    5130:	8b 85       	ldd	r24, Y+11	; 0x0b
    5132:	9c 85       	ldd	r25, Y+12	; 0x0c
    5134:	ad 85       	ldd	r26, Y+13	; 0x0d
    5136:	be 85       	ldd	r27, Y+14	; 0x0e
    5138:	f9 01       	movw	r30, r18
    513a:	86 83       	std	Z+6, r24	; 0x06
    513c:	97 83       	std	Z+7, r25	; 0x07
    513e:	a0 87       	std	Z+8, r26	; 0x08
    5140:	b1 87       	std	Z+9, r27	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    5142:	8a 81       	ldd	r24, Y+2	; 0x02
    5144:	9b 81       	ldd	r25, Y+3	; 0x03
    5146:	2f 81       	ldd	r18, Y+7	; 0x07
    5148:	38 85       	ldd	r19, Y+8	; 0x08
    514a:	fc 01       	movw	r30, r24
    514c:	24 83       	std	Z+4, r18	; 0x04
    514e:	35 83       	std	Z+5, r19	; 0x05
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    5150:	8a 81       	ldd	r24, Y+2	; 0x02
    5152:	9b 81       	ldd	r25, Y+3	; 0x03
    5154:	29 89       	ldd	r18, Y+17	; 0x11
    5156:	3a 89       	ldd	r19, Y+18	; 0x12
    5158:	fc 01       	movw	r30, r24
    515a:	22 87       	std	Z+10, r18	; 0x0a
    515c:	33 87       	std	Z+11, r19	; 0x0b
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    515e:	8a 81       	ldd	r24, Y+2	; 0x02
    5160:	9b 81       	ldd	r25, Y+3	; 0x03
    5162:	29 85       	ldd	r18, Y+9	; 0x09
    5164:	3a 85       	ldd	r19, Y+10	; 0x0a
    5166:	fc 01       	movw	r30, r24
    5168:	24 87       	std	Z+12, r18	; 0x0c
    516a:	35 87       	std	Z+13, r19	; 0x0d
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    516c:	8a 81       	ldd	r24, Y+2	; 0x02
    516e:	9b 81       	ldd	r25, Y+3	; 0x03
    5170:	fc 01       	movw	r30, r24
    5172:	15 a2       	std	Z+37, r1	; 0x25
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    5174:	8c 81       	ldd	r24, Y+4	; 0x04
    5176:	28 2f       	mov	r18, r24
    5178:	26 95       	lsr	r18
    517a:	26 95       	lsr	r18
    517c:	26 95       	lsr	r18
    517e:	8a 81       	ldd	r24, Y+2	; 0x02
    5180:	9b 81       	ldd	r25, Y+3	; 0x03
    5182:	fc 01       	movw	r30, r24
    5184:	22 a3       	std	Z+34, r18	; 0x22
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    5186:	8c 81       	ldd	r24, Y+4	; 0x04
    5188:	28 2f       	mov	r18, r24
    518a:	27 70       	andi	r18, 0x07	; 7
    518c:	8a 81       	ldd	r24, Y+2	; 0x02
    518e:	9b 81       	ldd	r25, Y+3	; 0x03
    5190:	fc 01       	movw	r30, r24
    5192:	21 a3       	std	Z+33, r18	; 0x21
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    5194:	8a 81       	ldd	r24, Y+2	; 0x02
    5196:	9b 81       	ldd	r25, Y+3	; 0x03
    5198:	fc 01       	movw	r30, r24
    519a:	82 a1       	ldd	r24, Z+34	; 0x22
    519c:	28 2f       	mov	r18, r24
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	81 e0       	ldi	r24, 0x01	; 1
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	02 c0       	rjmp	.+4      	; 0x51aa <OS_TCBInit+0x130>
    51a6:	88 0f       	add	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	2a 95       	dec	r18
    51ac:	e2 f7       	brpl	.-8      	; 0x51a6 <OS_TCBInit+0x12c>
    51ae:	28 2f       	mov	r18, r24
    51b0:	8a 81       	ldd	r24, Y+2	; 0x02
    51b2:	9b 81       	ldd	r25, Y+3	; 0x03
    51b4:	fc 01       	movw	r30, r24
    51b6:	24 a3       	std	Z+36, r18	; 0x24
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    51b8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ba:	9b 81       	ldd	r25, Y+3	; 0x03
    51bc:	fc 01       	movw	r30, r24
    51be:	81 a1       	ldd	r24, Z+33	; 0x21
    51c0:	28 2f       	mov	r18, r24
    51c2:	30 e0       	ldi	r19, 0x00	; 0
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	90 e0       	ldi	r25, 0x00	; 0
    51c8:	02 c0       	rjmp	.+4      	; 0x51ce <OS_TCBInit+0x154>
    51ca:	88 0f       	add	r24, r24
    51cc:	99 1f       	adc	r25, r25
    51ce:	2a 95       	dec	r18
    51d0:	e2 f7       	brpl	.-8      	; 0x51ca <OS_TCBInit+0x150>
    51d2:	28 2f       	mov	r18, r24
    51d4:	8a 81       	ldd	r24, Y+2	; 0x02
    51d6:	9b 81       	ldd	r25, Y+3	; 0x03
    51d8:	fc 01       	movw	r30, r24
    51da:	23 a3       	std	Z+35, r18	; 0x23
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    51dc:	8a 81       	ldd	r24, Y+2	; 0x02
    51de:	9b 81       	ldd	r25, Y+3	; 0x03
    51e0:	fc 01       	movw	r30, r24
    51e2:	12 8a       	std	Z+18, r1	; 0x12
    51e4:	13 8a       	std	Z+19, r1	; 0x13
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    51e6:	8a 81       	ldd	r24, Y+2	; 0x02
    51e8:	9b 81       	ldd	r25, Y+3	; 0x03
    51ea:	fc 01       	movw	r30, r24
    51ec:	14 8a       	std	Z+20, r1	; 0x14
    51ee:	15 8a       	std	Z+21, r1	; 0x15
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    51f0:	8a 81       	ldd	r24, Y+2	; 0x02
    51f2:	9b 81       	ldd	r25, Y+3	; 0x03
    51f4:	fc 01       	movw	r30, r24
    51f6:	10 8e       	std	Z+24, r1	; 0x18
    51f8:	11 8e       	std	Z+25, r1	; 0x19
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    51fa:	8a 81       	ldd	r24, Y+2	; 0x02
    51fc:	9b 81       	ldd	r25, Y+3	; 0x03
    51fe:	fc 01       	movw	r30, r24
    5200:	16 8a       	std	Z+22, r1	; 0x16
    5202:	17 8a       	std	Z+23, r1	; 0x17
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    5204:	8a 81       	ldd	r24, Y+2	; 0x02
    5206:	9b 81       	ldd	r25, Y+3	; 0x03
    5208:	fc 01       	movw	r30, r24
    520a:	16 a2       	std	Z+38, r1	; 0x26
    520c:	17 a2       	std	Z+39, r1	; 0x27
    520e:	10 a6       	std	Z+40, r1	; 0x28
    5210:	11 a6       	std	Z+41, r1	; 0x29
        ptcb->OSTCBCyclesStart = 0L;
    5212:	8a 81       	ldd	r24, Y+2	; 0x02
    5214:	9b 81       	ldd	r25, Y+3	; 0x03
    5216:	fc 01       	movw	r30, r24
    5218:	16 a6       	std	Z+46, r1	; 0x2e
    521a:	17 a6       	std	Z+47, r1	; 0x2f
    521c:	10 aa       	std	Z+48, r1	; 0x30
    521e:	11 aa       	std	Z+49, r1	; 0x31
        ptcb->OSTCBCyclesTot   = 0L;
    5220:	8a 81       	ldd	r24, Y+2	; 0x02
    5222:	9b 81       	ldd	r25, Y+3	; 0x03
    5224:	fc 01       	movw	r30, r24
    5226:	12 a6       	std	Z+42, r1	; 0x2a
    5228:	13 a6       	std	Z+43, r1	; 0x2b
    522a:	14 a6       	std	Z+44, r1	; 0x2c
    522c:	15 a6       	std	Z+45, r1	; 0x2d
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    522e:	8a 81       	ldd	r24, Y+2	; 0x02
    5230:	9b 81       	ldd	r25, Y+3	; 0x03
    5232:	fc 01       	movw	r30, r24
    5234:	12 aa       	std	Z+50, r1	; 0x32
    5236:	13 aa       	std	Z+51, r1	; 0x33
        ptcb->OSTCBStkUsed     = 0L;
    5238:	8a 81       	ldd	r24, Y+2	; 0x02
    523a:	9b 81       	ldd	r25, Y+3	; 0x03
    523c:	fc 01       	movw	r30, r24
    523e:	14 aa       	std	Z+52, r1	; 0x34
    5240:	15 aa       	std	Z+53, r1	; 0x35
    5242:	16 aa       	std	Z+54, r1	; 0x36
    5244:	17 aa       	std	Z+55, r1	; 0x37
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    5246:	8a 81       	ldd	r24, Y+2	; 0x02
    5248:	9b 81       	ldd	r25, Y+3	; 0x03
    524a:	2f e3       	ldi	r18, 0x3F	; 63
    524c:	fc 01       	movw	r30, r24
    524e:	20 af       	std	Z+56, r18	; 0x38
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    5250:	8a 81       	ldd	r24, Y+2	; 0x02
    5252:	9b 81       	ldd	r25, Y+3	; 0x03
    5254:	fc 01       	movw	r30, r24
    5256:	11 ae       	std	Z+57, r1	; 0x39
#endif

        OSTCBInitHook(ptcb);
    5258:	8a 81       	ldd	r24, Y+2	; 0x02
    525a:	9b 81       	ldd	r25, Y+3	; 0x03
    525c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5260:	8a 81       	ldd	r24, Y+2	; 0x02
    5262:	9b 81       	ldd	r25, Y+3	; 0x03
    5264:	0e 94 3a 19 	call	0x3274	; 0x3274 <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
    5268:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    526c:	89 83       	std	Y+1, r24	; 0x01
        OSTCBPrioTbl[prio] = ptcb;
    526e:	8c 81       	ldd	r24, Y+4	; 0x04
    5270:	88 2f       	mov	r24, r24
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	88 0f       	add	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	8d 58       	subi	r24, 0x8D	; 141
    527a:	9a 4c       	sbci	r25, 0xCA	; 202
    527c:	2a 81       	ldd	r18, Y+2	; 0x02
    527e:	3b 81       	ldd	r19, Y+3	; 0x03
    5280:	fc 01       	movw	r30, r24
    5282:	20 83       	st	Z, r18
    5284:	31 83       	std	Z+1, r19	; 0x01
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5286:	20 91 df 2a 	lds	r18, 0x2ADF
    528a:	30 91 e0 2a 	lds	r19, 0x2AE0
    528e:	8a 81       	ldd	r24, Y+2	; 0x02
    5290:	9b 81       	ldd	r25, Y+3	; 0x03
    5292:	fc 01       	movw	r30, r24
    5294:	26 87       	std	Z+14, r18	; 0x0e
    5296:	37 87       	std	Z+15, r19	; 0x0f
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5298:	8a 81       	ldd	r24, Y+2	; 0x02
    529a:	9b 81       	ldd	r25, Y+3	; 0x03
    529c:	fc 01       	movw	r30, r24
    529e:	10 8a       	std	Z+16, r1	; 0x10
    52a0:	11 8a       	std	Z+17, r1	; 0x11
        if (OSTCBList != (OS_TCB *)0) {
    52a2:	80 91 df 2a 	lds	r24, 0x2ADF
    52a6:	90 91 e0 2a 	lds	r25, 0x2AE0
    52aa:	00 97       	sbiw	r24, 0x00	; 0
    52ac:	49 f0       	breq	.+18     	; 0x52c0 <OS_TCBInit+0x246>
            OSTCBList->OSTCBPrev = ptcb;
    52ae:	80 91 df 2a 	lds	r24, 0x2ADF
    52b2:	90 91 e0 2a 	lds	r25, 0x2AE0
    52b6:	2a 81       	ldd	r18, Y+2	; 0x02
    52b8:	3b 81       	ldd	r19, Y+3	; 0x03
    52ba:	fc 01       	movw	r30, r24
    52bc:	20 8b       	std	Z+16, r18	; 0x10
    52be:	31 8b       	std	Z+17, r19	; 0x11
        }
        OSTCBList               = ptcb;
    52c0:	8a 81       	ldd	r24, Y+2	; 0x02
    52c2:	9b 81       	ldd	r25, Y+3	; 0x03
    52c4:	80 93 df 2a 	sts	0x2ADF, r24
    52c8:	90 93 e0 2a 	sts	0x2AE0, r25
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    52cc:	8a 81       	ldd	r24, Y+2	; 0x02
    52ce:	9b 81       	ldd	r25, Y+3	; 0x03
    52d0:	fc 01       	movw	r30, r24
    52d2:	94 a1       	ldd	r25, Z+36	; 0x24
    52d4:	80 91 94 2c 	lds	r24, 0x2C94
    52d8:	89 2b       	or	r24, r25
    52da:	80 93 94 2c 	sts	0x2C94, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	9b 81       	ldd	r25, Y+3	; 0x03
    52e2:	fc 01       	movw	r30, r24
    52e4:	82 a1       	ldd	r24, Z+34	; 0x22
    52e6:	88 2f       	mov	r24, r24
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	2a 81       	ldd	r18, Y+2	; 0x02
    52ec:	3b 81       	ldd	r19, Y+3	; 0x03
    52ee:	f9 01       	movw	r30, r18
    52f0:	22 a1       	ldd	r18, Z+34	; 0x22
    52f2:	22 2f       	mov	r18, r18
    52f4:	30 e0       	ldi	r19, 0x00	; 0
    52f6:	2b 56       	subi	r18, 0x6B	; 107
    52f8:	33 4d       	sbci	r19, 0xD3	; 211
    52fa:	f9 01       	movw	r30, r18
    52fc:	40 81       	ld	r20, Z
    52fe:	2a 81       	ldd	r18, Y+2	; 0x02
    5300:	3b 81       	ldd	r19, Y+3	; 0x03
    5302:	f9 01       	movw	r30, r18
    5304:	23 a1       	ldd	r18, Z+35	; 0x23
    5306:	24 2b       	or	r18, r20
    5308:	8b 56       	subi	r24, 0x6B	; 107
    530a:	93 4d       	sbci	r25, 0xD3	; 211
    530c:	fc 01       	movw	r30, r24
    530e:	20 83       	st	Z, r18
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    5310:	80 91 57 2c 	lds	r24, 0x2C57
    5314:	8f 5f       	subi	r24, 0xFF	; 255
    5316:	80 93 57 2c 	sts	0x2C57, r24
        OS_EXIT_CRITICAL();
    531a:	89 81       	ldd	r24, Y+1	; 0x01
    531c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	04 c0       	rjmp	.+8      	; 0x532c <OS_TCBInit+0x2b2>
    }
    OS_EXIT_CRITICAL();
    5324:	89 81       	ldd	r24, Y+1	; 0x01
    5326:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
    532a:	82 e4       	ldi	r24, 0x42	; 66
}
    532c:	62 96       	adiw	r28, 0x12	; 18
    532e:	cd bf       	out	0x3d, r28	; 61
    5330:	de bf       	out	0x3e, r29	; 62
    5332:	cf 91       	pop	r28
    5334:	df 91       	pop	r29
    5336:	1f 91       	pop	r17
    5338:	0f 91       	pop	r16
    533a:	ff 90       	pop	r15
    533c:	ef 90       	pop	r14
    533e:	df 90       	pop	r13
    5340:	cf 90       	pop	r12
    5342:	bf 90       	pop	r11
    5344:	af 90       	pop	r10
    5346:	08 95       	ret

00005348 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    5348:	df 93       	push	r29
    534a:	cf 93       	push	r28
    534c:	cd b7       	in	r28, 0x3d	; 61
    534e:	de b7       	in	r29, 0x3e	; 62
    5350:	2c 97       	sbiw	r28, 0x0c	; 12
    5352:	cd bf       	out	0x3d, r28	; 61
    5354:	de bf       	out	0x3e, r29	; 62
    5356:	8e 83       	std	Y+6, r24	; 0x06
    5358:	9f 83       	std	Y+7, r25	; 0x07
    535a:	68 87       	std	Y+8, r22	; 0x08
    535c:	79 87       	std	Y+9, r23	; 0x09
    535e:	4a 87       	std	Y+10, r20	; 0x0a
    5360:	2b 87       	std	Y+11, r18	; 0x0b
    5362:	3c 87       	std	Y+12, r19	; 0x0c
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5364:	1c 82       	std	Y+4, r1	; 0x04
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5366:	8e 81       	ldd	r24, Y+6	; 0x06
    5368:	9f 81       	ldd	r25, Y+7	; 0x07
    536a:	fc 01       	movw	r30, r24
    536c:	80 81       	ld	r24, Z
    536e:	85 30       	cpi	r24, 0x05	; 5
    5370:	41 f0       	breq	.+16     	; 0x5382 <OSFlagAccept+0x3a>
        *perr = OS_ERR_EVENT_TYPE;
    5372:	8b 85       	ldd	r24, Y+11	; 0x0b
    5374:	9c 85       	ldd	r25, Y+12	; 0x0c
    5376:	21 e0       	ldi	r18, 0x01	; 1
    5378:	fc 01       	movw	r30, r24
    537a:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    537c:	80 e0       	ldi	r24, 0x00	; 0
    537e:	90 e0       	ldi	r25, 0x00	; 0
    5380:	ee c0       	rjmp	.+476    	; 0x555e <OSFlagAccept+0x216>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5382:	8a 85       	ldd	r24, Y+10	; 0x0a
    5384:	80 78       	andi	r24, 0x80	; 128
    5386:	8d 83       	std	Y+5, r24	; 0x05
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    5388:	8d 81       	ldd	r24, Y+5	; 0x05
    538a:	88 23       	and	r24, r24
    538c:	31 f0       	breq	.+12     	; 0x539a <OSFlagAccept+0x52>
        wait_type &= ~OS_FLAG_CONSUME;
    538e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5390:	8f 77       	andi	r24, 0x7F	; 127
    5392:	8a 87       	std	Y+10, r24	; 0x0a
        consume    = OS_TRUE;
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	8b 83       	std	Y+3, r24	; 0x03
    5398:	01 c0       	rjmp	.+2      	; 0x539c <OSFlagAccept+0x54>
    } else {
        consume    = OS_FALSE;
    539a:	1b 82       	std	Y+3, r1	; 0x03
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    539c:	8b 85       	ldd	r24, Y+11	; 0x0b
    539e:	9c 85       	ldd	r25, Y+12	; 0x0c
    53a0:	fc 01       	movw	r30, r24
    53a2:	10 82       	st	Z, r1
    OS_ENTER_CRITICAL();
    53a4:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    53a8:	8c 83       	std	Y+4, r24	; 0x04
    switch (wait_type) {
    53aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    53ac:	88 2f       	mov	r24, r24
    53ae:	90 e0       	ldi	r25, 0x00	; 0
    53b0:	81 30       	cpi	r24, 0x01	; 1
    53b2:	91 05       	cpc	r25, r1
    53b4:	09 f4       	brne	.+2      	; 0x53b8 <OSFlagAccept+0x70>
    53b6:	99 c0       	rjmp	.+306    	; 0x54ea <OSFlagAccept+0x1a2>
    53b8:	82 30       	cpi	r24, 0x02	; 2
    53ba:	91 05       	cpc	r25, r1
    53bc:	24 f4       	brge	.+8      	; 0x53c6 <OSFlagAccept+0x7e>
    53be:	00 97       	sbiw	r24, 0x00	; 0
    53c0:	09 f4       	brne	.+2      	; 0x53c4 <OSFlagAccept+0x7c>
    53c2:	63 c0       	rjmp	.+198    	; 0x548a <OSFlagAccept+0x142>
    53c4:	bf c0       	rjmp	.+382    	; 0x5544 <OSFlagAccept+0x1fc>
    53c6:	82 30       	cpi	r24, 0x02	; 2
    53c8:	91 05       	cpc	r25, r1
    53ca:	21 f0       	breq	.+8      	; 0x53d4 <OSFlagAccept+0x8c>
    53cc:	83 30       	cpi	r24, 0x03	; 3
    53ce:	91 05       	cpc	r25, r1
    53d0:	81 f1       	breq	.+96     	; 0x5432 <OSFlagAccept+0xea>
    53d2:	b8 c0       	rjmp	.+368    	; 0x5544 <OSFlagAccept+0x1fc>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    53d4:	8e 81       	ldd	r24, Y+6	; 0x06
    53d6:	9f 81       	ldd	r25, Y+7	; 0x07
    53d8:	fc 01       	movw	r30, r24
    53da:	23 81       	ldd	r18, Z+3	; 0x03
    53dc:	34 81       	ldd	r19, Z+4	; 0x04
    53de:	88 85       	ldd	r24, Y+8	; 0x08
    53e0:	99 85       	ldd	r25, Y+9	; 0x09
    53e2:	82 23       	and	r24, r18
    53e4:	93 23       	and	r25, r19
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	9a 83       	std	Y+2, r25	; 0x02
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    53ea:	29 81       	ldd	r18, Y+1	; 0x01
    53ec:	3a 81       	ldd	r19, Y+2	; 0x02
    53ee:	88 85       	ldd	r24, Y+8	; 0x08
    53f0:	99 85       	ldd	r25, Y+9	; 0x09
    53f2:	28 17       	cp	r18, r24
    53f4:	39 07       	cpc	r19, r25
    53f6:	a1 f4       	brne	.+40     	; 0x5420 <OSFlagAccept+0xd8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    53f8:	8b 81       	ldd	r24, Y+3	; 0x03
    53fa:	81 30       	cpi	r24, 0x01	; 1
    53fc:	b1 f4       	brne	.+44     	; 0x542a <OSFlagAccept+0xe2>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    53fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5400:	9f 81       	ldd	r25, Y+7	; 0x07
    5402:	fc 01       	movw	r30, r24
    5404:	23 81       	ldd	r18, Z+3	; 0x03
    5406:	34 81       	ldd	r19, Z+4	; 0x04
    5408:	89 81       	ldd	r24, Y+1	; 0x01
    540a:	9a 81       	ldd	r25, Y+2	; 0x02
    540c:	80 95       	com	r24
    540e:	90 95       	com	r25
    5410:	28 23       	and	r18, r24
    5412:	39 23       	and	r19, r25
    5414:	8e 81       	ldd	r24, Y+6	; 0x06
    5416:	9f 81       	ldd	r25, Y+7	; 0x07
    5418:	fc 01       	movw	r30, r24
    541a:	23 83       	std	Z+3, r18	; 0x03
    541c:	34 83       	std	Z+4, r19	; 0x04
    541e:	05 c0       	rjmp	.+10     	; 0x542a <OSFlagAccept+0xe2>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5420:	8b 85       	ldd	r24, Y+11	; 0x0b
    5422:	9c 85       	ldd	r25, Y+12	; 0x0c
    5424:	20 e7       	ldi	r18, 0x70	; 112
    5426:	fc 01       	movw	r30, r24
    5428:	20 83       	st	Z, r18
             }
             OS_EXIT_CRITICAL();
    542a:	8c 81       	ldd	r24, Y+4	; 0x04
    542c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             break;
    5430:	94 c0       	rjmp	.+296    	; 0x555a <OSFlagAccept+0x212>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5432:	8e 81       	ldd	r24, Y+6	; 0x06
    5434:	9f 81       	ldd	r25, Y+7	; 0x07
    5436:	fc 01       	movw	r30, r24
    5438:	23 81       	ldd	r18, Z+3	; 0x03
    543a:	34 81       	ldd	r19, Z+4	; 0x04
    543c:	88 85       	ldd	r24, Y+8	; 0x08
    543e:	99 85       	ldd	r25, Y+9	; 0x09
    5440:	82 23       	and	r24, r18
    5442:	93 23       	and	r25, r19
    5444:	89 83       	std	Y+1, r24	; 0x01
    5446:	9a 83       	std	Y+2, r25	; 0x02
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5448:	89 81       	ldd	r24, Y+1	; 0x01
    544a:	9a 81       	ldd	r25, Y+2	; 0x02
    544c:	00 97       	sbiw	r24, 0x00	; 0
    544e:	a1 f0       	breq	.+40     	; 0x5478 <OSFlagAccept+0x130>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5450:	8b 81       	ldd	r24, Y+3	; 0x03
    5452:	81 30       	cpi	r24, 0x01	; 1
    5454:	b1 f4       	brne	.+44     	; 0x5482 <OSFlagAccept+0x13a>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5456:	8e 81       	ldd	r24, Y+6	; 0x06
    5458:	9f 81       	ldd	r25, Y+7	; 0x07
    545a:	fc 01       	movw	r30, r24
    545c:	23 81       	ldd	r18, Z+3	; 0x03
    545e:	34 81       	ldd	r19, Z+4	; 0x04
    5460:	89 81       	ldd	r24, Y+1	; 0x01
    5462:	9a 81       	ldd	r25, Y+2	; 0x02
    5464:	80 95       	com	r24
    5466:	90 95       	com	r25
    5468:	28 23       	and	r18, r24
    546a:	39 23       	and	r19, r25
    546c:	8e 81       	ldd	r24, Y+6	; 0x06
    546e:	9f 81       	ldd	r25, Y+7	; 0x07
    5470:	fc 01       	movw	r30, r24
    5472:	23 83       	std	Z+3, r18	; 0x03
    5474:	34 83       	std	Z+4, r19	; 0x04
    5476:	05 c0       	rjmp	.+10     	; 0x5482 <OSFlagAccept+0x13a>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5478:	8b 85       	ldd	r24, Y+11	; 0x0b
    547a:	9c 85       	ldd	r25, Y+12	; 0x0c
    547c:	20 e7       	ldi	r18, 0x70	; 112
    547e:	fc 01       	movw	r30, r24
    5480:	20 83       	st	Z, r18
             }
             OS_EXIT_CRITICAL();
    5482:	8c 81       	ldd	r24, Y+4	; 0x04
    5484:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             break;
    5488:	68 c0       	rjmp	.+208    	; 0x555a <OSFlagAccept+0x212>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    548a:	8e 81       	ldd	r24, Y+6	; 0x06
    548c:	9f 81       	ldd	r25, Y+7	; 0x07
    548e:	fc 01       	movw	r30, r24
    5490:	83 81       	ldd	r24, Z+3	; 0x03
    5492:	94 81       	ldd	r25, Z+4	; 0x04
    5494:	9c 01       	movw	r18, r24
    5496:	20 95       	com	r18
    5498:	30 95       	com	r19
    549a:	88 85       	ldd	r24, Y+8	; 0x08
    549c:	99 85       	ldd	r25, Y+9	; 0x09
    549e:	82 23       	and	r24, r18
    54a0:	93 23       	and	r25, r19
    54a2:	89 83       	std	Y+1, r24	; 0x01
    54a4:	9a 83       	std	Y+2, r25	; 0x02
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    54a6:	29 81       	ldd	r18, Y+1	; 0x01
    54a8:	3a 81       	ldd	r19, Y+2	; 0x02
    54aa:	88 85       	ldd	r24, Y+8	; 0x08
    54ac:	99 85       	ldd	r25, Y+9	; 0x09
    54ae:	28 17       	cp	r18, r24
    54b0:	39 07       	cpc	r19, r25
    54b2:	91 f4       	brne	.+36     	; 0x54d8 <OSFlagAccept+0x190>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    54b4:	8b 81       	ldd	r24, Y+3	; 0x03
    54b6:	81 30       	cpi	r24, 0x01	; 1
    54b8:	a1 f4       	brne	.+40     	; 0x54e2 <OSFlagAccept+0x19a>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    54ba:	8e 81       	ldd	r24, Y+6	; 0x06
    54bc:	9f 81       	ldd	r25, Y+7	; 0x07
    54be:	fc 01       	movw	r30, r24
    54c0:	23 81       	ldd	r18, Z+3	; 0x03
    54c2:	34 81       	ldd	r19, Z+4	; 0x04
    54c4:	89 81       	ldd	r24, Y+1	; 0x01
    54c6:	9a 81       	ldd	r25, Y+2	; 0x02
    54c8:	28 2b       	or	r18, r24
    54ca:	39 2b       	or	r19, r25
    54cc:	8e 81       	ldd	r24, Y+6	; 0x06
    54ce:	9f 81       	ldd	r25, Y+7	; 0x07
    54d0:	fc 01       	movw	r30, r24
    54d2:	23 83       	std	Z+3, r18	; 0x03
    54d4:	34 83       	std	Z+4, r19	; 0x04
    54d6:	05 c0       	rjmp	.+10     	; 0x54e2 <OSFlagAccept+0x19a>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    54d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    54da:	9c 85       	ldd	r25, Y+12	; 0x0c
    54dc:	20 e7       	ldi	r18, 0x70	; 112
    54de:	fc 01       	movw	r30, r24
    54e0:	20 83       	st	Z, r18
             }
             OS_EXIT_CRITICAL();
    54e2:	8c 81       	ldd	r24, Y+4	; 0x04
    54e4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             break;
    54e8:	38 c0       	rjmp	.+112    	; 0x555a <OSFlagAccept+0x212>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    54ea:	8e 81       	ldd	r24, Y+6	; 0x06
    54ec:	9f 81       	ldd	r25, Y+7	; 0x07
    54ee:	fc 01       	movw	r30, r24
    54f0:	83 81       	ldd	r24, Z+3	; 0x03
    54f2:	94 81       	ldd	r25, Z+4	; 0x04
    54f4:	9c 01       	movw	r18, r24
    54f6:	20 95       	com	r18
    54f8:	30 95       	com	r19
    54fa:	88 85       	ldd	r24, Y+8	; 0x08
    54fc:	99 85       	ldd	r25, Y+9	; 0x09
    54fe:	82 23       	and	r24, r18
    5500:	93 23       	and	r25, r19
    5502:	89 83       	std	Y+1, r24	; 0x01
    5504:	9a 83       	std	Y+2, r25	; 0x02
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	9a 81       	ldd	r25, Y+2	; 0x02
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	91 f0       	breq	.+36     	; 0x5532 <OSFlagAccept+0x1ea>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    550e:	8b 81       	ldd	r24, Y+3	; 0x03
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	a1 f4       	brne	.+40     	; 0x553c <OSFlagAccept+0x1f4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5514:	8e 81       	ldd	r24, Y+6	; 0x06
    5516:	9f 81       	ldd	r25, Y+7	; 0x07
    5518:	fc 01       	movw	r30, r24
    551a:	23 81       	ldd	r18, Z+3	; 0x03
    551c:	34 81       	ldd	r19, Z+4	; 0x04
    551e:	89 81       	ldd	r24, Y+1	; 0x01
    5520:	9a 81       	ldd	r25, Y+2	; 0x02
    5522:	28 2b       	or	r18, r24
    5524:	39 2b       	or	r19, r25
    5526:	8e 81       	ldd	r24, Y+6	; 0x06
    5528:	9f 81       	ldd	r25, Y+7	; 0x07
    552a:	fc 01       	movw	r30, r24
    552c:	23 83       	std	Z+3, r18	; 0x03
    552e:	34 83       	std	Z+4, r19	; 0x04
    5530:	05 c0       	rjmp	.+10     	; 0x553c <OSFlagAccept+0x1f4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5532:	8b 85       	ldd	r24, Y+11	; 0x0b
    5534:	9c 85       	ldd	r25, Y+12	; 0x0c
    5536:	20 e7       	ldi	r18, 0x70	; 112
    5538:	fc 01       	movw	r30, r24
    553a:	20 83       	st	Z, r18
             }
             OS_EXIT_CRITICAL();
    553c:	8c 81       	ldd	r24, Y+4	; 0x04
    553e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             break;
    5542:	0b c0       	rjmp	.+22     	; 0x555a <OSFlagAccept+0x212>
#endif

        default:
             OS_EXIT_CRITICAL();
    5544:	8c 81       	ldd	r24, Y+4	; 0x04
    5546:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             flags_rdy = (OS_FLAGS)0;
    554a:	19 82       	std	Y+1, r1	; 0x01
    554c:	1a 82       	std	Y+2, r1	; 0x02
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    554e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5550:	9c 85       	ldd	r25, Y+12	; 0x0c
    5552:	2f e6       	ldi	r18, 0x6F	; 111
    5554:	fc 01       	movw	r30, r24
    5556:	20 83       	st	Z, r18
             break;
    5558:	00 00       	nop
    }
    return (flags_rdy);
    555a:	89 81       	ldd	r24, Y+1	; 0x01
    555c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    555e:	2c 96       	adiw	r28, 0x0c	; 12
    5560:	cd bf       	out	0x3d, r28	; 61
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	cf 91       	pop	r28
    5566:	df 91       	pop	r29
    5568:	08 95       	ret

0000556a <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    556a:	df 93       	push	r29
    556c:	cf 93       	push	r28
    556e:	cd b7       	in	r28, 0x3d	; 61
    5570:	de b7       	in	r29, 0x3e	; 62
    5572:	27 97       	sbiw	r28, 0x07	; 7
    5574:	cd bf       	out	0x3d, r28	; 61
    5576:	de bf       	out	0x3e, r29	; 62
    5578:	8c 83       	std	Y+4, r24	; 0x04
    557a:	9d 83       	std	Y+5, r25	; 0x05
    557c:	6e 83       	std	Y+6, r22	; 0x06
    557e:	7f 83       	std	Y+7, r23	; 0x07
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    5580:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    5582:	80 91 07 2e 	lds	r24, 0x2E07
    5586:	88 23       	and	r24, r24
    5588:	41 f0       	breq	.+16     	; 0x559a <OSFlagCreate+0x30>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    558a:	8e 81       	ldd	r24, Y+6	; 0x06
    558c:	9f 81       	ldd	r25, Y+7	; 0x07
    558e:	20 e1       	ldi	r18, 0x10	; 16
    5590:	fc 01       	movw	r30, r24
    5592:	20 83       	st	Z, r18
        return ((OS_FLAG_GRP *)0);
    5594:	80 e0       	ldi	r24, 0x00	; 0
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	44 c0       	rjmp	.+136    	; 0x5622 <OSFlagCreate+0xb8>
    }
    OS_ENTER_CRITICAL();
    559a:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    559e:	89 83       	std	Y+1, r24	; 0x01
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    55a0:	80 91 70 35 	lds	r24, 0x3570
    55a4:	90 91 71 35 	lds	r25, 0x3571
    55a8:	8a 83       	std	Y+2, r24	; 0x02
    55aa:	9b 83       	std	Y+3, r25	; 0x03
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    55ac:	8a 81       	ldd	r24, Y+2	; 0x02
    55ae:	9b 81       	ldd	r25, Y+3	; 0x03
    55b0:	00 97       	sbiw	r24, 0x00	; 0
    55b2:	69 f1       	breq	.+90     	; 0x560e <OSFlagCreate+0xa4>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    55b4:	80 91 70 35 	lds	r24, 0x3570
    55b8:	90 91 71 35 	lds	r25, 0x3571
    55bc:	fc 01       	movw	r30, r24
    55be:	81 81       	ldd	r24, Z+1	; 0x01
    55c0:	92 81       	ldd	r25, Z+2	; 0x02
    55c2:	80 93 70 35 	sts	0x3570, r24
    55c6:	90 93 71 35 	sts	0x3571, r25
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    55ca:	8a 81       	ldd	r24, Y+2	; 0x02
    55cc:	9b 81       	ldd	r25, Y+3	; 0x03
    55ce:	25 e0       	ldi	r18, 0x05	; 5
    55d0:	fc 01       	movw	r30, r24
    55d2:	20 83       	st	Z, r18
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    55d4:	8a 81       	ldd	r24, Y+2	; 0x02
    55d6:	9b 81       	ldd	r25, Y+3	; 0x03
    55d8:	2c 81       	ldd	r18, Y+4	; 0x04
    55da:	3d 81       	ldd	r19, Y+5	; 0x05
    55dc:	fc 01       	movw	r30, r24
    55de:	23 83       	std	Z+3, r18	; 0x03
    55e0:	34 83       	std	Z+4, r19	; 0x04
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    55e2:	8a 81       	ldd	r24, Y+2	; 0x02
    55e4:	9b 81       	ldd	r25, Y+3	; 0x03
    55e6:	fc 01       	movw	r30, r24
    55e8:	11 82       	std	Z+1, r1	; 0x01
    55ea:	12 82       	std	Z+2, r1	; 0x02
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    55ec:	8a 81       	ldd	r24, Y+2	; 0x02
    55ee:	9b 81       	ldd	r25, Y+3	; 0x03
    55f0:	2f e3       	ldi	r18, 0x3F	; 63
    55f2:	fc 01       	movw	r30, r24
    55f4:	25 83       	std	Z+5, r18	; 0x05
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    55f6:	8a 81       	ldd	r24, Y+2	; 0x02
    55f8:	9b 81       	ldd	r25, Y+3	; 0x03
    55fa:	fc 01       	movw	r30, r24
    55fc:	16 82       	std	Z+6, r1	; 0x06
#endif
        OS_EXIT_CRITICAL();
    55fe:	89 81       	ldd	r24, Y+1	; 0x01
    5600:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr                = OS_ERR_NONE;
    5604:	8e 81       	ldd	r24, Y+6	; 0x06
    5606:	9f 81       	ldd	r25, Y+7	; 0x07
    5608:	fc 01       	movw	r30, r24
    560a:	10 82       	st	Z, r1
    560c:	08 c0       	rjmp	.+16     	; 0x561e <OSFlagCreate+0xb4>
    } else {
        OS_EXIT_CRITICAL();
    560e:	89 81       	ldd	r24, Y+1	; 0x01
    5610:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    5614:	8e 81       	ldd	r24, Y+6	; 0x06
    5616:	9f 81       	ldd	r25, Y+7	; 0x07
    5618:	22 e7       	ldi	r18, 0x72	; 114
    561a:	fc 01       	movw	r30, r24
    561c:	20 83       	st	Z, r18
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    561e:	8a 81       	ldd	r24, Y+2	; 0x02
    5620:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5622:	27 96       	adiw	r28, 0x07	; 7
    5624:	cd bf       	out	0x3d, r28	; 61
    5626:	de bf       	out	0x3e, r29	; 62
    5628:	cf 91       	pop	r28
    562a:	df 91       	pop	r29
    562c:	08 95       	ret

0000562e <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    562e:	df 93       	push	r29
    5630:	cf 93       	push	r28
    5632:	cd b7       	in	r28, 0x3d	; 61
    5634:	de b7       	in	r29, 0x3e	; 62
    5636:	2b 97       	sbiw	r28, 0x0b	; 11
    5638:	cd bf       	out	0x3d, r28	; 61
    563a:	de bf       	out	0x3e, r29	; 62
    563c:	8f 83       	std	Y+7, r24	; 0x07
    563e:	98 87       	std	Y+8, r25	; 0x08
    5640:	69 87       	std	Y+9, r22	; 0x09
    5642:	4a 87       	std	Y+10, r20	; 0x0a
    5644:	5b 87       	std	Y+11, r21	; 0x0b
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5646:	1e 82       	std	Y+6, r1	; 0x06
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5648:	80 91 07 2e 	lds	r24, 0x2E07
    564c:	88 23       	and	r24, r24
    564e:	41 f0       	breq	.+16     	; 0x5660 <OSFlagDel+0x32>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    5650:	8a 85       	ldd	r24, Y+10	; 0x0a
    5652:	9b 85       	ldd	r25, Y+11	; 0x0b
    5654:	2f e0       	ldi	r18, 0x0F	; 15
    5656:	fc 01       	movw	r30, r24
    5658:	20 83       	st	Z, r18
        return (pgrp);
    565a:	8f 81       	ldd	r24, Y+7	; 0x07
    565c:	98 85       	ldd	r25, Y+8	; 0x08
    565e:	b8 c0       	rjmp	.+368    	; 0x57d0 <OSFlagDel+0x1a2>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    5660:	8f 81       	ldd	r24, Y+7	; 0x07
    5662:	98 85       	ldd	r25, Y+8	; 0x08
    5664:	fc 01       	movw	r30, r24
    5666:	80 81       	ld	r24, Z
    5668:	85 30       	cpi	r24, 0x05	; 5
    566a:	41 f0       	breq	.+16     	; 0x567c <OSFlagDel+0x4e>
        *perr = OS_ERR_EVENT_TYPE;
    566c:	8a 85       	ldd	r24, Y+10	; 0x0a
    566e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5670:	21 e0       	ldi	r18, 0x01	; 1
    5672:	fc 01       	movw	r30, r24
    5674:	20 83       	st	Z, r18
        return (pgrp);
    5676:	8f 81       	ldd	r24, Y+7	; 0x07
    5678:	98 85       	ldd	r25, Y+8	; 0x08
    567a:	aa c0       	rjmp	.+340    	; 0x57d0 <OSFlagDel+0x1a2>
    }
    OS_ENTER_CRITICAL();
    567c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5680:	8e 83       	std	Y+6, r24	; 0x06
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    5682:	8f 81       	ldd	r24, Y+7	; 0x07
    5684:	98 85       	ldd	r25, Y+8	; 0x08
    5686:	fc 01       	movw	r30, r24
    5688:	81 81       	ldd	r24, Z+1	; 0x01
    568a:	92 81       	ldd	r25, Z+2	; 0x02
    568c:	00 97       	sbiw	r24, 0x00	; 0
    568e:	19 f0       	breq	.+6      	; 0x5696 <OSFlagDel+0x68>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	89 83       	std	Y+1, r24	; 0x01
    5694:	01 c0       	rjmp	.+2      	; 0x5698 <OSFlagDel+0x6a>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    5696:	19 82       	std	Y+1, r1	; 0x01
    }
    switch (opt) {
    5698:	89 85       	ldd	r24, Y+9	; 0x09
    569a:	88 2f       	mov	r24, r24
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	00 97       	sbiw	r24, 0x00	; 0
    56a0:	21 f0       	breq	.+8      	; 0x56aa <OSFlagDel+0x7c>
    56a2:	81 30       	cpi	r24, 0x01	; 1
    56a4:	91 05       	cpc	r25, r1
    56a6:	e1 f1       	breq	.+120    	; 0x5720 <OSFlagDel+0xf2>
    56a8:	84 c0       	rjmp	.+264    	; 0x57b2 <OSFlagDel+0x184>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    56aa:	89 81       	ldd	r24, Y+1	; 0x01
    56ac:	88 23       	and	r24, r24
    56ae:	59 f5       	brne	.+86     	; 0x5706 <OSFlagDel+0xd8>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    56b0:	8f 81       	ldd	r24, Y+7	; 0x07
    56b2:	98 85       	ldd	r25, Y+8	; 0x08
    56b4:	2f e3       	ldi	r18, 0x3F	; 63
    56b6:	fc 01       	movw	r30, r24
    56b8:	25 83       	std	Z+5, r18	; 0x05
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    56ba:	8f 81       	ldd	r24, Y+7	; 0x07
    56bc:	98 85       	ldd	r25, Y+8	; 0x08
    56be:	fc 01       	movw	r30, r24
    56c0:	16 82       	std	Z+6, r1	; 0x06
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    56c2:	8f 81       	ldd	r24, Y+7	; 0x07
    56c4:	98 85       	ldd	r25, Y+8	; 0x08
    56c6:	fc 01       	movw	r30, r24
    56c8:	10 82       	st	Z, r1
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    56ca:	20 91 70 35 	lds	r18, 0x3570
    56ce:	30 91 71 35 	lds	r19, 0x3571
    56d2:	8f 81       	ldd	r24, Y+7	; 0x07
    56d4:	98 85       	ldd	r25, Y+8	; 0x08
    56d6:	fc 01       	movw	r30, r24
    56d8:	21 83       	std	Z+1, r18	; 0x01
    56da:	32 83       	std	Z+2, r19	; 0x02
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    56dc:	8f 81       	ldd	r24, Y+7	; 0x07
    56de:	98 85       	ldd	r25, Y+8	; 0x08
    56e0:	fc 01       	movw	r30, r24
    56e2:	13 82       	std	Z+3, r1	; 0x03
    56e4:	14 82       	std	Z+4, r1	; 0x04
                 OSFlagFreeList       = pgrp;
    56e6:	8f 81       	ldd	r24, Y+7	; 0x07
    56e8:	98 85       	ldd	r25, Y+8	; 0x08
    56ea:	80 93 70 35 	sts	0x3570, r24
    56ee:	90 93 71 35 	sts	0x3571, r25
                 OS_EXIT_CRITICAL();
    56f2:	8e 81       	ldd	r24, Y+6	; 0x06
    56f4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                = OS_ERR_NONE;
    56f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    56fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    56fc:	fc 01       	movw	r30, r24
    56fe:	10 82       	st	Z, r1
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    5700:	1c 82       	std	Y+4, r1	; 0x04
    5702:	1d 82       	std	Y+5, r1	; 0x05
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    5704:	63 c0       	rjmp	.+198    	; 0x57cc <OSFlagDel+0x19e>
                 OSFlagFreeList       = pgrp;
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
    5706:	8e 81       	ldd	r24, Y+6	; 0x06
    5708:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                = OS_ERR_TASK_WAITING;
    570c:	8a 85       	ldd	r24, Y+10	; 0x0a
    570e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5710:	29 e4       	ldi	r18, 0x49	; 73
    5712:	fc 01       	movw	r30, r24
    5714:	20 83       	st	Z, r18
                 pgrp_return          = pgrp;
    5716:	8f 81       	ldd	r24, Y+7	; 0x07
    5718:	98 85       	ldd	r25, Y+8	; 0x08
    571a:	8c 83       	std	Y+4, r24	; 0x04
    571c:	9d 83       	std	Y+5, r25	; 0x05
             }
             break;
    571e:	56 c0       	rjmp	.+172    	; 0x57cc <OSFlagDel+0x19e>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5720:	8f 81       	ldd	r24, Y+7	; 0x07
    5722:	98 85       	ldd	r25, Y+8	; 0x08
    5724:	fc 01       	movw	r30, r24
    5726:	81 81       	ldd	r24, Z+1	; 0x01
    5728:	92 81       	ldd	r25, Z+2	; 0x02
    572a:	8a 83       	std	Y+2, r24	; 0x02
    572c:	9b 83       	std	Y+3, r25	; 0x03
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    572e:	0d c0       	rjmp	.+26     	; 0x574a <OSFlagDel+0x11c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	9b 81       	ldd	r25, Y+3	; 0x03
    5734:	60 e0       	ldi	r22, 0x00	; 0
    5736:	70 e0       	ldi	r23, 0x00	; 0
    5738:	0e 94 60 31 	call	0x62c0	; 0x62c0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    573c:	8a 81       	ldd	r24, Y+2	; 0x02
    573e:	9b 81       	ldd	r25, Y+3	; 0x03
    5740:	fc 01       	movw	r30, r24
    5742:	80 81       	ld	r24, Z
    5744:	91 81       	ldd	r25, Z+1	; 0x01
    5746:	8a 83       	std	Y+2, r24	; 0x02
    5748:	9b 83       	std	Y+3, r25	; 0x03
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    574a:	8a 81       	ldd	r24, Y+2	; 0x02
    574c:	9b 81       	ldd	r25, Y+3	; 0x03
    574e:	00 97       	sbiw	r24, 0x00	; 0
    5750:	79 f7       	brne	.-34     	; 0x5730 <OSFlagDel+0x102>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    5752:	8f 81       	ldd	r24, Y+7	; 0x07
    5754:	98 85       	ldd	r25, Y+8	; 0x08
    5756:	2f e3       	ldi	r18, 0x3F	; 63
    5758:	fc 01       	movw	r30, r24
    575a:	25 83       	std	Z+5, r18	; 0x05
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    575c:	8f 81       	ldd	r24, Y+7	; 0x07
    575e:	98 85       	ldd	r25, Y+8	; 0x08
    5760:	fc 01       	movw	r30, r24
    5762:	16 82       	std	Z+6, r1	; 0x06
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5764:	8f 81       	ldd	r24, Y+7	; 0x07
    5766:	98 85       	ldd	r25, Y+8	; 0x08
    5768:	fc 01       	movw	r30, r24
    576a:	10 82       	st	Z, r1
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    576c:	20 91 70 35 	lds	r18, 0x3570
    5770:	30 91 71 35 	lds	r19, 0x3571
    5774:	8f 81       	ldd	r24, Y+7	; 0x07
    5776:	98 85       	ldd	r25, Y+8	; 0x08
    5778:	fc 01       	movw	r30, r24
    577a:	21 83       	std	Z+1, r18	; 0x01
    577c:	32 83       	std	Z+2, r19	; 0x02
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    577e:	8f 81       	ldd	r24, Y+7	; 0x07
    5780:	98 85       	ldd	r25, Y+8	; 0x08
    5782:	fc 01       	movw	r30, r24
    5784:	13 82       	std	Z+3, r1	; 0x03
    5786:	14 82       	std	Z+4, r1	; 0x04
             OSFlagFreeList       = pgrp;
    5788:	8f 81       	ldd	r24, Y+7	; 0x07
    578a:	98 85       	ldd	r25, Y+8	; 0x08
    578c:	80 93 70 35 	sts	0x3570, r24
    5790:	90 93 71 35 	sts	0x3571, r25
             OS_EXIT_CRITICAL();
    5794:	8e 81       	ldd	r24, Y+6	; 0x06
    5796:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    579a:	89 81       	ldd	r24, Y+1	; 0x01
    579c:	81 30       	cpi	r24, 0x01	; 1
    579e:	11 f4       	brne	.+4      	; 0x57a4 <OSFlagDel+0x176>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    57a0:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    57a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    57a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    57a8:	fc 01       	movw	r30, r24
    57aa:	10 82       	st	Z, r1
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    57ac:	1c 82       	std	Y+4, r1	; 0x04
    57ae:	1d 82       	std	Y+5, r1	; 0x05
             break;
    57b0:	0d c0       	rjmp	.+26     	; 0x57cc <OSFlagDel+0x19e>

        default:
             OS_EXIT_CRITICAL();
    57b2:	8e 81       	ldd	r24, Y+6	; 0x06
    57b4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr                = OS_ERR_INVALID_OPT;
    57b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    57ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    57bc:	27 e0       	ldi	r18, 0x07	; 7
    57be:	fc 01       	movw	r30, r24
    57c0:	20 83       	st	Z, r18
             pgrp_return          = pgrp;
    57c2:	8f 81       	ldd	r24, Y+7	; 0x07
    57c4:	98 85       	ldd	r25, Y+8	; 0x08
    57c6:	8c 83       	std	Y+4, r24	; 0x04
    57c8:	9d 83       	std	Y+5, r25	; 0x05
             break;
    57ca:	00 00       	nop
    }
    return (pgrp_return);
    57cc:	8c 81       	ldd	r24, Y+4	; 0x04
    57ce:	9d 81       	ldd	r25, Y+5	; 0x05
}
    57d0:	2b 96       	adiw	r28, 0x0b	; 11
    57d2:	cd bf       	out	0x3d, r28	; 61
    57d4:	de bf       	out	0x3e, r29	; 62
    57d6:	cf 91       	pop	r28
    57d8:	df 91       	pop	r29
    57da:	08 95       	ret

000057dc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    57dc:	df 93       	push	r29
    57de:	cf 93       	push	r28
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	28 97       	sbiw	r28, 0x08	; 8
    57e6:	cd bf       	out	0x3d, r28	; 61
    57e8:	de bf       	out	0x3e, r29	; 62
    57ea:	8b 83       	std	Y+3, r24	; 0x03
    57ec:	9c 83       	std	Y+4, r25	; 0x04
    57ee:	6d 83       	std	Y+5, r22	; 0x05
    57f0:	7e 83       	std	Y+6, r23	; 0x06
    57f2:	4f 83       	std	Y+7, r20	; 0x07
    57f4:	58 87       	std	Y+8, r21	; 0x08
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    57f6:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    57f8:	80 91 07 2e 	lds	r24, 0x2E07
    57fc:	88 23       	and	r24, r24
    57fe:	39 f0       	breq	.+14     	; 0x580e <OSFlagNameGet+0x32>
        *perr = OS_ERR_NAME_GET_ISR;
    5800:	8f 81       	ldd	r24, Y+7	; 0x07
    5802:	98 85       	ldd	r25, Y+8	; 0x08
    5804:	21 e1       	ldi	r18, 0x11	; 17
    5806:	fc 01       	movw	r30, r24
    5808:	20 83       	st	Z, r18
        return (0);
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	26 c0       	rjmp	.+76     	; 0x585a <OSFlagNameGet+0x7e>
    }
    OS_ENTER_CRITICAL();
    580e:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5812:	89 83       	std	Y+1, r24	; 0x01
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    5814:	8b 81       	ldd	r24, Y+3	; 0x03
    5816:	9c 81       	ldd	r25, Y+4	; 0x04
    5818:	fc 01       	movw	r30, r24
    581a:	80 81       	ld	r24, Z
    581c:	85 30       	cpi	r24, 0x05	; 5
    581e:	51 f0       	breq	.+20     	; 0x5834 <OSFlagNameGet+0x58>
        OS_EXIT_CRITICAL();
    5820:	89 81       	ldd	r24, Y+1	; 0x01
    5822:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_TYPE;
    5826:	8f 81       	ldd	r24, Y+7	; 0x07
    5828:	98 85       	ldd	r25, Y+8	; 0x08
    582a:	21 e0       	ldi	r18, 0x01	; 1
    582c:	fc 01       	movw	r30, r24
    582e:	20 83       	st	Z, r18
        return (0);
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	13 c0       	rjmp	.+38     	; 0x585a <OSFlagNameGet+0x7e>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    5834:	8b 81       	ldd	r24, Y+3	; 0x03
    5836:	9c 81       	ldd	r25, Y+4	; 0x04
    5838:	9c 01       	movw	r18, r24
    583a:	2b 5f       	subi	r18, 0xFB	; 251
    583c:	3f 4f       	sbci	r19, 0xFF	; 255
    583e:	8d 81       	ldd	r24, Y+5	; 0x05
    5840:	9e 81       	ldd	r25, Y+6	; 0x06
    5842:	b9 01       	movw	r22, r18
    5844:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    5848:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    584a:	89 81       	ldd	r24, Y+1	; 0x01
    584c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    5850:	8f 81       	ldd	r24, Y+7	; 0x07
    5852:	98 85       	ldd	r25, Y+8	; 0x08
    5854:	fc 01       	movw	r30, r24
    5856:	10 82       	st	Z, r1
    return (len);
    5858:	8a 81       	ldd	r24, Y+2	; 0x02
}
    585a:	28 96       	adiw	r28, 0x08	; 8
    585c:	cd bf       	out	0x3d, r28	; 61
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	cf 91       	pop	r28
    5862:	df 91       	pop	r29
    5864:	08 95       	ret

00005866 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    5866:	df 93       	push	r29
    5868:	cf 93       	push	r28
    586a:	cd b7       	in	r28, 0x3d	; 61
    586c:	de b7       	in	r29, 0x3e	; 62
    586e:	28 97       	sbiw	r28, 0x08	; 8
    5870:	cd bf       	out	0x3d, r28	; 61
    5872:	de bf       	out	0x3e, r29	; 62
    5874:	8b 83       	std	Y+3, r24	; 0x03
    5876:	9c 83       	std	Y+4, r25	; 0x04
    5878:	6d 83       	std	Y+5, r22	; 0x05
    587a:	7e 83       	std	Y+6, r23	; 0x06
    587c:	4f 83       	std	Y+7, r20	; 0x07
    587e:	58 87       	std	Y+8, r21	; 0x08
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5880:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5882:	80 91 07 2e 	lds	r24, 0x2E07
    5886:	88 23       	and	r24, r24
    5888:	31 f0       	breq	.+12     	; 0x5896 <OSFlagNameSet+0x30>
        *perr = OS_ERR_NAME_SET_ISR;
    588a:	8f 81       	ldd	r24, Y+7	; 0x07
    588c:	98 85       	ldd	r25, Y+8	; 0x08
    588e:	22 e1       	ldi	r18, 0x12	; 18
    5890:	fc 01       	movw	r30, r24
    5892:	20 83       	st	Z, r18
        return;
    5894:	33 c0       	rjmp	.+102    	; 0x58fc <OSFlagNameSet+0x96>
    }
    OS_ENTER_CRITICAL();
    5896:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    589a:	89 83       	std	Y+1, r24	; 0x01
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    589c:	8b 81       	ldd	r24, Y+3	; 0x03
    589e:	9c 81       	ldd	r25, Y+4	; 0x04
    58a0:	fc 01       	movw	r30, r24
    58a2:	80 81       	ld	r24, Z
    58a4:	85 30       	cpi	r24, 0x05	; 5
    58a6:	49 f0       	breq	.+18     	; 0x58ba <OSFlagNameSet+0x54>
        OS_EXIT_CRITICAL();
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
    58aa:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_TYPE;
    58ae:	8f 81       	ldd	r24, Y+7	; 0x07
    58b0:	98 85       	ldd	r25, Y+8	; 0x08
    58b2:	21 e0       	ldi	r18, 0x01	; 1
    58b4:	fc 01       	movw	r30, r24
    58b6:	20 83       	st	Z, r18
        return;
    58b8:	21 c0       	rjmp	.+66     	; 0x58fc <OSFlagNameSet+0x96>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    58ba:	8d 81       	ldd	r24, Y+5	; 0x05
    58bc:	9e 81       	ldd	r25, Y+6	; 0x06
    58be:	0e 94 28 27 	call	0x4e50	; 0x4e50 <OS_StrLen>
    58c2:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    58c4:	8a 81       	ldd	r24, Y+2	; 0x02
    58c6:	80 31       	cpi	r24, 0x10	; 16
    58c8:	48 f0       	brcs	.+18     	; 0x58dc <OSFlagNameSet+0x76>
        OS_EXIT_CRITICAL();
    58ca:	89 81       	ldd	r24, Y+1	; 0x01
    58cc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    58d0:	8f 81       	ldd	r24, Y+7	; 0x07
    58d2:	98 85       	ldd	r25, Y+8	; 0x08
    58d4:	23 e7       	ldi	r18, 0x73	; 115
    58d6:	fc 01       	movw	r30, r24
    58d8:	20 83       	st	Z, r18
        return;
    58da:	10 c0       	rjmp	.+32     	; 0x58fc <OSFlagNameSet+0x96>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    58dc:	8b 81       	ldd	r24, Y+3	; 0x03
    58de:	9c 81       	ldd	r25, Y+4	; 0x04
    58e0:	05 96       	adiw	r24, 0x05	; 5
    58e2:	2d 81       	ldd	r18, Y+5	; 0x05
    58e4:	3e 81       	ldd	r19, Y+6	; 0x06
    58e6:	b9 01       	movw	r22, r18
    58e8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    OS_EXIT_CRITICAL();
    58ec:	89 81       	ldd	r24, Y+1	; 0x01
    58ee:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    58f2:	8f 81       	ldd	r24, Y+7	; 0x07
    58f4:	98 85       	ldd	r25, Y+8	; 0x08
    58f6:	fc 01       	movw	r30, r24
    58f8:	10 82       	st	Z, r1
    return;
    58fa:	00 00       	nop
}
    58fc:	28 96       	adiw	r28, 0x08	; 8
    58fe:	cd bf       	out	0x3d, r28	; 61
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	cf 91       	pop	r28
    5904:	df 91       	pop	r29
    5906:	08 95       	ret

00005908 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    5908:	0f 93       	push	r16
    590a:	1f 93       	push	r17
    590c:	df 93       	push	r29
    590e:	cf 93       	push	r28
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	6a 97       	sbiw	r28, 0x1a	; 26
    5916:	cd bf       	out	0x3d, r28	; 61
    5918:	de bf       	out	0x3e, r29	; 62
    591a:	8a 8b       	std	Y+18, r24	; 0x12
    591c:	9b 8b       	std	Y+19, r25	; 0x13
    591e:	6c 8b       	std	Y+20, r22	; 0x14
    5920:	7d 8b       	std	Y+21, r23	; 0x15
    5922:	4e 8b       	std	Y+22, r20	; 0x16
    5924:	2f 8b       	std	Y+23, r18	; 0x17
    5926:	38 8f       	std	Y+24, r19	; 0x18
    5928:	09 8f       	std	Y+25, r16	; 0x19
    592a:	1a 8f       	std	Y+26, r17	; 0x1a
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    592c:	1a 82       	std	Y+2, r1	; 0x02
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    592e:	80 91 07 2e 	lds	r24, 0x2E07
    5932:	88 23       	and	r24, r24
    5934:	41 f0       	breq	.+16     	; 0x5946 <OSFlagPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    5936:	89 8d       	ldd	r24, Y+25	; 0x19
    5938:	9a 8d       	ldd	r25, Y+26	; 0x1a
    593a:	22 e0       	ldi	r18, 0x02	; 2
    593c:	fc 01       	movw	r30, r24
    593e:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	90 e0       	ldi	r25, 0x00	; 0
    5944:	fe c1       	rjmp	.+1020   	; 0x5d42 <OSFlagPend+0x43a>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    5946:	80 91 fa 27 	lds	r24, 0x27FA
    594a:	88 23       	and	r24, r24
    594c:	41 f0       	breq	.+16     	; 0x595e <OSFlagPend+0x56>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    594e:	89 8d       	ldd	r24, Y+25	; 0x19
    5950:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5952:	2d e0       	ldi	r18, 0x0D	; 13
    5954:	fc 01       	movw	r30, r24
    5956:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    5958:	80 e0       	ldi	r24, 0x00	; 0
    595a:	90 e0       	ldi	r25, 0x00	; 0
    595c:	f2 c1       	rjmp	.+996    	; 0x5d42 <OSFlagPend+0x43a>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    595e:	8a 89       	ldd	r24, Y+18	; 0x12
    5960:	9b 89       	ldd	r25, Y+19	; 0x13
    5962:	fc 01       	movw	r30, r24
    5964:	80 81       	ld	r24, Z
    5966:	85 30       	cpi	r24, 0x05	; 5
    5968:	41 f0       	breq	.+16     	; 0x597a <OSFlagPend+0x72>
        *perr = OS_ERR_EVENT_TYPE;
    596a:	89 8d       	ldd	r24, Y+25	; 0x19
    596c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    596e:	21 e0       	ldi	r18, 0x01	; 1
    5970:	fc 01       	movw	r30, r24
    5972:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    5974:	80 e0       	ldi	r24, 0x00	; 0
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	e4 c1       	rjmp	.+968    	; 0x5d42 <OSFlagPend+0x43a>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    597a:	8e 89       	ldd	r24, Y+22	; 0x16
    597c:	80 78       	andi	r24, 0x80	; 128
    597e:	8b 83       	std	Y+3, r24	; 0x03
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    5980:	8b 81       	ldd	r24, Y+3	; 0x03
    5982:	88 23       	and	r24, r24
    5984:	31 f0       	breq	.+12     	; 0x5992 <OSFlagPend+0x8a>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    5986:	8e 89       	ldd	r24, Y+22	; 0x16
    5988:	8f 77       	andi	r24, 0x7F	; 127
    598a:	8e 8b       	std	Y+22, r24	; 0x16
        consume    = OS_TRUE;
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	89 83       	std	Y+1, r24	; 0x01
    5990:	01 c0       	rjmp	.+2      	; 0x5994 <OSFlagPend+0x8c>
    } else {
        consume    = OS_FALSE;
    5992:	19 82       	std	Y+1, r1	; 0x01
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    5994:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5998:	8a 83       	std	Y+2, r24	; 0x02
    switch (wait_type) {
    599a:	8e 89       	ldd	r24, Y+22	; 0x16
    599c:	88 2f       	mov	r24, r24
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	81 30       	cpi	r24, 0x01	; 1
    59a2:	91 05       	cpc	r25, r1
    59a4:	09 f4       	brne	.+2      	; 0x59a8 <OSFlagPend+0xa0>
    59a6:	ee c0       	rjmp	.+476    	; 0x5b84 <OSFlagPend+0x27c>
    59a8:	82 30       	cpi	r24, 0x02	; 2
    59aa:	91 05       	cpc	r25, r1
    59ac:	24 f4       	brge	.+8      	; 0x59b6 <OSFlagPend+0xae>
    59ae:	00 97       	sbiw	r24, 0x00	; 0
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <OSFlagPend+0xac>
    59b2:	9c c0       	rjmp	.+312    	; 0x5aec <OSFlagPend+0x1e4>
    59b4:	30 c1       	rjmp	.+608    	; 0x5c16 <OSFlagPend+0x30e>
    59b6:	82 30       	cpi	r24, 0x02	; 2
    59b8:	91 05       	cpc	r25, r1
    59ba:	29 f0       	breq	.+10     	; 0x59c6 <OSFlagPend+0xbe>
    59bc:	83 30       	cpi	r24, 0x03	; 3
    59be:	91 05       	cpc	r25, r1
    59c0:	09 f4       	brne	.+2      	; 0x59c4 <OSFlagPend+0xbc>
    59c2:	4c c0       	rjmp	.+152    	; 0x5a5c <OSFlagPend+0x154>
    59c4:	28 c1       	rjmp	.+592    	; 0x5c16 <OSFlagPend+0x30e>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    59c6:	8a 89       	ldd	r24, Y+18	; 0x12
    59c8:	9b 89       	ldd	r25, Y+19	; 0x13
    59ca:	fc 01       	movw	r30, r24
    59cc:	23 81       	ldd	r18, Z+3	; 0x03
    59ce:	34 81       	ldd	r19, Z+4	; 0x04
    59d0:	8c 89       	ldd	r24, Y+20	; 0x14
    59d2:	9d 89       	ldd	r25, Y+21	; 0x15
    59d4:	82 23       	and	r24, r18
    59d6:	93 23       	and	r25, r19
    59d8:	8c 83       	std	Y+4, r24	; 0x04
    59da:	9d 83       	std	Y+5, r25	; 0x05
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    59dc:	2c 81       	ldd	r18, Y+4	; 0x04
    59de:	3d 81       	ldd	r19, Y+5	; 0x05
    59e0:	8c 89       	ldd	r24, Y+20	; 0x14
    59e2:	9d 89       	ldd	r25, Y+21	; 0x15
    59e4:	28 17       	cp	r18, r24
    59e6:	39 07       	cpc	r19, r25
    59e8:	31 f5       	brne	.+76     	; 0x5a36 <OSFlagPend+0x12e>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    59ea:	89 81       	ldd	r24, Y+1	; 0x01
    59ec:	81 30       	cpi	r24, 0x01	; 1
    59ee:	81 f4       	brne	.+32     	; 0x5a10 <OSFlagPend+0x108>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    59f0:	8a 89       	ldd	r24, Y+18	; 0x12
    59f2:	9b 89       	ldd	r25, Y+19	; 0x13
    59f4:	fc 01       	movw	r30, r24
    59f6:	23 81       	ldd	r18, Z+3	; 0x03
    59f8:	34 81       	ldd	r19, Z+4	; 0x04
    59fa:	8c 81       	ldd	r24, Y+4	; 0x04
    59fc:	9d 81       	ldd	r25, Y+5	; 0x05
    59fe:	80 95       	com	r24
    5a00:	90 95       	com	r25
    5a02:	28 23       	and	r18, r24
    5a04:	39 23       	and	r19, r25
    5a06:	8a 89       	ldd	r24, Y+18	; 0x12
    5a08:	9b 89       	ldd	r25, Y+19	; 0x13
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	23 83       	std	Z+3, r18	; 0x03
    5a0e:	34 83       	std	Z+4, r19	; 0x04
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5a10:	80 91 08 2e 	lds	r24, 0x2E08
    5a14:	90 91 09 2e 	lds	r25, 0x2E09
    5a18:	2c 81       	ldd	r18, Y+4	; 0x04
    5a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    5a1c:	fc 01       	movw	r30, r24
    5a1e:	22 8f       	std	Z+26, r18	; 0x1a
    5a20:	33 8f       	std	Z+27, r19	; 0x1b
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    5a22:	8a 81       	ldd	r24, Y+2	; 0x02
    5a24:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
    5a28:	89 8d       	ldd	r24, Y+25	; 0x19
    5a2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5a2c:	fc 01       	movw	r30, r24
    5a2e:	10 82       	st	Z, r1
                 return (flags_rdy);
    5a30:	8c 81       	ldd	r24, Y+4	; 0x04
    5a32:	9d 81       	ldd	r25, Y+5	; 0x05
    5a34:	86 c1       	rjmp	.+780    	; 0x5d42 <OSFlagPend+0x43a>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5a36:	8a 89       	ldd	r24, Y+18	; 0x12
    5a38:	9b 89       	ldd	r25, Y+19	; 0x13
    5a3a:	ae 01       	movw	r20, r28
    5a3c:	49 5f       	subi	r20, 0xF9	; 249
    5a3e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a40:	2c 89       	ldd	r18, Y+20	; 0x14
    5a42:	3d 89       	ldd	r19, Y+21	; 0x15
    5a44:	ef 89       	ldd	r30, Y+23	; 0x17
    5a46:	f8 8d       	ldd	r31, Y+24	; 0x18
    5a48:	ba 01       	movw	r22, r20
    5a4a:	a9 01       	movw	r20, r18
    5a4c:	2e 89       	ldd	r18, Y+22	; 0x16
    5a4e:	8f 01       	movw	r16, r30
    5a50:	0e 94 4c 30 	call	0x6098	; 0x6098 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
    5a54:	8a 81       	ldd	r24, Y+2	; 0x02
    5a56:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             }
             break;
    5a5a:	ea c0       	rjmp	.+468    	; 0x5c30 <OSFlagPend+0x328>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    5a5c:	8a 89       	ldd	r24, Y+18	; 0x12
    5a5e:	9b 89       	ldd	r25, Y+19	; 0x13
    5a60:	fc 01       	movw	r30, r24
    5a62:	23 81       	ldd	r18, Z+3	; 0x03
    5a64:	34 81       	ldd	r19, Z+4	; 0x04
    5a66:	8c 89       	ldd	r24, Y+20	; 0x14
    5a68:	9d 89       	ldd	r25, Y+21	; 0x15
    5a6a:	82 23       	and	r24, r18
    5a6c:	93 23       	and	r25, r19
    5a6e:	8c 83       	std	Y+4, r24	; 0x04
    5a70:	9d 83       	std	Y+5, r25	; 0x05
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5a72:	8c 81       	ldd	r24, Y+4	; 0x04
    5a74:	9d 81       	ldd	r25, Y+5	; 0x05
    5a76:	00 97       	sbiw	r24, 0x00	; 0
    5a78:	31 f1       	breq	.+76     	; 0x5ac6 <OSFlagPend+0x1be>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5a7a:	89 81       	ldd	r24, Y+1	; 0x01
    5a7c:	81 30       	cpi	r24, 0x01	; 1
    5a7e:	81 f4       	brne	.+32     	; 0x5aa0 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5a80:	8a 89       	ldd	r24, Y+18	; 0x12
    5a82:	9b 89       	ldd	r25, Y+19	; 0x13
    5a84:	fc 01       	movw	r30, r24
    5a86:	23 81       	ldd	r18, Z+3	; 0x03
    5a88:	34 81       	ldd	r19, Z+4	; 0x04
    5a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a8e:	80 95       	com	r24
    5a90:	90 95       	com	r25
    5a92:	28 23       	and	r18, r24
    5a94:	39 23       	and	r19, r25
    5a96:	8a 89       	ldd	r24, Y+18	; 0x12
    5a98:	9b 89       	ldd	r25, Y+19	; 0x13
    5a9a:	fc 01       	movw	r30, r24
    5a9c:	23 83       	std	Z+3, r18	; 0x03
    5a9e:	34 83       	std	Z+4, r19	; 0x04
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5aa0:	80 91 08 2e 	lds	r24, 0x2E08
    5aa4:	90 91 09 2e 	lds	r25, 0x2E09
    5aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    5aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    5aac:	fc 01       	movw	r30, r24
    5aae:	22 8f       	std	Z+26, r18	; 0x1a
    5ab0:	33 8f       	std	Z+27, r19	; 0x1b
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    5ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
    5ab8:	89 8d       	ldd	r24, Y+25	; 0x19
    5aba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5abc:	fc 01       	movw	r30, r24
    5abe:	10 82       	st	Z, r1
                 return (flags_rdy);
    5ac0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ac2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ac4:	3e c1       	rjmp	.+636    	; 0x5d42 <OSFlagPend+0x43a>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5ac6:	8a 89       	ldd	r24, Y+18	; 0x12
    5ac8:	9b 89       	ldd	r25, Y+19	; 0x13
    5aca:	ae 01       	movw	r20, r28
    5acc:	49 5f       	subi	r20, 0xF9	; 249
    5ace:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad0:	2c 89       	ldd	r18, Y+20	; 0x14
    5ad2:	3d 89       	ldd	r19, Y+21	; 0x15
    5ad4:	ef 89       	ldd	r30, Y+23	; 0x17
    5ad6:	f8 8d       	ldd	r31, Y+24	; 0x18
    5ad8:	ba 01       	movw	r22, r20
    5ada:	a9 01       	movw	r20, r18
    5adc:	2e 89       	ldd	r18, Y+22	; 0x16
    5ade:	8f 01       	movw	r16, r30
    5ae0:	0e 94 4c 30 	call	0x6098	; 0x6098 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
    5ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             }
             break;
    5aea:	a2 c0       	rjmp	.+324    	; 0x5c30 <OSFlagPend+0x328>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    5aec:	8a 89       	ldd	r24, Y+18	; 0x12
    5aee:	9b 89       	ldd	r25, Y+19	; 0x13
    5af0:	fc 01       	movw	r30, r24
    5af2:	83 81       	ldd	r24, Z+3	; 0x03
    5af4:	94 81       	ldd	r25, Z+4	; 0x04
    5af6:	9c 01       	movw	r18, r24
    5af8:	20 95       	com	r18
    5afa:	30 95       	com	r19
    5afc:	8c 89       	ldd	r24, Y+20	; 0x14
    5afe:	9d 89       	ldd	r25, Y+21	; 0x15
    5b00:	82 23       	and	r24, r18
    5b02:	93 23       	and	r25, r19
    5b04:	8c 83       	std	Y+4, r24	; 0x04
    5b06:	9d 83       	std	Y+5, r25	; 0x05
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5b08:	2c 81       	ldd	r18, Y+4	; 0x04
    5b0a:	3d 81       	ldd	r19, Y+5	; 0x05
    5b0c:	8c 89       	ldd	r24, Y+20	; 0x14
    5b0e:	9d 89       	ldd	r25, Y+21	; 0x15
    5b10:	28 17       	cp	r18, r24
    5b12:	39 07       	cpc	r19, r25
    5b14:	21 f5       	brne	.+72     	; 0x5b5e <OSFlagPend+0x256>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	81 30       	cpi	r24, 0x01	; 1
    5b1a:	71 f4       	brne	.+28     	; 0x5b38 <OSFlagPend+0x230>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    5b1c:	8a 89       	ldd	r24, Y+18	; 0x12
    5b1e:	9b 89       	ldd	r25, Y+19	; 0x13
    5b20:	fc 01       	movw	r30, r24
    5b22:	23 81       	ldd	r18, Z+3	; 0x03
    5b24:	34 81       	ldd	r19, Z+4	; 0x04
    5b26:	8c 81       	ldd	r24, Y+4	; 0x04
    5b28:	9d 81       	ldd	r25, Y+5	; 0x05
    5b2a:	28 2b       	or	r18, r24
    5b2c:	39 2b       	or	r19, r25
    5b2e:	8a 89       	ldd	r24, Y+18	; 0x12
    5b30:	9b 89       	ldd	r25, Y+19	; 0x13
    5b32:	fc 01       	movw	r30, r24
    5b34:	23 83       	std	Z+3, r18	; 0x03
    5b36:	34 83       	std	Z+4, r19	; 0x04
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5b38:	80 91 08 2e 	lds	r24, 0x2E08
    5b3c:	90 91 09 2e 	lds	r25, 0x2E09
    5b40:	2c 81       	ldd	r18, Y+4	; 0x04
    5b42:	3d 81       	ldd	r19, Y+5	; 0x05
    5b44:	fc 01       	movw	r30, r24
    5b46:	22 8f       	std	Z+26, r18	; 0x1a
    5b48:	33 8f       	std	Z+27, r19	; 0x1b
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    5b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b4c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
    5b50:	89 8d       	ldd	r24, Y+25	; 0x19
    5b52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5b54:	fc 01       	movw	r30, r24
    5b56:	10 82       	st	Z, r1
                 return (flags_rdy);
    5b58:	8c 81       	ldd	r24, Y+4	; 0x04
    5b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b5c:	f2 c0       	rjmp	.+484    	; 0x5d42 <OSFlagPend+0x43a>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5b5e:	8a 89       	ldd	r24, Y+18	; 0x12
    5b60:	9b 89       	ldd	r25, Y+19	; 0x13
    5b62:	ae 01       	movw	r20, r28
    5b64:	49 5f       	subi	r20, 0xF9	; 249
    5b66:	5f 4f       	sbci	r21, 0xFF	; 255
    5b68:	2c 89       	ldd	r18, Y+20	; 0x14
    5b6a:	3d 89       	ldd	r19, Y+21	; 0x15
    5b6c:	ef 89       	ldd	r30, Y+23	; 0x17
    5b6e:	f8 8d       	ldd	r31, Y+24	; 0x18
    5b70:	ba 01       	movw	r22, r20
    5b72:	a9 01       	movw	r20, r18
    5b74:	2e 89       	ldd	r18, Y+22	; 0x16
    5b76:	8f 01       	movw	r16, r30
    5b78:	0e 94 4c 30 	call	0x6098	; 0x6098 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
    5b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             }
             break;
    5b82:	56 c0       	rjmp	.+172    	; 0x5c30 <OSFlagPend+0x328>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5b84:	8a 89       	ldd	r24, Y+18	; 0x12
    5b86:	9b 89       	ldd	r25, Y+19	; 0x13
    5b88:	fc 01       	movw	r30, r24
    5b8a:	83 81       	ldd	r24, Z+3	; 0x03
    5b8c:	94 81       	ldd	r25, Z+4	; 0x04
    5b8e:	9c 01       	movw	r18, r24
    5b90:	20 95       	com	r18
    5b92:	30 95       	com	r19
    5b94:	8c 89       	ldd	r24, Y+20	; 0x14
    5b96:	9d 89       	ldd	r25, Y+21	; 0x15
    5b98:	82 23       	and	r24, r18
    5b9a:	93 23       	and	r25, r19
    5b9c:	8c 83       	std	Y+4, r24	; 0x04
    5b9e:	9d 83       	std	Y+5, r25	; 0x05
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ba4:	00 97       	sbiw	r24, 0x00	; 0
    5ba6:	21 f1       	breq	.+72     	; 0x5bf0 <OSFlagPend+0x2e8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	81 30       	cpi	r24, 0x01	; 1
    5bac:	71 f4       	brne	.+28     	; 0x5bca <OSFlagPend+0x2c2>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5bae:	8a 89       	ldd	r24, Y+18	; 0x12
    5bb0:	9b 89       	ldd	r25, Y+19	; 0x13
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	23 81       	ldd	r18, Z+3	; 0x03
    5bb6:	34 81       	ldd	r19, Z+4	; 0x04
    5bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    5bba:	9d 81       	ldd	r25, Y+5	; 0x05
    5bbc:	28 2b       	or	r18, r24
    5bbe:	39 2b       	or	r19, r25
    5bc0:	8a 89       	ldd	r24, Y+18	; 0x12
    5bc2:	9b 89       	ldd	r25, Y+19	; 0x13
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	23 83       	std	Z+3, r18	; 0x03
    5bc8:	34 83       	std	Z+4, r19	; 0x04
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5bca:	80 91 08 2e 	lds	r24, 0x2E08
    5bce:	90 91 09 2e 	lds	r25, 0x2E09
    5bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    5bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    5bd6:	fc 01       	movw	r30, r24
    5bd8:	22 8f       	std	Z+26, r18	; 0x1a
    5bda:	33 8f       	std	Z+27, r19	; 0x1b
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
    5bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    5bde:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                   = OS_ERR_NONE;
    5be2:	89 8d       	ldd	r24, Y+25	; 0x19
    5be4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5be6:	fc 01       	movw	r30, r24
    5be8:	10 82       	st	Z, r1
                 return (flags_rdy);
    5bea:	8c 81       	ldd	r24, Y+4	; 0x04
    5bec:	9d 81       	ldd	r25, Y+5	; 0x05
    5bee:	a9 c0       	rjmp	.+338    	; 0x5d42 <OSFlagPend+0x43a>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5bf0:	8a 89       	ldd	r24, Y+18	; 0x12
    5bf2:	9b 89       	ldd	r25, Y+19	; 0x13
    5bf4:	ae 01       	movw	r20, r28
    5bf6:	49 5f       	subi	r20, 0xF9	; 249
    5bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bfa:	2c 89       	ldd	r18, Y+20	; 0x14
    5bfc:	3d 89       	ldd	r19, Y+21	; 0x15
    5bfe:	ef 89       	ldd	r30, Y+23	; 0x17
    5c00:	f8 8d       	ldd	r31, Y+24	; 0x18
    5c02:	ba 01       	movw	r22, r20
    5c04:	a9 01       	movw	r20, r18
    5c06:	2e 89       	ldd	r18, Y+22	; 0x16
    5c08:	8f 01       	movw	r16, r30
    5c0a:	0e 94 4c 30 	call	0x6098	; 0x6098 <OS_FlagBlock>
                 OS_EXIT_CRITICAL();
    5c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    5c10:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             }
             break;
    5c14:	0d c0       	rjmp	.+26     	; 0x5c30 <OSFlagPend+0x328>
#endif

        default:
             OS_EXIT_CRITICAL();
    5c16:	8a 81       	ldd	r24, Y+2	; 0x02
    5c18:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             flags_rdy = (OS_FLAGS)0;
    5c1c:	1c 82       	std	Y+4, r1	; 0x04
    5c1e:	1d 82       	std	Y+5, r1	; 0x05
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    5c20:	89 8d       	ldd	r24, Y+25	; 0x19
    5c22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c24:	2f e6       	ldi	r18, 0x6F	; 111
    5c26:	fc 01       	movw	r30, r24
    5c28:	20 83       	st	Z, r18
             return (flags_rdy);
    5c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    5c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    5c2e:	89 c0       	rjmp	.+274    	; 0x5d42 <OSFlagPend+0x43a>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    5c30:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    5c34:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5c38:	8a 83       	std	Y+2, r24	; 0x02
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    5c3a:	80 91 08 2e 	lds	r24, 0x2E08
    5c3e:	90 91 09 2e 	lds	r25, 0x2E09
    5c42:	fc 01       	movw	r30, r24
    5c44:	87 8d       	ldd	r24, Z+31	; 0x1f
    5c46:	88 23       	and	r24, r24
    5c48:	89 f1       	breq	.+98     	; 0x5cac <OSFlagPend+0x3a4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    5c4a:	80 91 08 2e 	lds	r24, 0x2E08
    5c4e:	90 91 09 2e 	lds	r25, 0x2E09
    5c52:	fc 01       	movw	r30, r24
    5c54:	87 8d       	ldd	r24, Z+31	; 0x1f
    5c56:	8e 83       	std	Y+6, r24	; 0x06
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5c58:	80 91 08 2e 	lds	r24, 0x2E08
    5c5c:	90 91 09 2e 	lds	r25, 0x2E09
    5c60:	fc 01       	movw	r30, r24
    5c62:	17 8e       	std	Z+31, r1	; 0x1f
        OS_FlagUnlink(&node);
    5c64:	ce 01       	movw	r24, r28
    5c66:	07 96       	adiw	r24, 0x07	; 7
    5c68:	0e 94 c3 31 	call	0x6386	; 0x6386 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    5c6c:	80 91 08 2e 	lds	r24, 0x2E08
    5c70:	90 91 09 2e 	lds	r25, 0x2E09
    5c74:	fc 01       	movw	r30, r24
    5c76:	16 8e       	std	Z+30, r1	; 0x1e
        OS_EXIT_CRITICAL();
    5c78:	8a 81       	ldd	r24, Y+2	; 0x02
    5c7a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        flags_rdy                = (OS_FLAGS)0;
    5c7e:	1c 82       	std	Y+4, r1	; 0x04
    5c80:	1d 82       	std	Y+5, r1	; 0x05
        switch (pend_stat) {
    5c82:	8e 81       	ldd	r24, Y+6	; 0x06
    5c84:	88 2f       	mov	r24, r24
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	82 30       	cpi	r24, 0x02	; 2
    5c8a:	91 05       	cpc	r25, r1
    5c8c:	31 f4       	brne	.+12     	; 0x5c9a <OSFlagPend+0x392>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    5c8e:	89 8d       	ldd	r24, Y+25	; 0x19
    5c90:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c92:	2e e0       	ldi	r18, 0x0E	; 14
    5c94:	fc 01       	movw	r30, r24
    5c96:	20 83       	st	Z, r18
                 break;
    5c98:	06 c0       	rjmp	.+12     	; 0x5ca6 <OSFlagPend+0x39e>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    5c9a:	89 8d       	ldd	r24, Y+25	; 0x19
    5c9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5c9e:	2a e0       	ldi	r18, 0x0A	; 10
    5ca0:	fc 01       	movw	r30, r24
    5ca2:	20 83       	st	Z, r18
                 break;
    5ca4:	00 00       	nop
        }
        return (flags_rdy);
    5ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    5ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    5caa:	4b c0       	rjmp	.+150    	; 0x5d42 <OSFlagPend+0x43a>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    5cac:	80 91 08 2e 	lds	r24, 0x2E08
    5cb0:	90 91 09 2e 	lds	r25, 0x2E09
    5cb4:	fc 01       	movw	r30, r24
    5cb6:	82 8d       	ldd	r24, Z+26	; 0x1a
    5cb8:	93 8d       	ldd	r25, Z+27	; 0x1b
    5cba:	8c 83       	std	Y+4, r24	; 0x04
    5cbc:	9d 83       	std	Y+5, r25	; 0x05
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    5cbe:	89 81       	ldd	r24, Y+1	; 0x01
    5cc0:	81 30       	cpi	r24, 0x01	; 1
    5cc2:	b1 f5       	brne	.+108    	; 0x5d30 <OSFlagPend+0x428>
        switch (wait_type) {
    5cc4:	8e 89       	ldd	r24, Y+22	; 0x16
    5cc6:	88 2f       	mov	r24, r24
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	99 23       	and	r25, r25
    5ccc:	34 f1       	brlt	.+76     	; 0x5d1a <OSFlagPend+0x412>
    5cce:	82 30       	cpi	r24, 0x02	; 2
    5cd0:	91 05       	cpc	r25, r1
    5cd2:	a4 f0       	brlt	.+40     	; 0x5cfc <OSFlagPend+0x3f4>
    5cd4:	84 30       	cpi	r24, 0x04	; 4
    5cd6:	91 05       	cpc	r25, r1
    5cd8:	04 f5       	brge	.+64     	; 0x5d1a <OSFlagPend+0x412>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    5cda:	8a 89       	ldd	r24, Y+18	; 0x12
    5cdc:	9b 89       	ldd	r25, Y+19	; 0x13
    5cde:	fc 01       	movw	r30, r24
    5ce0:	23 81       	ldd	r18, Z+3	; 0x03
    5ce2:	34 81       	ldd	r19, Z+4	; 0x04
    5ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    5ce8:	80 95       	com	r24
    5cea:	90 95       	com	r25
    5cec:	28 23       	and	r18, r24
    5cee:	39 23       	and	r19, r25
    5cf0:	8a 89       	ldd	r24, Y+18	; 0x12
    5cf2:	9b 89       	ldd	r25, Y+19	; 0x13
    5cf4:	fc 01       	movw	r30, r24
    5cf6:	23 83       	std	Z+3, r18	; 0x03
    5cf8:	34 83       	std	Z+4, r19	; 0x04
                 break;
    5cfa:	1a c0       	rjmp	.+52     	; 0x5d30 <OSFlagPend+0x428>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    5cfc:	8a 89       	ldd	r24, Y+18	; 0x12
    5cfe:	9b 89       	ldd	r25, Y+19	; 0x13
    5d00:	fc 01       	movw	r30, r24
    5d02:	23 81       	ldd	r18, Z+3	; 0x03
    5d04:	34 81       	ldd	r19, Z+4	; 0x04
    5d06:	8c 81       	ldd	r24, Y+4	; 0x04
    5d08:	9d 81       	ldd	r25, Y+5	; 0x05
    5d0a:	28 2b       	or	r18, r24
    5d0c:	39 2b       	or	r19, r25
    5d0e:	8a 89       	ldd	r24, Y+18	; 0x12
    5d10:	9b 89       	ldd	r25, Y+19	; 0x13
    5d12:	fc 01       	movw	r30, r24
    5d14:	23 83       	std	Z+3, r18	; 0x03
    5d16:	34 83       	std	Z+4, r19	; 0x04
                 break;
    5d18:	0b c0       	rjmp	.+22     	; 0x5d30 <OSFlagPend+0x428>
#endif
            default:
                 OS_EXIT_CRITICAL();
    5d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d1c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    5d20:	89 8d       	ldd	r24, Y+25	; 0x19
    5d22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d24:	2f e6       	ldi	r18, 0x6F	; 111
    5d26:	fc 01       	movw	r30, r24
    5d28:	20 83       	st	Z, r18
                 return ((OS_FLAGS)0);
    5d2a:	80 e0       	ldi	r24, 0x00	; 0
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	09 c0       	rjmp	.+18     	; 0x5d42 <OSFlagPend+0x43a>
        }
    }
    OS_EXIT_CRITICAL();
    5d30:	8a 81       	ldd	r24, Y+2	; 0x02
    5d32:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    5d36:	89 8d       	ldd	r24, Y+25	; 0x19
    5d38:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d3a:	fc 01       	movw	r30, r24
    5d3c:	10 82       	st	Z, r1
    return (flags_rdy);
    5d3e:	8c 81       	ldd	r24, Y+4	; 0x04
    5d40:	9d 81       	ldd	r25, Y+5	; 0x05
}
    5d42:	6a 96       	adiw	r28, 0x1a	; 26
    5d44:	cd bf       	out	0x3d, r28	; 61
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	cf 91       	pop	r28
    5d4a:	df 91       	pop	r29
    5d4c:	1f 91       	pop	r17
    5d4e:	0f 91       	pop	r16
    5d50:	08 95       	ret

00005d52 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    5d52:	df 93       	push	r29
    5d54:	cf 93       	push	r28
    5d56:	00 d0       	rcall	.+0      	; 0x5d58 <OSFlagPendGetFlagsRdy+0x6>
    5d58:	cd b7       	in	r28, 0x3d	; 61
    5d5a:	de b7       	in	r29, 0x3e	; 62
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5d5c:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    5d5e:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5d62:	89 83       	std	Y+1, r24	; 0x01
    flags = OSTCBCur->OSTCBFlagsRdy;
    5d64:	80 91 08 2e 	lds	r24, 0x2E08
    5d68:	90 91 09 2e 	lds	r25, 0x2E09
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d70:	93 8d       	ldd	r25, Z+27	; 0x1b
    5d72:	8a 83       	std	Y+2, r24	; 0x02
    5d74:	9b 83       	std	Y+3, r25	; 0x03
    OS_EXIT_CRITICAL();
    5d76:	89 81       	ldd	r24, Y+1	; 0x01
    5d78:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (flags);
    5d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d7e:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5d80:	23 96       	adiw	r28, 0x03	; 3
    5d82:	cd bf       	out	0x3d, r28	; 61
    5d84:	de bf       	out	0x3e, r29	; 62
    5d86:	cf 91       	pop	r28
    5d88:	df 91       	pop	r29
    5d8a:	08 95       	ret

00005d8c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    5d8c:	df 93       	push	r29
    5d8e:	cf 93       	push	r28
    5d90:	cd b7       	in	r28, 0x3d	; 61
    5d92:	de b7       	in	r29, 0x3e	; 62
    5d94:	60 97       	sbiw	r28, 0x10	; 16
    5d96:	cd bf       	out	0x3d, r28	; 61
    5d98:	de bf       	out	0x3e, r29	; 62
    5d9a:	8a 87       	std	Y+10, r24	; 0x0a
    5d9c:	9b 87       	std	Y+11, r25	; 0x0b
    5d9e:	6c 87       	std	Y+12, r22	; 0x0c
    5da0:	7d 87       	std	Y+13, r23	; 0x0d
    5da2:	4e 87       	std	Y+14, r20	; 0x0e
    5da4:	2f 87       	std	Y+15, r18	; 0x0f
    5da6:	38 8b       	std	Y+16, r19	; 0x10
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    5da8:	1c 82       	std	Y+4, r1	; 0x04
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    5daa:	8a 85       	ldd	r24, Y+10	; 0x0a
    5dac:	9b 85       	ldd	r25, Y+11	; 0x0b
    5dae:	fc 01       	movw	r30, r24
    5db0:	80 81       	ld	r24, Z
    5db2:	85 30       	cpi	r24, 0x05	; 5
    5db4:	41 f0       	breq	.+16     	; 0x5dc6 <OSFlagPost+0x3a>
        *perr = OS_ERR_EVENT_TYPE;
    5db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5db8:	98 89       	ldd	r25, Y+16	; 0x10
    5dba:	21 e0       	ldi	r18, 0x01	; 1
    5dbc:	fc 01       	movw	r30, r24
    5dbe:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    5dc0:	80 e0       	ldi	r24, 0x00	; 0
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	30 c1       	rjmp	.+608    	; 0x6026 <OSFlagPost+0x29a>
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    5dc6:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    5dca:	8c 83       	std	Y+4, r24	; 0x04
    switch (opt) {
    5dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
    5dce:	88 2f       	mov	r24, r24
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	00 97       	sbiw	r24, 0x00	; 0
    5dd4:	21 f0       	breq	.+8      	; 0x5dde <OSFlagPost+0x52>
    5dd6:	81 30       	cpi	r24, 0x01	; 1
    5dd8:	91 05       	cpc	r25, r1
    5dda:	91 f0       	breq	.+36     	; 0x5e00 <OSFlagPost+0x74>
    5ddc:	20 c0       	rjmp	.+64     	; 0x5e1e <OSFlagPost+0x92>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    5dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    5de0:	9b 85       	ldd	r25, Y+11	; 0x0b
    5de2:	fc 01       	movw	r30, r24
    5de4:	23 81       	ldd	r18, Z+3	; 0x03
    5de6:	34 81       	ldd	r19, Z+4	; 0x04
    5de8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5dea:	9d 85       	ldd	r25, Y+13	; 0x0d
    5dec:	80 95       	com	r24
    5dee:	90 95       	com	r25
    5df0:	28 23       	and	r18, r24
    5df2:	39 23       	and	r19, r25
    5df4:	8a 85       	ldd	r24, Y+10	; 0x0a
    5df6:	9b 85       	ldd	r25, Y+11	; 0x0b
    5df8:	fc 01       	movw	r30, r24
    5dfa:	23 83       	std	Z+3, r18	; 0x03
    5dfc:	34 83       	std	Z+4, r19	; 0x04
             break;
    5dfe:	1a c0       	rjmp	.+52     	; 0x5e34 <OSFlagPost+0xa8>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    5e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e02:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e04:	fc 01       	movw	r30, r24
    5e06:	23 81       	ldd	r18, Z+3	; 0x03
    5e08:	34 81       	ldd	r19, Z+4	; 0x04
    5e0a:	8c 85       	ldd	r24, Y+12	; 0x0c
    5e0c:	9d 85       	ldd	r25, Y+13	; 0x0d
    5e0e:	28 2b       	or	r18, r24
    5e10:	39 2b       	or	r19, r25
    5e12:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e14:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e16:	fc 01       	movw	r30, r24
    5e18:	23 83       	std	Z+3, r18	; 0x03
    5e1a:	34 83       	std	Z+4, r19	; 0x04
             break;
    5e1c:	0b c0       	rjmp	.+22     	; 0x5e34 <OSFlagPost+0xa8>

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
    5e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    5e20:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr = OS_ERR_FLAG_INVALID_OPT;
    5e24:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e26:	98 89       	ldd	r25, Y+16	; 0x10
    5e28:	21 e7       	ldi	r18, 0x71	; 113
    5e2a:	fc 01       	movw	r30, r24
    5e2c:	20 83       	st	Z, r18
             return ((OS_FLAGS)0);
    5e2e:	80 e0       	ldi	r24, 0x00	; 0
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	f9 c0       	rjmp	.+498    	; 0x6026 <OSFlagPost+0x29a>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    5e34:	1b 82       	std	Y+3, r1	; 0x03
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e38:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e3a:	fc 01       	movw	r30, r24
    5e3c:	81 81       	ldd	r24, Z+1	; 0x01
    5e3e:	92 81       	ldd	r25, Z+2	; 0x02
    5e40:	89 83       	std	Y+1, r24	; 0x01
    5e42:	9a 83       	std	Y+2, r25	; 0x02
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    5e44:	d0 c0       	rjmp	.+416    	; 0x5fe6 <OSFlagPost+0x25a>
        switch (pnode->OSFlagNodeWaitType) {
    5e46:	89 81       	ldd	r24, Y+1	; 0x01
    5e48:	9a 81       	ldd	r25, Y+2	; 0x02
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	82 85       	ldd	r24, Z+10	; 0x0a
    5e4e:	88 2f       	mov	r24, r24
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	81 30       	cpi	r24, 0x01	; 1
    5e54:	91 05       	cpc	r25, r1
    5e56:	09 f4       	brne	.+2      	; 0x5e5a <OSFlagPost+0xce>
    5e58:	82 c0       	rjmp	.+260    	; 0x5f5e <OSFlagPost+0x1d2>
    5e5a:	82 30       	cpi	r24, 0x02	; 2
    5e5c:	91 05       	cpc	r25, r1
    5e5e:	24 f4       	brge	.+8      	; 0x5e68 <OSFlagPost+0xdc>
    5e60:	00 97       	sbiw	r24, 0x00	; 0
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <OSFlagPost+0xda>
    5e64:	52 c0       	rjmp	.+164    	; 0x5f0a <OSFlagPost+0x17e>
    5e66:	9e c0       	rjmp	.+316    	; 0x5fa4 <OSFlagPost+0x218>
    5e68:	82 30       	cpi	r24, 0x02	; 2
    5e6a:	91 05       	cpc	r25, r1
    5e6c:	21 f0       	breq	.+8      	; 0x5e76 <OSFlagPost+0xea>
    5e6e:	83 30       	cpi	r24, 0x03	; 3
    5e70:	91 05       	cpc	r25, r1
    5e72:	49 f1       	breq	.+82     	; 0x5ec6 <OSFlagPost+0x13a>
    5e74:	97 c0       	rjmp	.+302    	; 0x5fa4 <OSFlagPost+0x218>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5e76:	8a 85       	ldd	r24, Y+10	; 0x0a
    5e78:	9b 85       	ldd	r25, Y+11	; 0x0b
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	23 81       	ldd	r18, Z+3	; 0x03
    5e7e:	34 81       	ldd	r19, Z+4	; 0x04
    5e80:	89 81       	ldd	r24, Y+1	; 0x01
    5e82:	9a 81       	ldd	r25, Y+2	; 0x02
    5e84:	fc 01       	movw	r30, r24
    5e86:	80 85       	ldd	r24, Z+8	; 0x08
    5e88:	91 85       	ldd	r25, Z+9	; 0x09
    5e8a:	82 23       	and	r24, r18
    5e8c:	93 23       	and	r25, r19
    5e8e:	8d 83       	std	Y+5, r24	; 0x05
    5e90:	9e 83       	std	Y+6, r25	; 0x06
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    5e92:	89 81       	ldd	r24, Y+1	; 0x01
    5e94:	9a 81       	ldd	r25, Y+2	; 0x02
    5e96:	fc 01       	movw	r30, r24
    5e98:	20 85       	ldd	r18, Z+8	; 0x08
    5e9a:	31 85       	ldd	r19, Z+9	; 0x09
    5e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea0:	28 17       	cp	r18, r24
    5ea2:	39 07       	cpc	r19, r25
    5ea4:	09 f0       	breq	.+2      	; 0x5ea8 <OSFlagPost+0x11c>
    5ea6:	89 c0       	rjmp	.+274    	; 0x5fba <OSFlagPost+0x22e>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5ea8:	89 81       	ldd	r24, Y+1	; 0x01
    5eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    5eac:	2d 81       	ldd	r18, Y+5	; 0x05
    5eae:	3e 81       	ldd	r19, Y+6	; 0x06
    5eb0:	b9 01       	movw	r22, r18
    5eb2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <OS_FlagTaskRdy>
    5eb6:	8f 83       	std	Y+7, r24	; 0x07
                     if (rdy == OS_TRUE) {
    5eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    5eba:	81 30       	cpi	r24, 0x01	; 1
    5ebc:	09 f0       	breq	.+2      	; 0x5ec0 <OSFlagPost+0x134>
    5ebe:	7f c0       	rjmp	.+254    	; 0x5fbe <OSFlagPost+0x232>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    5ec0:	81 e0       	ldi	r24, 0x01	; 1
    5ec2:	8b 83       	std	Y+3, r24	; 0x03
                     }
                 }
                 break;
    5ec4:	89 c0       	rjmp	.+274    	; 0x5fd8 <OSFlagPost+0x24c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5eca:	fc 01       	movw	r30, r24
    5ecc:	23 81       	ldd	r18, Z+3	; 0x03
    5ece:	34 81       	ldd	r19, Z+4	; 0x04
    5ed0:	89 81       	ldd	r24, Y+1	; 0x01
    5ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed4:	fc 01       	movw	r30, r24
    5ed6:	80 85       	ldd	r24, Z+8	; 0x08
    5ed8:	91 85       	ldd	r25, Z+9	; 0x09
    5eda:	82 23       	and	r24, r18
    5edc:	93 23       	and	r25, r19
    5ede:	8d 83       	std	Y+5, r24	; 0x05
    5ee0:	9e 83       	std	Y+6, r25	; 0x06
                 if (flags_rdy != (OS_FLAGS)0) {
    5ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee6:	00 97       	sbiw	r24, 0x00	; 0
    5ee8:	09 f4       	brne	.+2      	; 0x5eec <OSFlagPost+0x160>
    5eea:	6b c0       	rjmp	.+214    	; 0x5fc2 <OSFlagPost+0x236>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5eec:	89 81       	ldd	r24, Y+1	; 0x01
    5eee:	9a 81       	ldd	r25, Y+2	; 0x02
    5ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    5ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    5ef4:	b9 01       	movw	r22, r18
    5ef6:	0e 94 60 31 	call	0x62c0	; 0x62c0 <OS_FlagTaskRdy>
    5efa:	8f 83       	std	Y+7, r24	; 0x07
                     if (rdy == OS_TRUE) {
    5efc:	8f 81       	ldd	r24, Y+7	; 0x07
    5efe:	81 30       	cpi	r24, 0x01	; 1
    5f00:	09 f0       	breq	.+2      	; 0x5f04 <OSFlagPost+0x178>
    5f02:	61 c0       	rjmp	.+194    	; 0x5fc6 <OSFlagPost+0x23a>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	8b 83       	std	Y+3, r24	; 0x03
                     }
                 }
                 break;
    5f08:	67 c0       	rjmp	.+206    	; 0x5fd8 <OSFlagPost+0x24c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f0e:	fc 01       	movw	r30, r24
    5f10:	83 81       	ldd	r24, Z+3	; 0x03
    5f12:	94 81       	ldd	r25, Z+4	; 0x04
    5f14:	9c 01       	movw	r18, r24
    5f16:	20 95       	com	r18
    5f18:	30 95       	com	r19
    5f1a:	89 81       	ldd	r24, Y+1	; 0x01
    5f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5f1e:	fc 01       	movw	r30, r24
    5f20:	80 85       	ldd	r24, Z+8	; 0x08
    5f22:	91 85       	ldd	r25, Z+9	; 0x09
    5f24:	82 23       	and	r24, r18
    5f26:	93 23       	and	r25, r19
    5f28:	8d 83       	std	Y+5, r24	; 0x05
    5f2a:	9e 83       	std	Y+6, r25	; 0x06
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    5f2c:	89 81       	ldd	r24, Y+1	; 0x01
    5f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f30:	fc 01       	movw	r30, r24
    5f32:	20 85       	ldd	r18, Z+8	; 0x08
    5f34:	31 85       	ldd	r19, Z+9	; 0x09
    5f36:	8d 81       	ldd	r24, Y+5	; 0x05
    5f38:	9e 81       	ldd	r25, Y+6	; 0x06
    5f3a:	28 17       	cp	r18, r24
    5f3c:	39 07       	cpc	r19, r25
    5f3e:	09 f0       	breq	.+2      	; 0x5f42 <OSFlagPost+0x1b6>
    5f40:	44 c0       	rjmp	.+136    	; 0x5fca <OSFlagPost+0x23e>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5f42:	89 81       	ldd	r24, Y+1	; 0x01
    5f44:	9a 81       	ldd	r25, Y+2	; 0x02
    5f46:	2d 81       	ldd	r18, Y+5	; 0x05
    5f48:	3e 81       	ldd	r19, Y+6	; 0x06
    5f4a:	b9 01       	movw	r22, r18
    5f4c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <OS_FlagTaskRdy>
    5f50:	8f 83       	std	Y+7, r24	; 0x07
                     if (rdy == OS_TRUE) {
    5f52:	8f 81       	ldd	r24, Y+7	; 0x07
    5f54:	81 30       	cpi	r24, 0x01	; 1
    5f56:	d9 f5       	brne	.+118    	; 0x5fce <OSFlagPost+0x242>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	8b 83       	std	Y+3, r24	; 0x03
                     }
                 }
                 break;
    5f5c:	3d c0       	rjmp	.+122    	; 0x5fd8 <OSFlagPost+0x24c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    5f5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5f60:	9b 85       	ldd	r25, Y+11	; 0x0b
    5f62:	fc 01       	movw	r30, r24
    5f64:	83 81       	ldd	r24, Z+3	; 0x03
    5f66:	94 81       	ldd	r25, Z+4	; 0x04
    5f68:	9c 01       	movw	r18, r24
    5f6a:	20 95       	com	r18
    5f6c:	30 95       	com	r19
    5f6e:	89 81       	ldd	r24, Y+1	; 0x01
    5f70:	9a 81       	ldd	r25, Y+2	; 0x02
    5f72:	fc 01       	movw	r30, r24
    5f74:	80 85       	ldd	r24, Z+8	; 0x08
    5f76:	91 85       	ldd	r25, Z+9	; 0x09
    5f78:	82 23       	and	r24, r18
    5f7a:	93 23       	and	r25, r19
    5f7c:	8d 83       	std	Y+5, r24	; 0x05
    5f7e:	9e 83       	std	Y+6, r25	; 0x06
                 if (flags_rdy != (OS_FLAGS)0) {
    5f80:	8d 81       	ldd	r24, Y+5	; 0x05
    5f82:	9e 81       	ldd	r25, Y+6	; 0x06
    5f84:	00 97       	sbiw	r24, 0x00	; 0
    5f86:	29 f1       	breq	.+74     	; 0x5fd2 <OSFlagPost+0x246>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    5f88:	89 81       	ldd	r24, Y+1	; 0x01
    5f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    5f8c:	2d 81       	ldd	r18, Y+5	; 0x05
    5f8e:	3e 81       	ldd	r19, Y+6	; 0x06
    5f90:	b9 01       	movw	r22, r18
    5f92:	0e 94 60 31 	call	0x62c0	; 0x62c0 <OS_FlagTaskRdy>
    5f96:	8f 83       	std	Y+7, r24	; 0x07
                     if (rdy == OS_TRUE) {
    5f98:	8f 81       	ldd	r24, Y+7	; 0x07
    5f9a:	81 30       	cpi	r24, 0x01	; 1
    5f9c:	e1 f4       	brne	.+56     	; 0x5fd6 <OSFlagPost+0x24a>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    5f9e:	81 e0       	ldi	r24, 0x01	; 1
    5fa0:	8b 83       	std	Y+3, r24	; 0x03
                     }
                 }
                 break;
    5fa2:	1a c0       	rjmp	.+52     	; 0x5fd8 <OSFlagPost+0x24c>
#endif
            default:
                 OS_EXIT_CRITICAL();
    5fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    5fa6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    5faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fac:	98 89       	ldd	r25, Y+16	; 0x10
    5fae:	2f e6       	ldi	r18, 0x6F	; 111
    5fb0:	fc 01       	movw	r30, r24
    5fb2:	20 83       	st	Z, r18
                 return ((OS_FLAGS)0);
    5fb4:	80 e0       	ldi	r24, 0x00	; 0
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	36 c0       	rjmp	.+108    	; 0x6026 <OSFlagPost+0x29a>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5fba:	00 00       	nop
    5fbc:	0d c0       	rjmp	.+26     	; 0x5fd8 <OSFlagPost+0x24c>
    5fbe:	00 00       	nop
    5fc0:	0b c0       	rjmp	.+22     	; 0x5fd8 <OSFlagPost+0x24c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5fc2:	00 00       	nop
    5fc4:	09 c0       	rjmp	.+18     	; 0x5fd8 <OSFlagPost+0x24c>
    5fc6:	00 00       	nop
    5fc8:	07 c0       	rjmp	.+14     	; 0x5fd8 <OSFlagPost+0x24c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5fca:	00 00       	nop
    5fcc:	05 c0       	rjmp	.+10     	; 0x5fd8 <OSFlagPost+0x24c>
    5fce:	00 00       	nop
    5fd0:	03 c0       	rjmp	.+6      	; 0x5fd8 <OSFlagPost+0x24c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    5fd2:	00 00       	nop
    5fd4:	01 c0       	rjmp	.+2      	; 0x5fd8 <OSFlagPost+0x24c>
    5fd6:	00 00       	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    5fd8:	89 81       	ldd	r24, Y+1	; 0x01
    5fda:	9a 81       	ldd	r25, Y+2	; 0x02
    5fdc:	fc 01       	movw	r30, r24
    5fde:	80 81       	ld	r24, Z
    5fe0:	91 81       	ldd	r25, Z+1	; 0x01
    5fe2:	89 83       	std	Y+1, r24	; 0x01
    5fe4:	9a 83       	std	Y+2, r25	; 0x02
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    5fe6:	89 81       	ldd	r24, Y+1	; 0x01
    5fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    5fea:	00 97       	sbiw	r24, 0x00	; 0
    5fec:	09 f0       	breq	.+2      	; 0x5ff0 <OSFlagPost+0x264>
    5fee:	2b cf       	rjmp	.-426    	; 0x5e46 <OSFlagPost+0xba>
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    5ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ff2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (sched == OS_TRUE) {
    5ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ff8:	81 30       	cpi	r24, 0x01	; 1
    5ffa:	11 f4       	brne	.+4      	; 0x6000 <OSFlagPost+0x274>
        OS_Sched();
    5ffc:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    }
    OS_ENTER_CRITICAL();
    6000:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6004:	8c 83       	std	Y+4, r24	; 0x04
    flags_cur = pgrp->OSFlagFlags;
    6006:	8a 85       	ldd	r24, Y+10	; 0x0a
    6008:	9b 85       	ldd	r25, Y+11	; 0x0b
    600a:	fc 01       	movw	r30, r24
    600c:	83 81       	ldd	r24, Z+3	; 0x03
    600e:	94 81       	ldd	r25, Z+4	; 0x04
    6010:	88 87       	std	Y+8, r24	; 0x08
    6012:	99 87       	std	Y+9, r25	; 0x09
    OS_EXIT_CRITICAL();
    6014:	8c 81       	ldd	r24, Y+4	; 0x04
    6016:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr     = OS_ERR_NONE;
    601a:	8f 85       	ldd	r24, Y+15	; 0x0f
    601c:	98 89       	ldd	r25, Y+16	; 0x10
    601e:	fc 01       	movw	r30, r24
    6020:	10 82       	st	Z, r1
    return (flags_cur);
    6022:	88 85       	ldd	r24, Y+8	; 0x08
    6024:	99 85       	ldd	r25, Y+9	; 0x09
}
    6026:	60 96       	adiw	r28, 0x10	; 16
    6028:	cd bf       	out	0x3d, r28	; 61
    602a:	de bf       	out	0x3e, r29	; 62
    602c:	cf 91       	pop	r28
    602e:	df 91       	pop	r29
    6030:	08 95       	ret

00006032 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    6032:	df 93       	push	r29
    6034:	cf 93       	push	r28
    6036:	cd b7       	in	r28, 0x3d	; 61
    6038:	de b7       	in	r29, 0x3e	; 62
    603a:	27 97       	sbiw	r28, 0x07	; 7
    603c:	cd bf       	out	0x3d, r28	; 61
    603e:	de bf       	out	0x3e, r29	; 62
    6040:	8c 83       	std	Y+4, r24	; 0x04
    6042:	9d 83       	std	Y+5, r25	; 0x05
    6044:	6e 83       	std	Y+6, r22	; 0x06
    6046:	7f 83       	std	Y+7, r23	; 0x07
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    6048:	19 82       	std	Y+1, r1	; 0x01
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    604a:	8c 81       	ldd	r24, Y+4	; 0x04
    604c:	9d 81       	ldd	r25, Y+5	; 0x05
    604e:	fc 01       	movw	r30, r24
    6050:	80 81       	ld	r24, Z
    6052:	85 30       	cpi	r24, 0x05	; 5
    6054:	41 f0       	breq	.+16     	; 0x6066 <OSFlagQuery+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    6056:	8e 81       	ldd	r24, Y+6	; 0x06
    6058:	9f 81       	ldd	r25, Y+7	; 0x07
    605a:	21 e0       	ldi	r18, 0x01	; 1
    605c:	fc 01       	movw	r30, r24
    605e:	20 83       	st	Z, r18
        return ((OS_FLAGS)0);
    6060:	80 e0       	ldi	r24, 0x00	; 0
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	13 c0       	rjmp	.+38     	; 0x608c <OSFlagQuery+0x5a>
    }
    OS_ENTER_CRITICAL();
    6066:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    606a:	89 83       	std	Y+1, r24	; 0x01
    flags = pgrp->OSFlagFlags;
    606c:	8c 81       	ldd	r24, Y+4	; 0x04
    606e:	9d 81       	ldd	r25, Y+5	; 0x05
    6070:	fc 01       	movw	r30, r24
    6072:	83 81       	ldd	r24, Z+3	; 0x03
    6074:	94 81       	ldd	r25, Z+4	; 0x04
    6076:	8a 83       	std	Y+2, r24	; 0x02
    6078:	9b 83       	std	Y+3, r25	; 0x03
    OS_EXIT_CRITICAL();
    607a:	89 81       	ldd	r24, Y+1	; 0x01
    607c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    6080:	8e 81       	ldd	r24, Y+6	; 0x06
    6082:	9f 81       	ldd	r25, Y+7	; 0x07
    6084:	fc 01       	movw	r30, r24
    6086:	10 82       	st	Z, r1
    return (flags);                               /* Return the current value of the event flags       */
    6088:	8a 81       	ldd	r24, Y+2	; 0x02
    608a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    608c:	27 96       	adiw	r28, 0x07	; 7
    608e:	cd bf       	out	0x3d, r28	; 61
    6090:	de bf       	out	0x3e, r29	; 62
    6092:	cf 91       	pop	r28
    6094:	df 91       	pop	r29
    6096:	08 95       	ret

00006098 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    6098:	0f 93       	push	r16
    609a:	1f 93       	push	r17
    609c:	df 93       	push	r29
    609e:	cf 93       	push	r28
    60a0:	cd b7       	in	r28, 0x3d	; 61
    60a2:	de b7       	in	r29, 0x3e	; 62
    60a4:	2c 97       	sbiw	r28, 0x0c	; 12
    60a6:	cd bf       	out	0x3d, r28	; 61
    60a8:	de bf       	out	0x3e, r29	; 62
    60aa:	8c 83       	std	Y+4, r24	; 0x04
    60ac:	9d 83       	std	Y+5, r25	; 0x05
    60ae:	6e 83       	std	Y+6, r22	; 0x06
    60b0:	7f 83       	std	Y+7, r23	; 0x07
    60b2:	48 87       	std	Y+8, r20	; 0x08
    60b4:	59 87       	std	Y+9, r21	; 0x09
    60b6:	2a 87       	std	Y+10, r18	; 0x0a
    60b8:	0b 87       	std	Y+11, r16	; 0x0b
    60ba:	1c 87       	std	Y+12, r17	; 0x0c
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    60bc:	80 91 08 2e 	lds	r24, 0x2E08
    60c0:	90 91 09 2e 	lds	r25, 0x2E09
    60c4:	20 91 08 2e 	lds	r18, 0x2E08
    60c8:	30 91 09 2e 	lds	r19, 0x2E09
    60cc:	f9 01       	movw	r30, r18
    60ce:	26 8d       	ldd	r18, Z+30	; 0x1e
    60d0:	20 62       	ori	r18, 0x20	; 32
    60d2:	fc 01       	movw	r30, r24
    60d4:	26 8f       	std	Z+30, r18	; 0x1e
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    60d6:	80 91 08 2e 	lds	r24, 0x2E08
    60da:	90 91 09 2e 	lds	r25, 0x2E09
    60de:	fc 01       	movw	r30, r24
    60e0:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    60e2:	80 91 08 2e 	lds	r24, 0x2E08
    60e6:	90 91 09 2e 	lds	r25, 0x2E09
    60ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    60ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    60ee:	fc 01       	movw	r30, r24
    60f0:	24 8f       	std	Z+28, r18	; 0x1c
    60f2:	35 8f       	std	Z+29, r19	; 0x1d
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    60f4:	80 91 08 2e 	lds	r24, 0x2E08
    60f8:	90 91 09 2e 	lds	r25, 0x2E09
    60fc:	2e 81       	ldd	r18, Y+6	; 0x06
    60fe:	3f 81       	ldd	r19, Y+7	; 0x07
    6100:	fc 01       	movw	r30, r24
    6102:	20 8f       	std	Z+24, r18	; 0x18
    6104:	31 8f       	std	Z+25, r19	; 0x19
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    6106:	8e 81       	ldd	r24, Y+6	; 0x06
    6108:	9f 81       	ldd	r25, Y+7	; 0x07
    610a:	28 85       	ldd	r18, Y+8	; 0x08
    610c:	39 85       	ldd	r19, Y+9	; 0x09
    610e:	fc 01       	movw	r30, r24
    6110:	20 87       	std	Z+8, r18	; 0x08
    6112:	31 87       	std	Z+9, r19	; 0x09
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    6114:	8e 81       	ldd	r24, Y+6	; 0x06
    6116:	9f 81       	ldd	r25, Y+7	; 0x07
    6118:	2a 85       	ldd	r18, Y+10	; 0x0a
    611a:	fc 01       	movw	r30, r24
    611c:	22 87       	std	Z+10, r18	; 0x0a
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    611e:	20 91 08 2e 	lds	r18, 0x2E08
    6122:	30 91 09 2e 	lds	r19, 0x2E09
    6126:	8e 81       	ldd	r24, Y+6	; 0x06
    6128:	9f 81       	ldd	r25, Y+7	; 0x07
    612a:	fc 01       	movw	r30, r24
    612c:	24 83       	std	Z+4, r18	; 0x04
    612e:	35 83       	std	Z+5, r19	; 0x05
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    6130:	8c 81       	ldd	r24, Y+4	; 0x04
    6132:	9d 81       	ldd	r25, Y+5	; 0x05
    6134:	fc 01       	movw	r30, r24
    6136:	21 81       	ldd	r18, Z+1	; 0x01
    6138:	32 81       	ldd	r19, Z+2	; 0x02
    613a:	8e 81       	ldd	r24, Y+6	; 0x06
    613c:	9f 81       	ldd	r25, Y+7	; 0x07
    613e:	fc 01       	movw	r30, r24
    6140:	20 83       	st	Z, r18
    6142:	31 83       	std	Z+1, r19	; 0x01
    pnode->OSFlagNodePrev     = (void *)0;
    6144:	8e 81       	ldd	r24, Y+6	; 0x06
    6146:	9f 81       	ldd	r25, Y+7	; 0x07
    6148:	fc 01       	movw	r30, r24
    614a:	12 82       	std	Z+2, r1	; 0x02
    614c:	13 82       	std	Z+3, r1	; 0x03
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    614e:	8e 81       	ldd	r24, Y+6	; 0x06
    6150:	9f 81       	ldd	r25, Y+7	; 0x07
    6152:	2c 81       	ldd	r18, Y+4	; 0x04
    6154:	3d 81       	ldd	r19, Y+5	; 0x05
    6156:	fc 01       	movw	r30, r24
    6158:	26 83       	std	Z+6, r18	; 0x06
    615a:	37 83       	std	Z+7, r19	; 0x07
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    615c:	8c 81       	ldd	r24, Y+4	; 0x04
    615e:	9d 81       	ldd	r25, Y+5	; 0x05
    6160:	fc 01       	movw	r30, r24
    6162:	81 81       	ldd	r24, Z+1	; 0x01
    6164:	92 81       	ldd	r25, Z+2	; 0x02
    6166:	89 83       	std	Y+1, r24	; 0x01
    6168:	9a 83       	std	Y+2, r25	; 0x02
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    616a:	89 81       	ldd	r24, Y+1	; 0x01
    616c:	9a 81       	ldd	r25, Y+2	; 0x02
    616e:	00 97       	sbiw	r24, 0x00	; 0
    6170:	39 f0       	breq	.+14     	; 0x6180 <OS_FlagBlock+0xe8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    6172:	89 81       	ldd	r24, Y+1	; 0x01
    6174:	9a 81       	ldd	r25, Y+2	; 0x02
    6176:	2e 81       	ldd	r18, Y+6	; 0x06
    6178:	3f 81       	ldd	r19, Y+7	; 0x07
    617a:	fc 01       	movw	r30, r24
    617c:	22 83       	std	Z+2, r18	; 0x02
    617e:	33 83       	std	Z+3, r19	; 0x03
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    6180:	8c 81       	ldd	r24, Y+4	; 0x04
    6182:	9d 81       	ldd	r25, Y+5	; 0x05
    6184:	2e 81       	ldd	r18, Y+6	; 0x06
    6186:	3f 81       	ldd	r19, Y+7	; 0x07
    6188:	fc 01       	movw	r30, r24
    618a:	21 83       	std	Z+1, r18	; 0x01
    618c:	32 83       	std	Z+2, r19	; 0x02

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    618e:	80 91 08 2e 	lds	r24, 0x2E08
    6192:	90 91 09 2e 	lds	r25, 0x2E09
    6196:	fc 01       	movw	r30, r24
    6198:	82 a1       	ldd	r24, Z+34	; 0x22
    619a:	8b 83       	std	Y+3, r24	; 0x03
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    619c:	8b 81       	ldd	r24, Y+3	; 0x03
    619e:	88 2f       	mov	r24, r24
    61a0:	90 e0       	ldi	r25, 0x00	; 0
    61a2:	2b 81       	ldd	r18, Y+3	; 0x03
    61a4:	22 2f       	mov	r18, r18
    61a6:	30 e0       	ldi	r19, 0x00	; 0
    61a8:	2b 56       	subi	r18, 0x6B	; 107
    61aa:	33 4d       	sbci	r19, 0xD3	; 211
    61ac:	f9 01       	movw	r30, r18
    61ae:	20 81       	ld	r18, Z
    61b0:	42 2f       	mov	r20, r18
    61b2:	20 91 08 2e 	lds	r18, 0x2E08
    61b6:	30 91 09 2e 	lds	r19, 0x2E09
    61ba:	f9 01       	movw	r30, r18
    61bc:	23 a1       	ldd	r18, Z+35	; 0x23
    61be:	20 95       	com	r18
    61c0:	24 23       	and	r18, r20
    61c2:	8b 56       	subi	r24, 0x6B	; 107
    61c4:	93 4d       	sbci	r25, 0xD3	; 211
    61c6:	fc 01       	movw	r30, r24
    61c8:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0x00) {
    61ca:	8b 81       	ldd	r24, Y+3	; 0x03
    61cc:	88 2f       	mov	r24, r24
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	8b 56       	subi	r24, 0x6B	; 107
    61d2:	93 4d       	sbci	r25, 0xD3	; 211
    61d4:	fc 01       	movw	r30, r24
    61d6:	80 81       	ld	r24, Z
    61d8:	88 23       	and	r24, r24
    61da:	69 f4       	brne	.+26     	; 0x61f6 <OS_FlagBlock+0x15e>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    61dc:	80 91 08 2e 	lds	r24, 0x2E08
    61e0:	90 91 09 2e 	lds	r25, 0x2E09
    61e4:	fc 01       	movw	r30, r24
    61e6:	84 a1       	ldd	r24, Z+36	; 0x24
    61e8:	98 2f       	mov	r25, r24
    61ea:	90 95       	com	r25
    61ec:	80 91 94 2c 	lds	r24, 0x2C94
    61f0:	89 23       	and	r24, r25
    61f2:	80 93 94 2c 	sts	0x2C94, r24
    }
}
    61f6:	2c 96       	adiw	r28, 0x0c	; 12
    61f8:	cd bf       	out	0x3d, r28	; 61
    61fa:	de bf       	out	0x3e, r29	; 62
    61fc:	cf 91       	pop	r28
    61fe:	df 91       	pop	r29
    6200:	1f 91       	pop	r17
    6202:	0f 91       	pop	r16
    6204:	08 95       	ret

00006206 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    6206:	df 93       	push	r29
    6208:	cf 93       	push	r28
    620a:	00 d0       	rcall	.+0      	; 0x620c <OS_FlagInit+0x6>
    620c:	00 d0       	rcall	.+0      	; 0x620e <OS_FlagInit+0x8>
    620e:	cd b7       	in	r28, 0x3d	; 61
    6210:	de b7       	in	r29, 0x3e	; 62
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    6212:	85 e0       	ldi	r24, 0x05	; 5
    6214:	98 e2       	ldi	r25, 0x28	; 40
    6216:	69 e6       	ldi	r22, 0x69	; 105
    6218:	70 e0       	ldi	r23, 0x00	; 0
    621a:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    621e:	85 e0       	ldi	r24, 0x05	; 5
    6220:	98 e2       	ldi	r25, 0x28	; 40
    6222:	8b 83       	std	Y+3, r24	; 0x03
    6224:	9c 83       	std	Y+4, r25	; 0x04
    pgrp2 = &OSFlagTbl[1];
    6226:	8a e1       	ldi	r24, 0x1A	; 26
    6228:	98 e2       	ldi	r25, 0x28	; 40
    622a:	8d 83       	std	Y+5, r24	; 0x05
    622c:	9e 83       	std	Y+6, r25	; 0x06
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    622e:	19 82       	std	Y+1, r1	; 0x01
    6230:	1a 82       	std	Y+2, r1	; 0x02
    6232:	23 c0       	rjmp	.+70     	; 0x627a <OS_FlagInit+0x74>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6234:	8b 81       	ldd	r24, Y+3	; 0x03
    6236:	9c 81       	ldd	r25, Y+4	; 0x04
    6238:	fc 01       	movw	r30, r24
    623a:	10 82       	st	Z, r1
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    623c:	8b 81       	ldd	r24, Y+3	; 0x03
    623e:	9c 81       	ldd	r25, Y+4	; 0x04
    6240:	2d 81       	ldd	r18, Y+5	; 0x05
    6242:	3e 81       	ldd	r19, Y+6	; 0x06
    6244:	fc 01       	movw	r30, r24
    6246:	21 83       	std	Z+1, r18	; 0x01
    6248:	32 83       	std	Z+2, r19	; 0x02
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    624a:	8b 81       	ldd	r24, Y+3	; 0x03
    624c:	9c 81       	ldd	r25, Y+4	; 0x04
    624e:	2f e3       	ldi	r18, 0x3F	; 63
    6250:	fc 01       	movw	r30, r24
    6252:	25 83       	std	Z+5, r18	; 0x05
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    6254:	8b 81       	ldd	r24, Y+3	; 0x03
    6256:	9c 81       	ldd	r25, Y+4	; 0x04
    6258:	fc 01       	movw	r30, r24
    625a:	16 82       	std	Z+6, r1	; 0x06
#endif
        pgrp1++;
    625c:	8b 81       	ldd	r24, Y+3	; 0x03
    625e:	9c 81       	ldd	r25, Y+4	; 0x04
    6260:	45 96       	adiw	r24, 0x15	; 21
    6262:	8b 83       	std	Y+3, r24	; 0x03
    6264:	9c 83       	std	Y+4, r25	; 0x04
        pgrp2++;
    6266:	8d 81       	ldd	r24, Y+5	; 0x05
    6268:	9e 81       	ldd	r25, Y+6	; 0x06
    626a:	45 96       	adiw	r24, 0x15	; 21
    626c:	8d 83       	std	Y+5, r24	; 0x05
    626e:	9e 83       	std	Y+6, r25	; 0x06


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    6270:	89 81       	ldd	r24, Y+1	; 0x01
    6272:	9a 81       	ldd	r25, Y+2	; 0x02
    6274:	01 96       	adiw	r24, 0x01	; 1
    6276:	89 83       	std	Y+1, r24	; 0x01
    6278:	9a 83       	std	Y+2, r25	; 0x02
    627a:	89 81       	ldd	r24, Y+1	; 0x01
    627c:	9a 81       	ldd	r25, Y+2	; 0x02
    627e:	84 30       	cpi	r24, 0x04	; 4
    6280:	91 05       	cpc	r25, r1
    6282:	c0 f2       	brcs	.-80     	; 0x6234 <OS_FlagInit+0x2e>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6284:	8b 81       	ldd	r24, Y+3	; 0x03
    6286:	9c 81       	ldd	r25, Y+4	; 0x04
    6288:	fc 01       	movw	r30, r24
    628a:	10 82       	st	Z, r1
    pgrp1->OSFlagWaitList = (void *)0;
    628c:	8b 81       	ldd	r24, Y+3	; 0x03
    628e:	9c 81       	ldd	r25, Y+4	; 0x04
    6290:	fc 01       	movw	r30, r24
    6292:	11 82       	std	Z+1, r1	; 0x01
    6294:	12 82       	std	Z+2, r1	; 0x02
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    6296:	8b 81       	ldd	r24, Y+3	; 0x03
    6298:	9c 81       	ldd	r25, Y+4	; 0x04
    629a:	2f e3       	ldi	r18, 0x3F	; 63
    629c:	fc 01       	movw	r30, r24
    629e:	25 83       	std	Z+5, r18	; 0x05
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    62a0:	8b 81       	ldd	r24, Y+3	; 0x03
    62a2:	9c 81       	ldd	r25, Y+4	; 0x04
    62a4:	fc 01       	movw	r30, r24
    62a6:	16 82       	std	Z+6, r1	; 0x06
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    62a8:	85 e0       	ldi	r24, 0x05	; 5
    62aa:	98 e2       	ldi	r25, 0x28	; 40
    62ac:	80 93 70 35 	sts	0x3570, r24
    62b0:	90 93 71 35 	sts	0x3571, r25
#endif
}
    62b4:	26 96       	adiw	r28, 0x06	; 6
    62b6:	cd bf       	out	0x3d, r28	; 61
    62b8:	de bf       	out	0x3e, r29	; 62
    62ba:	cf 91       	pop	r28
    62bc:	df 91       	pop	r29
    62be:	08 95       	ret

000062c0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    62c0:	df 93       	push	r29
    62c2:	cf 93       	push	r28
    62c4:	cd b7       	in	r28, 0x3d	; 61
    62c6:	de b7       	in	r29, 0x3e	; 62
    62c8:	27 97       	sbiw	r28, 0x07	; 7
    62ca:	cd bf       	out	0x3d, r28	; 61
    62cc:	de bf       	out	0x3e, r29	; 62
    62ce:	8c 83       	std	Y+4, r24	; 0x04
    62d0:	9d 83       	std	Y+5, r25	; 0x05
    62d2:	6e 83       	std	Y+6, r22	; 0x06
    62d4:	7f 83       	std	Y+7, r23	; 0x07
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    62d6:	8c 81       	ldd	r24, Y+4	; 0x04
    62d8:	9d 81       	ldd	r25, Y+5	; 0x05
    62da:	fc 01       	movw	r30, r24
    62dc:	84 81       	ldd	r24, Z+4	; 0x04
    62de:	95 81       	ldd	r25, Z+5	; 0x05
    62e0:	8a 83       	std	Y+2, r24	; 0x02
    62e2:	9b 83       	std	Y+3, r25	; 0x03
    ptcb->OSTCBDly       = 0;
    62e4:	8a 81       	ldd	r24, Y+2	; 0x02
    62e6:	9b 81       	ldd	r25, Y+3	; 0x03
    62e8:	fc 01       	movw	r30, r24
    62ea:	14 8e       	std	Z+28, r1	; 0x1c
    62ec:	15 8e       	std	Z+29, r1	; 0x1d
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    62ee:	8a 81       	ldd	r24, Y+2	; 0x02
    62f0:	9b 81       	ldd	r25, Y+3	; 0x03
    62f2:	2e 81       	ldd	r18, Y+6	; 0x06
    62f4:	3f 81       	ldd	r19, Y+7	; 0x07
    62f6:	fc 01       	movw	r30, r24
    62f8:	22 8f       	std	Z+26, r18	; 0x1a
    62fa:	33 8f       	std	Z+27, r19	; 0x1b
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    62fc:	8a 81       	ldd	r24, Y+2	; 0x02
    62fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6300:	fc 01       	movw	r30, r24
    6302:	86 8d       	ldd	r24, Z+30	; 0x1e
    6304:	28 2f       	mov	r18, r24
    6306:	2f 7d       	andi	r18, 0xDF	; 223
    6308:	8a 81       	ldd	r24, Y+2	; 0x02
    630a:	9b 81       	ldd	r25, Y+3	; 0x03
    630c:	fc 01       	movw	r30, r24
    630e:	26 8f       	std	Z+30, r18	; 0x1e
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    6310:	8a 81       	ldd	r24, Y+2	; 0x02
    6312:	9b 81       	ldd	r25, Y+3	; 0x03
    6314:	fc 01       	movw	r30, r24
    6316:	17 8e       	std	Z+31, r1	; 0x1f
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    6318:	8a 81       	ldd	r24, Y+2	; 0x02
    631a:	9b 81       	ldd	r25, Y+3	; 0x03
    631c:	fc 01       	movw	r30, r24
    631e:	86 8d       	ldd	r24, Z+30	; 0x1e
    6320:	88 23       	and	r24, r24
    6322:	29 f5       	brne	.+74     	; 0x636e <OS_FlagTaskRdy+0xae>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    6324:	8a 81       	ldd	r24, Y+2	; 0x02
    6326:	9b 81       	ldd	r25, Y+3	; 0x03
    6328:	fc 01       	movw	r30, r24
    632a:	94 a1       	ldd	r25, Z+36	; 0x24
    632c:	80 91 94 2c 	lds	r24, 0x2C94
    6330:	89 2b       	or	r24, r25
    6332:	80 93 94 2c 	sts	0x2C94, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    6336:	8a 81       	ldd	r24, Y+2	; 0x02
    6338:	9b 81       	ldd	r25, Y+3	; 0x03
    633a:	fc 01       	movw	r30, r24
    633c:	82 a1       	ldd	r24, Z+34	; 0x22
    633e:	88 2f       	mov	r24, r24
    6340:	90 e0       	ldi	r25, 0x00	; 0
    6342:	2a 81       	ldd	r18, Y+2	; 0x02
    6344:	3b 81       	ldd	r19, Y+3	; 0x03
    6346:	f9 01       	movw	r30, r18
    6348:	22 a1       	ldd	r18, Z+34	; 0x22
    634a:	22 2f       	mov	r18, r18
    634c:	30 e0       	ldi	r19, 0x00	; 0
    634e:	2b 56       	subi	r18, 0x6B	; 107
    6350:	33 4d       	sbci	r19, 0xD3	; 211
    6352:	f9 01       	movw	r30, r18
    6354:	40 81       	ld	r20, Z
    6356:	2a 81       	ldd	r18, Y+2	; 0x02
    6358:	3b 81       	ldd	r19, Y+3	; 0x03
    635a:	f9 01       	movw	r30, r18
    635c:	23 a1       	ldd	r18, Z+35	; 0x23
    635e:	24 2b       	or	r18, r20
    6360:	8b 56       	subi	r24, 0x6B	; 107
    6362:	93 4d       	sbci	r25, 0xD3	; 211
    6364:	fc 01       	movw	r30, r24
    6366:	20 83       	st	Z, r18
        sched                   = OS_TRUE;
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	89 83       	std	Y+1, r24	; 0x01
    636c:	01 c0       	rjmp	.+2      	; 0x6370 <OS_FlagTaskRdy+0xb0>
    } else {
        sched                   = OS_FALSE;
    636e:	19 82       	std	Y+1, r1	; 0x01
    }
    OS_FlagUnlink(pnode);
    6370:	8c 81       	ldd	r24, Y+4	; 0x04
    6372:	9d 81       	ldd	r25, Y+5	; 0x05
    6374:	0e 94 c3 31 	call	0x6386	; 0x6386 <OS_FlagUnlink>
    return (sched);
    6378:	89 81       	ldd	r24, Y+1	; 0x01
}
    637a:	27 96       	adiw	r28, 0x07	; 7
    637c:	cd bf       	out	0x3d, r28	; 61
    637e:	de bf       	out	0x3e, r29	; 62
    6380:	cf 91       	pop	r28
    6382:	df 91       	pop	r29
    6384:	08 95       	ret

00006386 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    6386:	df 93       	push	r29
    6388:	cf 93       	push	r28
    638a:	cd b7       	in	r28, 0x3d	; 61
    638c:	de b7       	in	r29, 0x3e	; 62
    638e:	2a 97       	sbiw	r28, 0x0a	; 10
    6390:	cd bf       	out	0x3d, r28	; 61
    6392:	de bf       	out	0x3e, r29	; 62
    6394:	89 87       	std	Y+9, r24	; 0x09
    6396:	9a 87       	std	Y+10, r25	; 0x0a
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    6398:	89 85       	ldd	r24, Y+9	; 0x09
    639a:	9a 85       	ldd	r25, Y+10	; 0x0a
    639c:	fc 01       	movw	r30, r24
    639e:	82 81       	ldd	r24, Z+2	; 0x02
    63a0:	93 81       	ldd	r25, Z+3	; 0x03
    63a2:	89 83       	std	Y+1, r24	; 0x01
    63a4:	9a 83       	std	Y+2, r25	; 0x02
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    63a6:	89 85       	ldd	r24, Y+9	; 0x09
    63a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    63aa:	fc 01       	movw	r30, r24
    63ac:	80 81       	ld	r24, Z
    63ae:	91 81       	ldd	r25, Z+1	; 0x01
    63b0:	8b 83       	std	Y+3, r24	; 0x03
    63b2:	9c 83       	std	Y+4, r25	; 0x04
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    63b4:	89 81       	ldd	r24, Y+1	; 0x01
    63b6:	9a 81       	ldd	r25, Y+2	; 0x02
    63b8:	00 97       	sbiw	r24, 0x00	; 0
    63ba:	c1 f4       	brne	.+48     	; 0x63ec <OS_FlagUnlink+0x66>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    63bc:	89 85       	ldd	r24, Y+9	; 0x09
    63be:	9a 85       	ldd	r25, Y+10	; 0x0a
    63c0:	fc 01       	movw	r30, r24
    63c2:	86 81       	ldd	r24, Z+6	; 0x06
    63c4:	97 81       	ldd	r25, Z+7	; 0x07
    63c6:	8d 83       	std	Y+5, r24	; 0x05
    63c8:	9e 83       	std	Y+6, r25	; 0x06
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    63ca:	8d 81       	ldd	r24, Y+5	; 0x05
    63cc:	9e 81       	ldd	r25, Y+6	; 0x06
    63ce:	2b 81       	ldd	r18, Y+3	; 0x03
    63d0:	3c 81       	ldd	r19, Y+4	; 0x04
    63d2:	fc 01       	movw	r30, r24
    63d4:	21 83       	std	Z+1, r18	; 0x01
    63d6:	32 83       	std	Z+2, r19	; 0x02
        if (pnode_next != (OS_FLAG_NODE *)0) {
    63d8:	8b 81       	ldd	r24, Y+3	; 0x03
    63da:	9c 81       	ldd	r25, Y+4	; 0x04
    63dc:	00 97       	sbiw	r24, 0x00	; 0
    63de:	c1 f0       	breq	.+48     	; 0x6410 <OS_FlagUnlink+0x8a>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    63e0:	8b 81       	ldd	r24, Y+3	; 0x03
    63e2:	9c 81       	ldd	r25, Y+4	; 0x04
    63e4:	fc 01       	movw	r30, r24
    63e6:	12 82       	std	Z+2, r1	; 0x02
    63e8:	13 82       	std	Z+3, r1	; 0x03
    63ea:	12 c0       	rjmp	.+36     	; 0x6410 <OS_FlagUnlink+0x8a>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    63ec:	89 81       	ldd	r24, Y+1	; 0x01
    63ee:	9a 81       	ldd	r25, Y+2	; 0x02
    63f0:	2b 81       	ldd	r18, Y+3	; 0x03
    63f2:	3c 81       	ldd	r19, Y+4	; 0x04
    63f4:	fc 01       	movw	r30, r24
    63f6:	20 83       	st	Z, r18
    63f8:	31 83       	std	Z+1, r19	; 0x01
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    63fa:	8b 81       	ldd	r24, Y+3	; 0x03
    63fc:	9c 81       	ldd	r25, Y+4	; 0x04
    63fe:	00 97       	sbiw	r24, 0x00	; 0
    6400:	39 f0       	breq	.+14     	; 0x6410 <OS_FlagUnlink+0x8a>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    6402:	8b 81       	ldd	r24, Y+3	; 0x03
    6404:	9c 81       	ldd	r25, Y+4	; 0x04
    6406:	29 81       	ldd	r18, Y+1	; 0x01
    6408:	3a 81       	ldd	r19, Y+2	; 0x02
    640a:	fc 01       	movw	r30, r24
    640c:	22 83       	std	Z+2, r18	; 0x02
    640e:	33 83       	std	Z+3, r19	; 0x03
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    6410:	89 85       	ldd	r24, Y+9	; 0x09
    6412:	9a 85       	ldd	r25, Y+10	; 0x0a
    6414:	fc 01       	movw	r30, r24
    6416:	84 81       	ldd	r24, Z+4	; 0x04
    6418:	95 81       	ldd	r25, Z+5	; 0x05
    641a:	8f 83       	std	Y+7, r24	; 0x07
    641c:	98 87       	std	Y+8, r25	; 0x08
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    641e:	8f 81       	ldd	r24, Y+7	; 0x07
    6420:	98 85       	ldd	r25, Y+8	; 0x08
    6422:	fc 01       	movw	r30, r24
    6424:	10 8e       	std	Z+24, r1	; 0x18
    6426:	11 8e       	std	Z+25, r1	; 0x19
#endif
}
    6428:	2a 96       	adiw	r28, 0x0a	; 10
    642a:	cd bf       	out	0x3d, r28	; 61
    642c:	de bf       	out	0x3e, r29	; 62
    642e:	cf 91       	pop	r28
    6430:	df 91       	pop	r29
    6432:	08 95       	ret

00006434 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
    6434:	df 93       	push	r29
    6436:	cf 93       	push	r28
    6438:	cd b7       	in	r28, 0x3d	; 61
    643a:	de b7       	in	r29, 0x3e	; 62
    643c:	25 97       	sbiw	r28, 0x05	; 5
    643e:	cd bf       	out	0x3d, r28	; 61
    6440:	de bf       	out	0x3e, r29	; 62
    6442:	8c 83       	std	Y+4, r24	; 0x04
    6444:	9d 83       	std	Y+5, r25	; 0x05
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
    6446:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
    6448:	8c 81       	ldd	r24, Y+4	; 0x04
    644a:	9d 81       	ldd	r25, Y+5	; 0x05
    644c:	fc 01       	movw	r30, r24
    644e:	80 81       	ld	r24, Z
    6450:	81 30       	cpi	r24, 0x01	; 1
    6452:	19 f0       	breq	.+6      	; 0x645a <OSMboxAccept+0x26>
        return ((void *)0);
    6454:	80 e0       	ldi	r24, 0x00	; 0
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	14 c0       	rjmp	.+40     	; 0x6482 <OSMboxAccept+0x4e>
    }
    OS_ENTER_CRITICAL();
    645a:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    645e:	89 83       	std	Y+1, r24	; 0x01
    pmsg               = pevent->OSEventPtr;
    6460:	8c 81       	ldd	r24, Y+4	; 0x04
    6462:	9d 81       	ldd	r25, Y+5	; 0x05
    6464:	fc 01       	movw	r30, r24
    6466:	81 81       	ldd	r24, Z+1	; 0x01
    6468:	92 81       	ldd	r25, Z+2	; 0x02
    646a:	8a 83       	std	Y+2, r24	; 0x02
    646c:	9b 83       	std	Y+3, r25	; 0x03
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
    646e:	8c 81       	ldd	r24, Y+4	; 0x04
    6470:	9d 81       	ldd	r25, Y+5	; 0x05
    6472:	fc 01       	movw	r30, r24
    6474:	11 82       	std	Z+1, r1	; 0x01
    6476:	12 82       	std	Z+2, r1	; 0x02
    OS_EXIT_CRITICAL();
    6478:	89 81       	ldd	r24, Y+1	; 0x01
    647a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (pmsg);                                        /* Return the message received (or NULL)     */
    647e:	8a 81       	ldd	r24, Y+2	; 0x02
    6480:	9b 81       	ldd	r25, Y+3	; 0x03
}
    6482:	25 96       	adiw	r28, 0x05	; 5
    6484:	cd bf       	out	0x3d, r28	; 61
    6486:	de bf       	out	0x3e, r29	; 62
    6488:	cf 91       	pop	r28
    648a:	df 91       	pop	r29
    648c:	08 95       	ret

0000648e <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
    648e:	df 93       	push	r29
    6490:	cf 93       	push	r28
    6492:	cd b7       	in	r28, 0x3d	; 61
    6494:	de b7       	in	r29, 0x3e	; 62
    6496:	25 97       	sbiw	r28, 0x05	; 5
    6498:	cd bf       	out	0x3d, r28	; 61
    649a:	de bf       	out	0x3e, r29	; 62
    649c:	8c 83       	std	Y+4, r24	; 0x04
    649e:	9d 83       	std	Y+5, r25	; 0x05
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    64a0:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    64a2:	80 91 07 2e 	lds	r24, 0x2E07
    64a6:	88 23       	and	r24, r24
    64a8:	19 f0       	breq	.+6      	; 0x64b0 <OSMboxCreate+0x22>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    64aa:	80 e0       	ldi	r24, 0x00	; 0
    64ac:	90 e0       	ldi	r25, 0x00	; 0
    64ae:	41 c0       	rjmp	.+130    	; 0x6532 <OSMboxCreate+0xa4>
    }
    OS_ENTER_CRITICAL();
    64b0:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    64b4:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    64b6:	80 91 05 2e 	lds	r24, 0x2E05
    64ba:	90 91 06 2e 	lds	r25, 0x2E06
    64be:	8a 83       	std	Y+2, r24	; 0x02
    64c0:	9b 83       	std	Y+3, r25	; 0x03
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    64c2:	80 91 05 2e 	lds	r24, 0x2E05
    64c6:	90 91 06 2e 	lds	r25, 0x2E06
    64ca:	00 97       	sbiw	r24, 0x00	; 0
    64cc:	59 f0       	breq	.+22     	; 0x64e4 <OSMboxCreate+0x56>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    64ce:	80 91 05 2e 	lds	r24, 0x2E05
    64d2:	90 91 06 2e 	lds	r25, 0x2E06
    64d6:	fc 01       	movw	r30, r24
    64d8:	81 81       	ldd	r24, Z+1	; 0x01
    64da:	92 81       	ldd	r25, Z+2	; 0x02
    64dc:	80 93 05 2e 	sts	0x2E05, r24
    64e0:	90 93 06 2e 	sts	0x2E06, r25
    }
    OS_EXIT_CRITICAL();
    64e4:	89 81       	ldd	r24, Y+1	; 0x01
    64e6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {
    64ea:	8a 81       	ldd	r24, Y+2	; 0x02
    64ec:	9b 81       	ldd	r25, Y+3	; 0x03
    64ee:	00 97       	sbiw	r24, 0x00	; 0
    64f0:	f1 f0       	breq	.+60     	; 0x652e <OSMboxCreate+0xa0>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
    64f2:	8a 81       	ldd	r24, Y+2	; 0x02
    64f4:	9b 81       	ldd	r25, Y+3	; 0x03
    64f6:	21 e0       	ldi	r18, 0x01	; 1
    64f8:	fc 01       	movw	r30, r24
    64fa:	20 83       	st	Z, r18
        pevent->OSEventCnt     = 0;
    64fc:	8a 81       	ldd	r24, Y+2	; 0x02
    64fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6500:	fc 01       	movw	r30, r24
    6502:	13 82       	std	Z+3, r1	; 0x03
    6504:	14 82       	std	Z+4, r1	; 0x04
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
    6506:	8a 81       	ldd	r24, Y+2	; 0x02
    6508:	9b 81       	ldd	r25, Y+3	; 0x03
    650a:	2c 81       	ldd	r18, Y+4	; 0x04
    650c:	3d 81       	ldd	r19, Y+5	; 0x05
    650e:	fc 01       	movw	r30, r24
    6510:	21 83       	std	Z+1, r18	; 0x01
    6512:	32 83       	std	Z+2, r19	; 0x02
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
    6514:	8a 81       	ldd	r24, Y+2	; 0x02
    6516:	9b 81       	ldd	r25, Y+3	; 0x03
    6518:	2f e3       	ldi	r18, 0x3F	; 63
    651a:	fc 01       	movw	r30, r24
    651c:	26 87       	std	Z+14, r18	; 0x0e
        pevent->OSEventName[1] = OS_ASCII_NUL;
    651e:	8a 81       	ldd	r24, Y+2	; 0x02
    6520:	9b 81       	ldd	r25, Y+3	; 0x03
    6522:	fc 01       	movw	r30, r24
    6524:	17 86       	std	Z+15, r1	; 0x0f
#endif
        OS_EventWaitListInit(pevent);
    6526:	8a 81       	ldd	r24, Y+2	; 0x02
    6528:	9b 81       	ldd	r25, Y+3	; 0x03
    652a:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
    652e:	8a 81       	ldd	r24, Y+2	; 0x02
    6530:	9b 81       	ldd	r25, Y+3	; 0x03
}
    6532:	25 96       	adiw	r28, 0x05	; 5
    6534:	cd bf       	out	0x3d, r28	; 61
    6536:	de bf       	out	0x3e, r29	; 62
    6538:	cf 91       	pop	r28
    653a:	df 91       	pop	r29
    653c:	08 95       	ret

0000653e <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    653e:	df 93       	push	r29
    6540:	cf 93       	push	r28
    6542:	cd b7       	in	r28, 0x3d	; 61
    6544:	de b7       	in	r29, 0x3e	; 62
    6546:	29 97       	sbiw	r28, 0x09	; 9
    6548:	cd bf       	out	0x3d, r28	; 61
    654a:	de bf       	out	0x3e, r29	; 62
    654c:	8d 83       	std	Y+5, r24	; 0x05
    654e:	9e 83       	std	Y+6, r25	; 0x06
    6550:	6f 83       	std	Y+7, r22	; 0x07
    6552:	48 87       	std	Y+8, r20	; 0x08
    6554:	59 87       	std	Y+9, r21	; 0x09
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6556:	1c 82       	std	Y+4, r1	; 0x04
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    6558:	8d 81       	ldd	r24, Y+5	; 0x05
    655a:	9e 81       	ldd	r25, Y+6	; 0x06
    655c:	fc 01       	movw	r30, r24
    655e:	80 81       	ld	r24, Z
    6560:	81 30       	cpi	r24, 0x01	; 1
    6562:	41 f0       	breq	.+16     	; 0x6574 <OSMboxDel+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    6564:	88 85       	ldd	r24, Y+8	; 0x08
    6566:	99 85       	ldd	r25, Y+9	; 0x09
    6568:	21 e0       	ldi	r18, 0x01	; 1
    656a:	fc 01       	movw	r30, r24
    656c:	20 83       	st	Z, r18
        return (pevent);
    656e:	8d 81       	ldd	r24, Y+5	; 0x05
    6570:	9e 81       	ldd	r25, Y+6	; 0x06
    6572:	ad c0       	rjmp	.+346    	; 0x66ce <OSMboxDel+0x190>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6574:	80 91 07 2e 	lds	r24, 0x2E07
    6578:	88 23       	and	r24, r24
    657a:	41 f0       	breq	.+16     	; 0x658c <OSMboxDel+0x4e>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    657c:	88 85       	ldd	r24, Y+8	; 0x08
    657e:	99 85       	ldd	r25, Y+9	; 0x09
    6580:	2f e0       	ldi	r18, 0x0F	; 15
    6582:	fc 01       	movw	r30, r24
    6584:	20 83       	st	Z, r18
        return (pevent);
    6586:	8d 81       	ldd	r24, Y+5	; 0x05
    6588:	9e 81       	ldd	r25, Y+6	; 0x06
    658a:	a1 c0       	rjmp	.+322    	; 0x66ce <OSMboxDel+0x190>
    }
    OS_ENTER_CRITICAL();
    658c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6590:	8c 83       	std	Y+4, r24	; 0x04
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
    6592:	8d 81       	ldd	r24, Y+5	; 0x05
    6594:	9e 81       	ldd	r25, Y+6	; 0x06
    6596:	fc 01       	movw	r30, r24
    6598:	85 81       	ldd	r24, Z+5	; 0x05
    659a:	88 23       	and	r24, r24
    659c:	19 f0       	breq	.+6      	; 0x65a4 <OSMboxDel+0x66>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    659e:	81 e0       	ldi	r24, 0x01	; 1
    65a0:	89 83       	std	Y+1, r24	; 0x01
    65a2:	01 c0       	rjmp	.+2      	; 0x65a6 <OSMboxDel+0x68>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    65a4:	19 82       	std	Y+1, r1	; 0x01
    }
    switch (opt) {
    65a6:	8f 81       	ldd	r24, Y+7	; 0x07
    65a8:	88 2f       	mov	r24, r24
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	00 97       	sbiw	r24, 0x00	; 0
    65ae:	29 f0       	breq	.+10     	; 0x65ba <OSMboxDel+0x7c>
    65b0:	81 30       	cpi	r24, 0x01	; 1
    65b2:	91 05       	cpc	r25, r1
    65b4:	09 f4       	brne	.+2      	; 0x65b8 <OSMboxDel+0x7a>
    65b6:	45 c0       	rjmp	.+138    	; 0x6642 <OSMboxDel+0x104>
    65b8:	7b c0       	rjmp	.+246    	; 0x66b0 <OSMboxDel+0x172>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
    65ba:	89 81       	ldd	r24, Y+1	; 0x01
    65bc:	88 23       	and	r24, r24
    65be:	59 f5       	brne	.+86     	; 0x6616 <OSMboxDel+0xd8>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    65c0:	8d 81       	ldd	r24, Y+5	; 0x05
    65c2:	9e 81       	ldd	r25, Y+6	; 0x06
    65c4:	2f e3       	ldi	r18, 0x3F	; 63
    65c6:	fc 01       	movw	r30, r24
    65c8:	26 87       	std	Z+14, r18	; 0x0e
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    65ca:	8d 81       	ldd	r24, Y+5	; 0x05
    65cc:	9e 81       	ldd	r25, Y+6	; 0x06
    65ce:	fc 01       	movw	r30, r24
    65d0:	17 86       	std	Z+15, r1	; 0x0f
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    65d2:	8d 81       	ldd	r24, Y+5	; 0x05
    65d4:	9e 81       	ldd	r25, Y+6	; 0x06
    65d6:	fc 01       	movw	r30, r24
    65d8:	10 82       	st	Z, r1
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    65da:	20 91 05 2e 	lds	r18, 0x2E05
    65de:	30 91 06 2e 	lds	r19, 0x2E06
    65e2:	8d 81       	ldd	r24, Y+5	; 0x05
    65e4:	9e 81       	ldd	r25, Y+6	; 0x06
    65e6:	fc 01       	movw	r30, r24
    65e8:	21 83       	std	Z+1, r18	; 0x01
    65ea:	32 83       	std	Z+2, r19	; 0x02
                 pevent->OSEventCnt  = 0;
    65ec:	8d 81       	ldd	r24, Y+5	; 0x05
    65ee:	9e 81       	ldd	r25, Y+6	; 0x06
    65f0:	fc 01       	movw	r30, r24
    65f2:	13 82       	std	Z+3, r1	; 0x03
    65f4:	14 82       	std	Z+4, r1	; 0x04
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
    65f6:	8d 81       	ldd	r24, Y+5	; 0x05
    65f8:	9e 81       	ldd	r25, Y+6	; 0x06
    65fa:	80 93 05 2e 	sts	0x2E05, r24
    65fe:	90 93 06 2e 	sts	0x2E06, r25
                 OS_EXIT_CRITICAL();
    6602:	8c 81       	ldd	r24, Y+4	; 0x04
    6604:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr               = OS_ERR_NONE;
    6608:	88 85       	ldd	r24, Y+8	; 0x08
    660a:	99 85       	ldd	r25, Y+9	; 0x09
    660c:	fc 01       	movw	r30, r24
    660e:	10 82       	st	Z, r1
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
    6610:	1a 82       	std	Y+2, r1	; 0x02
    6612:	1b 82       	std	Y+3, r1	; 0x03
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
    6614:	5a c0       	rjmp	.+180    	; 0x66ca <OSMboxDel+0x18c>
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
    6616:	8c 81       	ldd	r24, Y+4	; 0x04
    6618:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr               = OS_ERR_TASK_WAITING;
    661c:	88 85       	ldd	r24, Y+8	; 0x08
    661e:	99 85       	ldd	r25, Y+9	; 0x09
    6620:	29 e4       	ldi	r18, 0x49	; 73
    6622:	fc 01       	movw	r30, r24
    6624:	20 83       	st	Z, r18
                 pevent_return       = pevent;
    6626:	8d 81       	ldd	r24, Y+5	; 0x05
    6628:	9e 81       	ldd	r25, Y+6	; 0x06
    662a:	8a 83       	std	Y+2, r24	; 0x02
    662c:	9b 83       	std	Y+3, r25	; 0x03
             }
             break;
    662e:	4d c0       	rjmp	.+154    	; 0x66ca <OSMboxDel+0x18c>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
    6630:	8d 81       	ldd	r24, Y+5	; 0x05
    6632:	9e 81       	ldd	r25, Y+6	; 0x06
    6634:	60 e0       	ldi	r22, 0x00	; 0
    6636:	70 e0       	ldi	r23, 0x00	; 0
    6638:	42 e0       	ldi	r20, 0x02	; 2
    663a:	20 e0       	ldi	r18, 0x00	; 0
    663c:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
    6640:	01 c0       	rjmp	.+2      	; 0x6644 <OSMboxDel+0x106>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
    6642:	00 00       	nop
    6644:	8d 81       	ldd	r24, Y+5	; 0x05
    6646:	9e 81       	ldd	r25, Y+6	; 0x06
    6648:	fc 01       	movw	r30, r24
    664a:	85 81       	ldd	r24, Z+5	; 0x05
    664c:	88 23       	and	r24, r24
    664e:	81 f7       	brne	.-32     	; 0x6630 <OSMboxDel+0xf2>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    6650:	8d 81       	ldd	r24, Y+5	; 0x05
    6652:	9e 81       	ldd	r25, Y+6	; 0x06
    6654:	2f e3       	ldi	r18, 0x3F	; 63
    6656:	fc 01       	movw	r30, r24
    6658:	26 87       	std	Z+14, r18	; 0x0e
             pevent->OSEventName[1] = OS_ASCII_NUL;
    665a:	8d 81       	ldd	r24, Y+5	; 0x05
    665c:	9e 81       	ldd	r25, Y+6	; 0x06
    665e:	fc 01       	movw	r30, r24
    6660:	17 86       	std	Z+15, r1	; 0x0f
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    6662:	8d 81       	ldd	r24, Y+5	; 0x05
    6664:	9e 81       	ldd	r25, Y+6	; 0x06
    6666:	fc 01       	movw	r30, r24
    6668:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    666a:	20 91 05 2e 	lds	r18, 0x2E05
    666e:	30 91 06 2e 	lds	r19, 0x2E06
    6672:	8d 81       	ldd	r24, Y+5	; 0x05
    6674:	9e 81       	ldd	r25, Y+6	; 0x06
    6676:	fc 01       	movw	r30, r24
    6678:	21 83       	std	Z+1, r18	; 0x01
    667a:	32 83       	std	Z+2, r19	; 0x02
             pevent->OSEventCnt     = 0;
    667c:	8d 81       	ldd	r24, Y+5	; 0x05
    667e:	9e 81       	ldd	r25, Y+6	; 0x06
    6680:	fc 01       	movw	r30, r24
    6682:	13 82       	std	Z+3, r1	; 0x03
    6684:	14 82       	std	Z+4, r1	; 0x04
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    6686:	8d 81       	ldd	r24, Y+5	; 0x05
    6688:	9e 81       	ldd	r25, Y+6	; 0x06
    668a:	80 93 05 2e 	sts	0x2E05, r24
    668e:	90 93 06 2e 	sts	0x2E06, r25
             OS_EXIT_CRITICAL();
    6692:	8c 81       	ldd	r24, Y+4	; 0x04
    6694:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6698:	89 81       	ldd	r24, Y+1	; 0x01
    669a:	81 30       	cpi	r24, 0x01	; 1
    669c:	11 f4       	brne	.+4      	; 0x66a2 <OSMboxDel+0x164>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    669e:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
    66a2:	88 85       	ldd	r24, Y+8	; 0x08
    66a4:	99 85       	ldd	r25, Y+9	; 0x09
    66a6:	fc 01       	movw	r30, r24
    66a8:	10 82       	st	Z, r1
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
    66aa:	1a 82       	std	Y+2, r1	; 0x02
    66ac:	1b 82       	std	Y+3, r1	; 0x03
             break;
    66ae:	0d c0       	rjmp	.+26     	; 0x66ca <OSMboxDel+0x18c>

        default:
             OS_EXIT_CRITICAL();
    66b0:	8c 81       	ldd	r24, Y+4	; 0x04
    66b2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr         = OS_ERR_INVALID_OPT;
    66b6:	88 85       	ldd	r24, Y+8	; 0x08
    66b8:	99 85       	ldd	r25, Y+9	; 0x09
    66ba:	27 e0       	ldi	r18, 0x07	; 7
    66bc:	fc 01       	movw	r30, r24
    66be:	20 83       	st	Z, r18
             pevent_return = pevent;
    66c0:	8d 81       	ldd	r24, Y+5	; 0x05
    66c2:	9e 81       	ldd	r25, Y+6	; 0x06
    66c4:	8a 83       	std	Y+2, r24	; 0x02
    66c6:	9b 83       	std	Y+3, r25	; 0x03
             break;
    66c8:	00 00       	nop
    }
    return (pevent_return);
    66ca:	8a 81       	ldd	r24, Y+2	; 0x02
    66cc:	9b 81       	ldd	r25, Y+3	; 0x03
}
    66ce:	29 96       	adiw	r28, 0x09	; 9
    66d0:	cd bf       	out	0x3d, r28	; 61
    66d2:	de bf       	out	0x3e, r29	; 62
    66d4:	cf 91       	pop	r28
    66d6:	df 91       	pop	r29
    66d8:	08 95       	ret

000066da <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    66da:	df 93       	push	r29
    66dc:	cf 93       	push	r28
    66de:	cd b7       	in	r28, 0x3d	; 61
    66e0:	de b7       	in	r29, 0x3e	; 62
    66e2:	29 97       	sbiw	r28, 0x09	; 9
    66e4:	cd bf       	out	0x3d, r28	; 61
    66e6:	de bf       	out	0x3e, r29	; 62
    66e8:	8c 83       	std	Y+4, r24	; 0x04
    66ea:	9d 83       	std	Y+5, r25	; 0x05
    66ec:	6e 83       	std	Y+6, r22	; 0x06
    66ee:	7f 83       	std	Y+7, r23	; 0x07
    66f0:	48 87       	std	Y+8, r20	; 0x08
    66f2:	59 87       	std	Y+9, r21	; 0x09
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    66f4:	1b 82       	std	Y+3, r1	; 0x03
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    66f6:	8c 81       	ldd	r24, Y+4	; 0x04
    66f8:	9d 81       	ldd	r25, Y+5	; 0x05
    66fa:	fc 01       	movw	r30, r24
    66fc:	80 81       	ld	r24, Z
    66fe:	81 30       	cpi	r24, 0x01	; 1
    6700:	41 f0       	breq	.+16     	; 0x6712 <OSMboxPend+0x38>
        *perr = OS_ERR_EVENT_TYPE;
    6702:	88 85       	ldd	r24, Y+8	; 0x08
    6704:	99 85       	ldd	r25, Y+9	; 0x09
    6706:	21 e0       	ldi	r18, 0x01	; 1
    6708:	fc 01       	movw	r30, r24
    670a:	20 83       	st	Z, r18
        return ((void *)0);
    670c:	80 e0       	ldi	r24, 0x00	; 0
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	b8 c0       	rjmp	.+368    	; 0x6882 <OSMboxPend+0x1a8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    6712:	80 91 07 2e 	lds	r24, 0x2E07
    6716:	88 23       	and	r24, r24
    6718:	41 f0       	breq	.+16     	; 0x672a <OSMboxPend+0x50>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    671a:	88 85       	ldd	r24, Y+8	; 0x08
    671c:	99 85       	ldd	r25, Y+9	; 0x09
    671e:	22 e0       	ldi	r18, 0x02	; 2
    6720:	fc 01       	movw	r30, r24
    6722:	20 83       	st	Z, r18
        return ((void *)0);
    6724:	80 e0       	ldi	r24, 0x00	; 0
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	ac c0       	rjmp	.+344    	; 0x6882 <OSMboxPend+0x1a8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    672a:	80 91 fa 27 	lds	r24, 0x27FA
    672e:	88 23       	and	r24, r24
    6730:	41 f0       	breq	.+16     	; 0x6742 <OSMboxPend+0x68>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    6732:	88 85       	ldd	r24, Y+8	; 0x08
    6734:	99 85       	ldd	r25, Y+9	; 0x09
    6736:	2d e0       	ldi	r18, 0x0D	; 13
    6738:	fc 01       	movw	r30, r24
    673a:	20 83       	st	Z, r18
        return ((void *)0);
    673c:	80 e0       	ldi	r24, 0x00	; 0
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	a0 c0       	rjmp	.+320    	; 0x6882 <OSMboxPend+0x1a8>
    }
    OS_ENTER_CRITICAL();
    6742:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6746:	8b 83       	std	Y+3, r24	; 0x03
    pmsg = pevent->OSEventPtr;
    6748:	8c 81       	ldd	r24, Y+4	; 0x04
    674a:	9d 81       	ldd	r25, Y+5	; 0x05
    674c:	fc 01       	movw	r30, r24
    674e:	81 81       	ldd	r24, Z+1	; 0x01
    6750:	92 81       	ldd	r25, Z+2	; 0x02
    6752:	89 83       	std	Y+1, r24	; 0x01
    6754:	9a 83       	std	Y+2, r25	; 0x02
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
    6756:	89 81       	ldd	r24, Y+1	; 0x01
    6758:	9a 81       	ldd	r25, Y+2	; 0x02
    675a:	00 97       	sbiw	r24, 0x00	; 0
    675c:	79 f0       	breq	.+30     	; 0x677c <OSMboxPend+0xa2>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
    675e:	8c 81       	ldd	r24, Y+4	; 0x04
    6760:	9d 81       	ldd	r25, Y+5	; 0x05
    6762:	fc 01       	movw	r30, r24
    6764:	11 82       	std	Z+1, r1	; 0x01
    6766:	12 82       	std	Z+2, r1	; 0x02
        OS_EXIT_CRITICAL();
    6768:	8b 81       	ldd	r24, Y+3	; 0x03
    676a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    676e:	88 85       	ldd	r24, Y+8	; 0x08
    6770:	99 85       	ldd	r25, Y+9	; 0x09
    6772:	fc 01       	movw	r30, r24
    6774:	10 82       	st	Z, r1
        return (pmsg);                                /* Return the message received (or NULL)         */
    6776:	89 81       	ldd	r24, Y+1	; 0x01
    6778:	9a 81       	ldd	r25, Y+2	; 0x02
    677a:	83 c0       	rjmp	.+262    	; 0x6882 <OSMboxPend+0x1a8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
    677c:	80 91 08 2e 	lds	r24, 0x2E08
    6780:	90 91 09 2e 	lds	r25, 0x2E09
    6784:	20 91 08 2e 	lds	r18, 0x2E08
    6788:	30 91 09 2e 	lds	r19, 0x2E09
    678c:	f9 01       	movw	r30, r18
    678e:	26 8d       	ldd	r18, Z+30	; 0x1e
    6790:	22 60       	ori	r18, 0x02	; 2
    6792:	fc 01       	movw	r30, r24
    6794:	26 8f       	std	Z+30, r18	; 0x1e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6796:	80 91 08 2e 	lds	r24, 0x2E08
    679a:	90 91 09 2e 	lds	r25, 0x2E09
    679e:	fc 01       	movw	r30, r24
    67a0:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
    67a2:	80 91 08 2e 	lds	r24, 0x2E08
    67a6:	90 91 09 2e 	lds	r25, 0x2E09
    67aa:	2e 81       	ldd	r18, Y+6	; 0x06
    67ac:	3f 81       	ldd	r19, Y+7	; 0x07
    67ae:	fc 01       	movw	r30, r24
    67b0:	24 8f       	std	Z+28, r18	; 0x1c
    67b2:	35 8f       	std	Z+29, r19	; 0x1d
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    67b4:	8c 81       	ldd	r24, Y+4	; 0x04
    67b6:	9d 81       	ldd	r25, Y+5	; 0x05
    67b8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    67bc:	8b 81       	ldd	r24, Y+3	; 0x03
    67be:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready to run  */
    67c2:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    67c6:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    67ca:	8b 83       	std	Y+3, r24	; 0x03
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    67cc:	80 91 08 2e 	lds	r24, 0x2E08
    67d0:	90 91 09 2e 	lds	r25, 0x2E09
    67d4:	fc 01       	movw	r30, r24
    67d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    67d8:	88 2f       	mov	r24, r24
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	00 97       	sbiw	r24, 0x00	; 0
    67de:	21 f0       	breq	.+8      	; 0x67e8 <OSMboxPend+0x10e>
    67e0:	82 30       	cpi	r24, 0x02	; 2
    67e2:	91 05       	cpc	r25, r1
    67e4:	79 f0       	breq	.+30     	; 0x6804 <OSMboxPend+0x12a>
    67e6:	16 c0       	rjmp	.+44     	; 0x6814 <OSMboxPend+0x13a>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
    67e8:	80 91 08 2e 	lds	r24, 0x2E08
    67ec:	90 91 09 2e 	lds	r25, 0x2E09
    67f0:	fc 01       	movw	r30, r24
    67f2:	86 89       	ldd	r24, Z+22	; 0x16
    67f4:	97 89       	ldd	r25, Z+23	; 0x17
    67f6:	89 83       	std	Y+1, r24	; 0x01
    67f8:	9a 83       	std	Y+2, r25	; 0x02
            *perr =  OS_ERR_NONE;
    67fa:	88 85       	ldd	r24, Y+8	; 0x08
    67fc:	99 85       	ldd	r25, Y+9	; 0x09
    67fe:	fc 01       	movw	r30, r24
    6800:	10 82       	st	Z, r1
             break;
    6802:	19 c0       	rjmp	.+50     	; 0x6836 <OSMboxPend+0x15c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    6804:	19 82       	std	Y+1, r1	; 0x01
    6806:	1a 82       	std	Y+2, r1	; 0x02
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    6808:	88 85       	ldd	r24, Y+8	; 0x08
    680a:	99 85       	ldd	r25, Y+9	; 0x09
    680c:	2e e0       	ldi	r18, 0x0E	; 14
    680e:	fc 01       	movw	r30, r24
    6810:	20 83       	st	Z, r18
             break;
    6812:	11 c0       	rjmp	.+34     	; 0x6836 <OSMboxPend+0x15c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    6814:	80 91 08 2e 	lds	r24, 0x2E08
    6818:	90 91 09 2e 	lds	r25, 0x2E09
    681c:	2c 81       	ldd	r18, Y+4	; 0x04
    681e:	3d 81       	ldd	r19, Y+5	; 0x05
    6820:	b9 01       	movw	r22, r18
    6822:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
             pmsg = (void *)0;
    6826:	19 82       	std	Y+1, r1	; 0x01
    6828:	1a 82       	std	Y+2, r1	; 0x02
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    682a:	88 85       	ldd	r24, Y+8	; 0x08
    682c:	99 85       	ldd	r25, Y+9	; 0x09
    682e:	2a e0       	ldi	r18, 0x0A	; 10
    6830:	fc 01       	movw	r30, r24
    6832:	20 83       	st	Z, r18
             break;
    6834:	00 00       	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    6836:	80 91 08 2e 	lds	r24, 0x2E08
    683a:	90 91 09 2e 	lds	r25, 0x2E09
    683e:	fc 01       	movw	r30, r24
    6840:	16 8e       	std	Z+30, r1	; 0x1e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    6842:	80 91 08 2e 	lds	r24, 0x2E08
    6846:	90 91 09 2e 	lds	r25, 0x2E09
    684a:	fc 01       	movw	r30, r24
    684c:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    684e:	80 91 08 2e 	lds	r24, 0x2E08
    6852:	90 91 09 2e 	lds	r25, 0x2E09
    6856:	fc 01       	movw	r30, r24
    6858:	12 8a       	std	Z+18, r1	; 0x12
    685a:	13 8a       	std	Z+19, r1	; 0x13
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    685c:	80 91 08 2e 	lds	r24, 0x2E08
    6860:	90 91 09 2e 	lds	r25, 0x2E09
    6864:	fc 01       	movw	r30, r24
    6866:	14 8a       	std	Z+20, r1	; 0x14
    6868:	15 8a       	std	Z+21, r1	; 0x15
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    686a:	80 91 08 2e 	lds	r24, 0x2E08
    686e:	90 91 09 2e 	lds	r25, 0x2E09
    6872:	fc 01       	movw	r30, r24
    6874:	16 8a       	std	Z+22, r1	; 0x16
    6876:	17 8a       	std	Z+23, r1	; 0x17
    OS_EXIT_CRITICAL();
    6878:	8b 81       	ldd	r24, Y+3	; 0x03
    687a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (pmsg);                                    /* Return received message                       */
    687e:	89 81       	ldd	r24, Y+1	; 0x01
    6880:	9a 81       	ldd	r25, Y+2	; 0x02
}
    6882:	29 96       	adiw	r28, 0x09	; 9
    6884:	cd bf       	out	0x3d, r28	; 61
    6886:	de bf       	out	0x3e, r29	; 62
    6888:	cf 91       	pop	r28
    688a:	df 91       	pop	r29
    688c:	08 95       	ret

0000688e <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    688e:	df 93       	push	r29
    6890:	cf 93       	push	r28
    6892:	cd b7       	in	r28, 0x3d	; 61
    6894:	de b7       	in	r29, 0x3e	; 62
    6896:	27 97       	sbiw	r28, 0x07	; 7
    6898:	cd bf       	out	0x3d, r28	; 61
    689a:	de bf       	out	0x3e, r29	; 62
    689c:	8b 83       	std	Y+3, r24	; 0x03
    689e:	9c 83       	std	Y+4, r25	; 0x04
    68a0:	6d 83       	std	Y+5, r22	; 0x05
    68a2:	4e 83       	std	Y+6, r20	; 0x06
    68a4:	5f 83       	std	Y+7, r21	; 0x07
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    68a6:	1a 82       	std	Y+2, r1	; 0x02
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    68a8:	8b 81       	ldd	r24, Y+3	; 0x03
    68aa:	9c 81       	ldd	r25, Y+4	; 0x04
    68ac:	fc 01       	movw	r30, r24
    68ae:	80 81       	ld	r24, Z
    68b0:	81 30       	cpi	r24, 0x01	; 1
    68b2:	39 f0       	breq	.+14     	; 0x68c2 <OSMboxPendAbort+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    68b4:	8e 81       	ldd	r24, Y+6	; 0x06
    68b6:	9f 81       	ldd	r25, Y+7	; 0x07
    68b8:	21 e0       	ldi	r18, 0x01	; 1
    68ba:	fc 01       	movw	r30, r24
    68bc:	20 83       	st	Z, r18
        return (0);
    68be:	80 e0       	ldi	r24, 0x00	; 0
    68c0:	45 c0       	rjmp	.+138    	; 0x694c <OSMboxPendAbort+0xbe>
    }
    OS_ENTER_CRITICAL();
    68c2:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    68c6:	8a 83       	std	Y+2, r24	; 0x02
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
    68c8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ca:	9c 81       	ldd	r25, Y+4	; 0x04
    68cc:	fc 01       	movw	r30, r24
    68ce:	85 81       	ldd	r24, Z+5	; 0x05
    68d0:	88 23       	and	r24, r24
    68d2:	a1 f1       	breq	.+104    	; 0x693c <OSMboxPendAbort+0xae>
        nbr_tasks = 0;
    68d4:	19 82       	std	Y+1, r1	; 0x01
        switch (opt) {
    68d6:	8d 81       	ldd	r24, Y+5	; 0x05
    68d8:	88 2f       	mov	r24, r24
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	81 30       	cpi	r24, 0x01	; 1
    68de:	91 05       	cpc	r25, r1
    68e0:	69 f0       	breq	.+26     	; 0x68fc <OSMboxPendAbort+0x6e>
    68e2:	14 c0       	rjmp	.+40     	; 0x690c <OSMboxPendAbort+0x7e>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    68e4:	8b 81       	ldd	r24, Y+3	; 0x03
    68e6:	9c 81       	ldd	r25, Y+4	; 0x04
    68e8:	60 e0       	ldi	r22, 0x00	; 0
    68ea:	70 e0       	ldi	r23, 0x00	; 0
    68ec:	42 e0       	ldi	r20, 0x02	; 2
    68ee:	22 e0       	ldi	r18, 0x02	; 2
    68f0:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                     nbr_tasks++;
    68f4:	89 81       	ldd	r24, Y+1	; 0x01
    68f6:	8f 5f       	subi	r24, 0xFF	; 255
    68f8:	89 83       	std	Y+1, r24	; 0x01
    68fa:	01 c0       	rjmp	.+2      	; 0x68fe <OSMboxPendAbort+0x70>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
    68fc:	00 00       	nop
    68fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6900:	9c 81       	ldd	r25, Y+4	; 0x04
    6902:	fc 01       	movw	r30, r24
    6904:	85 81       	ldd	r24, Z+5	; 0x05
    6906:	88 23       	and	r24, r24
    6908:	69 f7       	brne	.-38     	; 0x68e4 <OSMboxPendAbort+0x56>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    690a:	0c c0       	rjmp	.+24     	; 0x6924 <OSMboxPendAbort+0x96>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
    690c:	8b 81       	ldd	r24, Y+3	; 0x03
    690e:	9c 81       	ldd	r25, Y+4	; 0x04
    6910:	60 e0       	ldi	r22, 0x00	; 0
    6912:	70 e0       	ldi	r23, 0x00	; 0
    6914:	42 e0       	ldi	r20, 0x02	; 2
    6916:	22 e0       	ldi	r18, 0x02	; 2
    6918:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                 nbr_tasks++;
    691c:	89 81       	ldd	r24, Y+1	; 0x01
    691e:	8f 5f       	subi	r24, 0xFF	; 255
    6920:	89 83       	std	Y+1, r24	; 0x01
                 break;
    6922:	00 00       	nop
        }
        OS_EXIT_CRITICAL();
    6924:	8a 81       	ldd	r24, Y+2	; 0x02
    6926:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                        /* Find HPT ready to run                    */
    692a:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    692e:	8e 81       	ldd	r24, Y+6	; 0x06
    6930:	9f 81       	ldd	r25, Y+7	; 0x07
    6932:	2e e0       	ldi	r18, 0x0E	; 14
    6934:	fc 01       	movw	r30, r24
    6936:	20 83       	st	Z, r18
        return (nbr_tasks);
    6938:	89 81       	ldd	r24, Y+1	; 0x01
    693a:	08 c0       	rjmp	.+16     	; 0x694c <OSMboxPendAbort+0xbe>
    }
    OS_EXIT_CRITICAL();
    693c:	8a 81       	ldd	r24, Y+2	; 0x02
    693e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    6942:	8e 81       	ldd	r24, Y+6	; 0x06
    6944:	9f 81       	ldd	r25, Y+7	; 0x07
    6946:	fc 01       	movw	r30, r24
    6948:	10 82       	st	Z, r1
    return (0);                                            /* No tasks waiting on mailbox              */
    694a:	80 e0       	ldi	r24, 0x00	; 0
}
    694c:	27 96       	adiw	r28, 0x07	; 7
    694e:	cd bf       	out	0x3d, r28	; 61
    6950:	de bf       	out	0x3e, r29	; 62
    6952:	cf 91       	pop	r28
    6954:	df 91       	pop	r29
    6956:	08 95       	ret

00006958 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
    6958:	df 93       	push	r29
    695a:	cf 93       	push	r28
    695c:	cd b7       	in	r28, 0x3d	; 61
    695e:	de b7       	in	r29, 0x3e	; 62
    6960:	25 97       	sbiw	r28, 0x05	; 5
    6962:	cd bf       	out	0x3d, r28	; 61
    6964:	de bf       	out	0x3e, r29	; 62
    6966:	8a 83       	std	Y+2, r24	; 0x02
    6968:	9b 83       	std	Y+3, r25	; 0x03
    696a:	6c 83       	std	Y+4, r22	; 0x04
    696c:	7d 83       	std	Y+5, r23	; 0x05
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    696e:	19 82       	std	Y+1, r1	; 0x01
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    6970:	8a 81       	ldd	r24, Y+2	; 0x02
    6972:	9b 81       	ldd	r25, Y+3	; 0x03
    6974:	fc 01       	movw	r30, r24
    6976:	80 81       	ld	r24, Z
    6978:	81 30       	cpi	r24, 0x01	; 1
    697a:	11 f0       	breq	.+4      	; 0x6980 <OSMboxPost+0x28>
        return (OS_ERR_EVENT_TYPE);
    697c:	81 e0       	ldi	r24, 0x01	; 1
    697e:	30 c0       	rjmp	.+96     	; 0x69e0 <OSMboxPost+0x88>
    }
    OS_ENTER_CRITICAL();
    6980:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6984:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    6986:	8a 81       	ldd	r24, Y+2	; 0x02
    6988:	9b 81       	ldd	r25, Y+3	; 0x03
    698a:	fc 01       	movw	r30, r24
    698c:	85 81       	ldd	r24, Z+5	; 0x05
    698e:	88 23       	and	r24, r24
    6990:	81 f0       	breq	.+32     	; 0x69b2 <OSMboxPost+0x5a>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    6992:	8a 81       	ldd	r24, Y+2	; 0x02
    6994:	9b 81       	ldd	r25, Y+3	; 0x03
    6996:	2c 81       	ldd	r18, Y+4	; 0x04
    6998:	3d 81       	ldd	r19, Y+5	; 0x05
    699a:	b9 01       	movw	r22, r18
    699c:	42 e0       	ldi	r20, 0x02	; 2
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    69a4:	89 81       	ldd	r24, Y+1	; 0x01
    69a6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find highest priority task ready to run       */
    69aa:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        return (OS_ERR_NONE);
    69ae:	80 e0       	ldi	r24, 0x00	; 0
    69b0:	17 c0       	rjmp	.+46     	; 0x69e0 <OSMboxPost+0x88>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    69b2:	8a 81       	ldd	r24, Y+2	; 0x02
    69b4:	9b 81       	ldd	r25, Y+3	; 0x03
    69b6:	fc 01       	movw	r30, r24
    69b8:	81 81       	ldd	r24, Z+1	; 0x01
    69ba:	92 81       	ldd	r25, Z+2	; 0x02
    69bc:	00 97       	sbiw	r24, 0x00	; 0
    69be:	29 f0       	breq	.+10     	; 0x69ca <OSMboxPost+0x72>
        OS_EXIT_CRITICAL();
    69c0:	89 81       	ldd	r24, Y+1	; 0x01
    69c2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_MBOX_FULL);
    69c6:	84 e1       	ldi	r24, 0x14	; 20
    69c8:	0b c0       	rjmp	.+22     	; 0x69e0 <OSMboxPost+0x88>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    69ca:	8a 81       	ldd	r24, Y+2	; 0x02
    69cc:	9b 81       	ldd	r25, Y+3	; 0x03
    69ce:	2c 81       	ldd	r18, Y+4	; 0x04
    69d0:	3d 81       	ldd	r19, Y+5	; 0x05
    69d2:	fc 01       	movw	r30, r24
    69d4:	21 83       	std	Z+1, r18	; 0x01
    69d6:	32 83       	std	Z+2, r19	; 0x02
    OS_EXIT_CRITICAL();
    69d8:	89 81       	ldd	r24, Y+1	; 0x01
    69da:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    69de:	80 e0       	ldi	r24, 0x00	; 0
}
    69e0:	25 96       	adiw	r28, 0x05	; 5
    69e2:	cd bf       	out	0x3d, r28	; 61
    69e4:	de bf       	out	0x3e, r29	; 62
    69e6:	cf 91       	pop	r28
    69e8:	df 91       	pop	r29
    69ea:	08 95       	ret

000069ec <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    69ec:	df 93       	push	r29
    69ee:	cf 93       	push	r28
    69f0:	00 d0       	rcall	.+0      	; 0x69f2 <OSMboxPostOpt+0x6>
    69f2:	00 d0       	rcall	.+0      	; 0x69f4 <OSMboxPostOpt+0x8>
    69f4:	cd b7       	in	r28, 0x3d	; 61
    69f6:	de b7       	in	r29, 0x3e	; 62
    69f8:	8a 83       	std	Y+2, r24	; 0x02
    69fa:	9b 83       	std	Y+3, r25	; 0x03
    69fc:	6c 83       	std	Y+4, r22	; 0x04
    69fe:	7d 83       	std	Y+5, r23	; 0x05
    6a00:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6a02:	19 82       	std	Y+1, r1	; 0x01
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
    6a04:	8a 81       	ldd	r24, Y+2	; 0x02
    6a06:	9b 81       	ldd	r25, Y+3	; 0x03
    6a08:	fc 01       	movw	r30, r24
    6a0a:	80 81       	ld	r24, Z
    6a0c:	81 30       	cpi	r24, 0x01	; 1
    6a0e:	11 f0       	breq	.+4      	; 0x6a14 <OSMboxPostOpt+0x28>
        return (OS_ERR_EVENT_TYPE);
    6a10:	81 e0       	ldi	r24, 0x01	; 1
    6a12:	4f c0       	rjmp	.+158    	; 0x6ab2 <OSMboxPostOpt+0xc6>
    }
    OS_ENTER_CRITICAL();
    6a14:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6a18:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
    6a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    6a1e:	fc 01       	movw	r30, r24
    6a20:	85 81       	ldd	r24, Z+5	; 0x05
    6a22:	88 23       	and	r24, r24
    6a24:	79 f1       	breq	.+94     	; 0x6a84 <OSMboxPostOpt+0x98>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    6a26:	8e 81       	ldd	r24, Y+6	; 0x06
    6a28:	88 2f       	mov	r24, r24
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	81 70       	andi	r24, 0x01	; 1
    6a2e:	90 70       	andi	r25, 0x00	; 0
    6a30:	88 23       	and	r24, r24
    6a32:	89 f0       	breq	.+34     	; 0x6a56 <OSMboxPostOpt+0x6a>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    6a34:	09 c0       	rjmp	.+18     	; 0x6a48 <OSMboxPostOpt+0x5c>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    6a36:	8a 81       	ldd	r24, Y+2	; 0x02
    6a38:	9b 81       	ldd	r25, Y+3	; 0x03
    6a3a:	2c 81       	ldd	r18, Y+4	; 0x04
    6a3c:	3d 81       	ldd	r19, Y+5	; 0x05
    6a3e:	b9 01       	movw	r22, r18
    6a40:	42 e0       	ldi	r20, 0x02	; 2
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
    6a48:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    6a4c:	fc 01       	movw	r30, r24
    6a4e:	85 81       	ldd	r24, Z+5	; 0x05
    6a50:	88 23       	and	r24, r24
    6a52:	89 f7       	brne	.-30     	; 0x6a36 <OSMboxPostOpt+0x4a>
    6a54:	09 c0       	rjmp	.+18     	; 0x6a68 <OSMboxPostOpt+0x7c>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
    6a56:	8a 81       	ldd	r24, Y+2	; 0x02
    6a58:	9b 81       	ldd	r25, Y+3	; 0x03
    6a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    6a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    6a5e:	b9 01       	movw	r22, r18
    6a60:	42 e0       	ldi	r20, 0x02	; 2
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
    6a68:	89 81       	ldd	r24, Y+1	; 0x01
    6a6a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    6a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    6a70:	88 2f       	mov	r24, r24
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	84 70       	andi	r24, 0x04	; 4
    6a76:	90 70       	andi	r25, 0x00	; 0
    6a78:	00 97       	sbiw	r24, 0x00	; 0
    6a7a:	11 f4       	brne	.+4      	; 0x6a80 <OSMboxPostOpt+0x94>
            OS_Sched();                               /* Find HPT ready to run                         */
    6a7c:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        }
        return (OS_ERR_NONE);
    6a80:	80 e0       	ldi	r24, 0x00	; 0
    6a82:	17 c0       	rjmp	.+46     	; 0x6ab2 <OSMboxPostOpt+0xc6>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
    6a84:	8a 81       	ldd	r24, Y+2	; 0x02
    6a86:	9b 81       	ldd	r25, Y+3	; 0x03
    6a88:	fc 01       	movw	r30, r24
    6a8a:	81 81       	ldd	r24, Z+1	; 0x01
    6a8c:	92 81       	ldd	r25, Z+2	; 0x02
    6a8e:	00 97       	sbiw	r24, 0x00	; 0
    6a90:	29 f0       	breq	.+10     	; 0x6a9c <OSMboxPostOpt+0xb0>
        OS_EXIT_CRITICAL();
    6a92:	89 81       	ldd	r24, Y+1	; 0x01
    6a94:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_MBOX_FULL);
    6a98:	84 e1       	ldi	r24, 0x14	; 20
    6a9a:	0b c0       	rjmp	.+22     	; 0x6ab2 <OSMboxPostOpt+0xc6>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
    6a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a9e:	9b 81       	ldd	r25, Y+3	; 0x03
    6aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    6aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    6aa4:	fc 01       	movw	r30, r24
    6aa6:	21 83       	std	Z+1, r18	; 0x01
    6aa8:	32 83       	std	Z+2, r19	; 0x02
    OS_EXIT_CRITICAL();
    6aaa:	89 81       	ldd	r24, Y+1	; 0x01
    6aac:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    6ab0:	80 e0       	ldi	r24, 0x00	; 0
}
    6ab2:	26 96       	adiw	r28, 0x06	; 6
    6ab4:	cd bf       	out	0x3d, r28	; 61
    6ab6:	de bf       	out	0x3e, r29	; 62
    6ab8:	cf 91       	pop	r28
    6aba:	df 91       	pop	r29
    6abc:	08 95       	ret

00006abe <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
    6abe:	df 93       	push	r29
    6ac0:	cf 93       	push	r28
    6ac2:	cd b7       	in	r28, 0x3d	; 61
    6ac4:	de b7       	in	r29, 0x3e	; 62
    6ac6:	2a 97       	sbiw	r28, 0x0a	; 10
    6ac8:	cd bf       	out	0x3d, r28	; 61
    6aca:	de bf       	out	0x3e, r29	; 62
    6acc:	8f 83       	std	Y+7, r24	; 0x07
    6ace:	98 87       	std	Y+8, r25	; 0x08
    6ad0:	69 87       	std	Y+9, r22	; 0x09
    6ad2:	7a 87       	std	Y+10, r23	; 0x0a
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6ad4:	1e 82       	std	Y+6, r1	; 0x06
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
    6ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ad8:	98 85       	ldd	r25, Y+8	; 0x08
    6ada:	fc 01       	movw	r30, r24
    6adc:	80 81       	ld	r24, Z
    6ade:	81 30       	cpi	r24, 0x01	; 1
    6ae0:	11 f0       	breq	.+4      	; 0x6ae6 <OSMboxQuery+0x28>
        return (OS_ERR_EVENT_TYPE);
    6ae2:	81 e0       	ldi	r24, 0x01	; 1
    6ae4:	3d c0       	rjmp	.+122    	; 0x6b60 <OSMboxQuery+0xa2>
    }
    OS_ENTER_CRITICAL();
    6ae6:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6aea:	8e 83       	std	Y+6, r24	; 0x06
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    6aec:	8f 81       	ldd	r24, Y+7	; 0x07
    6aee:	98 85       	ldd	r25, Y+8	; 0x08
    6af0:	fc 01       	movw	r30, r24
    6af2:	25 81       	ldd	r18, Z+5	; 0x05
    6af4:	89 85       	ldd	r24, Y+9	; 0x09
    6af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6af8:	fc 01       	movw	r30, r24
    6afa:	22 87       	std	Z+10, r18	; 0x0a
    psrc                    = &pevent->OSEventTbl[0];
    6afc:	8f 81       	ldd	r24, Y+7	; 0x07
    6afe:	98 85       	ldd	r25, Y+8	; 0x08
    6b00:	06 96       	adiw	r24, 0x06	; 6
    6b02:	8a 83       	std	Y+2, r24	; 0x02
    6b04:	9b 83       	std	Y+3, r25	; 0x03
    pdest                   = &p_mbox_data->OSEventTbl[0];
    6b06:	89 85       	ldd	r24, Y+9	; 0x09
    6b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b0a:	02 96       	adiw	r24, 0x02	; 2
    6b0c:	8c 83       	std	Y+4, r24	; 0x04
    6b0e:	9d 83       	std	Y+5, r25	; 0x05
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6b10:	19 82       	std	Y+1, r1	; 0x01
    6b12:	15 c0       	rjmp	.+42     	; 0x6b3e <OSMboxQuery+0x80>
        *pdest++ = *psrc++;
    6b14:	8a 81       	ldd	r24, Y+2	; 0x02
    6b16:	9b 81       	ldd	r25, Y+3	; 0x03
    6b18:	fc 01       	movw	r30, r24
    6b1a:	20 81       	ld	r18, Z
    6b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    6b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    6b20:	fc 01       	movw	r30, r24
    6b22:	20 83       	st	Z, r18
    6b24:	8c 81       	ldd	r24, Y+4	; 0x04
    6b26:	9d 81       	ldd	r25, Y+5	; 0x05
    6b28:	01 96       	adiw	r24, 0x01	; 1
    6b2a:	8c 83       	std	Y+4, r24	; 0x04
    6b2c:	9d 83       	std	Y+5, r25	; 0x05
    6b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b30:	9b 81       	ldd	r25, Y+3	; 0x03
    6b32:	01 96       	adiw	r24, 0x01	; 1
    6b34:	8a 83       	std	Y+2, r24	; 0x02
    6b36:	9b 83       	std	Y+3, r25	; 0x03
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    6b38:	89 81       	ldd	r24, Y+1	; 0x01
    6b3a:	8f 5f       	subi	r24, 0xFF	; 255
    6b3c:	89 83       	std	Y+1, r24	; 0x01
    6b3e:	89 81       	ldd	r24, Y+1	; 0x01
    6b40:	88 30       	cpi	r24, 0x08	; 8
    6b42:	40 f3       	brcs	.-48     	; 0x6b14 <OSMboxQuery+0x56>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
    6b44:	8f 81       	ldd	r24, Y+7	; 0x07
    6b46:	98 85       	ldd	r25, Y+8	; 0x08
    6b48:	fc 01       	movw	r30, r24
    6b4a:	21 81       	ldd	r18, Z+1	; 0x01
    6b4c:	32 81       	ldd	r19, Z+2	; 0x02
    6b4e:	89 85       	ldd	r24, Y+9	; 0x09
    6b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b52:	fc 01       	movw	r30, r24
    6b54:	20 83       	st	Z, r18
    6b56:	31 83       	std	Z+1, r19	; 0x01
    OS_EXIT_CRITICAL();
    6b58:	8e 81       	ldd	r24, Y+6	; 0x06
    6b5a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    6b5e:	80 e0       	ldi	r24, 0x00	; 0
}
    6b60:	2a 96       	adiw	r28, 0x0a	; 10
    6b62:	cd bf       	out	0x3d, r28	; 61
    6b64:	de bf       	out	0x3e, r29	; 62
    6b66:	cf 91       	pop	r28
    6b68:	df 91       	pop	r29
    6b6a:	08 95       	ret

00006b6c <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
    6b6c:	df 93       	push	r29
    6b6e:	cf 93       	push	r28
    6b70:	00 d0       	rcall	.+0      	; 0x6b72 <OSMutexAccept+0x6>
    6b72:	00 d0       	rcall	.+0      	; 0x6b74 <OSMutexAccept+0x8>
    6b74:	cd b7       	in	r28, 0x3d	; 61
    6b76:	de b7       	in	r29, 0x3e	; 62
    6b78:	8b 83       	std	Y+3, r24	; 0x03
    6b7a:	9c 83       	std	Y+4, r25	; 0x04
    6b7c:	6d 83       	std	Y+5, r22	; 0x05
    6b7e:	7e 83       	std	Y+6, r23	; 0x06
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    6b80:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        *perr = OS_ERR_PEVENT_NULL;
        return (OS_FALSE);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
    6b82:	8b 81       	ldd	r24, Y+3	; 0x03
    6b84:	9c 81       	ldd	r25, Y+4	; 0x04
    6b86:	fc 01       	movw	r30, r24
    6b88:	80 81       	ld	r24, Z
    6b8a:	84 30       	cpi	r24, 0x04	; 4
    6b8c:	39 f0       	breq	.+14     	; 0x6b9c <OSMutexAccept+0x30>
        *perr = OS_ERR_EVENT_TYPE;
    6b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b90:	9e 81       	ldd	r25, Y+6	; 0x06
    6b92:	21 e0       	ldi	r18, 0x01	; 1
    6b94:	fc 01       	movw	r30, r24
    6b96:	20 83       	st	Z, r18
        return (OS_FALSE);
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	6c c0       	rjmp	.+216    	; 0x6c74 <OSMutexAccept+0x108>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
    6b9c:	80 91 07 2e 	lds	r24, 0x2E07
    6ba0:	88 23       	and	r24, r24
    6ba2:	39 f0       	breq	.+14     	; 0x6bb2 <OSMutexAccept+0x46>
        *perr = OS_ERR_PEND_ISR;
    6ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    6ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    6ba8:	22 e0       	ldi	r18, 0x02	; 2
    6baa:	fc 01       	movw	r30, r24
    6bac:	20 83       	st	Z, r18
        return (OS_FALSE);
    6bae:	80 e0       	ldi	r24, 0x00	; 0
    6bb0:	61 c0       	rjmp	.+194    	; 0x6c74 <OSMutexAccept+0x108>
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
    6bb2:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6bb6:	89 83       	std	Y+1, r24	; 0x01
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
    6bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    6bba:	9c 81       	ldd	r25, Y+4	; 0x04
    6bbc:	fc 01       	movw	r30, r24
    6bbe:	83 81       	ldd	r24, Z+3	; 0x03
    6bc0:	94 81       	ldd	r25, Z+4	; 0x04
    6bc2:	89 2f       	mov	r24, r25
    6bc4:	99 27       	eor	r25, r25
    6bc6:	8a 83       	std	Y+2, r24	; 0x02
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    6bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    6bca:	9c 81       	ldd	r25, Y+4	; 0x04
    6bcc:	fc 01       	movw	r30, r24
    6bce:	83 81       	ldd	r24, Z+3	; 0x03
    6bd0:	94 81       	ldd	r25, Z+4	; 0x04
    6bd2:	90 70       	andi	r25, 0x00	; 0
    6bd4:	8f 3f       	cpi	r24, 0xFF	; 255
    6bd6:	91 05       	cpc	r25, r1
    6bd8:	09 f0       	breq	.+2      	; 0x6bdc <OSMutexAccept+0x70>
    6bda:	44 c0       	rjmp	.+136    	; 0x6c64 <OSMutexAccept+0xf8>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
    6bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    6bde:	9c 81       	ldd	r25, Y+4	; 0x04
    6be0:	fc 01       	movw	r30, r24
    6be2:	83 81       	ldd	r24, Z+3	; 0x03
    6be4:	94 81       	ldd	r25, Z+4	; 0x04
    6be6:	9c 01       	movw	r18, r24
    6be8:	20 70       	andi	r18, 0x00	; 0
    6bea:	8b 81       	ldd	r24, Y+3	; 0x03
    6bec:	9c 81       	ldd	r25, Y+4	; 0x04
    6bee:	fc 01       	movw	r30, r24
    6bf0:	23 83       	std	Z+3, r18	; 0x03
    6bf2:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
    6bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    6bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	23 81       	ldd	r18, Z+3	; 0x03
    6bfc:	34 81       	ldd	r19, Z+4	; 0x04
    6bfe:	80 91 08 2e 	lds	r24, 0x2E08
    6c02:	90 91 09 2e 	lds	r25, 0x2E09
    6c06:	fc 01       	movw	r30, r24
    6c08:	80 a1       	ldd	r24, Z+32	; 0x20
    6c0a:	88 2f       	mov	r24, r24
    6c0c:	90 e0       	ldi	r25, 0x00	; 0
    6c0e:	28 2b       	or	r18, r24
    6c10:	39 2b       	or	r19, r25
    6c12:	8b 81       	ldd	r24, Y+3	; 0x03
    6c14:	9c 81       	ldd	r25, Y+4	; 0x04
    6c16:	fc 01       	movw	r30, r24
    6c18:	23 83       	std	Z+3, r18	; 0x03
    6c1a:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
    6c1c:	20 91 08 2e 	lds	r18, 0x2E08
    6c20:	30 91 09 2e 	lds	r19, 0x2E09
    6c24:	8b 81       	ldd	r24, Y+3	; 0x03
    6c26:	9c 81       	ldd	r25, Y+4	; 0x04
    6c28:	fc 01       	movw	r30, r24
    6c2a:	21 83       	std	Z+1, r18	; 0x01
    6c2c:	32 83       	std	Z+2, r19	; 0x02
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
    6c2e:	80 91 08 2e 	lds	r24, 0x2E08
    6c32:	90 91 09 2e 	lds	r25, 0x2E09
    6c36:	fc 01       	movw	r30, r24
    6c38:	90 a1       	ldd	r25, Z+32	; 0x20
    6c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c3c:	89 17       	cp	r24, r25
    6c3e:	48 f0       	brcs	.+18     	; 0x6c52 <OSMutexAccept+0xe6>
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
    6c40:	89 81       	ldd	r24, Y+1	; 0x01
    6c42:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            *perr = OS_ERR_PIP_LOWER;
    6c46:	8d 81       	ldd	r24, Y+5	; 0x05
    6c48:	9e 81       	ldd	r25, Y+6	; 0x06
    6c4a:	28 e7       	ldi	r18, 0x78	; 120
    6c4c:	fc 01       	movw	r30, r24
    6c4e:	20 83       	st	Z, r18
    6c50:	07 c0       	rjmp	.+14     	; 0x6c60 <OSMutexAccept+0xf4>
        } else {
            OS_EXIT_CRITICAL();
    6c52:	89 81       	ldd	r24, Y+1	; 0x01
    6c54:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            *perr = OS_ERR_NONE;
    6c58:	8d 81       	ldd	r24, Y+5	; 0x05
    6c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c5c:	fc 01       	movw	r30, r24
    6c5e:	10 82       	st	Z, r1
        }
        return (OS_TRUE);
    6c60:	81 e0       	ldi	r24, 0x01	; 1
    6c62:	08 c0       	rjmp	.+16     	; 0x6c74 <OSMutexAccept+0x108>
    }
    OS_EXIT_CRITICAL();
    6c64:	89 81       	ldd	r24, Y+1	; 0x01
    6c66:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    6c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    6c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    6c6e:	fc 01       	movw	r30, r24
    6c70:	10 82       	st	Z, r1
    return (OS_FALSE);
    6c72:	80 e0       	ldi	r24, 0x00	; 0
}
    6c74:	26 96       	adiw	r28, 0x06	; 6
    6c76:	cd bf       	out	0x3d, r28	; 61
    6c78:	de bf       	out	0x3e, r29	; 62
    6c7a:	cf 91       	pop	r28
    6c7c:	df 91       	pop	r29
    6c7e:	08 95       	ret

00006c80 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
    6c80:	df 93       	push	r29
    6c82:	cf 93       	push	r28
    6c84:	00 d0       	rcall	.+0      	; 0x6c86 <OSMutexCreate+0x6>
    6c86:	00 d0       	rcall	.+0      	; 0x6c88 <OSMutexCreate+0x8>
    6c88:	cd b7       	in	r28, 0x3d	; 61
    6c8a:	de b7       	in	r29, 0x3e	; 62
    6c8c:	8c 83       	std	Y+4, r24	; 0x04
    6c8e:	6d 83       	std	Y+5, r22	; 0x05
    6c90:	7e 83       	std	Y+6, r23	; 0x06
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6c92:	19 82       	std	Y+1, r1	; 0x01
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
        *perr = OS_ERR_PRIO_INVALID;
        return ((OS_EVENT *)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6c94:	80 91 07 2e 	lds	r24, 0x2E07
    6c98:	88 23       	and	r24, r24
    6c9a:	41 f0       	breq	.+16     	; 0x6cac <OSMutexCreate+0x2c>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
    6c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    6c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca0:	20 e1       	ldi	r18, 0x10	; 16
    6ca2:	fc 01       	movw	r30, r24
    6ca4:	20 83       	st	Z, r18
        return ((OS_EVENT *)0);
    6ca6:	80 e0       	ldi	r24, 0x00	; 0
    6ca8:	90 e0       	ldi	r25, 0x00	; 0
    6caa:	7c c0       	rjmp	.+248    	; 0x6da4 <OSMutexCreate+0x124>
    }
    OS_ENTER_CRITICAL();
    6cac:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6cb0:	89 83       	std	Y+1, r24	; 0x01
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
    6cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    6cb4:	88 2f       	mov	r24, r24
    6cb6:	90 e0       	ldi	r25, 0x00	; 0
    6cb8:	88 0f       	add	r24, r24
    6cba:	99 1f       	adc	r25, r25
    6cbc:	8d 58       	subi	r24, 0x8D	; 141
    6cbe:	9a 4c       	sbci	r25, 0xCA	; 202
    6cc0:	fc 01       	movw	r30, r24
    6cc2:	80 81       	ld	r24, Z
    6cc4:	91 81       	ldd	r25, Z+1	; 0x01
    6cc6:	00 97       	sbiw	r24, 0x00	; 0
    6cc8:	59 f0       	breq	.+22     	; 0x6ce0 <OSMutexCreate+0x60>
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
    6cca:	89 81       	ldd	r24, Y+1	; 0x01
    6ccc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
    6cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    6cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    6cd4:	28 e2       	ldi	r18, 0x28	; 40
    6cd6:	fc 01       	movw	r30, r24
    6cd8:	20 83       	st	Z, r18
        return ((OS_EVENT *)0);
    6cda:	80 e0       	ldi	r24, 0x00	; 0
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	62 c0       	rjmp	.+196    	; 0x6da4 <OSMutexCreate+0x124>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
    6ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ce2:	88 2f       	mov	r24, r24
    6ce4:	90 e0       	ldi	r25, 0x00	; 0
    6ce6:	88 0f       	add	r24, r24
    6ce8:	99 1f       	adc	r25, r25
    6cea:	8d 58       	subi	r24, 0x8D	; 141
    6cec:	9a 4c       	sbci	r25, 0xCA	; 202
    6cee:	21 e0       	ldi	r18, 0x01	; 1
    6cf0:	30 e0       	ldi	r19, 0x00	; 0
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	20 83       	st	Z, r18
    6cf6:	31 83       	std	Z+1, r19	; 0x01
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
    6cf8:	80 91 05 2e 	lds	r24, 0x2E05
    6cfc:	90 91 06 2e 	lds	r25, 0x2E06
    6d00:	8a 83       	std	Y+2, r24	; 0x02
    6d02:	9b 83       	std	Y+3, r25	; 0x03
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
    6d04:	8a 81       	ldd	r24, Y+2	; 0x02
    6d06:	9b 81       	ldd	r25, Y+3	; 0x03
    6d08:	00 97       	sbiw	r24, 0x00	; 0
    6d0a:	a9 f4       	brne	.+42     	; 0x6d36 <OSMutexCreate+0xb6>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
    6d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d0e:	88 2f       	mov	r24, r24
    6d10:	90 e0       	ldi	r25, 0x00	; 0
    6d12:	88 0f       	add	r24, r24
    6d14:	99 1f       	adc	r25, r25
    6d16:	8d 58       	subi	r24, 0x8D	; 141
    6d18:	9a 4c       	sbci	r25, 0xCA	; 202
    6d1a:	fc 01       	movw	r30, r24
    6d1c:	10 82       	st	Z, r1
    6d1e:	11 82       	std	Z+1, r1	; 0x01
        OS_EXIT_CRITICAL();
    6d20:	89 81       	ldd	r24, Y+1	; 0x01
    6d22:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
    6d26:	8d 81       	ldd	r24, Y+5	; 0x05
    6d28:	9e 81       	ldd	r25, Y+6	; 0x06
    6d2a:	24 e0       	ldi	r18, 0x04	; 4
    6d2c:	fc 01       	movw	r30, r24
    6d2e:	20 83       	st	Z, r18
        return (pevent);
    6d30:	8a 81       	ldd	r24, Y+2	; 0x02
    6d32:	9b 81       	ldd	r25, Y+3	; 0x03
    6d34:	37 c0       	rjmp	.+110    	; 0x6da4 <OSMutexCreate+0x124>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
    6d36:	80 91 05 2e 	lds	r24, 0x2E05
    6d3a:	90 91 06 2e 	lds	r25, 0x2E06
    6d3e:	fc 01       	movw	r30, r24
    6d40:	81 81       	ldd	r24, Z+1	; 0x01
    6d42:	92 81       	ldd	r25, Z+2	; 0x02
    6d44:	80 93 05 2e 	sts	0x2E05, r24
    6d48:	90 93 06 2e 	sts	0x2E06, r25
    OS_EXIT_CRITICAL();
    6d4c:	89 81       	ldd	r24, Y+1	; 0x01
    6d4e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
    6d52:	8a 81       	ldd	r24, Y+2	; 0x02
    6d54:	9b 81       	ldd	r25, Y+3	; 0x03
    6d56:	24 e0       	ldi	r18, 0x04	; 4
    6d58:	fc 01       	movw	r30, r24
    6d5a:	20 83       	st	Z, r18
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
    6d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    6d5e:	88 2f       	mov	r24, r24
    6d60:	90 e0       	ldi	r25, 0x00	; 0
    6d62:	98 2f       	mov	r25, r24
    6d64:	88 27       	eor	r24, r24
    6d66:	9c 01       	movw	r18, r24
    6d68:	2f 6f       	ori	r18, 0xFF	; 255
    6d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    6d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    6d6e:	fc 01       	movw	r30, r24
    6d70:	23 83       	std	Z+3, r18	; 0x03
    6d72:	34 83       	std	Z+4, r19	; 0x04
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
    6d74:	8a 81       	ldd	r24, Y+2	; 0x02
    6d76:	9b 81       	ldd	r25, Y+3	; 0x03
    6d78:	fc 01       	movw	r30, r24
    6d7a:	11 82       	std	Z+1, r1	; 0x01
    6d7c:	12 82       	std	Z+2, r1	; 0x02
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
    6d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d80:	9b 81       	ldd	r25, Y+3	; 0x03
    6d82:	2f e3       	ldi	r18, 0x3F	; 63
    6d84:	fc 01       	movw	r30, r24
    6d86:	26 87       	std	Z+14, r18	; 0x0e
    pevent->OSEventName[1] = OS_ASCII_NUL;
    6d88:	8a 81       	ldd	r24, Y+2	; 0x02
    6d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d8c:	fc 01       	movw	r30, r24
    6d8e:	17 86       	std	Z+15, r1	; 0x0f
#endif
    OS_EventWaitListInit(pevent);
    6d90:	8a 81       	ldd	r24, Y+2	; 0x02
    6d92:	9b 81       	ldd	r25, Y+3	; 0x03
    6d94:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
    6d98:	8d 81       	ldd	r24, Y+5	; 0x05
    6d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	10 82       	st	Z, r1
    return (pevent);
    6da0:	8a 81       	ldd	r24, Y+2	; 0x02
    6da2:	9b 81       	ldd	r25, Y+3	; 0x03
}
    6da4:	26 96       	adiw	r28, 0x06	; 6
    6da6:	cd bf       	out	0x3d, r28	; 61
    6da8:	de bf       	out	0x3e, r29	; 62
    6daa:	cf 91       	pop	r28
    6dac:	df 91       	pop	r29
    6dae:	08 95       	ret

00006db0 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    6db0:	df 93       	push	r29
    6db2:	cf 93       	push	r28
    6db4:	cd b7       	in	r28, 0x3d	; 61
    6db6:	de b7       	in	r29, 0x3e	; 62
    6db8:	2d 97       	sbiw	r28, 0x0d	; 13
    6dba:	cd bf       	out	0x3d, r28	; 61
    6dbc:	de bf       	out	0x3e, r29	; 62
    6dbe:	89 87       	std	Y+9, r24	; 0x09
    6dc0:	9a 87       	std	Y+10, r25	; 0x0a
    6dc2:	6b 87       	std	Y+11, r22	; 0x0b
    6dc4:	4c 87       	std	Y+12, r20	; 0x0c
    6dc6:	5d 87       	std	Y+13, r21	; 0x0d
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6dc8:	1c 82       	std	Y+4, r1	; 0x04
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    6dca:	89 85       	ldd	r24, Y+9	; 0x09
    6dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dce:	fc 01       	movw	r30, r24
    6dd0:	80 81       	ld	r24, Z
    6dd2:	84 30       	cpi	r24, 0x04	; 4
    6dd4:	41 f0       	breq	.+16     	; 0x6de6 <OSMutexDel+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    6dd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    6dd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    6dda:	21 e0       	ldi	r18, 0x01	; 1
    6ddc:	fc 01       	movw	r30, r24
    6dde:	20 83       	st	Z, r18
        return (pevent);
    6de0:	89 85       	ldd	r24, Y+9	; 0x09
    6de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6de4:	f9 c0       	rjmp	.+498    	; 0x6fd8 <OSMutexDel+0x228>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    6de6:	80 91 07 2e 	lds	r24, 0x2E07
    6dea:	88 23       	and	r24, r24
    6dec:	41 f0       	breq	.+16     	; 0x6dfe <OSMutexDel+0x4e>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    6dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    6df0:	9d 85       	ldd	r25, Y+13	; 0x0d
    6df2:	2f e0       	ldi	r18, 0x0F	; 15
    6df4:	fc 01       	movw	r30, r24
    6df6:	20 83       	st	Z, r18
        return (pevent);
    6df8:	89 85       	ldd	r24, Y+9	; 0x09
    6dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dfc:	ed c0       	rjmp	.+474    	; 0x6fd8 <OSMutexDel+0x228>
    }
    OS_ENTER_CRITICAL();
    6dfe:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    6e02:	8c 83       	std	Y+4, r24	; 0x04
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
    6e04:	89 85       	ldd	r24, Y+9	; 0x09
    6e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e08:	fc 01       	movw	r30, r24
    6e0a:	85 81       	ldd	r24, Z+5	; 0x05
    6e0c:	88 23       	and	r24, r24
    6e0e:	19 f0       	breq	.+6      	; 0x6e16 <OSMutexDel+0x66>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    6e10:	81 e0       	ldi	r24, 0x01	; 1
    6e12:	89 83       	std	Y+1, r24	; 0x01
    6e14:	01 c0       	rjmp	.+2      	; 0x6e18 <OSMutexDel+0x68>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    6e16:	19 82       	std	Y+1, r1	; 0x01
    }
    switch (opt) {
    6e18:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e1a:	88 2f       	mov	r24, r24
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	00 97       	sbiw	r24, 0x00	; 0
    6e20:	29 f0       	breq	.+10     	; 0x6e2c <OSMutexDel+0x7c>
    6e22:	81 30       	cpi	r24, 0x01	; 1
    6e24:	91 05       	cpc	r25, r1
    6e26:	09 f4       	brne	.+2      	; 0x6e2a <OSMutexDel+0x7a>
    6e28:	4e c0       	rjmp	.+156    	; 0x6ec6 <OSMutexDel+0x116>
    6e2a:	c7 c0       	rjmp	.+398    	; 0x6fba <OSMutexDel+0x20a>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
    6e2c:	89 81       	ldd	r24, Y+1	; 0x01
    6e2e:	88 23       	and	r24, r24
    6e30:	e9 f5       	brne	.+122    	; 0x6eac <OSMutexDel+0xfc>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    6e32:	89 85       	ldd	r24, Y+9	; 0x09
    6e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e36:	2f e3       	ldi	r18, 0x3F	; 63
    6e38:	fc 01       	movw	r30, r24
    6e3a:	26 87       	std	Z+14, r18	; 0x0e
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    6e3c:	89 85       	ldd	r24, Y+9	; 0x09
    6e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e40:	fc 01       	movw	r30, r24
    6e42:	17 86       	std	Z+15, r1	; 0x0f
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
    6e44:	89 85       	ldd	r24, Y+9	; 0x09
    6e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e48:	fc 01       	movw	r30, r24
    6e4a:	83 81       	ldd	r24, Z+3	; 0x03
    6e4c:	94 81       	ldd	r25, Z+4	; 0x04
    6e4e:	89 2f       	mov	r24, r25
    6e50:	99 27       	eor	r25, r25
    6e52:	8d 83       	std	Y+5, r24	; 0x05
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
    6e54:	8d 81       	ldd	r24, Y+5	; 0x05
    6e56:	88 2f       	mov	r24, r24
    6e58:	90 e0       	ldi	r25, 0x00	; 0
    6e5a:	88 0f       	add	r24, r24
    6e5c:	99 1f       	adc	r25, r25
    6e5e:	8d 58       	subi	r24, 0x8D	; 141
    6e60:	9a 4c       	sbci	r25, 0xCA	; 202
    6e62:	fc 01       	movw	r30, r24
    6e64:	10 82       	st	Z, r1
    6e66:	11 82       	std	Z+1, r1	; 0x01
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    6e68:	89 85       	ldd	r24, Y+9	; 0x09
    6e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e6c:	fc 01       	movw	r30, r24
    6e6e:	10 82       	st	Z, r1
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
    6e70:	20 91 05 2e 	lds	r18, 0x2E05
    6e74:	30 91 06 2e 	lds	r19, 0x2E06
    6e78:	89 85       	ldd	r24, Y+9	; 0x09
    6e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e7c:	fc 01       	movw	r30, r24
    6e7e:	21 83       	std	Z+1, r18	; 0x01
    6e80:	32 83       	std	Z+2, r19	; 0x02
                 pevent->OSEventCnt  = 0;
    6e82:	89 85       	ldd	r24, Y+9	; 0x09
    6e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e86:	fc 01       	movw	r30, r24
    6e88:	13 82       	std	Z+3, r1	; 0x03
    6e8a:	14 82       	std	Z+4, r1	; 0x04
                 OSEventFreeList     = pevent;
    6e8c:	89 85       	ldd	r24, Y+9	; 0x09
    6e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e90:	80 93 05 2e 	sts	0x2E05, r24
    6e94:	90 93 06 2e 	sts	0x2E06, r25
                 OS_EXIT_CRITICAL();
    6e98:	8c 81       	ldd	r24, Y+4	; 0x04
    6e9a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr               = OS_ERR_NONE;
    6e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
    6ea2:	fc 01       	movw	r30, r24
    6ea4:	10 82       	st	Z, r1
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
    6ea6:	1a 82       	std	Y+2, r1	; 0x02
    6ea8:	1b 82       	std	Y+3, r1	; 0x03
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
    6eaa:	94 c0       	rjmp	.+296    	; 0x6fd4 <OSMutexDel+0x224>
                 OSEventFreeList     = pevent;
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
    6eac:	8c 81       	ldd	r24, Y+4	; 0x04
    6eae:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr               = OS_ERR_TASK_WAITING;
    6eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    6eb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    6eb6:	29 e4       	ldi	r18, 0x49	; 73
    6eb8:	fc 01       	movw	r30, r24
    6eba:	20 83       	st	Z, r18
                 pevent_return       = pevent;
    6ebc:	89 85       	ldd	r24, Y+9	; 0x09
    6ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ec0:	8a 83       	std	Y+2, r24	; 0x02
    6ec2:	9b 83       	std	Y+3, r25	; 0x03
             }
             break;
    6ec4:	87 c0       	rjmp	.+270    	; 0x6fd4 <OSMutexDel+0x224>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
    6ec6:	89 85       	ldd	r24, Y+9	; 0x09
    6ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eca:	fc 01       	movw	r30, r24
    6ecc:	83 81       	ldd	r24, Z+3	; 0x03
    6ece:	94 81       	ldd	r25, Z+4	; 0x04
    6ed0:	89 2f       	mov	r24, r25
    6ed2:	99 27       	eor	r25, r25
    6ed4:	8d 83       	std	Y+5, r24	; 0x05
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
    6ed6:	89 85       	ldd	r24, Y+9	; 0x09
    6ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    6eda:	fc 01       	movw	r30, r24
    6edc:	83 81       	ldd	r24, Z+3	; 0x03
    6ede:	94 81       	ldd	r25, Z+4	; 0x04
    6ee0:	8e 83       	std	Y+6, r24	; 0x06
             ptcb = (OS_TCB *)pevent->OSEventPtr;
    6ee2:	89 85       	ldd	r24, Y+9	; 0x09
    6ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ee6:	fc 01       	movw	r30, r24
    6ee8:	81 81       	ldd	r24, Z+1	; 0x01
    6eea:	92 81       	ldd	r25, Z+2	; 0x02
    6eec:	8f 83       	std	Y+7, r24	; 0x07
    6eee:	98 87       	std	Y+8, r25	; 0x08
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
    6ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ef2:	98 85       	ldd	r25, Y+8	; 0x08
    6ef4:	00 97       	sbiw	r24, 0x00	; 0
    6ef6:	b1 f0       	breq	.+44     	; 0x6f24 <OSMutexDel+0x174>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
    6ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    6efa:	98 85       	ldd	r25, Y+8	; 0x08
    6efc:	fc 01       	movw	r30, r24
    6efe:	90 a1       	ldd	r25, Z+32	; 0x20
    6f00:	8d 81       	ldd	r24, Y+5	; 0x05
    6f02:	98 17       	cp	r25, r24
    6f04:	89 f4       	brne	.+34     	; 0x6f28 <OSMutexDel+0x178>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
    6f06:	8f 81       	ldd	r24, Y+7	; 0x07
    6f08:	98 85       	ldd	r25, Y+8	; 0x08
    6f0a:	6e 81       	ldd	r22, Y+6	; 0x06
    6f0c:	0e 94 6f 3b 	call	0x76de	; 0x76de <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
    6f10:	0c c0       	rjmp	.+24     	; 0x6f2a <OSMutexDel+0x17a>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
    6f12:	89 85       	ldd	r24, Y+9	; 0x09
    6f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f16:	60 e0       	ldi	r22, 0x00	; 0
    6f18:	70 e0       	ldi	r23, 0x00	; 0
    6f1a:	40 e1       	ldi	r20, 0x10	; 16
    6f1c:	20 e0       	ldi	r18, 0x00	; 0
    6f1e:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
    6f22:	03 c0       	rjmp	.+6      	; 0x6f2a <OSMutexDel+0x17a>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
    6f24:	00 00       	nop
    6f26:	01 c0       	rjmp	.+2      	; 0x6f2a <OSMutexDel+0x17a>
    6f28:	00 00       	nop
    6f2a:	89 85       	ldd	r24, Y+9	; 0x09
    6f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f2e:	fc 01       	movw	r30, r24
    6f30:	85 81       	ldd	r24, Z+5	; 0x05
    6f32:	88 23       	and	r24, r24
    6f34:	71 f7       	brne	.-36     	; 0x6f12 <OSMutexDel+0x162>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    6f36:	89 85       	ldd	r24, Y+9	; 0x09
    6f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f3a:	2f e3       	ldi	r18, 0x3F	; 63
    6f3c:	fc 01       	movw	r30, r24
    6f3e:	26 87       	std	Z+14, r18	; 0x0e
             pevent->OSEventName[1] = OS_ASCII_NUL;
    6f40:	89 85       	ldd	r24, Y+9	; 0x09
    6f42:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f44:	fc 01       	movw	r30, r24
    6f46:	17 86       	std	Z+15, r1	; 0x0f
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
    6f48:	89 85       	ldd	r24, Y+9	; 0x09
    6f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f4c:	fc 01       	movw	r30, r24
    6f4e:	83 81       	ldd	r24, Z+3	; 0x03
    6f50:	94 81       	ldd	r25, Z+4	; 0x04
    6f52:	89 2f       	mov	r24, r25
    6f54:	99 27       	eor	r25, r25
    6f56:	8d 83       	std	Y+5, r24	; 0x05
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
    6f58:	8d 81       	ldd	r24, Y+5	; 0x05
    6f5a:	88 2f       	mov	r24, r24
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	88 0f       	add	r24, r24
    6f60:	99 1f       	adc	r25, r25
    6f62:	8d 58       	subi	r24, 0x8D	; 141
    6f64:	9a 4c       	sbci	r25, 0xCA	; 202
    6f66:	fc 01       	movw	r30, r24
    6f68:	10 82       	st	Z, r1
    6f6a:	11 82       	std	Z+1, r1	; 0x01
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
    6f6c:	89 85       	ldd	r24, Y+9	; 0x09
    6f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f70:	fc 01       	movw	r30, r24
    6f72:	10 82       	st	Z, r1
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
    6f74:	20 91 05 2e 	lds	r18, 0x2E05
    6f78:	30 91 06 2e 	lds	r19, 0x2E06
    6f7c:	89 85       	ldd	r24, Y+9	; 0x09
    6f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f80:	fc 01       	movw	r30, r24
    6f82:	21 83       	std	Z+1, r18	; 0x01
    6f84:	32 83       	std	Z+2, r19	; 0x02
             pevent->OSEventCnt  = 0;
    6f86:	89 85       	ldd	r24, Y+9	; 0x09
    6f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f8a:	fc 01       	movw	r30, r24
    6f8c:	13 82       	std	Z+3, r1	; 0x03
    6f8e:	14 82       	std	Z+4, r1	; 0x04
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
    6f90:	89 85       	ldd	r24, Y+9	; 0x09
    6f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f94:	80 93 05 2e 	sts	0x2E05, r24
    6f98:	90 93 06 2e 	sts	0x2E06, r25
             OS_EXIT_CRITICAL();
    6f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f9e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    6fa2:	89 81       	ldd	r24, Y+1	; 0x01
    6fa4:	81 30       	cpi	r24, 0x01	; 1
    6fa6:	11 f4       	brne	.+4      	; 0x6fac <OSMutexDel+0x1fc>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    6fa8:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
    6fac:	8c 85       	ldd	r24, Y+12	; 0x0c
    6fae:	9d 85       	ldd	r25, Y+13	; 0x0d
    6fb0:	fc 01       	movw	r30, r24
    6fb2:	10 82       	st	Z, r1
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
    6fb4:	1a 82       	std	Y+2, r1	; 0x02
    6fb6:	1b 82       	std	Y+3, r1	; 0x03
             break;
    6fb8:	0d c0       	rjmp	.+26     	; 0x6fd4 <OSMutexDel+0x224>

        default:
             OS_EXIT_CRITICAL();
    6fba:	8c 81       	ldd	r24, Y+4	; 0x04
    6fbc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr         = OS_ERR_INVALID_OPT;
    6fc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    6fc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    6fc4:	27 e0       	ldi	r18, 0x07	; 7
    6fc6:	fc 01       	movw	r30, r24
    6fc8:	20 83       	st	Z, r18
             pevent_return = pevent;
    6fca:	89 85       	ldd	r24, Y+9	; 0x09
    6fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fce:	8a 83       	std	Y+2, r24	; 0x02
    6fd0:	9b 83       	std	Y+3, r25	; 0x03
             break;
    6fd2:	00 00       	nop
    }
    return (pevent_return);
    6fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    6fd6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    6fd8:	2d 96       	adiw	r28, 0x0d	; 13
    6fda:	cd bf       	out	0x3d, r28	; 61
    6fdc:	de bf       	out	0x3e, r29	; 62
    6fde:	cf 91       	pop	r28
    6fe0:	df 91       	pop	r29
    6fe2:	08 95       	ret

00006fe4 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    6fe4:	df 93       	push	r29
    6fe6:	cf 93       	push	r28
    6fe8:	cd b7       	in	r28, 0x3d	; 61
    6fea:	de b7       	in	r29, 0x3e	; 62
    6fec:	2f 97       	sbiw	r28, 0x0f	; 15
    6fee:	cd bf       	out	0x3d, r28	; 61
    6ff0:	de bf       	out	0x3e, r29	; 62
    6ff2:	8a 87       	std	Y+10, r24	; 0x0a
    6ff4:	9b 87       	std	Y+11, r25	; 0x0b
    6ff6:	6c 87       	std	Y+12, r22	; 0x0c
    6ff8:	7d 87       	std	Y+13, r23	; 0x0d
    6ffa:	4e 87       	std	Y+14, r20	; 0x0e
    6ffc:	5f 87       	std	Y+15, r21	; 0x0f
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6ffe:	1a 82       	std	Y+2, r1	; 0x02
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    7000:	8a 85       	ldd	r24, Y+10	; 0x0a
    7002:	9b 85       	ldd	r25, Y+11	; 0x0b
    7004:	fc 01       	movw	r30, r24
    7006:	80 81       	ld	r24, Z
    7008:	84 30       	cpi	r24, 0x04	; 4
    700a:	31 f0       	breq	.+12     	; 0x7018 <OSMutexPend+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    700c:	8e 85       	ldd	r24, Y+14	; 0x0e
    700e:	9f 85       	ldd	r25, Y+15	; 0x0f
    7010:	21 e0       	ldi	r18, 0x01	; 1
    7012:	fc 01       	movw	r30, r24
    7014:	20 83       	st	Z, r18
        return;
    7016:	27 c2       	rjmp	.+1102   	; 0x7466 <OSMutexPend+0x482>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7018:	80 91 07 2e 	lds	r24, 0x2E07
    701c:	88 23       	and	r24, r24
    701e:	31 f0       	breq	.+12     	; 0x702c <OSMutexPend+0x48>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    7020:	8e 85       	ldd	r24, Y+14	; 0x0e
    7022:	9f 85       	ldd	r25, Y+15	; 0x0f
    7024:	22 e0       	ldi	r18, 0x02	; 2
    7026:	fc 01       	movw	r30, r24
    7028:	20 83       	st	Z, r18
        return;
    702a:	1d c2       	rjmp	.+1082   	; 0x7466 <OSMutexPend+0x482>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    702c:	80 91 fa 27 	lds	r24, 0x27FA
    7030:	88 23       	and	r24, r24
    7032:	31 f0       	breq	.+12     	; 0x7040 <OSMutexPend+0x5c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    7034:	8e 85       	ldd	r24, Y+14	; 0x0e
    7036:	9f 85       	ldd	r25, Y+15	; 0x0f
    7038:	2d e0       	ldi	r18, 0x0D	; 13
    703a:	fc 01       	movw	r30, r24
    703c:	20 83       	st	Z, r18
        return;
    703e:	13 c2       	rjmp	.+1062   	; 0x7466 <OSMutexPend+0x482>
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    7040:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7044:	8a 83       	std	Y+2, r24	; 0x02
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
    7046:	8a 85       	ldd	r24, Y+10	; 0x0a
    7048:	9b 85       	ldd	r25, Y+11	; 0x0b
    704a:	fc 01       	movw	r30, r24
    704c:	83 81       	ldd	r24, Z+3	; 0x03
    704e:	94 81       	ldd	r25, Z+4	; 0x04
    7050:	89 2f       	mov	r24, r25
    7052:	99 27       	eor	r25, r25
    7054:	8b 83       	std	Y+3, r24	; 0x03
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
    7056:	8a 85       	ldd	r24, Y+10	; 0x0a
    7058:	9b 85       	ldd	r25, Y+11	; 0x0b
    705a:	fc 01       	movw	r30, r24
    705c:	83 81       	ldd	r24, Z+3	; 0x03
    705e:	94 81       	ldd	r25, Z+4	; 0x04
    7060:	8f 3f       	cpi	r24, 0xFF	; 255
    7062:	09 f0       	breq	.+2      	; 0x7066 <OSMutexPend+0x82>
    7064:	43 c0       	rjmp	.+134    	; 0x70ec <OSMutexPend+0x108>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
    7066:	8a 85       	ldd	r24, Y+10	; 0x0a
    7068:	9b 85       	ldd	r25, Y+11	; 0x0b
    706a:	fc 01       	movw	r30, r24
    706c:	83 81       	ldd	r24, Z+3	; 0x03
    706e:	94 81       	ldd	r25, Z+4	; 0x04
    7070:	9c 01       	movw	r18, r24
    7072:	20 70       	andi	r18, 0x00	; 0
    7074:	8a 85       	ldd	r24, Y+10	; 0x0a
    7076:	9b 85       	ldd	r25, Y+11	; 0x0b
    7078:	fc 01       	movw	r30, r24
    707a:	23 83       	std	Z+3, r18	; 0x03
    707c:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
    707e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7080:	9b 85       	ldd	r25, Y+11	; 0x0b
    7082:	fc 01       	movw	r30, r24
    7084:	23 81       	ldd	r18, Z+3	; 0x03
    7086:	34 81       	ldd	r19, Z+4	; 0x04
    7088:	80 91 08 2e 	lds	r24, 0x2E08
    708c:	90 91 09 2e 	lds	r25, 0x2E09
    7090:	fc 01       	movw	r30, r24
    7092:	80 a1       	ldd	r24, Z+32	; 0x20
    7094:	88 2f       	mov	r24, r24
    7096:	90 e0       	ldi	r25, 0x00	; 0
    7098:	28 2b       	or	r18, r24
    709a:	39 2b       	or	r19, r25
    709c:	8a 85       	ldd	r24, Y+10	; 0x0a
    709e:	9b 85       	ldd	r25, Y+11	; 0x0b
    70a0:	fc 01       	movw	r30, r24
    70a2:	23 83       	std	Z+3, r18	; 0x03
    70a4:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
    70a6:	20 91 08 2e 	lds	r18, 0x2E08
    70aa:	30 91 09 2e 	lds	r19, 0x2E09
    70ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    70b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    70b2:	fc 01       	movw	r30, r24
    70b4:	21 83       	std	Z+1, r18	; 0x01
    70b6:	32 83       	std	Z+2, r19	; 0x02
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
    70b8:	80 91 08 2e 	lds	r24, 0x2E08
    70bc:	90 91 09 2e 	lds	r25, 0x2E09
    70c0:	fc 01       	movw	r30, r24
    70c2:	90 a1       	ldd	r25, Z+32	; 0x20
    70c4:	8b 81       	ldd	r24, Y+3	; 0x03
    70c6:	89 17       	cp	r24, r25
    70c8:	48 f0       	brcs	.+18     	; 0x70dc <OSMutexPend+0xf8>
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
    70ca:	8a 81       	ldd	r24, Y+2	; 0x02
    70cc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            *perr = OS_ERR_PIP_LOWER;
    70d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    70d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    70d4:	28 e7       	ldi	r18, 0x78	; 120
    70d6:	fc 01       	movw	r30, r24
    70d8:	20 83       	st	Z, r18
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
    70da:	c5 c1       	rjmp	.+906    	; 0x7466 <OSMutexPend+0x482>
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
    70dc:	8a 81       	ldd	r24, Y+2	; 0x02
    70de:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            *perr = OS_ERR_NONE;
    70e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    70e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    70e6:	fc 01       	movw	r30, r24
    70e8:	10 82       	st	Z, r1
        }
        return;
    70ea:	bd c1       	rjmp	.+890    	; 0x7466 <OSMutexPend+0x482>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
    70ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    70ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    70f0:	fc 01       	movw	r30, r24
    70f2:	83 81       	ldd	r24, Z+3	; 0x03
    70f4:	94 81       	ldd	r25, Z+4	; 0x04
    70f6:	8c 83       	std	Y+4, r24	; 0x04
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
    70f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    70fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    70fc:	fc 01       	movw	r30, r24
    70fe:	81 81       	ldd	r24, Z+1	; 0x01
    7100:	92 81       	ldd	r25, Z+2	; 0x02
    7102:	8d 83       	std	Y+5, r24	; 0x05
    7104:	9e 83       	std	Y+6, r25	; 0x06
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
    7106:	8d 81       	ldd	r24, Y+5	; 0x05
    7108:	9e 81       	ldd	r25, Y+6	; 0x06
    710a:	fc 01       	movw	r30, r24
    710c:	90 a1       	ldd	r25, Z+32	; 0x20
    710e:	8b 81       	ldd	r24, Y+3	; 0x03
    7110:	89 17       	cp	r24, r25
    7112:	08 f0       	brcs	.+2      	; 0x7116 <OSMutexPend+0x132>
    7114:	3b c1       	rjmp	.+630    	; 0x738c <OSMutexPend+0x3a8>
        if (mprio > OSTCBCur->OSTCBPrio) {
    7116:	80 91 08 2e 	lds	r24, 0x2E08
    711a:	90 91 09 2e 	lds	r25, 0x2E09
    711e:	fc 01       	movw	r30, r24
    7120:	90 a1       	ldd	r25, Z+32	; 0x20
    7122:	8c 81       	ldd	r24, Y+4	; 0x04
    7124:	98 17       	cp	r25, r24
    7126:	08 f0       	brcs	.+2      	; 0x712a <OSMutexPend+0x146>
    7128:	31 c1       	rjmp	.+610    	; 0x738c <OSMutexPend+0x3a8>
            y = ptcb->OSTCBY;
    712a:	8d 81       	ldd	r24, Y+5	; 0x05
    712c:	9e 81       	ldd	r25, Y+6	; 0x06
    712e:	fc 01       	movw	r30, r24
    7130:	82 a1       	ldd	r24, Z+34	; 0x22
    7132:	8f 83       	std	Y+7, r24	; 0x07
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
    7134:	8f 81       	ldd	r24, Y+7	; 0x07
    7136:	88 2f       	mov	r24, r24
    7138:	90 e0       	ldi	r25, 0x00	; 0
    713a:	8b 56       	subi	r24, 0x6B	; 107
    713c:	93 4d       	sbci	r25, 0xD3	; 211
    713e:	fc 01       	movw	r30, r24
    7140:	20 81       	ld	r18, Z
    7142:	8d 81       	ldd	r24, Y+5	; 0x05
    7144:	9e 81       	ldd	r25, Y+6	; 0x06
    7146:	fc 01       	movw	r30, r24
    7148:	83 a1       	ldd	r24, Z+35	; 0x23
    714a:	82 23       	and	r24, r18
    714c:	88 23       	and	r24, r24
    714e:	61 f1       	breq	.+88     	; 0x71a8 <OSMutexPend+0x1c4>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
    7150:	8f 81       	ldd	r24, Y+7	; 0x07
    7152:	88 2f       	mov	r24, r24
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	2f 81       	ldd	r18, Y+7	; 0x07
    7158:	22 2f       	mov	r18, r18
    715a:	30 e0       	ldi	r19, 0x00	; 0
    715c:	2b 56       	subi	r18, 0x6B	; 107
    715e:	33 4d       	sbci	r19, 0xD3	; 211
    7160:	f9 01       	movw	r30, r18
    7162:	20 81       	ld	r18, Z
    7164:	42 2f       	mov	r20, r18
    7166:	2d 81       	ldd	r18, Y+5	; 0x05
    7168:	3e 81       	ldd	r19, Y+6	; 0x06
    716a:	f9 01       	movw	r30, r18
    716c:	23 a1       	ldd	r18, Z+35	; 0x23
    716e:	20 95       	com	r18
    7170:	24 23       	and	r18, r20
    7172:	8b 56       	subi	r24, 0x6B	; 107
    7174:	93 4d       	sbci	r25, 0xD3	; 211
    7176:	fc 01       	movw	r30, r24
    7178:	20 83       	st	Z, r18
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
    717a:	8f 81       	ldd	r24, Y+7	; 0x07
    717c:	88 2f       	mov	r24, r24
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	8b 56       	subi	r24, 0x6B	; 107
    7182:	93 4d       	sbci	r25, 0xD3	; 211
    7184:	fc 01       	movw	r30, r24
    7186:	80 81       	ld	r24, Z
    7188:	88 23       	and	r24, r24
    718a:	59 f4       	brne	.+22     	; 0x71a2 <OSMutexPend+0x1be>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
    718c:	8d 81       	ldd	r24, Y+5	; 0x05
    718e:	9e 81       	ldd	r25, Y+6	; 0x06
    7190:	fc 01       	movw	r30, r24
    7192:	84 a1       	ldd	r24, Z+36	; 0x24
    7194:	98 2f       	mov	r25, r24
    7196:	90 95       	com	r25
    7198:	80 91 94 2c 	lds	r24, 0x2C94
    719c:	89 23       	and	r24, r25
    719e:	80 93 94 2c 	sts	0x2C94, r24
                }
                rdy = OS_TRUE;
    71a2:	81 e0       	ldi	r24, 0x01	; 1
    71a4:	89 83       	std	Y+1, r24	; 0x01
    71a6:	49 c0       	rjmp	.+146    	; 0x723a <OSMutexPend+0x256>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
    71a8:	8d 81       	ldd	r24, Y+5	; 0x05
    71aa:	9e 81       	ldd	r25, Y+6	; 0x06
    71ac:	fc 01       	movw	r30, r24
    71ae:	82 89       	ldd	r24, Z+18	; 0x12
    71b0:	93 89       	ldd	r25, Z+19	; 0x13
    71b2:	88 87       	std	Y+8, r24	; 0x08
    71b4:	99 87       	std	Y+9, r25	; 0x09
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
    71b6:	88 85       	ldd	r24, Y+8	; 0x08
    71b8:	99 85       	ldd	r25, Y+9	; 0x09
    71ba:	00 97       	sbiw	r24, 0x00	; 0
    71bc:	e9 f1       	breq	.+122    	; 0x7238 <OSMutexPend+0x254>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
    71be:	8d 81       	ldd	r24, Y+5	; 0x05
    71c0:	9e 81       	ldd	r25, Y+6	; 0x06
    71c2:	fc 01       	movw	r30, r24
    71c4:	82 a1       	ldd	r24, Z+34	; 0x22
    71c6:	88 2f       	mov	r24, r24
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	2d 81       	ldd	r18, Y+5	; 0x05
    71cc:	3e 81       	ldd	r19, Y+6	; 0x06
    71ce:	f9 01       	movw	r30, r18
    71d0:	22 a1       	ldd	r18, Z+34	; 0x22
    71d2:	22 2f       	mov	r18, r18
    71d4:	30 e0       	ldi	r19, 0x00	; 0
    71d6:	48 85       	ldd	r20, Y+8	; 0x08
    71d8:	59 85       	ldd	r21, Y+9	; 0x09
    71da:	24 0f       	add	r18, r20
    71dc:	35 1f       	adc	r19, r21
    71de:	2a 5f       	subi	r18, 0xFA	; 250
    71e0:	3f 4f       	sbci	r19, 0xFF	; 255
    71e2:	f9 01       	movw	r30, r18
    71e4:	20 81       	ld	r18, Z
    71e6:	42 2f       	mov	r20, r18
    71e8:	2d 81       	ldd	r18, Y+5	; 0x05
    71ea:	3e 81       	ldd	r19, Y+6	; 0x06
    71ec:	f9 01       	movw	r30, r18
    71ee:	23 a1       	ldd	r18, Z+35	; 0x23
    71f0:	20 95       	com	r18
    71f2:	24 23       	and	r18, r20
    71f4:	42 2f       	mov	r20, r18
    71f6:	28 85       	ldd	r18, Y+8	; 0x08
    71f8:	39 85       	ldd	r19, Y+9	; 0x09
    71fa:	28 0f       	add	r18, r24
    71fc:	39 1f       	adc	r19, r25
    71fe:	2a 5f       	subi	r18, 0xFA	; 250
    7200:	3f 4f       	sbci	r19, 0xFF	; 255
    7202:	f9 01       	movw	r30, r18
    7204:	40 83       	st	Z, r20
    7206:	28 85       	ldd	r18, Y+8	; 0x08
    7208:	39 85       	ldd	r19, Y+9	; 0x09
    720a:	82 0f       	add	r24, r18
    720c:	93 1f       	adc	r25, r19
    720e:	06 96       	adiw	r24, 0x06	; 6
    7210:	fc 01       	movw	r30, r24
    7212:	80 81       	ld	r24, Z
    7214:	88 23       	and	r24, r24
    7216:	81 f4       	brne	.+32     	; 0x7238 <OSMutexPend+0x254>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
    7218:	88 85       	ldd	r24, Y+8	; 0x08
    721a:	99 85       	ldd	r25, Y+9	; 0x09
    721c:	fc 01       	movw	r30, r24
    721e:	85 81       	ldd	r24, Z+5	; 0x05
    7220:	28 2f       	mov	r18, r24
    7222:	8d 81       	ldd	r24, Y+5	; 0x05
    7224:	9e 81       	ldd	r25, Y+6	; 0x06
    7226:	fc 01       	movw	r30, r24
    7228:	84 a1       	ldd	r24, Z+36	; 0x24
    722a:	80 95       	com	r24
    722c:	82 23       	and	r24, r18
    722e:	28 2f       	mov	r18, r24
    7230:	88 85       	ldd	r24, Y+8	; 0x08
    7232:	99 85       	ldd	r25, Y+9	; 0x09
    7234:	fc 01       	movw	r30, r24
    7236:	25 83       	std	Z+5, r18	; 0x05
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
    7238:	19 82       	std	Y+1, r1	; 0x01
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
    723a:	8d 81       	ldd	r24, Y+5	; 0x05
    723c:	9e 81       	ldd	r25, Y+6	; 0x06
    723e:	2b 81       	ldd	r18, Y+3	; 0x03
    7240:	fc 01       	movw	r30, r24
    7242:	20 a3       	std	Z+32, r18	; 0x20
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
    7244:	8d 81       	ldd	r24, Y+5	; 0x05
    7246:	9e 81       	ldd	r25, Y+6	; 0x06
    7248:	fc 01       	movw	r30, r24
    724a:	80 a1       	ldd	r24, Z+32	; 0x20
    724c:	28 2f       	mov	r18, r24
    724e:	26 95       	lsr	r18
    7250:	26 95       	lsr	r18
    7252:	26 95       	lsr	r18
    7254:	8d 81       	ldd	r24, Y+5	; 0x05
    7256:	9e 81       	ldd	r25, Y+6	; 0x06
    7258:	fc 01       	movw	r30, r24
    725a:	22 a3       	std	Z+34, r18	; 0x22
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
    725c:	8d 81       	ldd	r24, Y+5	; 0x05
    725e:	9e 81       	ldd	r25, Y+6	; 0x06
    7260:	fc 01       	movw	r30, r24
    7262:	80 a1       	ldd	r24, Z+32	; 0x20
    7264:	28 2f       	mov	r18, r24
    7266:	27 70       	andi	r18, 0x07	; 7
    7268:	8d 81       	ldd	r24, Y+5	; 0x05
    726a:	9e 81       	ldd	r25, Y+6	; 0x06
    726c:	fc 01       	movw	r30, r24
    726e:	21 a3       	std	Z+33, r18	; 0x21
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
    7270:	8d 81       	ldd	r24, Y+5	; 0x05
    7272:	9e 81       	ldd	r25, Y+6	; 0x06
    7274:	fc 01       	movw	r30, r24
    7276:	82 a1       	ldd	r24, Z+34	; 0x22
    7278:	28 2f       	mov	r18, r24
    727a:	30 e0       	ldi	r19, 0x00	; 0
    727c:	81 e0       	ldi	r24, 0x01	; 1
    727e:	90 e0       	ldi	r25, 0x00	; 0
    7280:	02 c0       	rjmp	.+4      	; 0x7286 <OSMutexPend+0x2a2>
    7282:	88 0f       	add	r24, r24
    7284:	99 1f       	adc	r25, r25
    7286:	2a 95       	dec	r18
    7288:	e2 f7       	brpl	.-8      	; 0x7282 <OSMutexPend+0x29e>
    728a:	28 2f       	mov	r18, r24
    728c:	8d 81       	ldd	r24, Y+5	; 0x05
    728e:	9e 81       	ldd	r25, Y+6	; 0x06
    7290:	fc 01       	movw	r30, r24
    7292:	24 a3       	std	Z+36, r18	; 0x24
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
    7294:	8d 81       	ldd	r24, Y+5	; 0x05
    7296:	9e 81       	ldd	r25, Y+6	; 0x06
    7298:	fc 01       	movw	r30, r24
    729a:	81 a1       	ldd	r24, Z+33	; 0x21
    729c:	28 2f       	mov	r18, r24
    729e:	30 e0       	ldi	r19, 0x00	; 0
    72a0:	81 e0       	ldi	r24, 0x01	; 1
    72a2:	90 e0       	ldi	r25, 0x00	; 0
    72a4:	02 c0       	rjmp	.+4      	; 0x72aa <OSMutexPend+0x2c6>
    72a6:	88 0f       	add	r24, r24
    72a8:	99 1f       	adc	r25, r25
    72aa:	2a 95       	dec	r18
    72ac:	e2 f7       	brpl	.-8      	; 0x72a6 <OSMutexPend+0x2c2>
    72ae:	28 2f       	mov	r18, r24
    72b0:	8d 81       	ldd	r24, Y+5	; 0x05
    72b2:	9e 81       	ldd	r25, Y+6	; 0x06
    72b4:	fc 01       	movw	r30, r24
    72b6:	23 a3       	std	Z+35, r18	; 0x23
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
    72b8:	89 81       	ldd	r24, Y+1	; 0x01
    72ba:	81 30       	cpi	r24, 0x01	; 1
    72bc:	19 f5       	brne	.+70     	; 0x7304 <OSMutexPend+0x320>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
    72be:	8d 81       	ldd	r24, Y+5	; 0x05
    72c0:	9e 81       	ldd	r25, Y+6	; 0x06
    72c2:	fc 01       	movw	r30, r24
    72c4:	94 a1       	ldd	r25, Z+36	; 0x24
    72c6:	80 91 94 2c 	lds	r24, 0x2C94
    72ca:	89 2b       	or	r24, r25
    72cc:	80 93 94 2c 	sts	0x2C94, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    72d0:	8d 81       	ldd	r24, Y+5	; 0x05
    72d2:	9e 81       	ldd	r25, Y+6	; 0x06
    72d4:	fc 01       	movw	r30, r24
    72d6:	82 a1       	ldd	r24, Z+34	; 0x22
    72d8:	88 2f       	mov	r24, r24
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	2d 81       	ldd	r18, Y+5	; 0x05
    72de:	3e 81       	ldd	r19, Y+6	; 0x06
    72e0:	f9 01       	movw	r30, r18
    72e2:	22 a1       	ldd	r18, Z+34	; 0x22
    72e4:	22 2f       	mov	r18, r18
    72e6:	30 e0       	ldi	r19, 0x00	; 0
    72e8:	2b 56       	subi	r18, 0x6B	; 107
    72ea:	33 4d       	sbci	r19, 0xD3	; 211
    72ec:	f9 01       	movw	r30, r18
    72ee:	40 81       	ld	r20, Z
    72f0:	2d 81       	ldd	r18, Y+5	; 0x05
    72f2:	3e 81       	ldd	r19, Y+6	; 0x06
    72f4:	f9 01       	movw	r30, r18
    72f6:	23 a1       	ldd	r18, Z+35	; 0x23
    72f8:	24 2b       	or	r18, r20
    72fa:	8b 56       	subi	r24, 0x6B	; 107
    72fc:	93 4d       	sbci	r25, 0xD3	; 211
    72fe:	fc 01       	movw	r30, r24
    7300:	20 83       	st	Z, r18
    7302:	38 c0       	rjmp	.+112    	; 0x7374 <OSMutexPend+0x390>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
    7304:	8d 81       	ldd	r24, Y+5	; 0x05
    7306:	9e 81       	ldd	r25, Y+6	; 0x06
    7308:	fc 01       	movw	r30, r24
    730a:	82 89       	ldd	r24, Z+18	; 0x12
    730c:	93 89       	ldd	r25, Z+19	; 0x13
    730e:	88 87       	std	Y+8, r24	; 0x08
    7310:	99 87       	std	Y+9, r25	; 0x09
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
    7312:	88 85       	ldd	r24, Y+8	; 0x08
    7314:	99 85       	ldd	r25, Y+9	; 0x09
    7316:	00 97       	sbiw	r24, 0x00	; 0
    7318:	69 f1       	breq	.+90     	; 0x7374 <OSMutexPend+0x390>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
    731a:	88 85       	ldd	r24, Y+8	; 0x08
    731c:	99 85       	ldd	r25, Y+9	; 0x09
    731e:	fc 01       	movw	r30, r24
    7320:	25 81       	ldd	r18, Z+5	; 0x05
    7322:	8d 81       	ldd	r24, Y+5	; 0x05
    7324:	9e 81       	ldd	r25, Y+6	; 0x06
    7326:	fc 01       	movw	r30, r24
    7328:	84 a1       	ldd	r24, Z+36	; 0x24
    732a:	28 2b       	or	r18, r24
    732c:	88 85       	ldd	r24, Y+8	; 0x08
    732e:	99 85       	ldd	r25, Y+9	; 0x09
    7330:	fc 01       	movw	r30, r24
    7332:	25 83       	std	Z+5, r18	; 0x05
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7334:	8d 81       	ldd	r24, Y+5	; 0x05
    7336:	9e 81       	ldd	r25, Y+6	; 0x06
    7338:	fc 01       	movw	r30, r24
    733a:	82 a1       	ldd	r24, Z+34	; 0x22
    733c:	88 2f       	mov	r24, r24
    733e:	90 e0       	ldi	r25, 0x00	; 0
    7340:	2d 81       	ldd	r18, Y+5	; 0x05
    7342:	3e 81       	ldd	r19, Y+6	; 0x06
    7344:	f9 01       	movw	r30, r18
    7346:	22 a1       	ldd	r18, Z+34	; 0x22
    7348:	22 2f       	mov	r18, r18
    734a:	30 e0       	ldi	r19, 0x00	; 0
    734c:	48 85       	ldd	r20, Y+8	; 0x08
    734e:	59 85       	ldd	r21, Y+9	; 0x09
    7350:	24 0f       	add	r18, r20
    7352:	35 1f       	adc	r19, r21
    7354:	2a 5f       	subi	r18, 0xFA	; 250
    7356:	3f 4f       	sbci	r19, 0xFF	; 255
    7358:	f9 01       	movw	r30, r18
    735a:	40 81       	ld	r20, Z
    735c:	2d 81       	ldd	r18, Y+5	; 0x05
    735e:	3e 81       	ldd	r19, Y+6	; 0x06
    7360:	f9 01       	movw	r30, r18
    7362:	23 a1       	ldd	r18, Z+35	; 0x23
    7364:	42 2b       	or	r20, r18
    7366:	28 85       	ldd	r18, Y+8	; 0x08
    7368:	39 85       	ldd	r19, Y+9	; 0x09
    736a:	82 0f       	add	r24, r18
    736c:	93 1f       	adc	r25, r19
    736e:	06 96       	adiw	r24, 0x06	; 6
    7370:	fc 01       	movw	r30, r24
    7372:	40 83       	st	Z, r20
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
    7374:	8b 81       	ldd	r24, Y+3	; 0x03
    7376:	88 2f       	mov	r24, r24
    7378:	90 e0       	ldi	r25, 0x00	; 0
    737a:	88 0f       	add	r24, r24
    737c:	99 1f       	adc	r25, r25
    737e:	8d 58       	subi	r24, 0x8D	; 141
    7380:	9a 4c       	sbci	r25, 0xCA	; 202
    7382:	2d 81       	ldd	r18, Y+5	; 0x05
    7384:	3e 81       	ldd	r19, Y+6	; 0x06
    7386:	fc 01       	movw	r30, r24
    7388:	20 83       	st	Z, r18
    738a:	31 83       	std	Z+1, r19	; 0x01
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
    738c:	80 91 08 2e 	lds	r24, 0x2E08
    7390:	90 91 09 2e 	lds	r25, 0x2E09
    7394:	20 91 08 2e 	lds	r18, 0x2E08
    7398:	30 91 09 2e 	lds	r19, 0x2E09
    739c:	f9 01       	movw	r30, r18
    739e:	26 8d       	ldd	r18, Z+30	; 0x1e
    73a0:	20 61       	ori	r18, 0x10	; 16
    73a2:	fc 01       	movw	r30, r24
    73a4:	26 8f       	std	Z+30, r18	; 0x1e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    73a6:	80 91 08 2e 	lds	r24, 0x2E08
    73aa:	90 91 09 2e 	lds	r25, 0x2E09
    73ae:	fc 01       	movw	r30, r24
    73b0:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
    73b2:	80 91 08 2e 	lds	r24, 0x2E08
    73b6:	90 91 09 2e 	lds	r25, 0x2E09
    73ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    73bc:	3d 85       	ldd	r19, Y+13	; 0x0d
    73be:	fc 01       	movw	r30, r24
    73c0:	24 8f       	std	Z+28, r18	; 0x1c
    73c2:	35 8f       	std	Z+29, r19	; 0x1d
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    73c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    73c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    73c8:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    73cc:	8a 81       	ldd	r24, Y+2	; 0x02
    73ce:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    73d2:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    73d6:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    73da:	8a 83       	std	Y+2, r24	; 0x02
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    73dc:	80 91 08 2e 	lds	r24, 0x2E08
    73e0:	90 91 09 2e 	lds	r25, 0x2E09
    73e4:	fc 01       	movw	r30, r24
    73e6:	87 8d       	ldd	r24, Z+31	; 0x1f
    73e8:	88 2f       	mov	r24, r24
    73ea:	90 e0       	ldi	r25, 0x00	; 0
    73ec:	00 97       	sbiw	r24, 0x00	; 0
    73ee:	21 f0       	breq	.+8      	; 0x73f8 <OSMutexPend+0x414>
    73f0:	82 30       	cpi	r24, 0x02	; 2
    73f2:	91 05       	cpc	r25, r1
    73f4:	31 f0       	breq	.+12     	; 0x7402 <OSMutexPend+0x41e>
    73f6:	0b c0       	rjmp	.+22     	; 0x740e <OSMutexPend+0x42a>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    73f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    73fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    73fc:	fc 01       	movw	r30, r24
    73fe:	10 82       	st	Z, r1
             break;
    7400:	15 c0       	rjmp	.+42     	; 0x742c <OSMutexPend+0x448>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
    7402:	8e 85       	ldd	r24, Y+14	; 0x0e
    7404:	9f 85       	ldd	r25, Y+15	; 0x0f
    7406:	2e e0       	ldi	r18, 0x0E	; 14
    7408:	fc 01       	movw	r30, r24
    740a:	20 83       	st	Z, r18
             break;
    740c:	0f c0       	rjmp	.+30     	; 0x742c <OSMutexPend+0x448>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    740e:	80 91 08 2e 	lds	r24, 0x2E08
    7412:	90 91 09 2e 	lds	r25, 0x2E09
    7416:	2a 85       	ldd	r18, Y+10	; 0x0a
    7418:	3b 85       	ldd	r19, Y+11	; 0x0b
    741a:	b9 01       	movw	r22, r18
    741c:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
    7420:	8e 85       	ldd	r24, Y+14	; 0x0e
    7422:	9f 85       	ldd	r25, Y+15	; 0x0f
    7424:	2a e0       	ldi	r18, 0x0A	; 10
    7426:	fc 01       	movw	r30, r24
    7428:	20 83       	st	Z, r18
             break;
    742a:	00 00       	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    742c:	80 91 08 2e 	lds	r24, 0x2E08
    7430:	90 91 09 2e 	lds	r25, 0x2E09
    7434:	fc 01       	movw	r30, r24
    7436:	16 8e       	std	Z+30, r1	; 0x1e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    7438:	80 91 08 2e 	lds	r24, 0x2E08
    743c:	90 91 09 2e 	lds	r25, 0x2E09
    7440:	fc 01       	movw	r30, r24
    7442:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    7444:	80 91 08 2e 	lds	r24, 0x2E08
    7448:	90 91 09 2e 	lds	r25, 0x2E09
    744c:	fc 01       	movw	r30, r24
    744e:	12 8a       	std	Z+18, r1	; 0x12
    7450:	13 8a       	std	Z+19, r1	; 0x13
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    7452:	80 91 08 2e 	lds	r24, 0x2E08
    7456:	90 91 09 2e 	lds	r25, 0x2E09
    745a:	fc 01       	movw	r30, r24
    745c:	14 8a       	std	Z+20, r1	; 0x14
    745e:	15 8a       	std	Z+21, r1	; 0x15
#endif
    OS_EXIT_CRITICAL();
    7460:	8a 81       	ldd	r24, Y+2	; 0x02
    7462:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    7466:	2f 96       	adiw	r28, 0x0f	; 15
    7468:	cd bf       	out	0x3d, r28	; 61
    746a:	de bf       	out	0x3e, r29	; 62
    746c:	cf 91       	pop	r28
    746e:	df 91       	pop	r29
    7470:	08 95       	ret

00007472 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
    7472:	df 93       	push	r29
    7474:	cf 93       	push	r28
    7476:	cd b7       	in	r28, 0x3d	; 61
    7478:	de b7       	in	r29, 0x3e	; 62
    747a:	25 97       	sbiw	r28, 0x05	; 5
    747c:	cd bf       	out	0x3d, r28	; 61
    747e:	de bf       	out	0x3e, r29	; 62
    7480:	8c 83       	std	Y+4, r24	; 0x04
    7482:	9d 83       	std	Y+5, r25	; 0x05
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7484:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    7486:	80 91 07 2e 	lds	r24, 0x2E07
    748a:	88 23       	and	r24, r24
    748c:	11 f0       	breq	.+4      	; 0x7492 <OSMutexPost+0x20>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
    748e:	85 e0       	ldi	r24, 0x05	; 5
    7490:	a8 c0       	rjmp	.+336    	; 0x75e2 <OSMutexPost+0x170>
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
    7492:	8c 81       	ldd	r24, Y+4	; 0x04
    7494:	9d 81       	ldd	r25, Y+5	; 0x05
    7496:	fc 01       	movw	r30, r24
    7498:	80 81       	ld	r24, Z
    749a:	84 30       	cpi	r24, 0x04	; 4
    749c:	11 f0       	breq	.+4      	; 0x74a2 <OSMutexPost+0x30>
        return (OS_ERR_EVENT_TYPE);
    749e:	81 e0       	ldi	r24, 0x01	; 1
    74a0:	a0 c0       	rjmp	.+320    	; 0x75e2 <OSMutexPost+0x170>
    }
    OS_ENTER_CRITICAL();
    74a2:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    74a6:	89 83       	std	Y+1, r24	; 0x01
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
    74a8:	8c 81       	ldd	r24, Y+4	; 0x04
    74aa:	9d 81       	ldd	r25, Y+5	; 0x05
    74ac:	fc 01       	movw	r30, r24
    74ae:	83 81       	ldd	r24, Z+3	; 0x03
    74b0:	94 81       	ldd	r25, Z+4	; 0x04
    74b2:	89 2f       	mov	r24, r25
    74b4:	99 27       	eor	r25, r25
    74b6:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
    74b8:	8c 81       	ldd	r24, Y+4	; 0x04
    74ba:	9d 81       	ldd	r25, Y+5	; 0x05
    74bc:	fc 01       	movw	r30, r24
    74be:	83 81       	ldd	r24, Z+3	; 0x03
    74c0:	94 81       	ldd	r25, Z+4	; 0x04
    74c2:	8b 83       	std	Y+3, r24	; 0x03
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
    74c4:	8c 81       	ldd	r24, Y+4	; 0x04
    74c6:	9d 81       	ldd	r25, Y+5	; 0x05
    74c8:	fc 01       	movw	r30, r24
    74ca:	81 81       	ldd	r24, Z+1	; 0x01
    74cc:	92 81       	ldd	r25, Z+2	; 0x02
    74ce:	9c 01       	movw	r18, r24
    74d0:	80 91 08 2e 	lds	r24, 0x2E08
    74d4:	90 91 09 2e 	lds	r25, 0x2E09
    74d8:	28 17       	cp	r18, r24
    74da:	39 07       	cpc	r19, r25
    74dc:	29 f0       	breq	.+10     	; 0x74e8 <OSMutexPost+0x76>
        OS_EXIT_CRITICAL();
    74de:	89 81       	ldd	r24, Y+1	; 0x01
    74e0:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_NOT_MUTEX_OWNER);
    74e4:	84 e6       	ldi	r24, 0x64	; 100
    74e6:	7d c0       	rjmp	.+250    	; 0x75e2 <OSMutexPost+0x170>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
    74e8:	80 91 08 2e 	lds	r24, 0x2E08
    74ec:	90 91 09 2e 	lds	r25, 0x2E09
    74f0:	fc 01       	movw	r30, r24
    74f2:	90 a1       	ldd	r25, Z+32	; 0x20
    74f4:	8a 81       	ldd	r24, Y+2	; 0x02
    74f6:	98 17       	cp	r25, r24
    74f8:	39 f4       	brne	.+14     	; 0x7508 <OSMutexPost+0x96>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
    74fa:	80 91 08 2e 	lds	r24, 0x2E08
    74fe:	90 91 09 2e 	lds	r25, 0x2E09
    7502:	6b 81       	ldd	r22, Y+3	; 0x03
    7504:	0e 94 6f 3b 	call	0x76de	; 0x76de <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
    7508:	8a 81       	ldd	r24, Y+2	; 0x02
    750a:	88 2f       	mov	r24, r24
    750c:	90 e0       	ldi	r25, 0x00	; 0
    750e:	88 0f       	add	r24, r24
    7510:	99 1f       	adc	r25, r25
    7512:	8d 58       	subi	r24, 0x8D	; 141
    7514:	9a 4c       	sbci	r25, 0xCA	; 202
    7516:	21 e0       	ldi	r18, 0x01	; 1
    7518:	30 e0       	ldi	r19, 0x00	; 0
    751a:	fc 01       	movw	r30, r24
    751c:	20 83       	st	Z, r18
    751e:	31 83       	std	Z+1, r19	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
    7520:	8c 81       	ldd	r24, Y+4	; 0x04
    7522:	9d 81       	ldd	r25, Y+5	; 0x05
    7524:	fc 01       	movw	r30, r24
    7526:	85 81       	ldd	r24, Z+5	; 0x05
    7528:	88 23       	and	r24, r24
    752a:	09 f4       	brne	.+2      	; 0x752e <OSMutexPost+0xbc>
    752c:	45 c0       	rjmp	.+138    	; 0x75b8 <OSMutexPost+0x146>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
    752e:	8c 81       	ldd	r24, Y+4	; 0x04
    7530:	9d 81       	ldd	r25, Y+5	; 0x05
    7532:	60 e0       	ldi	r22, 0x00	; 0
    7534:	70 e0       	ldi	r23, 0x00	; 0
    7536:	40 e1       	ldi	r20, 0x10	; 16
    7538:	20 e0       	ldi	r18, 0x00	; 0
    753a:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
    753e:	8b 83       	std	Y+3, r24	; 0x03
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
    7540:	8c 81       	ldd	r24, Y+4	; 0x04
    7542:	9d 81       	ldd	r25, Y+5	; 0x05
    7544:	fc 01       	movw	r30, r24
    7546:	83 81       	ldd	r24, Z+3	; 0x03
    7548:	94 81       	ldd	r25, Z+4	; 0x04
    754a:	9c 01       	movw	r18, r24
    754c:	20 70       	andi	r18, 0x00	; 0
    754e:	8c 81       	ldd	r24, Y+4	; 0x04
    7550:	9d 81       	ldd	r25, Y+5	; 0x05
    7552:	fc 01       	movw	r30, r24
    7554:	23 83       	std	Z+3, r18	; 0x03
    7556:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventCnt |= prio;
    7558:	8c 81       	ldd	r24, Y+4	; 0x04
    755a:	9d 81       	ldd	r25, Y+5	; 0x05
    755c:	fc 01       	movw	r30, r24
    755e:	23 81       	ldd	r18, Z+3	; 0x03
    7560:	34 81       	ldd	r19, Z+4	; 0x04
    7562:	8b 81       	ldd	r24, Y+3	; 0x03
    7564:	88 2f       	mov	r24, r24
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	28 2b       	or	r18, r24
    756a:	39 2b       	or	r19, r25
    756c:	8c 81       	ldd	r24, Y+4	; 0x04
    756e:	9d 81       	ldd	r25, Y+5	; 0x05
    7570:	fc 01       	movw	r30, r24
    7572:	23 83       	std	Z+3, r18	; 0x03
    7574:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
    7576:	8b 81       	ldd	r24, Y+3	; 0x03
    7578:	88 2f       	mov	r24, r24
    757a:	90 e0       	ldi	r25, 0x00	; 0
    757c:	88 0f       	add	r24, r24
    757e:	99 1f       	adc	r25, r25
    7580:	8d 58       	subi	r24, 0x8D	; 141
    7582:	9a 4c       	sbci	r25, 0xCA	; 202
    7584:	fc 01       	movw	r30, r24
    7586:	20 81       	ld	r18, Z
    7588:	31 81       	ldd	r19, Z+1	; 0x01
    758a:	8c 81       	ldd	r24, Y+4	; 0x04
    758c:	9d 81       	ldd	r25, Y+5	; 0x05
    758e:	fc 01       	movw	r30, r24
    7590:	21 83       	std	Z+1, r18	; 0x01
    7592:	32 83       	std	Z+2, r19	; 0x02
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
    7594:	9b 81       	ldd	r25, Y+3	; 0x03
    7596:	8a 81       	ldd	r24, Y+2	; 0x02
    7598:	89 17       	cp	r24, r25
    759a:	38 f0       	brcs	.+14     	; 0x75aa <OSMutexPost+0x138>
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
    759c:	89 81       	ldd	r24, Y+1	; 0x01
    759e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            OS_Sched();                               /*      Find highest priority task ready to run  */
    75a2:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
    75a6:	88 e7       	ldi	r24, 0x78	; 120
    75a8:	1c c0       	rjmp	.+56     	; 0x75e2 <OSMutexPost+0x170>
        } else {
            OS_EXIT_CRITICAL();
    75aa:	89 81       	ldd	r24, Y+1	; 0x01
    75ac:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            OS_Sched();                               /*      Find highest priority task ready to run  */
    75b0:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
            return (OS_ERR_NONE);
    75b4:	80 e0       	ldi	r24, 0x00	; 0
    75b6:	15 c0       	rjmp	.+42     	; 0x75e2 <OSMutexPost+0x170>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
    75b8:	8c 81       	ldd	r24, Y+4	; 0x04
    75ba:	9d 81       	ldd	r25, Y+5	; 0x05
    75bc:	fc 01       	movw	r30, r24
    75be:	83 81       	ldd	r24, Z+3	; 0x03
    75c0:	94 81       	ldd	r25, Z+4	; 0x04
    75c2:	9c 01       	movw	r18, r24
    75c4:	2f 6f       	ori	r18, 0xFF	; 255
    75c6:	8c 81       	ldd	r24, Y+4	; 0x04
    75c8:	9d 81       	ldd	r25, Y+5	; 0x05
    75ca:	fc 01       	movw	r30, r24
    75cc:	23 83       	std	Z+3, r18	; 0x03
    75ce:	34 83       	std	Z+4, r19	; 0x04
    pevent->OSEventPtr  = (void *)0;
    75d0:	8c 81       	ldd	r24, Y+4	; 0x04
    75d2:	9d 81       	ldd	r25, Y+5	; 0x05
    75d4:	fc 01       	movw	r30, r24
    75d6:	11 82       	std	Z+1, r1	; 0x01
    75d8:	12 82       	std	Z+2, r1	; 0x02
    OS_EXIT_CRITICAL();
    75da:	89 81       	ldd	r24, Y+1	; 0x01
    75dc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    75e0:	80 e0       	ldi	r24, 0x00	; 0
}
    75e2:	25 96       	adiw	r28, 0x05	; 5
    75e4:	cd bf       	out	0x3d, r28	; 61
    75e6:	de bf       	out	0x3e, r29	; 62
    75e8:	cf 91       	pop	r28
    75ea:	df 91       	pop	r29
    75ec:	08 95       	ret

000075ee <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
    75ee:	df 93       	push	r29
    75f0:	cf 93       	push	r28
    75f2:	cd b7       	in	r28, 0x3d	; 61
    75f4:	de b7       	in	r29, 0x3e	; 62
    75f6:	2a 97       	sbiw	r28, 0x0a	; 10
    75f8:	cd bf       	out	0x3d, r28	; 61
    75fa:	de bf       	out	0x3e, r29	; 62
    75fc:	8f 83       	std	Y+7, r24	; 0x07
    75fe:	98 87       	std	Y+8, r25	; 0x08
    7600:	69 87       	std	Y+9, r22	; 0x09
    7602:	7a 87       	std	Y+10, r23	; 0x0a
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7604:	1e 82       	std	Y+6, r1	; 0x06
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7606:	80 91 07 2e 	lds	r24, 0x2E07
    760a:	88 23       	and	r24, r24
    760c:	11 f0       	breq	.+4      	; 0x7612 <OSMutexQuery+0x24>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
    760e:	86 e0       	ldi	r24, 0x06	; 6
    7610:	60 c0       	rjmp	.+192    	; 0x76d2 <OSMutexQuery+0xe4>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
    7612:	8f 81       	ldd	r24, Y+7	; 0x07
    7614:	98 85       	ldd	r25, Y+8	; 0x08
    7616:	fc 01       	movw	r30, r24
    7618:	80 81       	ld	r24, Z
    761a:	84 30       	cpi	r24, 0x04	; 4
    761c:	11 f0       	breq	.+4      	; 0x7622 <OSMutexQuery+0x34>
        return (OS_ERR_EVENT_TYPE);
    761e:	81 e0       	ldi	r24, 0x01	; 1
    7620:	58 c0       	rjmp	.+176    	; 0x76d2 <OSMutexQuery+0xe4>
    }
    OS_ENTER_CRITICAL();
    7622:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7626:	8e 83       	std	Y+6, r24	; 0x06
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
    7628:	8f 81       	ldd	r24, Y+7	; 0x07
    762a:	98 85       	ldd	r25, Y+8	; 0x08
    762c:	fc 01       	movw	r30, r24
    762e:	83 81       	ldd	r24, Z+3	; 0x03
    7630:	94 81       	ldd	r25, Z+4	; 0x04
    7632:	89 2f       	mov	r24, r25
    7634:	99 27       	eor	r25, r25
    7636:	28 2f       	mov	r18, r24
    7638:	89 85       	ldd	r24, Y+9	; 0x09
    763a:	9a 85       	ldd	r25, Y+10	; 0x0a
    763c:	fc 01       	movw	r30, r24
    763e:	23 87       	std	Z+11, r18	; 0x0b
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
    7640:	8f 81       	ldd	r24, Y+7	; 0x07
    7642:	98 85       	ldd	r25, Y+8	; 0x08
    7644:	fc 01       	movw	r30, r24
    7646:	83 81       	ldd	r24, Z+3	; 0x03
    7648:	94 81       	ldd	r25, Z+4	; 0x04
    764a:	28 2f       	mov	r18, r24
    764c:	89 85       	ldd	r24, Y+9	; 0x09
    764e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7650:	fc 01       	movw	r30, r24
    7652:	22 87       	std	Z+10, r18	; 0x0a
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
    7654:	89 85       	ldd	r24, Y+9	; 0x09
    7656:	9a 85       	ldd	r25, Y+10	; 0x0a
    7658:	fc 01       	movw	r30, r24
    765a:	82 85       	ldd	r24, Z+10	; 0x0a
    765c:	8f 3f       	cpi	r24, 0xFF	; 255
    765e:	31 f4       	brne	.+12     	; 0x766c <OSMutexQuery+0x7e>
        p_mutex_data->OSValue = OS_TRUE;
    7660:	89 85       	ldd	r24, Y+9	; 0x09
    7662:	9a 85       	ldd	r25, Y+10	; 0x0a
    7664:	21 e0       	ldi	r18, 0x01	; 1
    7666:	fc 01       	movw	r30, r24
    7668:	21 87       	std	Z+9, r18	; 0x09
    766a:	04 c0       	rjmp	.+8      	; 0x7674 <OSMutexQuery+0x86>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
    766c:	89 85       	ldd	r24, Y+9	; 0x09
    766e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7670:	fc 01       	movw	r30, r24
    7672:	11 86       	std	Z+9, r1	; 0x09
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    7674:	8f 81       	ldd	r24, Y+7	; 0x07
    7676:	98 85       	ldd	r25, Y+8	; 0x08
    7678:	fc 01       	movw	r30, r24
    767a:	25 81       	ldd	r18, Z+5	; 0x05
    767c:	89 85       	ldd	r24, Y+9	; 0x09
    767e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7680:	fc 01       	movw	r30, r24
    7682:	20 87       	std	Z+8, r18	; 0x08
    psrc                      = &pevent->OSEventTbl[0];
    7684:	8f 81       	ldd	r24, Y+7	; 0x07
    7686:	98 85       	ldd	r25, Y+8	; 0x08
    7688:	06 96       	adiw	r24, 0x06	; 6
    768a:	8a 83       	std	Y+2, r24	; 0x02
    768c:	9b 83       	std	Y+3, r25	; 0x03
    pdest                     = &p_mutex_data->OSEventTbl[0];
    768e:	89 85       	ldd	r24, Y+9	; 0x09
    7690:	9a 85       	ldd	r25, Y+10	; 0x0a
    7692:	8c 83       	std	Y+4, r24	; 0x04
    7694:	9d 83       	std	Y+5, r25	; 0x05
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    7696:	19 82       	std	Y+1, r1	; 0x01
    7698:	15 c0       	rjmp	.+42     	; 0x76c4 <OSMutexQuery+0xd6>
        *pdest++ = *psrc++;
    769a:	8a 81       	ldd	r24, Y+2	; 0x02
    769c:	9b 81       	ldd	r25, Y+3	; 0x03
    769e:	fc 01       	movw	r30, r24
    76a0:	20 81       	ld	r18, Z
    76a2:	8c 81       	ldd	r24, Y+4	; 0x04
    76a4:	9d 81       	ldd	r25, Y+5	; 0x05
    76a6:	fc 01       	movw	r30, r24
    76a8:	20 83       	st	Z, r18
    76aa:	8c 81       	ldd	r24, Y+4	; 0x04
    76ac:	9d 81       	ldd	r25, Y+5	; 0x05
    76ae:	01 96       	adiw	r24, 0x01	; 1
    76b0:	8c 83       	std	Y+4, r24	; 0x04
    76b2:	9d 83       	std	Y+5, r25	; 0x05
    76b4:	8a 81       	ldd	r24, Y+2	; 0x02
    76b6:	9b 81       	ldd	r25, Y+3	; 0x03
    76b8:	01 96       	adiw	r24, 0x01	; 1
    76ba:	8a 83       	std	Y+2, r24	; 0x02
    76bc:	9b 83       	std	Y+3, r25	; 0x03
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    76be:	89 81       	ldd	r24, Y+1	; 0x01
    76c0:	8f 5f       	subi	r24, 0xFF	; 255
    76c2:	89 83       	std	Y+1, r24	; 0x01
    76c4:	89 81       	ldd	r24, Y+1	; 0x01
    76c6:	88 30       	cpi	r24, 0x08	; 8
    76c8:	40 f3       	brcs	.-48     	; 0x769a <OSMutexQuery+0xac>
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    76ca:	8e 81       	ldd	r24, Y+6	; 0x06
    76cc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    76d0:	80 e0       	ldi	r24, 0x00	; 0
}
    76d2:	2a 96       	adiw	r28, 0x0a	; 10
    76d4:	cd bf       	out	0x3d, r28	; 61
    76d6:	de bf       	out	0x3e, r29	; 62
    76d8:	cf 91       	pop	r28
    76da:	df 91       	pop	r29
    76dc:	08 95       	ret

000076de <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
    76de:	df 93       	push	r29
    76e0:	cf 93       	push	r28
    76e2:	00 d0       	rcall	.+0      	; 0x76e4 <OSMutex_RdyAtPrio+0x6>
    76e4:	0f 92       	push	r0
    76e6:	cd b7       	in	r28, 0x3d	; 61
    76e8:	de b7       	in	r29, 0x3e	; 62
    76ea:	8a 83       	std	Y+2, r24	; 0x02
    76ec:	9b 83       	std	Y+3, r25	; 0x03
    76ee:	6c 83       	std	Y+4, r22	; 0x04
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
    76f0:	8a 81       	ldd	r24, Y+2	; 0x02
    76f2:	9b 81       	ldd	r25, Y+3	; 0x03
    76f4:	fc 01       	movw	r30, r24
    76f6:	82 a1       	ldd	r24, Z+34	; 0x22
    76f8:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
    76fa:	89 81       	ldd	r24, Y+1	; 0x01
    76fc:	88 2f       	mov	r24, r24
    76fe:	90 e0       	ldi	r25, 0x00	; 0
    7700:	29 81       	ldd	r18, Y+1	; 0x01
    7702:	22 2f       	mov	r18, r18
    7704:	30 e0       	ldi	r19, 0x00	; 0
    7706:	2b 56       	subi	r18, 0x6B	; 107
    7708:	33 4d       	sbci	r19, 0xD3	; 211
    770a:	f9 01       	movw	r30, r18
    770c:	20 81       	ld	r18, Z
    770e:	42 2f       	mov	r20, r18
    7710:	2a 81       	ldd	r18, Y+2	; 0x02
    7712:	3b 81       	ldd	r19, Y+3	; 0x03
    7714:	f9 01       	movw	r30, r18
    7716:	23 a1       	ldd	r18, Z+35	; 0x23
    7718:	20 95       	com	r18
    771a:	24 23       	and	r18, r20
    771c:	8b 56       	subi	r24, 0x6B	; 107
    771e:	93 4d       	sbci	r25, 0xD3	; 211
    7720:	fc 01       	movw	r30, r24
    7722:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    7724:	89 81       	ldd	r24, Y+1	; 0x01
    7726:	88 2f       	mov	r24, r24
    7728:	90 e0       	ldi	r25, 0x00	; 0
    772a:	8b 56       	subi	r24, 0x6B	; 107
    772c:	93 4d       	sbci	r25, 0xD3	; 211
    772e:	fc 01       	movw	r30, r24
    7730:	80 81       	ld	r24, Z
    7732:	88 23       	and	r24, r24
    7734:	59 f4       	brne	.+22     	; 0x774c <OSMutex_RdyAtPrio+0x6e>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    7736:	8a 81       	ldd	r24, Y+2	; 0x02
    7738:	9b 81       	ldd	r25, Y+3	; 0x03
    773a:	fc 01       	movw	r30, r24
    773c:	84 a1       	ldd	r24, Z+36	; 0x24
    773e:	98 2f       	mov	r25, r24
    7740:	90 95       	com	r25
    7742:	80 91 94 2c 	lds	r24, 0x2C94
    7746:	89 23       	and	r24, r25
    7748:	80 93 94 2c 	sts	0x2C94, r24
    }
    ptcb->OSTCBPrio         = prio;
    774c:	8a 81       	ldd	r24, Y+2	; 0x02
    774e:	9b 81       	ldd	r25, Y+3	; 0x03
    7750:	2c 81       	ldd	r18, Y+4	; 0x04
    7752:	fc 01       	movw	r30, r24
    7754:	20 a3       	std	Z+32, r18	; 0x20
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
    7756:	8c 81       	ldd	r24, Y+4	; 0x04
    7758:	86 95       	lsr	r24
    775a:	86 95       	lsr	r24
    775c:	86 95       	lsr	r24
    775e:	28 2f       	mov	r18, r24
    7760:	27 70       	andi	r18, 0x07	; 7
    7762:	8a 81       	ldd	r24, Y+2	; 0x02
    7764:	9b 81       	ldd	r25, Y+3	; 0x03
    7766:	fc 01       	movw	r30, r24
    7768:	22 a3       	std	Z+34, r18	; 0x22
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
    776a:	8c 81       	ldd	r24, Y+4	; 0x04
    776c:	28 2f       	mov	r18, r24
    776e:	27 70       	andi	r18, 0x07	; 7
    7770:	8a 81       	ldd	r24, Y+2	; 0x02
    7772:	9b 81       	ldd	r25, Y+3	; 0x03
    7774:	fc 01       	movw	r30, r24
    7776:	21 a3       	std	Z+33, r18	; 0x21
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
    7778:	8a 81       	ldd	r24, Y+2	; 0x02
    777a:	9b 81       	ldd	r25, Y+3	; 0x03
    777c:	fc 01       	movw	r30, r24
    777e:	82 a1       	ldd	r24, Z+34	; 0x22
    7780:	28 2f       	mov	r18, r24
    7782:	30 e0       	ldi	r19, 0x00	; 0
    7784:	81 e0       	ldi	r24, 0x01	; 1
    7786:	90 e0       	ldi	r25, 0x00	; 0
    7788:	02 c0       	rjmp	.+4      	; 0x778e <OSMutex_RdyAtPrio+0xb0>
    778a:	88 0f       	add	r24, r24
    778c:	99 1f       	adc	r25, r25
    778e:	2a 95       	dec	r18
    7790:	e2 f7       	brpl	.-8      	; 0x778a <OSMutex_RdyAtPrio+0xac>
    7792:	28 2f       	mov	r18, r24
    7794:	8a 81       	ldd	r24, Y+2	; 0x02
    7796:	9b 81       	ldd	r25, Y+3	; 0x03
    7798:	fc 01       	movw	r30, r24
    779a:	24 a3       	std	Z+36, r18	; 0x24
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
    779c:	8a 81       	ldd	r24, Y+2	; 0x02
    779e:	9b 81       	ldd	r25, Y+3	; 0x03
    77a0:	fc 01       	movw	r30, r24
    77a2:	81 a1       	ldd	r24, Z+33	; 0x21
    77a4:	28 2f       	mov	r18, r24
    77a6:	30 e0       	ldi	r19, 0x00	; 0
    77a8:	81 e0       	ldi	r24, 0x01	; 1
    77aa:	90 e0       	ldi	r25, 0x00	; 0
    77ac:	02 c0       	rjmp	.+4      	; 0x77b2 <OSMutex_RdyAtPrio+0xd4>
    77ae:	88 0f       	add	r24, r24
    77b0:	99 1f       	adc	r25, r25
    77b2:	2a 95       	dec	r18
    77b4:	e2 f7       	brpl	.-8      	; 0x77ae <OSMutex_RdyAtPrio+0xd0>
    77b6:	28 2f       	mov	r18, r24
    77b8:	8a 81       	ldd	r24, Y+2	; 0x02
    77ba:	9b 81       	ldd	r25, Y+3	; 0x03
    77bc:	fc 01       	movw	r30, r24
    77be:	23 a3       	std	Z+35, r18	; 0x23
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
    77c0:	8a 81       	ldd	r24, Y+2	; 0x02
    77c2:	9b 81       	ldd	r25, Y+3	; 0x03
    77c4:	fc 01       	movw	r30, r24
    77c6:	94 a1       	ldd	r25, Z+36	; 0x24
    77c8:	80 91 94 2c 	lds	r24, 0x2C94
    77cc:	89 2b       	or	r24, r25
    77ce:	80 93 94 2c 	sts	0x2C94, r24
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    77d2:	8a 81       	ldd	r24, Y+2	; 0x02
    77d4:	9b 81       	ldd	r25, Y+3	; 0x03
    77d6:	fc 01       	movw	r30, r24
    77d8:	82 a1       	ldd	r24, Z+34	; 0x22
    77da:	88 2f       	mov	r24, r24
    77dc:	90 e0       	ldi	r25, 0x00	; 0
    77de:	2a 81       	ldd	r18, Y+2	; 0x02
    77e0:	3b 81       	ldd	r19, Y+3	; 0x03
    77e2:	f9 01       	movw	r30, r18
    77e4:	22 a1       	ldd	r18, Z+34	; 0x22
    77e6:	22 2f       	mov	r18, r18
    77e8:	30 e0       	ldi	r19, 0x00	; 0
    77ea:	2b 56       	subi	r18, 0x6B	; 107
    77ec:	33 4d       	sbci	r19, 0xD3	; 211
    77ee:	f9 01       	movw	r30, r18
    77f0:	40 81       	ld	r20, Z
    77f2:	2a 81       	ldd	r18, Y+2	; 0x02
    77f4:	3b 81       	ldd	r19, Y+3	; 0x03
    77f6:	f9 01       	movw	r30, r18
    77f8:	23 a1       	ldd	r18, Z+35	; 0x23
    77fa:	24 2b       	or	r18, r20
    77fc:	8b 56       	subi	r24, 0x6B	; 107
    77fe:	93 4d       	sbci	r25, 0xD3	; 211
    7800:	fc 01       	movw	r30, r24
    7802:	20 83       	st	Z, r18
    OSTCBPrioTbl[prio]      = ptcb;
    7804:	8c 81       	ldd	r24, Y+4	; 0x04
    7806:	88 2f       	mov	r24, r24
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	88 0f       	add	r24, r24
    780c:	99 1f       	adc	r25, r25
    780e:	8d 58       	subi	r24, 0x8D	; 141
    7810:	9a 4c       	sbci	r25, 0xCA	; 202
    7812:	2a 81       	ldd	r18, Y+2	; 0x02
    7814:	3b 81       	ldd	r19, Y+3	; 0x03
    7816:	fc 01       	movw	r30, r24
    7818:	20 83       	st	Z, r18
    781a:	31 83       	std	Z+1, r19	; 0x01
}
    781c:	24 96       	adiw	r28, 0x04	; 4
    781e:	cd bf       	out	0x3d, r28	; 61
    7820:	de bf       	out	0x3e, r29	; 62
    7822:	cf 91       	pop	r28
    7824:	df 91       	pop	r29
    7826:	08 95       	ret

00007828 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7828:	df 93       	push	r29
    782a:	cf 93       	push	r28
    782c:	cd b7       	in	r28, 0x3d	; 61
    782e:	de b7       	in	r29, 0x3e	; 62
    7830:	29 97       	sbiw	r28, 0x09	; 9
    7832:	cd bf       	out	0x3d, r28	; 61
    7834:	de bf       	out	0x3e, r29	; 62
    7836:	8e 83       	std	Y+6, r24	; 0x06
    7838:	9f 83       	std	Y+7, r25	; 0x07
    783a:	68 87       	std	Y+8, r22	; 0x08
    783c:	79 87       	std	Y+9, r23	; 0x09
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    783e:	1b 82       	std	Y+3, r1	; 0x03
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7840:	8e 81       	ldd	r24, Y+6	; 0x06
    7842:	9f 81       	ldd	r25, Y+7	; 0x07
    7844:	fc 01       	movw	r30, r24
    7846:	80 81       	ld	r24, Z
    7848:	82 30       	cpi	r24, 0x02	; 2
    784a:	41 f0       	breq	.+16     	; 0x785c <OSQAccept+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    784c:	88 85       	ldd	r24, Y+8	; 0x08
    784e:	99 85       	ldd	r25, Y+9	; 0x09
    7850:	21 e0       	ldi	r18, 0x01	; 1
    7852:	fc 01       	movw	r30, r24
    7854:	20 83       	st	Z, r18
        return ((void *)0);
    7856:	80 e0       	ldi	r24, 0x00	; 0
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	58 c0       	rjmp	.+176    	; 0x790c <OSQAccept+0xe4>
    }
    OS_ENTER_CRITICAL();
    785c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7860:	8b 83       	std	Y+3, r24	; 0x03
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7862:	8e 81       	ldd	r24, Y+6	; 0x06
    7864:	9f 81       	ldd	r25, Y+7	; 0x07
    7866:	fc 01       	movw	r30, r24
    7868:	81 81       	ldd	r24, Z+1	; 0x01
    786a:	92 81       	ldd	r25, Z+2	; 0x02
    786c:	8c 83       	std	Y+4, r24	; 0x04
    786e:	9d 83       	std	Y+5, r25	; 0x05
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7870:	8c 81       	ldd	r24, Y+4	; 0x04
    7872:	9d 81       	ldd	r25, Y+5	; 0x05
    7874:	fc 01       	movw	r30, r24
    7876:	84 85       	ldd	r24, Z+12	; 0x0c
    7878:	95 85       	ldd	r25, Z+13	; 0x0d
    787a:	00 97       	sbiw	r24, 0x00	; 0
    787c:	d9 f1       	breq	.+118    	; 0x78f4 <OSQAccept+0xcc>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    787e:	8c 81       	ldd	r24, Y+4	; 0x04
    7880:	9d 81       	ldd	r25, Y+5	; 0x05
    7882:	fc 01       	movw	r30, r24
    7884:	80 85       	ldd	r24, Z+8	; 0x08
    7886:	91 85       	ldd	r25, Z+9	; 0x09
    7888:	fc 01       	movw	r30, r24
    788a:	20 81       	ld	r18, Z
    788c:	31 81       	ldd	r19, Z+1	; 0x01
    788e:	29 83       	std	Y+1, r18	; 0x01
    7890:	3a 83       	std	Y+2, r19	; 0x02
    7892:	9c 01       	movw	r18, r24
    7894:	2e 5f       	subi	r18, 0xFE	; 254
    7896:	3f 4f       	sbci	r19, 0xFF	; 255
    7898:	8c 81       	ldd	r24, Y+4	; 0x04
    789a:	9d 81       	ldd	r25, Y+5	; 0x05
    789c:	fc 01       	movw	r30, r24
    789e:	20 87       	std	Z+8, r18	; 0x08
    78a0:	31 87       	std	Z+9, r19	; 0x09
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    78a2:	8c 81       	ldd	r24, Y+4	; 0x04
    78a4:	9d 81       	ldd	r25, Y+5	; 0x05
    78a6:	fc 01       	movw	r30, r24
    78a8:	84 85       	ldd	r24, Z+12	; 0x0c
    78aa:	95 85       	ldd	r25, Z+13	; 0x0d
    78ac:	9c 01       	movw	r18, r24
    78ae:	21 50       	subi	r18, 0x01	; 1
    78b0:	30 40       	sbci	r19, 0x00	; 0
    78b2:	8c 81       	ldd	r24, Y+4	; 0x04
    78b4:	9d 81       	ldd	r25, Y+5	; 0x05
    78b6:	fc 01       	movw	r30, r24
    78b8:	24 87       	std	Z+12, r18	; 0x0c
    78ba:	35 87       	std	Z+13, r19	; 0x0d
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    78bc:	8c 81       	ldd	r24, Y+4	; 0x04
    78be:	9d 81       	ldd	r25, Y+5	; 0x05
    78c0:	fc 01       	movw	r30, r24
    78c2:	20 85       	ldd	r18, Z+8	; 0x08
    78c4:	31 85       	ldd	r19, Z+9	; 0x09
    78c6:	8c 81       	ldd	r24, Y+4	; 0x04
    78c8:	9d 81       	ldd	r25, Y+5	; 0x05
    78ca:	fc 01       	movw	r30, r24
    78cc:	84 81       	ldd	r24, Z+4	; 0x04
    78ce:	95 81       	ldd	r25, Z+5	; 0x05
    78d0:	28 17       	cp	r18, r24
    78d2:	39 07       	cpc	r19, r25
    78d4:	51 f4       	brne	.+20     	; 0x78ea <OSQAccept+0xc2>
            pq->OSQOut = pq->OSQStart;
    78d6:	8c 81       	ldd	r24, Y+4	; 0x04
    78d8:	9d 81       	ldd	r25, Y+5	; 0x05
    78da:	fc 01       	movw	r30, r24
    78dc:	22 81       	ldd	r18, Z+2	; 0x02
    78de:	33 81       	ldd	r19, Z+3	; 0x03
    78e0:	8c 81       	ldd	r24, Y+4	; 0x04
    78e2:	9d 81       	ldd	r25, Y+5	; 0x05
    78e4:	fc 01       	movw	r30, r24
    78e6:	20 87       	std	Z+8, r18	; 0x08
    78e8:	31 87       	std	Z+9, r19	; 0x09
        }
        *perr = OS_ERR_NONE;
    78ea:	88 85       	ldd	r24, Y+8	; 0x08
    78ec:	99 85       	ldd	r25, Y+9	; 0x09
    78ee:	fc 01       	movw	r30, r24
    78f0:	10 82       	st	Z, r1
    78f2:	07 c0       	rjmp	.+14     	; 0x7902 <OSQAccept+0xda>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    78f4:	88 85       	ldd	r24, Y+8	; 0x08
    78f6:	99 85       	ldd	r25, Y+9	; 0x09
    78f8:	2f e1       	ldi	r18, 0x1F	; 31
    78fa:	fc 01       	movw	r30, r24
    78fc:	20 83       	st	Z, r18
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    78fe:	19 82       	std	Y+1, r1	; 0x01
    7900:	1a 82       	std	Y+2, r1	; 0x02
    }
    OS_EXIT_CRITICAL();
    7902:	8b 81       	ldd	r24, Y+3	; 0x03
    7904:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (pmsg);                               /* Return message received (or NULL)                  */
    7908:	89 81       	ldd	r24, Y+1	; 0x01
    790a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    790c:	29 96       	adiw	r28, 0x09	; 9
    790e:	cd bf       	out	0x3d, r28	; 61
    7910:	de bf       	out	0x3e, r29	; 62
    7912:	cf 91       	pop	r28
    7914:	df 91       	pop	r29
    7916:	08 95       	ret

00007918 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7918:	df 93       	push	r29
    791a:	cf 93       	push	r28
    791c:	cd b7       	in	r28, 0x3d	; 61
    791e:	de b7       	in	r29, 0x3e	; 62
    7920:	29 97       	sbiw	r28, 0x09	; 9
    7922:	cd bf       	out	0x3d, r28	; 61
    7924:	de bf       	out	0x3e, r29	; 62
    7926:	8e 83       	std	Y+6, r24	; 0x06
    7928:	9f 83       	std	Y+7, r25	; 0x07
    792a:	68 87       	std	Y+8, r22	; 0x08
    792c:	79 87       	std	Y+9, r23	; 0x09
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    792e:	1b 82       	std	Y+3, r1	; 0x03
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7930:	80 91 07 2e 	lds	r24, 0x2E07
    7934:	88 23       	and	r24, r24
    7936:	19 f0       	breq	.+6      	; 0x793e <OSQCreate+0x26>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7938:	80 e0       	ldi	r24, 0x00	; 0
    793a:	90 e0       	ldi	r25, 0x00	; 0
    793c:	a1 c0       	rjmp	.+322    	; 0x7a80 <OSQCreate+0x168>
    }
    OS_ENTER_CRITICAL();
    793e:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7942:	8b 83       	std	Y+3, r24	; 0x03
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    7944:	80 91 05 2e 	lds	r24, 0x2E05
    7948:	90 91 06 2e 	lds	r25, 0x2E06
    794c:	89 83       	std	Y+1, r24	; 0x01
    794e:	9a 83       	std	Y+2, r25	; 0x02
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    7950:	80 91 05 2e 	lds	r24, 0x2E05
    7954:	90 91 06 2e 	lds	r25, 0x2E06
    7958:	00 97       	sbiw	r24, 0x00	; 0
    795a:	59 f0       	breq	.+22     	; 0x7972 <OSQCreate+0x5a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    795c:	80 91 05 2e 	lds	r24, 0x2E05
    7960:	90 91 06 2e 	lds	r25, 0x2E06
    7964:	fc 01       	movw	r30, r24
    7966:	81 81       	ldd	r24, Z+1	; 0x01
    7968:	92 81       	ldd	r25, Z+2	; 0x02
    796a:	80 93 05 2e 	sts	0x2E05, r24
    796e:	90 93 06 2e 	sts	0x2E06, r25
    }
    OS_EXIT_CRITICAL();
    7972:	8b 81       	ldd	r24, Y+3	; 0x03
    7974:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    7978:	89 81       	ldd	r24, Y+1	; 0x01
    797a:	9a 81       	ldd	r25, Y+2	; 0x02
    797c:	00 97       	sbiw	r24, 0x00	; 0
    797e:	09 f4       	brne	.+2      	; 0x7982 <OSQCreate+0x6a>
    7980:	7d c0       	rjmp	.+250    	; 0x7a7c <OSQCreate+0x164>
        OS_ENTER_CRITICAL();
    7982:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7986:	8b 83       	std	Y+3, r24	; 0x03
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    7988:	80 91 92 2c 	lds	r24, 0x2C92
    798c:	90 91 93 2c 	lds	r25, 0x2C93
    7990:	8c 83       	std	Y+4, r24	; 0x04
    7992:	9d 83       	std	Y+5, r25	; 0x05
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7994:	8c 81       	ldd	r24, Y+4	; 0x04
    7996:	9d 81       	ldd	r25, Y+5	; 0x05
    7998:	00 97       	sbiw	r24, 0x00	; 0
    799a:	09 f4       	brne	.+2      	; 0x799e <OSQCreate+0x86>
    799c:	5b c0       	rjmp	.+182    	; 0x7a54 <OSQCreate+0x13c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    799e:	80 91 92 2c 	lds	r24, 0x2C92
    79a2:	90 91 93 2c 	lds	r25, 0x2C93
    79a6:	fc 01       	movw	r30, r24
    79a8:	80 81       	ld	r24, Z
    79aa:	91 81       	ldd	r25, Z+1	; 0x01
    79ac:	80 93 92 2c 	sts	0x2C92, r24
    79b0:	90 93 93 2c 	sts	0x2C93, r25
            OS_EXIT_CRITICAL();
    79b4:	8b 81       	ldd	r24, Y+3	; 0x03
    79b6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    79ba:	8c 81       	ldd	r24, Y+4	; 0x04
    79bc:	9d 81       	ldd	r25, Y+5	; 0x05
    79be:	2e 81       	ldd	r18, Y+6	; 0x06
    79c0:	3f 81       	ldd	r19, Y+7	; 0x07
    79c2:	fc 01       	movw	r30, r24
    79c4:	22 83       	std	Z+2, r18	; 0x02
    79c6:	33 83       	std	Z+3, r19	; 0x03
            pq->OSQEnd             = &start[size];
    79c8:	88 85       	ldd	r24, Y+8	; 0x08
    79ca:	99 85       	ldd	r25, Y+9	; 0x09
    79cc:	88 0f       	add	r24, r24
    79ce:	99 1f       	adc	r25, r25
    79d0:	2e 81       	ldd	r18, Y+6	; 0x06
    79d2:	3f 81       	ldd	r19, Y+7	; 0x07
    79d4:	28 0f       	add	r18, r24
    79d6:	39 1f       	adc	r19, r25
    79d8:	8c 81       	ldd	r24, Y+4	; 0x04
    79da:	9d 81       	ldd	r25, Y+5	; 0x05
    79dc:	fc 01       	movw	r30, r24
    79de:	24 83       	std	Z+4, r18	; 0x04
    79e0:	35 83       	std	Z+5, r19	; 0x05
            pq->OSQIn              = start;
    79e2:	8c 81       	ldd	r24, Y+4	; 0x04
    79e4:	9d 81       	ldd	r25, Y+5	; 0x05
    79e6:	2e 81       	ldd	r18, Y+6	; 0x06
    79e8:	3f 81       	ldd	r19, Y+7	; 0x07
    79ea:	fc 01       	movw	r30, r24
    79ec:	26 83       	std	Z+6, r18	; 0x06
    79ee:	37 83       	std	Z+7, r19	; 0x07
            pq->OSQOut             = start;
    79f0:	8c 81       	ldd	r24, Y+4	; 0x04
    79f2:	9d 81       	ldd	r25, Y+5	; 0x05
    79f4:	2e 81       	ldd	r18, Y+6	; 0x06
    79f6:	3f 81       	ldd	r19, Y+7	; 0x07
    79f8:	fc 01       	movw	r30, r24
    79fa:	20 87       	std	Z+8, r18	; 0x08
    79fc:	31 87       	std	Z+9, r19	; 0x09
            pq->OSQSize            = size;
    79fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7a00:	9d 81       	ldd	r25, Y+5	; 0x05
    7a02:	28 85       	ldd	r18, Y+8	; 0x08
    7a04:	39 85       	ldd	r19, Y+9	; 0x09
    7a06:	fc 01       	movw	r30, r24
    7a08:	22 87       	std	Z+10, r18	; 0x0a
    7a0a:	33 87       	std	Z+11, r19	; 0x0b
            pq->OSQEntries         = 0;
    7a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    7a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    7a10:	fc 01       	movw	r30, r24
    7a12:	14 86       	std	Z+12, r1	; 0x0c
    7a14:	15 86       	std	Z+13, r1	; 0x0d
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    7a16:	89 81       	ldd	r24, Y+1	; 0x01
    7a18:	9a 81       	ldd	r25, Y+2	; 0x02
    7a1a:	22 e0       	ldi	r18, 0x02	; 2
    7a1c:	fc 01       	movw	r30, r24
    7a1e:	20 83       	st	Z, r18
            pevent->OSEventCnt     = 0;
    7a20:	89 81       	ldd	r24, Y+1	; 0x01
    7a22:	9a 81       	ldd	r25, Y+2	; 0x02
    7a24:	fc 01       	movw	r30, r24
    7a26:	13 82       	std	Z+3, r1	; 0x03
    7a28:	14 82       	std	Z+4, r1	; 0x04
            pevent->OSEventPtr     = pq;
    7a2a:	89 81       	ldd	r24, Y+1	; 0x01
    7a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    7a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    7a30:	3d 81       	ldd	r19, Y+5	; 0x05
    7a32:	fc 01       	movw	r30, r24
    7a34:	21 83       	std	Z+1, r18	; 0x01
    7a36:	32 83       	std	Z+2, r19	; 0x02
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    7a38:	89 81       	ldd	r24, Y+1	; 0x01
    7a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    7a3c:	2f e3       	ldi	r18, 0x3F	; 63
    7a3e:	fc 01       	movw	r30, r24
    7a40:	26 87       	std	Z+14, r18	; 0x0e
            pevent->OSEventName[1] = OS_ASCII_NUL;
    7a42:	89 81       	ldd	r24, Y+1	; 0x01
    7a44:	9a 81       	ldd	r25, Y+2	; 0x02
    7a46:	fc 01       	movw	r30, r24
    7a48:	17 86       	std	Z+15, r1	; 0x0f
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    7a4a:	89 81       	ldd	r24, Y+1	; 0x01
    7a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    7a4e:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_EventWaitListInit>
    7a52:	14 c0       	rjmp	.+40     	; 0x7a7c <OSQCreate+0x164>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    7a54:	20 91 05 2e 	lds	r18, 0x2E05
    7a58:	30 91 06 2e 	lds	r19, 0x2E06
    7a5c:	89 81       	ldd	r24, Y+1	; 0x01
    7a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    7a60:	fc 01       	movw	r30, r24
    7a62:	21 83       	std	Z+1, r18	; 0x01
    7a64:	32 83       	std	Z+2, r19	; 0x02
            OSEventFreeList    = pevent;
    7a66:	89 81       	ldd	r24, Y+1	; 0x01
    7a68:	9a 81       	ldd	r25, Y+2	; 0x02
    7a6a:	80 93 05 2e 	sts	0x2E05, r24
    7a6e:	90 93 06 2e 	sts	0x2E06, r25
            OS_EXIT_CRITICAL();
    7a72:	8b 81       	ldd	r24, Y+3	; 0x03
    7a74:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
            pevent = (OS_EVENT *)0;
    7a78:	19 82       	std	Y+1, r1	; 0x01
    7a7a:	1a 82       	std	Y+2, r1	; 0x02
        }
    }
    return (pevent);
    7a7c:	89 81       	ldd	r24, Y+1	; 0x01
    7a7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7a80:	29 96       	adiw	r28, 0x09	; 9
    7a82:	cd bf       	out	0x3d, r28	; 61
    7a84:	de bf       	out	0x3e, r29	; 62
    7a86:	cf 91       	pop	r28
    7a88:	df 91       	pop	r29
    7a8a:	08 95       	ret

00007a8c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7a8c:	df 93       	push	r29
    7a8e:	cf 93       	push	r28
    7a90:	cd b7       	in	r28, 0x3d	; 61
    7a92:	de b7       	in	r29, 0x3e	; 62
    7a94:	2b 97       	sbiw	r28, 0x0b	; 11
    7a96:	cd bf       	out	0x3d, r28	; 61
    7a98:	de bf       	out	0x3e, r29	; 62
    7a9a:	8f 83       	std	Y+7, r24	; 0x07
    7a9c:	98 87       	std	Y+8, r25	; 0x08
    7a9e:	69 87       	std	Y+9, r22	; 0x09
    7aa0:	4a 87       	std	Y+10, r20	; 0x0a
    7aa2:	5b 87       	std	Y+11, r21	; 0x0b
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7aa4:	1c 82       	std	Y+4, r1	; 0x04
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    7aa8:	98 85       	ldd	r25, Y+8	; 0x08
    7aaa:	fc 01       	movw	r30, r24
    7aac:	80 81       	ld	r24, Z
    7aae:	82 30       	cpi	r24, 0x02	; 2
    7ab0:	41 f0       	breq	.+16     	; 0x7ac2 <OSQDel+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    7ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ab4:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ab6:	21 e0       	ldi	r18, 0x01	; 1
    7ab8:	fc 01       	movw	r30, r24
    7aba:	20 83       	st	Z, r18
        return (pevent);
    7abc:	8f 81       	ldd	r24, Y+7	; 0x07
    7abe:	98 85       	ldd	r25, Y+8	; 0x08
    7ac0:	da c0       	rjmp	.+436    	; 0x7c76 <OSQDel+0x1ea>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7ac2:	80 91 07 2e 	lds	r24, 0x2E07
    7ac6:	88 23       	and	r24, r24
    7ac8:	41 f0       	breq	.+16     	; 0x7ada <OSQDel+0x4e>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7aca:	8a 85       	ldd	r24, Y+10	; 0x0a
    7acc:	9b 85       	ldd	r25, Y+11	; 0x0b
    7ace:	2f e0       	ldi	r18, 0x0F	; 15
    7ad0:	fc 01       	movw	r30, r24
    7ad2:	20 83       	st	Z, r18
        return (pevent);
    7ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    7ad6:	98 85       	ldd	r25, Y+8	; 0x08
    7ad8:	ce c0       	rjmp	.+412    	; 0x7c76 <OSQDel+0x1ea>
    }
    OS_ENTER_CRITICAL();
    7ada:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7ade:	8c 83       	std	Y+4, r24	; 0x04
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    7ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    7ae2:	98 85       	ldd	r25, Y+8	; 0x08
    7ae4:	fc 01       	movw	r30, r24
    7ae6:	85 81       	ldd	r24, Z+5	; 0x05
    7ae8:	88 23       	and	r24, r24
    7aea:	19 f0       	breq	.+6      	; 0x7af2 <OSQDel+0x66>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    7aec:	81 e0       	ldi	r24, 0x01	; 1
    7aee:	89 83       	std	Y+1, r24	; 0x01
    7af0:	01 c0       	rjmp	.+2      	; 0x7af4 <OSQDel+0x68>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    7af2:	19 82       	std	Y+1, r1	; 0x01
    }
    switch (opt) {
    7af4:	89 85       	ldd	r24, Y+9	; 0x09
    7af6:	88 2f       	mov	r24, r24
    7af8:	90 e0       	ldi	r25, 0x00	; 0
    7afa:	00 97       	sbiw	r24, 0x00	; 0
    7afc:	29 f0       	breq	.+10     	; 0x7b08 <OSQDel+0x7c>
    7afe:	81 30       	cpi	r24, 0x01	; 1
    7b00:	91 05       	cpc	r25, r1
    7b02:	09 f4       	brne	.+2      	; 0x7b06 <OSQDel+0x7a>
    7b04:	5c c0       	rjmp	.+184    	; 0x7bbe <OSQDel+0x132>
    7b06:	a8 c0       	rjmp	.+336    	; 0x7c58 <OSQDel+0x1cc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    7b08:	89 81       	ldd	r24, Y+1	; 0x01
    7b0a:	88 23       	and	r24, r24
    7b0c:	09 f0       	breq	.+2      	; 0x7b10 <OSQDel+0x84>
    7b0e:	41 c0       	rjmp	.+130    	; 0x7b92 <OSQDel+0x106>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    7b10:	8f 81       	ldd	r24, Y+7	; 0x07
    7b12:	98 85       	ldd	r25, Y+8	; 0x08
    7b14:	2f e3       	ldi	r18, 0x3F	; 63
    7b16:	fc 01       	movw	r30, r24
    7b18:	26 87       	std	Z+14, r18	; 0x0e
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    7b1a:	8f 81       	ldd	r24, Y+7	; 0x07
    7b1c:	98 85       	ldd	r25, Y+8	; 0x08
    7b1e:	fc 01       	movw	r30, r24
    7b20:	17 86       	std	Z+15, r1	; 0x0f
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    7b22:	8f 81       	ldd	r24, Y+7	; 0x07
    7b24:	98 85       	ldd	r25, Y+8	; 0x08
    7b26:	fc 01       	movw	r30, r24
    7b28:	81 81       	ldd	r24, Z+1	; 0x01
    7b2a:	92 81       	ldd	r25, Z+2	; 0x02
    7b2c:	8d 83       	std	Y+5, r24	; 0x05
    7b2e:	9e 83       	std	Y+6, r25	; 0x06
                 pq->OSQPtr             = OSQFreeList;
    7b30:	20 91 92 2c 	lds	r18, 0x2C92
    7b34:	30 91 93 2c 	lds	r19, 0x2C93
    7b38:	8d 81       	ldd	r24, Y+5	; 0x05
    7b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    7b3c:	fc 01       	movw	r30, r24
    7b3e:	20 83       	st	Z, r18
    7b40:	31 83       	std	Z+1, r19	; 0x01
                 OSQFreeList            = pq;
    7b42:	8d 81       	ldd	r24, Y+5	; 0x05
    7b44:	9e 81       	ldd	r25, Y+6	; 0x06
    7b46:	80 93 92 2c 	sts	0x2C92, r24
    7b4a:	90 93 93 2c 	sts	0x2C93, r25
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    7b50:	98 85       	ldd	r25, Y+8	; 0x08
    7b52:	fc 01       	movw	r30, r24
    7b54:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    7b56:	20 91 05 2e 	lds	r18, 0x2E05
    7b5a:	30 91 06 2e 	lds	r19, 0x2E06
    7b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    7b60:	98 85       	ldd	r25, Y+8	; 0x08
    7b62:	fc 01       	movw	r30, r24
    7b64:	21 83       	std	Z+1, r18	; 0x01
    7b66:	32 83       	std	Z+2, r19	; 0x02
                 pevent->OSEventCnt     = 0;
    7b68:	8f 81       	ldd	r24, Y+7	; 0x07
    7b6a:	98 85       	ldd	r25, Y+8	; 0x08
    7b6c:	fc 01       	movw	r30, r24
    7b6e:	13 82       	std	Z+3, r1	; 0x03
    7b70:	14 82       	std	Z+4, r1	; 0x04
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    7b72:	8f 81       	ldd	r24, Y+7	; 0x07
    7b74:	98 85       	ldd	r25, Y+8	; 0x08
    7b76:	80 93 05 2e 	sts	0x2E05, r24
    7b7a:	90 93 06 2e 	sts	0x2E06, r25
                 OS_EXIT_CRITICAL();
    7b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    7b80:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    7b84:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b86:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b88:	fc 01       	movw	r30, r24
    7b8a:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    7b8c:	1a 82       	std	Y+2, r1	; 0x02
    7b8e:	1b 82       	std	Y+3, r1	; 0x03
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    7b90:	70 c0       	rjmp	.+224    	; 0x7c72 <OSQDel+0x1e6>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
    7b92:	8c 81       	ldd	r24, Y+4	; 0x04
    7b94:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    7b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b9c:	29 e4       	ldi	r18, 0x49	; 73
    7b9e:	fc 01       	movw	r30, r24
    7ba0:	20 83       	st	Z, r18
                 pevent_return          = pevent;
    7ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    7ba4:	98 85       	ldd	r25, Y+8	; 0x08
    7ba6:	8a 83       	std	Y+2, r24	; 0x02
    7ba8:	9b 83       	std	Y+3, r25	; 0x03
             }
             break;
    7baa:	63 c0       	rjmp	.+198    	; 0x7c72 <OSQDel+0x1e6>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    7bac:	8f 81       	ldd	r24, Y+7	; 0x07
    7bae:	98 85       	ldd	r25, Y+8	; 0x08
    7bb0:	60 e0       	ldi	r22, 0x00	; 0
    7bb2:	70 e0       	ldi	r23, 0x00	; 0
    7bb4:	44 e0       	ldi	r20, 0x04	; 4
    7bb6:	20 e0       	ldi	r18, 0x00	; 0
    7bb8:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
    7bbc:	01 c0       	rjmp	.+2      	; 0x7bc0 <OSQDel+0x134>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    7bbe:	00 00       	nop
    7bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    7bc2:	98 85       	ldd	r25, Y+8	; 0x08
    7bc4:	fc 01       	movw	r30, r24
    7bc6:	85 81       	ldd	r24, Z+5	; 0x05
    7bc8:	88 23       	and	r24, r24
    7bca:	81 f7       	brne	.-32     	; 0x7bac <OSQDel+0x120>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    7bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    7bce:	98 85       	ldd	r25, Y+8	; 0x08
    7bd0:	2f e3       	ldi	r18, 0x3F	; 63
    7bd2:	fc 01       	movw	r30, r24
    7bd4:	26 87       	std	Z+14, r18	; 0x0e
             pevent->OSEventName[1] = OS_ASCII_NUL;
    7bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    7bd8:	98 85       	ldd	r25, Y+8	; 0x08
    7bda:	fc 01       	movw	r30, r24
    7bdc:	17 86       	std	Z+15, r1	; 0x0f
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    7bde:	8f 81       	ldd	r24, Y+7	; 0x07
    7be0:	98 85       	ldd	r25, Y+8	; 0x08
    7be2:	fc 01       	movw	r30, r24
    7be4:	81 81       	ldd	r24, Z+1	; 0x01
    7be6:	92 81       	ldd	r25, Z+2	; 0x02
    7be8:	8d 83       	std	Y+5, r24	; 0x05
    7bea:	9e 83       	std	Y+6, r25	; 0x06
             pq->OSQPtr             = OSQFreeList;
    7bec:	20 91 92 2c 	lds	r18, 0x2C92
    7bf0:	30 91 93 2c 	lds	r19, 0x2C93
    7bf4:	8d 81       	ldd	r24, Y+5	; 0x05
    7bf6:	9e 81       	ldd	r25, Y+6	; 0x06
    7bf8:	fc 01       	movw	r30, r24
    7bfa:	20 83       	st	Z, r18
    7bfc:	31 83       	std	Z+1, r19	; 0x01
             OSQFreeList            = pq;
    7bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    7c00:	9e 81       	ldd	r25, Y+6	; 0x06
    7c02:	80 93 92 2c 	sts	0x2C92, r24
    7c06:	90 93 93 2c 	sts	0x2C93, r25
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    7c0c:	98 85       	ldd	r25, Y+8	; 0x08
    7c0e:	fc 01       	movw	r30, r24
    7c10:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    7c12:	20 91 05 2e 	lds	r18, 0x2E05
    7c16:	30 91 06 2e 	lds	r19, 0x2E06
    7c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    7c1c:	98 85       	ldd	r25, Y+8	; 0x08
    7c1e:	fc 01       	movw	r30, r24
    7c20:	21 83       	std	Z+1, r18	; 0x01
    7c22:	32 83       	std	Z+2, r19	; 0x02
             pevent->OSEventCnt     = 0;
    7c24:	8f 81       	ldd	r24, Y+7	; 0x07
    7c26:	98 85       	ldd	r25, Y+8	; 0x08
    7c28:	fc 01       	movw	r30, r24
    7c2a:	13 82       	std	Z+3, r1	; 0x03
    7c2c:	14 82       	std	Z+4, r1	; 0x04
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    7c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    7c30:	98 85       	ldd	r25, Y+8	; 0x08
    7c32:	80 93 05 2e 	sts	0x2E05, r24
    7c36:	90 93 06 2e 	sts	0x2E06, r25
             OS_EXIT_CRITICAL();
    7c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    7c3c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7c40:	89 81       	ldd	r24, Y+1	; 0x01
    7c42:	81 30       	cpi	r24, 0x01	; 1
    7c44:	11 f4       	brne	.+4      	; 0x7c4a <OSQDel+0x1be>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7c46:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    7c4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c4e:	fc 01       	movw	r30, r24
    7c50:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    7c52:	1a 82       	std	Y+2, r1	; 0x02
    7c54:	1b 82       	std	Y+3, r1	; 0x03
             break;
    7c56:	0d c0       	rjmp	.+26     	; 0x7c72 <OSQDel+0x1e6>

        default:
             OS_EXIT_CRITICAL();
    7c58:	8c 81       	ldd	r24, Y+4	; 0x04
    7c5a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    7c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    7c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    7c62:	27 e0       	ldi	r18, 0x07	; 7
    7c64:	fc 01       	movw	r30, r24
    7c66:	20 83       	st	Z, r18
             pevent_return          = pevent;
    7c68:	8f 81       	ldd	r24, Y+7	; 0x07
    7c6a:	98 85       	ldd	r25, Y+8	; 0x08
    7c6c:	8a 83       	std	Y+2, r24	; 0x02
    7c6e:	9b 83       	std	Y+3, r25	; 0x03
             break;
    7c70:	00 00       	nop
    }
    return (pevent_return);
    7c72:	8a 81       	ldd	r24, Y+2	; 0x02
    7c74:	9b 81       	ldd	r25, Y+3	; 0x03
}
    7c76:	2b 96       	adiw	r28, 0x0b	; 11
    7c78:	cd bf       	out	0x3d, r28	; 61
    7c7a:	de bf       	out	0x3e, r29	; 62
    7c7c:	cf 91       	pop	r28
    7c7e:	df 91       	pop	r29
    7c80:	08 95       	ret

00007c82 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    7c82:	df 93       	push	r29
    7c84:	cf 93       	push	r28
    7c86:	cd b7       	in	r28, 0x3d	; 61
    7c88:	de b7       	in	r29, 0x3e	; 62
    7c8a:	25 97       	sbiw	r28, 0x05	; 5
    7c8c:	cd bf       	out	0x3d, r28	; 61
    7c8e:	de bf       	out	0x3e, r29	; 62
    7c90:	8c 83       	std	Y+4, r24	; 0x04
    7c92:	9d 83       	std	Y+5, r25	; 0x05
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7c94:	19 82       	std	Y+1, r1	; 0x01
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
#endif
    OS_ENTER_CRITICAL();
    7c96:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7c9a:	89 83       	std	Y+1, r24	; 0x01
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    7c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    7c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    7ca0:	fc 01       	movw	r30, r24
    7ca2:	81 81       	ldd	r24, Z+1	; 0x01
    7ca4:	92 81       	ldd	r25, Z+2	; 0x02
    7ca6:	8a 83       	std	Y+2, r24	; 0x02
    7ca8:	9b 83       	std	Y+3, r25	; 0x03
    pq->OSQIn      = pq->OSQStart;
    7caa:	8a 81       	ldd	r24, Y+2	; 0x02
    7cac:	9b 81       	ldd	r25, Y+3	; 0x03
    7cae:	fc 01       	movw	r30, r24
    7cb0:	22 81       	ldd	r18, Z+2	; 0x02
    7cb2:	33 81       	ldd	r19, Z+3	; 0x03
    7cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    7cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    7cb8:	fc 01       	movw	r30, r24
    7cba:	26 83       	std	Z+6, r18	; 0x06
    7cbc:	37 83       	std	Z+7, r19	; 0x07
    pq->OSQOut     = pq->OSQStart;
    7cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    7cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    7cc2:	fc 01       	movw	r30, r24
    7cc4:	22 81       	ldd	r18, Z+2	; 0x02
    7cc6:	33 81       	ldd	r19, Z+3	; 0x03
    7cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    7cca:	9b 81       	ldd	r25, Y+3	; 0x03
    7ccc:	fc 01       	movw	r30, r24
    7cce:	20 87       	std	Z+8, r18	; 0x08
    7cd0:	31 87       	std	Z+9, r19	; 0x09
    pq->OSQEntries = 0;
    7cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    7cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    7cd6:	fc 01       	movw	r30, r24
    7cd8:	14 86       	std	Z+12, r1	; 0x0c
    7cda:	15 86       	std	Z+13, r1	; 0x0d
    OS_EXIT_CRITICAL();
    7cdc:	89 81       	ldd	r24, Y+1	; 0x01
    7cde:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    7ce2:	80 e0       	ldi	r24, 0x00	; 0
}
    7ce4:	25 96       	adiw	r28, 0x05	; 5
    7ce6:	cd bf       	out	0x3d, r28	; 61
    7ce8:	de bf       	out	0x3e, r29	; 62
    7cea:	cf 91       	pop	r28
    7cec:	df 91       	pop	r29
    7cee:	08 95       	ret

00007cf0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    7cf0:	df 93       	push	r29
    7cf2:	cf 93       	push	r28
    7cf4:	cd b7       	in	r28, 0x3d	; 61
    7cf6:	de b7       	in	r29, 0x3e	; 62
    7cf8:	2b 97       	sbiw	r28, 0x0b	; 11
    7cfa:	cd bf       	out	0x3d, r28	; 61
    7cfc:	de bf       	out	0x3e, r29	; 62
    7cfe:	8e 83       	std	Y+6, r24	; 0x06
    7d00:	9f 83       	std	Y+7, r25	; 0x07
    7d02:	68 87       	std	Y+8, r22	; 0x08
    7d04:	79 87       	std	Y+9, r23	; 0x09
    7d06:	4a 87       	std	Y+10, r20	; 0x0a
    7d08:	5b 87       	std	Y+11, r21	; 0x0b
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7d0a:	1b 82       	std	Y+3, r1	; 0x03
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    7d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    7d10:	fc 01       	movw	r30, r24
    7d12:	80 81       	ld	r24, Z
    7d14:	82 30       	cpi	r24, 0x02	; 2
    7d16:	41 f0       	breq	.+16     	; 0x7d28 <OSQPend+0x38>
        *perr = OS_ERR_EVENT_TYPE;
    7d18:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d1a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d1c:	21 e0       	ldi	r18, 0x01	; 1
    7d1e:	fc 01       	movw	r30, r24
    7d20:	20 83       	st	Z, r18
        return ((void *)0);
    7d22:	80 e0       	ldi	r24, 0x00	; 0
    7d24:	90 e0       	ldi	r25, 0x00	; 0
    7d26:	ed c0       	rjmp	.+474    	; 0x7f02 <OSQPend+0x212>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7d28:	80 91 07 2e 	lds	r24, 0x2E07
    7d2c:	88 23       	and	r24, r24
    7d2e:	41 f0       	breq	.+16     	; 0x7d40 <OSQPend+0x50>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    7d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d34:	22 e0       	ldi	r18, 0x02	; 2
    7d36:	fc 01       	movw	r30, r24
    7d38:	20 83       	st	Z, r18
        return ((void *)0);
    7d3a:	80 e0       	ldi	r24, 0x00	; 0
    7d3c:	90 e0       	ldi	r25, 0x00	; 0
    7d3e:	e1 c0       	rjmp	.+450    	; 0x7f02 <OSQPend+0x212>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    7d40:	80 91 fa 27 	lds	r24, 0x27FA
    7d44:	88 23       	and	r24, r24
    7d46:	41 f0       	breq	.+16     	; 0x7d58 <OSQPend+0x68>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    7d48:	8a 85       	ldd	r24, Y+10	; 0x0a
    7d4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7d4c:	2d e0       	ldi	r18, 0x0D	; 13
    7d4e:	fc 01       	movw	r30, r24
    7d50:	20 83       	st	Z, r18
        return ((void *)0);
    7d52:	80 e0       	ldi	r24, 0x00	; 0
    7d54:	90 e0       	ldi	r25, 0x00	; 0
    7d56:	d5 c0       	rjmp	.+426    	; 0x7f02 <OSQPend+0x212>
    }
    OS_ENTER_CRITICAL();
    7d58:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7d5c:	8b 83       	std	Y+3, r24	; 0x03
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    7d60:	9f 81       	ldd	r25, Y+7	; 0x07
    7d62:	fc 01       	movw	r30, r24
    7d64:	81 81       	ldd	r24, Z+1	; 0x01
    7d66:	92 81       	ldd	r25, Z+2	; 0x02
    7d68:	8c 83       	std	Y+4, r24	; 0x04
    7d6a:	9d 83       	std	Y+5, r25	; 0x05
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    7d6e:	9d 81       	ldd	r25, Y+5	; 0x05
    7d70:	fc 01       	movw	r30, r24
    7d72:	84 85       	ldd	r24, Z+12	; 0x0c
    7d74:	95 85       	ldd	r25, Z+13	; 0x0d
    7d76:	00 97       	sbiw	r24, 0x00	; 0
    7d78:	09 f4       	brne	.+2      	; 0x7d7c <OSQPend+0x8c>
    7d7a:	40 c0       	rjmp	.+128    	; 0x7dfc <OSQPend+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    7d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    7d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    7d80:	fc 01       	movw	r30, r24
    7d82:	80 85       	ldd	r24, Z+8	; 0x08
    7d84:	91 85       	ldd	r25, Z+9	; 0x09
    7d86:	fc 01       	movw	r30, r24
    7d88:	20 81       	ld	r18, Z
    7d8a:	31 81       	ldd	r19, Z+1	; 0x01
    7d8c:	29 83       	std	Y+1, r18	; 0x01
    7d8e:	3a 83       	std	Y+2, r19	; 0x02
    7d90:	9c 01       	movw	r18, r24
    7d92:	2e 5f       	subi	r18, 0xFE	; 254
    7d94:	3f 4f       	sbci	r19, 0xFF	; 255
    7d96:	8c 81       	ldd	r24, Y+4	; 0x04
    7d98:	9d 81       	ldd	r25, Y+5	; 0x05
    7d9a:	fc 01       	movw	r30, r24
    7d9c:	20 87       	std	Z+8, r18	; 0x08
    7d9e:	31 87       	std	Z+9, r19	; 0x09
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    7da0:	8c 81       	ldd	r24, Y+4	; 0x04
    7da2:	9d 81       	ldd	r25, Y+5	; 0x05
    7da4:	fc 01       	movw	r30, r24
    7da6:	84 85       	ldd	r24, Z+12	; 0x0c
    7da8:	95 85       	ldd	r25, Z+13	; 0x0d
    7daa:	9c 01       	movw	r18, r24
    7dac:	21 50       	subi	r18, 0x01	; 1
    7dae:	30 40       	sbci	r19, 0x00	; 0
    7db0:	8c 81       	ldd	r24, Y+4	; 0x04
    7db2:	9d 81       	ldd	r25, Y+5	; 0x05
    7db4:	fc 01       	movw	r30, r24
    7db6:	24 87       	std	Z+12, r18	; 0x0c
    7db8:	35 87       	std	Z+13, r19	; 0x0d
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7dba:	8c 81       	ldd	r24, Y+4	; 0x04
    7dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    7dbe:	fc 01       	movw	r30, r24
    7dc0:	20 85       	ldd	r18, Z+8	; 0x08
    7dc2:	31 85       	ldd	r19, Z+9	; 0x09
    7dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    7dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    7dc8:	fc 01       	movw	r30, r24
    7dca:	84 81       	ldd	r24, Z+4	; 0x04
    7dcc:	95 81       	ldd	r25, Z+5	; 0x05
    7dce:	28 17       	cp	r18, r24
    7dd0:	39 07       	cpc	r19, r25
    7dd2:	51 f4       	brne	.+20     	; 0x7de8 <OSQPend+0xf8>
            pq->OSQOut = pq->OSQStart;
    7dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    7dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    7dd8:	fc 01       	movw	r30, r24
    7dda:	22 81       	ldd	r18, Z+2	; 0x02
    7ddc:	33 81       	ldd	r19, Z+3	; 0x03
    7dde:	8c 81       	ldd	r24, Y+4	; 0x04
    7de0:	9d 81       	ldd	r25, Y+5	; 0x05
    7de2:	fc 01       	movw	r30, r24
    7de4:	20 87       	std	Z+8, r18	; 0x08
    7de6:	31 87       	std	Z+9, r19	; 0x09
        }
        OS_EXIT_CRITICAL();
    7de8:	8b 81       	ldd	r24, Y+3	; 0x03
    7dea:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    7dee:	8a 85       	ldd	r24, Y+10	; 0x0a
    7df0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7df2:	fc 01       	movw	r30, r24
    7df4:	10 82       	st	Z, r1
        return (pmsg);                           /* Return message received                            */
    7df6:	89 81       	ldd	r24, Y+1	; 0x01
    7df8:	9a 81       	ldd	r25, Y+2	; 0x02
    7dfa:	83 c0       	rjmp	.+262    	; 0x7f02 <OSQPend+0x212>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    7dfc:	80 91 08 2e 	lds	r24, 0x2E08
    7e00:	90 91 09 2e 	lds	r25, 0x2E09
    7e04:	20 91 08 2e 	lds	r18, 0x2E08
    7e08:	30 91 09 2e 	lds	r19, 0x2E09
    7e0c:	f9 01       	movw	r30, r18
    7e0e:	26 8d       	ldd	r18, Z+30	; 0x1e
    7e10:	24 60       	ori	r18, 0x04	; 4
    7e12:	fc 01       	movw	r30, r24
    7e14:	26 8f       	std	Z+30, r18	; 0x1e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    7e16:	80 91 08 2e 	lds	r24, 0x2E08
    7e1a:	90 91 09 2e 	lds	r25, 0x2E09
    7e1e:	fc 01       	movw	r30, r24
    7e20:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    7e22:	80 91 08 2e 	lds	r24, 0x2E08
    7e26:	90 91 09 2e 	lds	r25, 0x2E09
    7e2a:	28 85       	ldd	r18, Y+8	; 0x08
    7e2c:	39 85       	ldd	r19, Y+9	; 0x09
    7e2e:	fc 01       	movw	r30, r24
    7e30:	24 8f       	std	Z+28, r18	; 0x1c
    7e32:	35 8f       	std	Z+29, r19	; 0x1d
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    7e34:	8e 81       	ldd	r24, Y+6	; 0x06
    7e36:	9f 81       	ldd	r25, Y+7	; 0x07
    7e38:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    7e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    7e3e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    7e42:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    7e46:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7e4a:	8b 83       	std	Y+3, r24	; 0x03
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    7e4c:	80 91 08 2e 	lds	r24, 0x2E08
    7e50:	90 91 09 2e 	lds	r25, 0x2E09
    7e54:	fc 01       	movw	r30, r24
    7e56:	87 8d       	ldd	r24, Z+31	; 0x1f
    7e58:	88 2f       	mov	r24, r24
    7e5a:	90 e0       	ldi	r25, 0x00	; 0
    7e5c:	00 97       	sbiw	r24, 0x00	; 0
    7e5e:	21 f0       	breq	.+8      	; 0x7e68 <OSQPend+0x178>
    7e60:	82 30       	cpi	r24, 0x02	; 2
    7e62:	91 05       	cpc	r25, r1
    7e64:	79 f0       	breq	.+30     	; 0x7e84 <OSQPend+0x194>
    7e66:	16 c0       	rjmp	.+44     	; 0x7e94 <OSQPend+0x1a4>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    7e68:	80 91 08 2e 	lds	r24, 0x2E08
    7e6c:	90 91 09 2e 	lds	r25, 0x2E09
    7e70:	fc 01       	movw	r30, r24
    7e72:	86 89       	ldd	r24, Z+22	; 0x16
    7e74:	97 89       	ldd	r25, Z+23	; 0x17
    7e76:	89 83       	std	Y+1, r24	; 0x01
    7e78:	9a 83       	std	Y+2, r25	; 0x02
            *perr =  OS_ERR_NONE;
    7e7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e7e:	fc 01       	movw	r30, r24
    7e80:	10 82       	st	Z, r1
             break;
    7e82:	19 c0       	rjmp	.+50     	; 0x7eb6 <OSQPend+0x1c6>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    7e84:	19 82       	std	Y+1, r1	; 0x01
    7e86:	1a 82       	std	Y+2, r1	; 0x02
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    7e88:	8a 85       	ldd	r24, Y+10	; 0x0a
    7e8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7e8c:	2e e0       	ldi	r18, 0x0E	; 14
    7e8e:	fc 01       	movw	r30, r24
    7e90:	20 83       	st	Z, r18
             break;
    7e92:	11 c0       	rjmp	.+34     	; 0x7eb6 <OSQPend+0x1c6>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    7e94:	80 91 08 2e 	lds	r24, 0x2E08
    7e98:	90 91 09 2e 	lds	r25, 0x2E09
    7e9c:	2e 81       	ldd	r18, Y+6	; 0x06
    7e9e:	3f 81       	ldd	r19, Y+7	; 0x07
    7ea0:	b9 01       	movw	r22, r18
    7ea2:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
             pmsg = (void *)0;
    7ea6:	19 82       	std	Y+1, r1	; 0x01
    7ea8:	1a 82       	std	Y+2, r1	; 0x02
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    7eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    7eac:	9b 85       	ldd	r25, Y+11	; 0x0b
    7eae:	2a e0       	ldi	r18, 0x0A	; 10
    7eb0:	fc 01       	movw	r30, r24
    7eb2:	20 83       	st	Z, r18
             break;
    7eb4:	00 00       	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    7eb6:	80 91 08 2e 	lds	r24, 0x2E08
    7eba:	90 91 09 2e 	lds	r25, 0x2E09
    7ebe:	fc 01       	movw	r30, r24
    7ec0:	16 8e       	std	Z+30, r1	; 0x1e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    7ec2:	80 91 08 2e 	lds	r24, 0x2E08
    7ec6:	90 91 09 2e 	lds	r25, 0x2E09
    7eca:	fc 01       	movw	r30, r24
    7ecc:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    7ece:	80 91 08 2e 	lds	r24, 0x2E08
    7ed2:	90 91 09 2e 	lds	r25, 0x2E09
    7ed6:	fc 01       	movw	r30, r24
    7ed8:	12 8a       	std	Z+18, r1	; 0x12
    7eda:	13 8a       	std	Z+19, r1	; 0x13
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    7edc:	80 91 08 2e 	lds	r24, 0x2E08
    7ee0:	90 91 09 2e 	lds	r25, 0x2E09
    7ee4:	fc 01       	movw	r30, r24
    7ee6:	14 8a       	std	Z+20, r1	; 0x14
    7ee8:	15 8a       	std	Z+21, r1	; 0x15
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    7eea:	80 91 08 2e 	lds	r24, 0x2E08
    7eee:	90 91 09 2e 	lds	r25, 0x2E09
    7ef2:	fc 01       	movw	r30, r24
    7ef4:	16 8a       	std	Z+22, r1	; 0x16
    7ef6:	17 8a       	std	Z+23, r1	; 0x17
    OS_EXIT_CRITICAL();
    7ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    7efa:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (pmsg);                                    /* Return received message                       */
    7efe:	89 81       	ldd	r24, Y+1	; 0x01
    7f00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    7f02:	2b 96       	adiw	r28, 0x0b	; 11
    7f04:	cd bf       	out	0x3d, r28	; 61
    7f06:	de bf       	out	0x3e, r29	; 62
    7f08:	cf 91       	pop	r28
    7f0a:	df 91       	pop	r29
    7f0c:	08 95       	ret

00007f0e <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7f0e:	df 93       	push	r29
    7f10:	cf 93       	push	r28
    7f12:	cd b7       	in	r28, 0x3d	; 61
    7f14:	de b7       	in	r29, 0x3e	; 62
    7f16:	27 97       	sbiw	r28, 0x07	; 7
    7f18:	cd bf       	out	0x3d, r28	; 61
    7f1a:	de bf       	out	0x3e, r29	; 62
    7f1c:	8b 83       	std	Y+3, r24	; 0x03
    7f1e:	9c 83       	std	Y+4, r25	; 0x04
    7f20:	6d 83       	std	Y+5, r22	; 0x05
    7f22:	4e 83       	std	Y+6, r20	; 0x06
    7f24:	5f 83       	std	Y+7, r21	; 0x07
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7f26:	1a 82       	std	Y+2, r1	; 0x02
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7f28:	8b 81       	ldd	r24, Y+3	; 0x03
    7f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    7f2c:	fc 01       	movw	r30, r24
    7f2e:	80 81       	ld	r24, Z
    7f30:	82 30       	cpi	r24, 0x02	; 2
    7f32:	39 f0       	breq	.+14     	; 0x7f42 <OSQPendAbort+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    7f34:	8e 81       	ldd	r24, Y+6	; 0x06
    7f36:	9f 81       	ldd	r25, Y+7	; 0x07
    7f38:	21 e0       	ldi	r18, 0x01	; 1
    7f3a:	fc 01       	movw	r30, r24
    7f3c:	20 83       	st	Z, r18
        return (0);
    7f3e:	80 e0       	ldi	r24, 0x00	; 0
    7f40:	45 c0       	rjmp	.+138    	; 0x7fcc <OSQPendAbort+0xbe>
    }
    OS_ENTER_CRITICAL();
    7f42:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    7f46:	8a 83       	std	Y+2, r24	; 0x02
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    7f48:	8b 81       	ldd	r24, Y+3	; 0x03
    7f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    7f4c:	fc 01       	movw	r30, r24
    7f4e:	85 81       	ldd	r24, Z+5	; 0x05
    7f50:	88 23       	and	r24, r24
    7f52:	a1 f1       	breq	.+104    	; 0x7fbc <OSQPendAbort+0xae>
        nbr_tasks = 0;
    7f54:	19 82       	std	Y+1, r1	; 0x01
        switch (opt) {
    7f56:	8d 81       	ldd	r24, Y+5	; 0x05
    7f58:	88 2f       	mov	r24, r24
    7f5a:	90 e0       	ldi	r25, 0x00	; 0
    7f5c:	81 30       	cpi	r24, 0x01	; 1
    7f5e:	91 05       	cpc	r25, r1
    7f60:	69 f0       	breq	.+26     	; 0x7f7c <OSQPendAbort+0x6e>
    7f62:	14 c0       	rjmp	.+40     	; 0x7f8c <OSQPendAbort+0x7e>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7f64:	8b 81       	ldd	r24, Y+3	; 0x03
    7f66:	9c 81       	ldd	r25, Y+4	; 0x04
    7f68:	60 e0       	ldi	r22, 0x00	; 0
    7f6a:	70 e0       	ldi	r23, 0x00	; 0
    7f6c:	44 e0       	ldi	r20, 0x04	; 4
    7f6e:	22 e0       	ldi	r18, 0x02	; 2
    7f70:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                     nbr_tasks++;
    7f74:	89 81       	ldd	r24, Y+1	; 0x01
    7f76:	8f 5f       	subi	r24, 0xFF	; 255
    7f78:	89 83       	std	Y+1, r24	; 0x01
    7f7a:	01 c0       	rjmp	.+2      	; 0x7f7e <OSQPendAbort+0x70>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    7f7c:	00 00       	nop
    7f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    7f80:	9c 81       	ldd	r25, Y+4	; 0x04
    7f82:	fc 01       	movw	r30, r24
    7f84:	85 81       	ldd	r24, Z+5	; 0x05
    7f86:	88 23       	and	r24, r24
    7f88:	69 f7       	brne	.-38     	; 0x7f64 <OSQPendAbort+0x56>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    7f8a:	0c c0       	rjmp	.+24     	; 0x7fa4 <OSQPendAbort+0x96>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    7f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    7f90:	60 e0       	ldi	r22, 0x00	; 0
    7f92:	70 e0       	ldi	r23, 0x00	; 0
    7f94:	44 e0       	ldi	r20, 0x04	; 4
    7f96:	22 e0       	ldi	r18, 0x02	; 2
    7f98:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                 nbr_tasks++;
    7f9c:	89 81       	ldd	r24, Y+1	; 0x01
    7f9e:	8f 5f       	subi	r24, 0xFF	; 255
    7fa0:	89 83       	std	Y+1, r24	; 0x01
                 break;
    7fa2:	00 00       	nop
        }
        OS_EXIT_CRITICAL();
    7fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    7fa6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                        /* Find HPT ready to run                    */
    7faa:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7fae:	8e 81       	ldd	r24, Y+6	; 0x06
    7fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    7fb2:	2e e0       	ldi	r18, 0x0E	; 14
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	20 83       	st	Z, r18
        return (nbr_tasks);
    7fb8:	89 81       	ldd	r24, Y+1	; 0x01
    7fba:	08 c0       	rjmp	.+16     	; 0x7fcc <OSQPendAbort+0xbe>
    }
    OS_EXIT_CRITICAL();
    7fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    7fbe:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    7fc2:	8e 81       	ldd	r24, Y+6	; 0x06
    7fc4:	9f 81       	ldd	r25, Y+7	; 0x07
    7fc6:	fc 01       	movw	r30, r24
    7fc8:	10 82       	st	Z, r1
    return (0);                                            /* No tasks waiting on queue                */
    7fca:	80 e0       	ldi	r24, 0x00	; 0
}
    7fcc:	27 96       	adiw	r28, 0x07	; 7
    7fce:	cd bf       	out	0x3d, r28	; 61
    7fd0:	de bf       	out	0x3e, r29	; 62
    7fd2:	cf 91       	pop	r28
    7fd4:	df 91       	pop	r29
    7fd6:	08 95       	ret

00007fd8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    7fd8:	df 93       	push	r29
    7fda:	cf 93       	push	r28
    7fdc:	cd b7       	in	r28, 0x3d	; 61
    7fde:	de b7       	in	r29, 0x3e	; 62
    7fe0:	27 97       	sbiw	r28, 0x07	; 7
    7fe2:	cd bf       	out	0x3d, r28	; 61
    7fe4:	de bf       	out	0x3e, r29	; 62
    7fe6:	8c 83       	std	Y+4, r24	; 0x04
    7fe8:	9d 83       	std	Y+5, r25	; 0x05
    7fea:	6e 83       	std	Y+6, r22	; 0x06
    7fec:	7f 83       	std	Y+7, r23	; 0x07
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7fee:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    7ff0:	8c 81       	ldd	r24, Y+4	; 0x04
    7ff2:	9d 81       	ldd	r25, Y+5	; 0x05
    7ff4:	fc 01       	movw	r30, r24
    7ff6:	80 81       	ld	r24, Z
    7ff8:	82 30       	cpi	r24, 0x02	; 2
    7ffa:	11 f0       	breq	.+4      	; 0x8000 <OSQPost+0x28>
        return (OS_ERR_EVENT_TYPE);
    7ffc:	81 e0       	ldi	r24, 0x01	; 1
    7ffe:	6c c0       	rjmp	.+216    	; 0x80d8 <OSQPost+0x100>
    }
    OS_ENTER_CRITICAL();
    8000:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8004:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    8006:	8c 81       	ldd	r24, Y+4	; 0x04
    8008:	9d 81       	ldd	r25, Y+5	; 0x05
    800a:	fc 01       	movw	r30, r24
    800c:	85 81       	ldd	r24, Z+5	; 0x05
    800e:	88 23       	and	r24, r24
    8010:	81 f0       	breq	.+32     	; 0x8032 <OSQPost+0x5a>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8012:	8c 81       	ldd	r24, Y+4	; 0x04
    8014:	9d 81       	ldd	r25, Y+5	; 0x05
    8016:	2e 81       	ldd	r18, Y+6	; 0x06
    8018:	3f 81       	ldd	r19, Y+7	; 0x07
    801a:	b9 01       	movw	r22, r18
    801c:	44 e0       	ldi	r20, 0x04	; 4
    801e:	20 e0       	ldi	r18, 0x00	; 0
    8020:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    8024:	89 81       	ldd	r24, Y+1	; 0x01
    8026:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                    /* Find highest priority task ready to run      */
    802a:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        return (OS_ERR_NONE);
    802e:	80 e0       	ldi	r24, 0x00	; 0
    8030:	53 c0       	rjmp	.+166    	; 0x80d8 <OSQPost+0x100>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    8032:	8c 81       	ldd	r24, Y+4	; 0x04
    8034:	9d 81       	ldd	r25, Y+5	; 0x05
    8036:	fc 01       	movw	r30, r24
    8038:	81 81       	ldd	r24, Z+1	; 0x01
    803a:	92 81       	ldd	r25, Z+2	; 0x02
    803c:	8a 83       	std	Y+2, r24	; 0x02
    803e:	9b 83       	std	Y+3, r25	; 0x03
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    8040:	8a 81       	ldd	r24, Y+2	; 0x02
    8042:	9b 81       	ldd	r25, Y+3	; 0x03
    8044:	fc 01       	movw	r30, r24
    8046:	24 85       	ldd	r18, Z+12	; 0x0c
    8048:	35 85       	ldd	r19, Z+13	; 0x0d
    804a:	8a 81       	ldd	r24, Y+2	; 0x02
    804c:	9b 81       	ldd	r25, Y+3	; 0x03
    804e:	fc 01       	movw	r30, r24
    8050:	82 85       	ldd	r24, Z+10	; 0x0a
    8052:	93 85       	ldd	r25, Z+11	; 0x0b
    8054:	28 17       	cp	r18, r24
    8056:	39 07       	cpc	r19, r25
    8058:	28 f0       	brcs	.+10     	; 0x8064 <OSQPost+0x8c>
        OS_EXIT_CRITICAL();
    805a:	89 81       	ldd	r24, Y+1	; 0x01
    805c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_Q_FULL);
    8060:	8e e1       	ldi	r24, 0x1E	; 30
    8062:	3a c0       	rjmp	.+116    	; 0x80d8 <OSQPost+0x100>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    8064:	8a 81       	ldd	r24, Y+2	; 0x02
    8066:	9b 81       	ldd	r25, Y+3	; 0x03
    8068:	fc 01       	movw	r30, r24
    806a:	86 81       	ldd	r24, Z+6	; 0x06
    806c:	97 81       	ldd	r25, Z+7	; 0x07
    806e:	2e 81       	ldd	r18, Y+6	; 0x06
    8070:	3f 81       	ldd	r19, Y+7	; 0x07
    8072:	fc 01       	movw	r30, r24
    8074:	20 83       	st	Z, r18
    8076:	31 83       	std	Z+1, r19	; 0x01
    8078:	9c 01       	movw	r18, r24
    807a:	2e 5f       	subi	r18, 0xFE	; 254
    807c:	3f 4f       	sbci	r19, 0xFF	; 255
    807e:	8a 81       	ldd	r24, Y+2	; 0x02
    8080:	9b 81       	ldd	r25, Y+3	; 0x03
    8082:	fc 01       	movw	r30, r24
    8084:	26 83       	std	Z+6, r18	; 0x06
    8086:	37 83       	std	Z+7, r19	; 0x07
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    8088:	8a 81       	ldd	r24, Y+2	; 0x02
    808a:	9b 81       	ldd	r25, Y+3	; 0x03
    808c:	fc 01       	movw	r30, r24
    808e:	84 85       	ldd	r24, Z+12	; 0x0c
    8090:	95 85       	ldd	r25, Z+13	; 0x0d
    8092:	9c 01       	movw	r18, r24
    8094:	2f 5f       	subi	r18, 0xFF	; 255
    8096:	3f 4f       	sbci	r19, 0xFF	; 255
    8098:	8a 81       	ldd	r24, Y+2	; 0x02
    809a:	9b 81       	ldd	r25, Y+3	; 0x03
    809c:	fc 01       	movw	r30, r24
    809e:	24 87       	std	Z+12, r18	; 0x0c
    80a0:	35 87       	std	Z+13, r19	; 0x0d
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    80a2:	8a 81       	ldd	r24, Y+2	; 0x02
    80a4:	9b 81       	ldd	r25, Y+3	; 0x03
    80a6:	fc 01       	movw	r30, r24
    80a8:	26 81       	ldd	r18, Z+6	; 0x06
    80aa:	37 81       	ldd	r19, Z+7	; 0x07
    80ac:	8a 81       	ldd	r24, Y+2	; 0x02
    80ae:	9b 81       	ldd	r25, Y+3	; 0x03
    80b0:	fc 01       	movw	r30, r24
    80b2:	84 81       	ldd	r24, Z+4	; 0x04
    80b4:	95 81       	ldd	r25, Z+5	; 0x05
    80b6:	28 17       	cp	r18, r24
    80b8:	39 07       	cpc	r19, r25
    80ba:	51 f4       	brne	.+20     	; 0x80d0 <OSQPost+0xf8>
        pq->OSQIn = pq->OSQStart;
    80bc:	8a 81       	ldd	r24, Y+2	; 0x02
    80be:	9b 81       	ldd	r25, Y+3	; 0x03
    80c0:	fc 01       	movw	r30, r24
    80c2:	22 81       	ldd	r18, Z+2	; 0x02
    80c4:	33 81       	ldd	r19, Z+3	; 0x03
    80c6:	8a 81       	ldd	r24, Y+2	; 0x02
    80c8:	9b 81       	ldd	r25, Y+3	; 0x03
    80ca:	fc 01       	movw	r30, r24
    80cc:	26 83       	std	Z+6, r18	; 0x06
    80ce:	37 83       	std	Z+7, r19	; 0x07
    }
    OS_EXIT_CRITICAL();
    80d0:	89 81       	ldd	r24, Y+1	; 0x01
    80d2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    80d6:	80 e0       	ldi	r24, 0x00	; 0
}
    80d8:	27 96       	adiw	r28, 0x07	; 7
    80da:	cd bf       	out	0x3d, r28	; 61
    80dc:	de bf       	out	0x3e, r29	; 62
    80de:	cf 91       	pop	r28
    80e0:	df 91       	pop	r29
    80e2:	08 95       	ret

000080e4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    80e4:	df 93       	push	r29
    80e6:	cf 93       	push	r28
    80e8:	cd b7       	in	r28, 0x3d	; 61
    80ea:	de b7       	in	r29, 0x3e	; 62
    80ec:	27 97       	sbiw	r28, 0x07	; 7
    80ee:	cd bf       	out	0x3d, r28	; 61
    80f0:	de bf       	out	0x3e, r29	; 62
    80f2:	8c 83       	std	Y+4, r24	; 0x04
    80f4:	9d 83       	std	Y+5, r25	; 0x05
    80f6:	6e 83       	std	Y+6, r22	; 0x06
    80f8:	7f 83       	std	Y+7, r23	; 0x07
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    80fa:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    80fc:	8c 81       	ldd	r24, Y+4	; 0x04
    80fe:	9d 81       	ldd	r25, Y+5	; 0x05
    8100:	fc 01       	movw	r30, r24
    8102:	80 81       	ld	r24, Z
    8104:	82 30       	cpi	r24, 0x02	; 2
    8106:	11 f0       	breq	.+4      	; 0x810c <OSQPostFront+0x28>
        return (OS_ERR_EVENT_TYPE);
    8108:	81 e0       	ldi	r24, 0x01	; 1
    810a:	71 c0       	rjmp	.+226    	; 0x81ee <OSQPostFront+0x10a>
    }
    OS_ENTER_CRITICAL();
    810c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8110:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    8112:	8c 81       	ldd	r24, Y+4	; 0x04
    8114:	9d 81       	ldd	r25, Y+5	; 0x05
    8116:	fc 01       	movw	r30, r24
    8118:	85 81       	ldd	r24, Z+5	; 0x05
    811a:	88 23       	and	r24, r24
    811c:	81 f0       	breq	.+32     	; 0x813e <OSQPostFront+0x5a>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    811e:	8c 81       	ldd	r24, Y+4	; 0x04
    8120:	9d 81       	ldd	r25, Y+5	; 0x05
    8122:	2e 81       	ldd	r18, Y+6	; 0x06
    8124:	3f 81       	ldd	r19, Y+7	; 0x07
    8126:	b9 01       	movw	r22, r18
    8128:	44 e0       	ldi	r20, 0x04	; 4
    812a:	20 e0       	ldi	r18, 0x00	; 0
    812c:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    8130:	89 81       	ldd	r24, Y+1	; 0x01
    8132:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find highest priority task ready to run       */
    8136:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        return (OS_ERR_NONE);
    813a:	80 e0       	ldi	r24, 0x00	; 0
    813c:	58 c0       	rjmp	.+176    	; 0x81ee <OSQPostFront+0x10a>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    813e:	8c 81       	ldd	r24, Y+4	; 0x04
    8140:	9d 81       	ldd	r25, Y+5	; 0x05
    8142:	fc 01       	movw	r30, r24
    8144:	81 81       	ldd	r24, Z+1	; 0x01
    8146:	92 81       	ldd	r25, Z+2	; 0x02
    8148:	8a 83       	std	Y+2, r24	; 0x02
    814a:	9b 83       	std	Y+3, r25	; 0x03
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    814c:	8a 81       	ldd	r24, Y+2	; 0x02
    814e:	9b 81       	ldd	r25, Y+3	; 0x03
    8150:	fc 01       	movw	r30, r24
    8152:	24 85       	ldd	r18, Z+12	; 0x0c
    8154:	35 85       	ldd	r19, Z+13	; 0x0d
    8156:	8a 81       	ldd	r24, Y+2	; 0x02
    8158:	9b 81       	ldd	r25, Y+3	; 0x03
    815a:	fc 01       	movw	r30, r24
    815c:	82 85       	ldd	r24, Z+10	; 0x0a
    815e:	93 85       	ldd	r25, Z+11	; 0x0b
    8160:	28 17       	cp	r18, r24
    8162:	39 07       	cpc	r19, r25
    8164:	28 f0       	brcs	.+10     	; 0x8170 <OSQPostFront+0x8c>
        OS_EXIT_CRITICAL();
    8166:	89 81       	ldd	r24, Y+1	; 0x01
    8168:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_Q_FULL);
    816c:	8e e1       	ldi	r24, 0x1E	; 30
    816e:	3f c0       	rjmp	.+126    	; 0x81ee <OSQPostFront+0x10a>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    8170:	8a 81       	ldd	r24, Y+2	; 0x02
    8172:	9b 81       	ldd	r25, Y+3	; 0x03
    8174:	fc 01       	movw	r30, r24
    8176:	20 85       	ldd	r18, Z+8	; 0x08
    8178:	31 85       	ldd	r19, Z+9	; 0x09
    817a:	8a 81       	ldd	r24, Y+2	; 0x02
    817c:	9b 81       	ldd	r25, Y+3	; 0x03
    817e:	fc 01       	movw	r30, r24
    8180:	82 81       	ldd	r24, Z+2	; 0x02
    8182:	93 81       	ldd	r25, Z+3	; 0x03
    8184:	28 17       	cp	r18, r24
    8186:	39 07       	cpc	r19, r25
    8188:	51 f4       	brne	.+20     	; 0x819e <OSQPostFront+0xba>
        pq->OSQOut = pq->OSQEnd;
    818a:	8a 81       	ldd	r24, Y+2	; 0x02
    818c:	9b 81       	ldd	r25, Y+3	; 0x03
    818e:	fc 01       	movw	r30, r24
    8190:	24 81       	ldd	r18, Z+4	; 0x04
    8192:	35 81       	ldd	r19, Z+5	; 0x05
    8194:	8a 81       	ldd	r24, Y+2	; 0x02
    8196:	9b 81       	ldd	r25, Y+3	; 0x03
    8198:	fc 01       	movw	r30, r24
    819a:	20 87       	std	Z+8, r18	; 0x08
    819c:	31 87       	std	Z+9, r19	; 0x09
    }
    pq->OSQOut--;
    819e:	8a 81       	ldd	r24, Y+2	; 0x02
    81a0:	9b 81       	ldd	r25, Y+3	; 0x03
    81a2:	fc 01       	movw	r30, r24
    81a4:	80 85       	ldd	r24, Z+8	; 0x08
    81a6:	91 85       	ldd	r25, Z+9	; 0x09
    81a8:	9c 01       	movw	r18, r24
    81aa:	22 50       	subi	r18, 0x02	; 2
    81ac:	30 40       	sbci	r19, 0x00	; 0
    81ae:	8a 81       	ldd	r24, Y+2	; 0x02
    81b0:	9b 81       	ldd	r25, Y+3	; 0x03
    81b2:	fc 01       	movw	r30, r24
    81b4:	20 87       	std	Z+8, r18	; 0x08
    81b6:	31 87       	std	Z+9, r19	; 0x09
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    81b8:	8a 81       	ldd	r24, Y+2	; 0x02
    81ba:	9b 81       	ldd	r25, Y+3	; 0x03
    81bc:	fc 01       	movw	r30, r24
    81be:	80 85       	ldd	r24, Z+8	; 0x08
    81c0:	91 85       	ldd	r25, Z+9	; 0x09
    81c2:	2e 81       	ldd	r18, Y+6	; 0x06
    81c4:	3f 81       	ldd	r19, Y+7	; 0x07
    81c6:	fc 01       	movw	r30, r24
    81c8:	20 83       	st	Z, r18
    81ca:	31 83       	std	Z+1, r19	; 0x01
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    81cc:	8a 81       	ldd	r24, Y+2	; 0x02
    81ce:	9b 81       	ldd	r25, Y+3	; 0x03
    81d0:	fc 01       	movw	r30, r24
    81d2:	84 85       	ldd	r24, Z+12	; 0x0c
    81d4:	95 85       	ldd	r25, Z+13	; 0x0d
    81d6:	9c 01       	movw	r18, r24
    81d8:	2f 5f       	subi	r18, 0xFF	; 255
    81da:	3f 4f       	sbci	r19, 0xFF	; 255
    81dc:	8a 81       	ldd	r24, Y+2	; 0x02
    81de:	9b 81       	ldd	r25, Y+3	; 0x03
    81e0:	fc 01       	movw	r30, r24
    81e2:	24 87       	std	Z+12, r18	; 0x0c
    81e4:	35 87       	std	Z+13, r19	; 0x0d
    OS_EXIT_CRITICAL();
    81e6:	89 81       	ldd	r24, Y+1	; 0x01
    81e8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    81ec:	80 e0       	ldi	r24, 0x00	; 0
}
    81ee:	27 96       	adiw	r28, 0x07	; 7
    81f0:	cd bf       	out	0x3d, r28	; 61
    81f2:	de bf       	out	0x3e, r29	; 62
    81f4:	cf 91       	pop	r28
    81f6:	df 91       	pop	r29
    81f8:	08 95       	ret

000081fa <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    81fa:	df 93       	push	r29
    81fc:	cf 93       	push	r28
    81fe:	cd b7       	in	r28, 0x3d	; 61
    8200:	de b7       	in	r29, 0x3e	; 62
    8202:	28 97       	sbiw	r28, 0x08	; 8
    8204:	cd bf       	out	0x3d, r28	; 61
    8206:	de bf       	out	0x3e, r29	; 62
    8208:	8c 83       	std	Y+4, r24	; 0x04
    820a:	9d 83       	std	Y+5, r25	; 0x05
    820c:	6e 83       	std	Y+6, r22	; 0x06
    820e:	7f 83       	std	Y+7, r23	; 0x07
    8210:	48 87       	std	Y+8, r20	; 0x08
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8212:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    8214:	8c 81       	ldd	r24, Y+4	; 0x04
    8216:	9d 81       	ldd	r25, Y+5	; 0x05
    8218:	fc 01       	movw	r30, r24
    821a:	80 81       	ld	r24, Z
    821c:	82 30       	cpi	r24, 0x02	; 2
    821e:	11 f0       	breq	.+4      	; 0x8224 <OSQPostOpt+0x2a>
        return (OS_ERR_EVENT_TYPE);
    8220:	81 e0       	ldi	r24, 0x01	; 1
    8222:	c1 c0       	rjmp	.+386    	; 0x83a6 <OSQPostOpt+0x1ac>
    }
    OS_ENTER_CRITICAL();
    8224:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8228:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    822a:	8c 81       	ldd	r24, Y+4	; 0x04
    822c:	9d 81       	ldd	r25, Y+5	; 0x05
    822e:	fc 01       	movw	r30, r24
    8230:	85 81       	ldd	r24, Z+5	; 0x05
    8232:	88 23       	and	r24, r24
    8234:	79 f1       	breq	.+94     	; 0x8294 <OSQPostOpt+0x9a>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    8236:	88 85       	ldd	r24, Y+8	; 0x08
    8238:	88 2f       	mov	r24, r24
    823a:	90 e0       	ldi	r25, 0x00	; 0
    823c:	81 70       	andi	r24, 0x01	; 1
    823e:	90 70       	andi	r25, 0x00	; 0
    8240:	88 23       	and	r24, r24
    8242:	89 f0       	breq	.+34     	; 0x8266 <OSQPostOpt+0x6c>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8244:	09 c0       	rjmp	.+18     	; 0x8258 <OSQPostOpt+0x5e>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8246:	8c 81       	ldd	r24, Y+4	; 0x04
    8248:	9d 81       	ldd	r25, Y+5	; 0x05
    824a:	2e 81       	ldd	r18, Y+6	; 0x06
    824c:	3f 81       	ldd	r19, Y+7	; 0x07
    824e:	b9 01       	movw	r22, r18
    8250:	44 e0       	ldi	r20, 0x04	; 4
    8252:	20 e0       	ldi	r18, 0x00	; 0
    8254:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    8258:	8c 81       	ldd	r24, Y+4	; 0x04
    825a:	9d 81       	ldd	r25, Y+5	; 0x05
    825c:	fc 01       	movw	r30, r24
    825e:	85 81       	ldd	r24, Z+5	; 0x05
    8260:	88 23       	and	r24, r24
    8262:	89 f7       	brne	.-30     	; 0x8246 <OSQPostOpt+0x4c>
    8264:	09 c0       	rjmp	.+18     	; 0x8278 <OSQPostOpt+0x7e>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    8266:	8c 81       	ldd	r24, Y+4	; 0x04
    8268:	9d 81       	ldd	r25, Y+5	; 0x05
    826a:	2e 81       	ldd	r18, Y+6	; 0x06
    826c:	3f 81       	ldd	r19, Y+7	; 0x07
    826e:	b9 01       	movw	r22, r18
    8270:	44 e0       	ldi	r20, 0x04	; 4
    8272:	20 e0       	ldi	r18, 0x00	; 0
    8274:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
    8278:	89 81       	ldd	r24, Y+1	; 0x01
    827a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    827e:	88 85       	ldd	r24, Y+8	; 0x08
    8280:	88 2f       	mov	r24, r24
    8282:	90 e0       	ldi	r25, 0x00	; 0
    8284:	84 70       	andi	r24, 0x04	; 4
    8286:	90 70       	andi	r25, 0x00	; 0
    8288:	00 97       	sbiw	r24, 0x00	; 0
    828a:	11 f4       	brne	.+4      	; 0x8290 <OSQPostOpt+0x96>
            OS_Sched();                               /* Find highest priority task ready to run       */
    828c:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        }
        return (OS_ERR_NONE);
    8290:	80 e0       	ldi	r24, 0x00	; 0
    8292:	89 c0       	rjmp	.+274    	; 0x83a6 <OSQPostOpt+0x1ac>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    8294:	8c 81       	ldd	r24, Y+4	; 0x04
    8296:	9d 81       	ldd	r25, Y+5	; 0x05
    8298:	fc 01       	movw	r30, r24
    829a:	81 81       	ldd	r24, Z+1	; 0x01
    829c:	92 81       	ldd	r25, Z+2	; 0x02
    829e:	8a 83       	std	Y+2, r24	; 0x02
    82a0:	9b 83       	std	Y+3, r25	; 0x03
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    82a2:	8a 81       	ldd	r24, Y+2	; 0x02
    82a4:	9b 81       	ldd	r25, Y+3	; 0x03
    82a6:	fc 01       	movw	r30, r24
    82a8:	24 85       	ldd	r18, Z+12	; 0x0c
    82aa:	35 85       	ldd	r19, Z+13	; 0x0d
    82ac:	8a 81       	ldd	r24, Y+2	; 0x02
    82ae:	9b 81       	ldd	r25, Y+3	; 0x03
    82b0:	fc 01       	movw	r30, r24
    82b2:	82 85       	ldd	r24, Z+10	; 0x0a
    82b4:	93 85       	ldd	r25, Z+11	; 0x0b
    82b6:	28 17       	cp	r18, r24
    82b8:	39 07       	cpc	r19, r25
    82ba:	28 f0       	brcs	.+10     	; 0x82c6 <OSQPostOpt+0xcc>
        OS_EXIT_CRITICAL();
    82bc:	89 81       	ldd	r24, Y+1	; 0x01
    82be:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_Q_FULL);
    82c2:	8e e1       	ldi	r24, 0x1E	; 30
    82c4:	70 c0       	rjmp	.+224    	; 0x83a6 <OSQPostOpt+0x1ac>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    82c6:	88 85       	ldd	r24, Y+8	; 0x08
    82c8:	88 2f       	mov	r24, r24
    82ca:	90 e0       	ldi	r25, 0x00	; 0
    82cc:	82 70       	andi	r24, 0x02	; 2
    82ce:	90 70       	andi	r25, 0x00	; 0
    82d0:	00 97       	sbiw	r24, 0x00	; 0
    82d2:	79 f1       	breq	.+94     	; 0x8332 <OSQPostOpt+0x138>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    82d4:	8a 81       	ldd	r24, Y+2	; 0x02
    82d6:	9b 81       	ldd	r25, Y+3	; 0x03
    82d8:	fc 01       	movw	r30, r24
    82da:	20 85       	ldd	r18, Z+8	; 0x08
    82dc:	31 85       	ldd	r19, Z+9	; 0x09
    82de:	8a 81       	ldd	r24, Y+2	; 0x02
    82e0:	9b 81       	ldd	r25, Y+3	; 0x03
    82e2:	fc 01       	movw	r30, r24
    82e4:	82 81       	ldd	r24, Z+2	; 0x02
    82e6:	93 81       	ldd	r25, Z+3	; 0x03
    82e8:	28 17       	cp	r18, r24
    82ea:	39 07       	cpc	r19, r25
    82ec:	51 f4       	brne	.+20     	; 0x8302 <OSQPostOpt+0x108>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    82ee:	8a 81       	ldd	r24, Y+2	; 0x02
    82f0:	9b 81       	ldd	r25, Y+3	; 0x03
    82f2:	fc 01       	movw	r30, r24
    82f4:	24 81       	ldd	r18, Z+4	; 0x04
    82f6:	35 81       	ldd	r19, Z+5	; 0x05
    82f8:	8a 81       	ldd	r24, Y+2	; 0x02
    82fa:	9b 81       	ldd	r25, Y+3	; 0x03
    82fc:	fc 01       	movw	r30, r24
    82fe:	20 87       	std	Z+8, r18	; 0x08
    8300:	31 87       	std	Z+9, r19	; 0x09
        }
        pq->OSQOut--;
    8302:	8a 81       	ldd	r24, Y+2	; 0x02
    8304:	9b 81       	ldd	r25, Y+3	; 0x03
    8306:	fc 01       	movw	r30, r24
    8308:	80 85       	ldd	r24, Z+8	; 0x08
    830a:	91 85       	ldd	r25, Z+9	; 0x09
    830c:	9c 01       	movw	r18, r24
    830e:	22 50       	subi	r18, 0x02	; 2
    8310:	30 40       	sbci	r19, 0x00	; 0
    8312:	8a 81       	ldd	r24, Y+2	; 0x02
    8314:	9b 81       	ldd	r25, Y+3	; 0x03
    8316:	fc 01       	movw	r30, r24
    8318:	20 87       	std	Z+8, r18	; 0x08
    831a:	31 87       	std	Z+9, r19	; 0x09
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    831c:	8a 81       	ldd	r24, Y+2	; 0x02
    831e:	9b 81       	ldd	r25, Y+3	; 0x03
    8320:	fc 01       	movw	r30, r24
    8322:	80 85       	ldd	r24, Z+8	; 0x08
    8324:	91 85       	ldd	r25, Z+9	; 0x09
    8326:	2e 81       	ldd	r18, Y+6	; 0x06
    8328:	3f 81       	ldd	r19, Y+7	; 0x07
    832a:	fc 01       	movw	r30, r24
    832c:	20 83       	st	Z, r18
    832e:	31 83       	std	Z+1, r19	; 0x01
    8330:	29 c0       	rjmp	.+82     	; 0x8384 <OSQPostOpt+0x18a>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    8332:	8a 81       	ldd	r24, Y+2	; 0x02
    8334:	9b 81       	ldd	r25, Y+3	; 0x03
    8336:	fc 01       	movw	r30, r24
    8338:	86 81       	ldd	r24, Z+6	; 0x06
    833a:	97 81       	ldd	r25, Z+7	; 0x07
    833c:	2e 81       	ldd	r18, Y+6	; 0x06
    833e:	3f 81       	ldd	r19, Y+7	; 0x07
    8340:	fc 01       	movw	r30, r24
    8342:	20 83       	st	Z, r18
    8344:	31 83       	std	Z+1, r19	; 0x01
    8346:	9c 01       	movw	r18, r24
    8348:	2e 5f       	subi	r18, 0xFE	; 254
    834a:	3f 4f       	sbci	r19, 0xFF	; 255
    834c:	8a 81       	ldd	r24, Y+2	; 0x02
    834e:	9b 81       	ldd	r25, Y+3	; 0x03
    8350:	fc 01       	movw	r30, r24
    8352:	26 83       	std	Z+6, r18	; 0x06
    8354:	37 83       	std	Z+7, r19	; 0x07
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    8356:	8a 81       	ldd	r24, Y+2	; 0x02
    8358:	9b 81       	ldd	r25, Y+3	; 0x03
    835a:	fc 01       	movw	r30, r24
    835c:	26 81       	ldd	r18, Z+6	; 0x06
    835e:	37 81       	ldd	r19, Z+7	; 0x07
    8360:	8a 81       	ldd	r24, Y+2	; 0x02
    8362:	9b 81       	ldd	r25, Y+3	; 0x03
    8364:	fc 01       	movw	r30, r24
    8366:	84 81       	ldd	r24, Z+4	; 0x04
    8368:	95 81       	ldd	r25, Z+5	; 0x05
    836a:	28 17       	cp	r18, r24
    836c:	39 07       	cpc	r19, r25
    836e:	51 f4       	brne	.+20     	; 0x8384 <OSQPostOpt+0x18a>
            pq->OSQIn = pq->OSQStart;
    8370:	8a 81       	ldd	r24, Y+2	; 0x02
    8372:	9b 81       	ldd	r25, Y+3	; 0x03
    8374:	fc 01       	movw	r30, r24
    8376:	22 81       	ldd	r18, Z+2	; 0x02
    8378:	33 81       	ldd	r19, Z+3	; 0x03
    837a:	8a 81       	ldd	r24, Y+2	; 0x02
    837c:	9b 81       	ldd	r25, Y+3	; 0x03
    837e:	fc 01       	movw	r30, r24
    8380:	26 83       	std	Z+6, r18	; 0x06
    8382:	37 83       	std	Z+7, r19	; 0x07
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    8384:	8a 81       	ldd	r24, Y+2	; 0x02
    8386:	9b 81       	ldd	r25, Y+3	; 0x03
    8388:	fc 01       	movw	r30, r24
    838a:	84 85       	ldd	r24, Z+12	; 0x0c
    838c:	95 85       	ldd	r25, Z+13	; 0x0d
    838e:	9c 01       	movw	r18, r24
    8390:	2f 5f       	subi	r18, 0xFF	; 255
    8392:	3f 4f       	sbci	r19, 0xFF	; 255
    8394:	8a 81       	ldd	r24, Y+2	; 0x02
    8396:	9b 81       	ldd	r25, Y+3	; 0x03
    8398:	fc 01       	movw	r30, r24
    839a:	24 87       	std	Z+12, r18	; 0x0c
    839c:	35 87       	std	Z+13, r19	; 0x0d
    OS_EXIT_CRITICAL();
    839e:	89 81       	ldd	r24, Y+1	; 0x01
    83a0:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    83a4:	80 e0       	ldi	r24, 0x00	; 0
}
    83a6:	28 96       	adiw	r28, 0x08	; 8
    83a8:	cd bf       	out	0x3d, r28	; 61
    83aa:	de bf       	out	0x3e, r29	; 62
    83ac:	cf 91       	pop	r28
    83ae:	df 91       	pop	r29
    83b0:	08 95       	ret

000083b2 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    83b2:	df 93       	push	r29
    83b4:	cf 93       	push	r28
    83b6:	cd b7       	in	r28, 0x3d	; 61
    83b8:	de b7       	in	r29, 0x3e	; 62
    83ba:	2c 97       	sbiw	r28, 0x0c	; 12
    83bc:	cd bf       	out	0x3d, r28	; 61
    83be:	de bf       	out	0x3e, r29	; 62
    83c0:	89 87       	std	Y+9, r24	; 0x09
    83c2:	9a 87       	std	Y+10, r25	; 0x0a
    83c4:	6b 87       	std	Y+11, r22	; 0x0b
    83c6:	7c 87       	std	Y+12, r23	; 0x0c
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    83c8:	1e 82       	std	Y+6, r1	; 0x06
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    83ca:	89 85       	ldd	r24, Y+9	; 0x09
    83cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    83ce:	fc 01       	movw	r30, r24
    83d0:	80 81       	ld	r24, Z
    83d2:	82 30       	cpi	r24, 0x02	; 2
    83d4:	11 f0       	breq	.+4      	; 0x83da <OSQQuery+0x28>
        return (OS_ERR_EVENT_TYPE);
    83d6:	81 e0       	ldi	r24, 0x01	; 1
    83d8:	68 c0       	rjmp	.+208    	; 0x84aa <OSQQuery+0xf8>
    }
    OS_ENTER_CRITICAL();
    83da:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    83de:	8e 83       	std	Y+6, r24	; 0x06
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    83e0:	89 85       	ldd	r24, Y+9	; 0x09
    83e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    83e4:	fc 01       	movw	r30, r24
    83e6:	25 81       	ldd	r18, Z+5	; 0x05
    83e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    83ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    83ec:	fc 01       	movw	r30, r24
    83ee:	26 87       	std	Z+14, r18	; 0x0e
    psrc                 = &pevent->OSEventTbl[0];
    83f0:	89 85       	ldd	r24, Y+9	; 0x09
    83f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    83f4:	06 96       	adiw	r24, 0x06	; 6
    83f6:	8a 83       	std	Y+2, r24	; 0x02
    83f8:	9b 83       	std	Y+3, r25	; 0x03
    pdest                = &p_q_data->OSEventTbl[0];
    83fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    83fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    83fe:	06 96       	adiw	r24, 0x06	; 6
    8400:	8c 83       	std	Y+4, r24	; 0x04
    8402:	9d 83       	std	Y+5, r25	; 0x05
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8404:	19 82       	std	Y+1, r1	; 0x01
    8406:	15 c0       	rjmp	.+42     	; 0x8432 <OSQQuery+0x80>
        *pdest++ = *psrc++;
    8408:	8a 81       	ldd	r24, Y+2	; 0x02
    840a:	9b 81       	ldd	r25, Y+3	; 0x03
    840c:	fc 01       	movw	r30, r24
    840e:	20 81       	ld	r18, Z
    8410:	8c 81       	ldd	r24, Y+4	; 0x04
    8412:	9d 81       	ldd	r25, Y+5	; 0x05
    8414:	fc 01       	movw	r30, r24
    8416:	20 83       	st	Z, r18
    8418:	8c 81       	ldd	r24, Y+4	; 0x04
    841a:	9d 81       	ldd	r25, Y+5	; 0x05
    841c:	01 96       	adiw	r24, 0x01	; 1
    841e:	8c 83       	std	Y+4, r24	; 0x04
    8420:	9d 83       	std	Y+5, r25	; 0x05
    8422:	8a 81       	ldd	r24, Y+2	; 0x02
    8424:	9b 81       	ldd	r25, Y+3	; 0x03
    8426:	01 96       	adiw	r24, 0x01	; 1
    8428:	8a 83       	std	Y+2, r24	; 0x02
    842a:	9b 83       	std	Y+3, r25	; 0x03
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    842c:	89 81       	ldd	r24, Y+1	; 0x01
    842e:	8f 5f       	subi	r24, 0xFF	; 255
    8430:	89 83       	std	Y+1, r24	; 0x01
    8432:	89 81       	ldd	r24, Y+1	; 0x01
    8434:	88 30       	cpi	r24, 0x08	; 8
    8436:	40 f3       	brcs	.-48     	; 0x8408 <OSQQuery+0x56>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8438:	89 85       	ldd	r24, Y+9	; 0x09
    843a:	9a 85       	ldd	r25, Y+10	; 0x0a
    843c:	fc 01       	movw	r30, r24
    843e:	81 81       	ldd	r24, Z+1	; 0x01
    8440:	92 81       	ldd	r25, Z+2	; 0x02
    8442:	8f 83       	std	Y+7, r24	; 0x07
    8444:	98 87       	std	Y+8, r25	; 0x08
    if (pq->OSQEntries > 0) {
    8446:	8f 81       	ldd	r24, Y+7	; 0x07
    8448:	98 85       	ldd	r25, Y+8	; 0x08
    844a:	fc 01       	movw	r30, r24
    844c:	84 85       	ldd	r24, Z+12	; 0x0c
    844e:	95 85       	ldd	r25, Z+13	; 0x0d
    8450:	00 97       	sbiw	r24, 0x00	; 0
    8452:	71 f0       	breq	.+28     	; 0x8470 <OSQQuery+0xbe>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8454:	8f 81       	ldd	r24, Y+7	; 0x07
    8456:	98 85       	ldd	r25, Y+8	; 0x08
    8458:	fc 01       	movw	r30, r24
    845a:	80 85       	ldd	r24, Z+8	; 0x08
    845c:	91 85       	ldd	r25, Z+9	; 0x09
    845e:	fc 01       	movw	r30, r24
    8460:	20 81       	ld	r18, Z
    8462:	31 81       	ldd	r19, Z+1	; 0x01
    8464:	8b 85       	ldd	r24, Y+11	; 0x0b
    8466:	9c 85       	ldd	r25, Y+12	; 0x0c
    8468:	fc 01       	movw	r30, r24
    846a:	20 83       	st	Z, r18
    846c:	31 83       	std	Z+1, r19	; 0x01
    846e:	05 c0       	rjmp	.+10     	; 0x847a <OSQQuery+0xc8>
    } else {
        p_q_data->OSMsg = (void *)0;
    8470:	8b 85       	ldd	r24, Y+11	; 0x0b
    8472:	9c 85       	ldd	r25, Y+12	; 0x0c
    8474:	fc 01       	movw	r30, r24
    8476:	10 82       	st	Z, r1
    8478:	11 82       	std	Z+1, r1	; 0x01
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    847a:	8f 81       	ldd	r24, Y+7	; 0x07
    847c:	98 85       	ldd	r25, Y+8	; 0x08
    847e:	fc 01       	movw	r30, r24
    8480:	24 85       	ldd	r18, Z+12	; 0x0c
    8482:	35 85       	ldd	r19, Z+13	; 0x0d
    8484:	8b 85       	ldd	r24, Y+11	; 0x0b
    8486:	9c 85       	ldd	r25, Y+12	; 0x0c
    8488:	fc 01       	movw	r30, r24
    848a:	22 83       	std	Z+2, r18	; 0x02
    848c:	33 83       	std	Z+3, r19	; 0x03
    p_q_data->OSQSize = pq->OSQSize;
    848e:	8f 81       	ldd	r24, Y+7	; 0x07
    8490:	98 85       	ldd	r25, Y+8	; 0x08
    8492:	fc 01       	movw	r30, r24
    8494:	22 85       	ldd	r18, Z+10	; 0x0a
    8496:	33 85       	ldd	r19, Z+11	; 0x0b
    8498:	8b 85       	ldd	r24, Y+11	; 0x0b
    849a:	9c 85       	ldd	r25, Y+12	; 0x0c
    849c:	fc 01       	movw	r30, r24
    849e:	24 83       	std	Z+4, r18	; 0x04
    84a0:	35 83       	std	Z+5, r19	; 0x05
    OS_EXIT_CRITICAL();
    84a2:	8e 81       	ldd	r24, Y+6	; 0x06
    84a4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    84a8:	80 e0       	ldi	r24, 0x00	; 0
}
    84aa:	2c 96       	adiw	r28, 0x0c	; 12
    84ac:	cd bf       	out	0x3d, r28	; 61
    84ae:	de bf       	out	0x3e, r29	; 62
    84b0:	cf 91       	pop	r28
    84b2:	df 91       	pop	r29
    84b4:	08 95       	ret

000084b6 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    84b6:	df 93       	push	r29
    84b8:	cf 93       	push	r28
    84ba:	00 d0       	rcall	.+0      	; 0x84bc <OS_QInit+0x6>
    84bc:	00 d0       	rcall	.+0      	; 0x84be <OS_QInit+0x8>
    84be:	cd b7       	in	r28, 0x3d	; 61
    84c0:	de b7       	in	r29, 0x3e	; 62
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    84c2:	88 e5       	ldi	r24, 0x58	; 88
    84c4:	9c e2       	ldi	r25, 0x2C	; 44
    84c6:	68 e3       	ldi	r22, 0x38	; 56
    84c8:	70 e0       	ldi	r23, 0x00	; 0
    84ca:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    pq1 = &OSQTbl[0];
    84ce:	88 e5       	ldi	r24, 0x58	; 88
    84d0:	9c e2       	ldi	r25, 0x2C	; 44
    84d2:	8b 83       	std	Y+3, r24	; 0x03
    84d4:	9c 83       	std	Y+4, r25	; 0x04
    pq2 = &OSQTbl[1];
    84d6:	86 e6       	ldi	r24, 0x66	; 102
    84d8:	9c e2       	ldi	r25, 0x2C	; 44
    84da:	8d 83       	std	Y+5, r24	; 0x05
    84dc:	9e 83       	std	Y+6, r25	; 0x06
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    84de:	19 82       	std	Y+1, r1	; 0x01
    84e0:	1a 82       	std	Y+2, r1	; 0x02
    84e2:	16 c0       	rjmp	.+44     	; 0x8510 <OS_QInit+0x5a>
        pq1->OSQPtr = pq2;
    84e4:	8b 81       	ldd	r24, Y+3	; 0x03
    84e6:	9c 81       	ldd	r25, Y+4	; 0x04
    84e8:	2d 81       	ldd	r18, Y+5	; 0x05
    84ea:	3e 81       	ldd	r19, Y+6	; 0x06
    84ec:	fc 01       	movw	r30, r24
    84ee:	20 83       	st	Z, r18
    84f0:	31 83       	std	Z+1, r19	; 0x01
        pq1++;
    84f2:	8b 81       	ldd	r24, Y+3	; 0x03
    84f4:	9c 81       	ldd	r25, Y+4	; 0x04
    84f6:	0e 96       	adiw	r24, 0x0e	; 14
    84f8:	8b 83       	std	Y+3, r24	; 0x03
    84fa:	9c 83       	std	Y+4, r25	; 0x04
        pq2++;
    84fc:	8d 81       	ldd	r24, Y+5	; 0x05
    84fe:	9e 81       	ldd	r25, Y+6	; 0x06
    8500:	0e 96       	adiw	r24, 0x0e	; 14
    8502:	8d 83       	std	Y+5, r24	; 0x05
    8504:	9e 83       	std	Y+6, r25	; 0x06


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    8506:	89 81       	ldd	r24, Y+1	; 0x01
    8508:	9a 81       	ldd	r25, Y+2	; 0x02
    850a:	01 96       	adiw	r24, 0x01	; 1
    850c:	89 83       	std	Y+1, r24	; 0x01
    850e:	9a 83       	std	Y+2, r25	; 0x02
    8510:	89 81       	ldd	r24, Y+1	; 0x01
    8512:	9a 81       	ldd	r25, Y+2	; 0x02
    8514:	83 30       	cpi	r24, 0x03	; 3
    8516:	91 05       	cpc	r25, r1
    8518:	28 f3       	brcs	.-54     	; 0x84e4 <OS_QInit+0x2e>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    851a:	8b 81       	ldd	r24, Y+3	; 0x03
    851c:	9c 81       	ldd	r25, Y+4	; 0x04
    851e:	fc 01       	movw	r30, r24
    8520:	10 82       	st	Z, r1
    8522:	11 82       	std	Z+1, r1	; 0x01
    OSQFreeList = &OSQTbl[0];
    8524:	88 e5       	ldi	r24, 0x58	; 88
    8526:	9c e2       	ldi	r25, 0x2C	; 44
    8528:	80 93 92 2c 	sts	0x2C92, r24
    852c:	90 93 93 2c 	sts	0x2C93, r25
#endif
}
    8530:	26 96       	adiw	r28, 0x06	; 6
    8532:	cd bf       	out	0x3d, r28	; 61
    8534:	de bf       	out	0x3e, r29	; 62
    8536:	cf 91       	pop	r28
    8538:	df 91       	pop	r29
    853a:	08 95       	ret

0000853c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    853c:	df 93       	push	r29
    853e:	cf 93       	push	r28
    8540:	cd b7       	in	r28, 0x3d	; 61
    8542:	de b7       	in	r29, 0x3e	; 62
    8544:	25 97       	sbiw	r28, 0x05	; 5
    8546:	cd bf       	out	0x3d, r28	; 61
    8548:	de bf       	out	0x3e, r29	; 62
    854a:	8c 83       	std	Y+4, r24	; 0x04
    854c:	9d 83       	std	Y+5, r25	; 0x05
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    854e:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8550:	8c 81       	ldd	r24, Y+4	; 0x04
    8552:	9d 81       	ldd	r25, Y+5	; 0x05
    8554:	fc 01       	movw	r30, r24
    8556:	80 81       	ld	r24, Z
    8558:	83 30       	cpi	r24, 0x03	; 3
    855a:	19 f0       	breq	.+6      	; 0x8562 <OSSemAccept+0x26>
        return (0);
    855c:	80 e0       	ldi	r24, 0x00	; 0
    855e:	90 e0       	ldi	r25, 0x00	; 0
    8560:	20 c0       	rjmp	.+64     	; 0x85a2 <OSSemAccept+0x66>
    }
    OS_ENTER_CRITICAL();
    8562:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8566:	89 83       	std	Y+1, r24	; 0x01
    cnt = pevent->OSEventCnt;
    8568:	8c 81       	ldd	r24, Y+4	; 0x04
    856a:	9d 81       	ldd	r25, Y+5	; 0x05
    856c:	fc 01       	movw	r30, r24
    856e:	83 81       	ldd	r24, Z+3	; 0x03
    8570:	94 81       	ldd	r25, Z+4	; 0x04
    8572:	8a 83       	std	Y+2, r24	; 0x02
    8574:	9b 83       	std	Y+3, r25	; 0x03
    if (cnt > 0) {                                    /* See if resource is available                  */
    8576:	8a 81       	ldd	r24, Y+2	; 0x02
    8578:	9b 81       	ldd	r25, Y+3	; 0x03
    857a:	00 97       	sbiw	r24, 0x00	; 0
    857c:	69 f0       	breq	.+26     	; 0x8598 <OSSemAccept+0x5c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    857e:	8c 81       	ldd	r24, Y+4	; 0x04
    8580:	9d 81       	ldd	r25, Y+5	; 0x05
    8582:	fc 01       	movw	r30, r24
    8584:	83 81       	ldd	r24, Z+3	; 0x03
    8586:	94 81       	ldd	r25, Z+4	; 0x04
    8588:	9c 01       	movw	r18, r24
    858a:	21 50       	subi	r18, 0x01	; 1
    858c:	30 40       	sbci	r19, 0x00	; 0
    858e:	8c 81       	ldd	r24, Y+4	; 0x04
    8590:	9d 81       	ldd	r25, Y+5	; 0x05
    8592:	fc 01       	movw	r30, r24
    8594:	23 83       	std	Z+3, r18	; 0x03
    8596:	34 83       	std	Z+4, r19	; 0x04
    }
    OS_EXIT_CRITICAL();
    8598:	89 81       	ldd	r24, Y+1	; 0x01
    859a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (cnt);                                     /* Return semaphore count                        */
    859e:	8a 81       	ldd	r24, Y+2	; 0x02
    85a0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    85a2:	25 96       	adiw	r28, 0x05	; 5
    85a4:	cd bf       	out	0x3d, r28	; 61
    85a6:	de bf       	out	0x3e, r29	; 62
    85a8:	cf 91       	pop	r28
    85aa:	df 91       	pop	r29
    85ac:	08 95       	ret

000085ae <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    85ae:	df 93       	push	r29
    85b0:	cf 93       	push	r28
    85b2:	cd b7       	in	r28, 0x3d	; 61
    85b4:	de b7       	in	r29, 0x3e	; 62
    85b6:	25 97       	sbiw	r28, 0x05	; 5
    85b8:	cd bf       	out	0x3d, r28	; 61
    85ba:	de bf       	out	0x3e, r29	; 62
    85bc:	8c 83       	std	Y+4, r24	; 0x04
    85be:	9d 83       	std	Y+5, r25	; 0x05
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    85c0:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    85c2:	80 91 07 2e 	lds	r24, 0x2E07
    85c6:	88 23       	and	r24, r24
    85c8:	19 f0       	breq	.+6      	; 0x85d0 <OSSemCreate+0x22>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    85ca:	80 e0       	ldi	r24, 0x00	; 0
    85cc:	90 e0       	ldi	r25, 0x00	; 0
    85ce:	41 c0       	rjmp	.+130    	; 0x8652 <OSSemCreate+0xa4>
    }
    OS_ENTER_CRITICAL();
    85d0:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    85d4:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    85d6:	80 91 05 2e 	lds	r24, 0x2E05
    85da:	90 91 06 2e 	lds	r25, 0x2E06
    85de:	8a 83       	std	Y+2, r24	; 0x02
    85e0:	9b 83       	std	Y+3, r25	; 0x03
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    85e2:	80 91 05 2e 	lds	r24, 0x2E05
    85e6:	90 91 06 2e 	lds	r25, 0x2E06
    85ea:	00 97       	sbiw	r24, 0x00	; 0
    85ec:	59 f0       	breq	.+22     	; 0x8604 <OSSemCreate+0x56>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    85ee:	80 91 05 2e 	lds	r24, 0x2E05
    85f2:	90 91 06 2e 	lds	r25, 0x2E06
    85f6:	fc 01       	movw	r30, r24
    85f8:	81 81       	ldd	r24, Z+1	; 0x01
    85fa:	92 81       	ldd	r25, Z+2	; 0x02
    85fc:	80 93 05 2e 	sts	0x2E05, r24
    8600:	90 93 06 2e 	sts	0x2E06, r25
    }
    OS_EXIT_CRITICAL();
    8604:	89 81       	ldd	r24, Y+1	; 0x01
    8606:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    860a:	8a 81       	ldd	r24, Y+2	; 0x02
    860c:	9b 81       	ldd	r25, Y+3	; 0x03
    860e:	00 97       	sbiw	r24, 0x00	; 0
    8610:	f1 f0       	breq	.+60     	; 0x864e <OSSemCreate+0xa0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    8612:	8a 81       	ldd	r24, Y+2	; 0x02
    8614:	9b 81       	ldd	r25, Y+3	; 0x03
    8616:	23 e0       	ldi	r18, 0x03	; 3
    8618:	fc 01       	movw	r30, r24
    861a:	20 83       	st	Z, r18
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    861c:	8a 81       	ldd	r24, Y+2	; 0x02
    861e:	9b 81       	ldd	r25, Y+3	; 0x03
    8620:	2c 81       	ldd	r18, Y+4	; 0x04
    8622:	3d 81       	ldd	r19, Y+5	; 0x05
    8624:	fc 01       	movw	r30, r24
    8626:	23 83       	std	Z+3, r18	; 0x03
    8628:	34 83       	std	Z+4, r19	; 0x04
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    862a:	8a 81       	ldd	r24, Y+2	; 0x02
    862c:	9b 81       	ldd	r25, Y+3	; 0x03
    862e:	fc 01       	movw	r30, r24
    8630:	11 82       	std	Z+1, r1	; 0x01
    8632:	12 82       	std	Z+2, r1	; 0x02
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    8634:	8a 81       	ldd	r24, Y+2	; 0x02
    8636:	9b 81       	ldd	r25, Y+3	; 0x03
    8638:	2f e3       	ldi	r18, 0x3F	; 63
    863a:	fc 01       	movw	r30, r24
    863c:	26 87       	std	Z+14, r18	; 0x0e
        pevent->OSEventName[1] = OS_ASCII_NUL;
    863e:	8a 81       	ldd	r24, Y+2	; 0x02
    8640:	9b 81       	ldd	r25, Y+3	; 0x03
    8642:	fc 01       	movw	r30, r24
    8644:	17 86       	std	Z+15, r1	; 0x0f
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    8646:	8a 81       	ldd	r24, Y+2	; 0x02
    8648:	9b 81       	ldd	r25, Y+3	; 0x03
    864a:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_EventWaitListInit>
    }
    return (pevent);
    864e:	8a 81       	ldd	r24, Y+2	; 0x02
    8650:	9b 81       	ldd	r25, Y+3	; 0x03
}
    8652:	25 96       	adiw	r28, 0x05	; 5
    8654:	cd bf       	out	0x3d, r28	; 61
    8656:	de bf       	out	0x3e, r29	; 62
    8658:	cf 91       	pop	r28
    865a:	df 91       	pop	r29
    865c:	08 95       	ret

0000865e <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    865e:	df 93       	push	r29
    8660:	cf 93       	push	r28
    8662:	cd b7       	in	r28, 0x3d	; 61
    8664:	de b7       	in	r29, 0x3e	; 62
    8666:	29 97       	sbiw	r28, 0x09	; 9
    8668:	cd bf       	out	0x3d, r28	; 61
    866a:	de bf       	out	0x3e, r29	; 62
    866c:	8d 83       	std	Y+5, r24	; 0x05
    866e:	9e 83       	std	Y+6, r25	; 0x06
    8670:	6f 83       	std	Y+7, r22	; 0x07
    8672:	48 87       	std	Y+8, r20	; 0x08
    8674:	59 87       	std	Y+9, r21	; 0x09
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8676:	1c 82       	std	Y+4, r1	; 0x04
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8678:	8d 81       	ldd	r24, Y+5	; 0x05
    867a:	9e 81       	ldd	r25, Y+6	; 0x06
    867c:	fc 01       	movw	r30, r24
    867e:	80 81       	ld	r24, Z
    8680:	83 30       	cpi	r24, 0x03	; 3
    8682:	41 f0       	breq	.+16     	; 0x8694 <OSSemDel+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    8684:	88 85       	ldd	r24, Y+8	; 0x08
    8686:	99 85       	ldd	r25, Y+9	; 0x09
    8688:	21 e0       	ldi	r18, 0x01	; 1
    868a:	fc 01       	movw	r30, r24
    868c:	20 83       	st	Z, r18
        return (pevent);
    868e:	8d 81       	ldd	r24, Y+5	; 0x05
    8690:	9e 81       	ldd	r25, Y+6	; 0x06
    8692:	ad c0       	rjmp	.+346    	; 0x87ee <OSSemDel+0x190>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8694:	80 91 07 2e 	lds	r24, 0x2E07
    8698:	88 23       	and	r24, r24
    869a:	41 f0       	breq	.+16     	; 0x86ac <OSSemDel+0x4e>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    869c:	88 85       	ldd	r24, Y+8	; 0x08
    869e:	99 85       	ldd	r25, Y+9	; 0x09
    86a0:	2f e0       	ldi	r18, 0x0F	; 15
    86a2:	fc 01       	movw	r30, r24
    86a4:	20 83       	st	Z, r18
        return (pevent);
    86a6:	8d 81       	ldd	r24, Y+5	; 0x05
    86a8:	9e 81       	ldd	r25, Y+6	; 0x06
    86aa:	a1 c0       	rjmp	.+322    	; 0x87ee <OSSemDel+0x190>
    }
    OS_ENTER_CRITICAL();
    86ac:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    86b0:	8c 83       	std	Y+4, r24	; 0x04
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    86b2:	8d 81       	ldd	r24, Y+5	; 0x05
    86b4:	9e 81       	ldd	r25, Y+6	; 0x06
    86b6:	fc 01       	movw	r30, r24
    86b8:	85 81       	ldd	r24, Z+5	; 0x05
    86ba:	88 23       	and	r24, r24
    86bc:	19 f0       	breq	.+6      	; 0x86c4 <OSSemDel+0x66>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    86be:	81 e0       	ldi	r24, 0x01	; 1
    86c0:	89 83       	std	Y+1, r24	; 0x01
    86c2:	01 c0       	rjmp	.+2      	; 0x86c6 <OSSemDel+0x68>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    86c4:	19 82       	std	Y+1, r1	; 0x01
    }
    switch (opt) {
    86c6:	8f 81       	ldd	r24, Y+7	; 0x07
    86c8:	88 2f       	mov	r24, r24
    86ca:	90 e0       	ldi	r25, 0x00	; 0
    86cc:	00 97       	sbiw	r24, 0x00	; 0
    86ce:	29 f0       	breq	.+10     	; 0x86da <OSSemDel+0x7c>
    86d0:	81 30       	cpi	r24, 0x01	; 1
    86d2:	91 05       	cpc	r25, r1
    86d4:	09 f4       	brne	.+2      	; 0x86d8 <OSSemDel+0x7a>
    86d6:	45 c0       	rjmp	.+138    	; 0x8762 <OSSemDel+0x104>
    86d8:	7b c0       	rjmp	.+246    	; 0x87d0 <OSSemDel+0x172>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    86da:	89 81       	ldd	r24, Y+1	; 0x01
    86dc:	88 23       	and	r24, r24
    86de:	59 f5       	brne	.+86     	; 0x8736 <OSSemDel+0xd8>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    86e0:	8d 81       	ldd	r24, Y+5	; 0x05
    86e2:	9e 81       	ldd	r25, Y+6	; 0x06
    86e4:	2f e3       	ldi	r18, 0x3F	; 63
    86e6:	fc 01       	movw	r30, r24
    86e8:	26 87       	std	Z+14, r18	; 0x0e
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    86ea:	8d 81       	ldd	r24, Y+5	; 0x05
    86ec:	9e 81       	ldd	r25, Y+6	; 0x06
    86ee:	fc 01       	movw	r30, r24
    86f0:	17 86       	std	Z+15, r1	; 0x0f
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    86f2:	8d 81       	ldd	r24, Y+5	; 0x05
    86f4:	9e 81       	ldd	r25, Y+6	; 0x06
    86f6:	fc 01       	movw	r30, r24
    86f8:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    86fa:	20 91 05 2e 	lds	r18, 0x2E05
    86fe:	30 91 06 2e 	lds	r19, 0x2E06
    8702:	8d 81       	ldd	r24, Y+5	; 0x05
    8704:	9e 81       	ldd	r25, Y+6	; 0x06
    8706:	fc 01       	movw	r30, r24
    8708:	21 83       	std	Z+1, r18	; 0x01
    870a:	32 83       	std	Z+2, r19	; 0x02
                 pevent->OSEventCnt     = 0;
    870c:	8d 81       	ldd	r24, Y+5	; 0x05
    870e:	9e 81       	ldd	r25, Y+6	; 0x06
    8710:	fc 01       	movw	r30, r24
    8712:	13 82       	std	Z+3, r1	; 0x03
    8714:	14 82       	std	Z+4, r1	; 0x04
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    8716:	8d 81       	ldd	r24, Y+5	; 0x05
    8718:	9e 81       	ldd	r25, Y+6	; 0x06
    871a:	80 93 05 2e 	sts	0x2E05, r24
    871e:	90 93 06 2e 	sts	0x2E06, r25
                 OS_EXIT_CRITICAL();
    8722:	8c 81       	ldd	r24, Y+4	; 0x04
    8724:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    8728:	88 85       	ldd	r24, Y+8	; 0x08
    872a:	99 85       	ldd	r25, Y+9	; 0x09
    872c:	fc 01       	movw	r30, r24
    872e:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    8730:	1a 82       	std	Y+2, r1	; 0x02
    8732:	1b 82       	std	Y+3, r1	; 0x03
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    8734:	5a c0       	rjmp	.+180    	; 0x87ea <OSSemDel+0x18c>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
    8736:	8c 81       	ldd	r24, Y+4	; 0x04
    8738:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    873c:	88 85       	ldd	r24, Y+8	; 0x08
    873e:	99 85       	ldd	r25, Y+9	; 0x09
    8740:	29 e4       	ldi	r18, 0x49	; 73
    8742:	fc 01       	movw	r30, r24
    8744:	20 83       	st	Z, r18
                 pevent_return          = pevent;
    8746:	8d 81       	ldd	r24, Y+5	; 0x05
    8748:	9e 81       	ldd	r25, Y+6	; 0x06
    874a:	8a 83       	std	Y+2, r24	; 0x02
    874c:	9b 83       	std	Y+3, r25	; 0x03
             }
             break;
    874e:	4d c0       	rjmp	.+154    	; 0x87ea <OSSemDel+0x18c>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    8750:	8d 81       	ldd	r24, Y+5	; 0x05
    8752:	9e 81       	ldd	r25, Y+6	; 0x06
    8754:	60 e0       	ldi	r22, 0x00	; 0
    8756:	70 e0       	ldi	r23, 0x00	; 0
    8758:	41 e0       	ldi	r20, 0x01	; 1
    875a:	20 e0       	ldi	r18, 0x00	; 0
    875c:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
    8760:	01 c0       	rjmp	.+2      	; 0x8764 <OSSemDel+0x106>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    8762:	00 00       	nop
    8764:	8d 81       	ldd	r24, Y+5	; 0x05
    8766:	9e 81       	ldd	r25, Y+6	; 0x06
    8768:	fc 01       	movw	r30, r24
    876a:	85 81       	ldd	r24, Z+5	; 0x05
    876c:	88 23       	and	r24, r24
    876e:	81 f7       	brne	.-32     	; 0x8750 <OSSemDel+0xf2>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8770:	8d 81       	ldd	r24, Y+5	; 0x05
    8772:	9e 81       	ldd	r25, Y+6	; 0x06
    8774:	2f e3       	ldi	r18, 0x3F	; 63
    8776:	fc 01       	movw	r30, r24
    8778:	26 87       	std	Z+14, r18	; 0x0e
             pevent->OSEventName[1] = OS_ASCII_NUL;
    877a:	8d 81       	ldd	r24, Y+5	; 0x05
    877c:	9e 81       	ldd	r25, Y+6	; 0x06
    877e:	fc 01       	movw	r30, r24
    8780:	17 86       	std	Z+15, r1	; 0x0f
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8782:	8d 81       	ldd	r24, Y+5	; 0x05
    8784:	9e 81       	ldd	r25, Y+6	; 0x06
    8786:	fc 01       	movw	r30, r24
    8788:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    878a:	20 91 05 2e 	lds	r18, 0x2E05
    878e:	30 91 06 2e 	lds	r19, 0x2E06
    8792:	8d 81       	ldd	r24, Y+5	; 0x05
    8794:	9e 81       	ldd	r25, Y+6	; 0x06
    8796:	fc 01       	movw	r30, r24
    8798:	21 83       	std	Z+1, r18	; 0x01
    879a:	32 83       	std	Z+2, r19	; 0x02
             pevent->OSEventCnt     = 0;
    879c:	8d 81       	ldd	r24, Y+5	; 0x05
    879e:	9e 81       	ldd	r25, Y+6	; 0x06
    87a0:	fc 01       	movw	r30, r24
    87a2:	13 82       	std	Z+3, r1	; 0x03
    87a4:	14 82       	std	Z+4, r1	; 0x04
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    87a6:	8d 81       	ldd	r24, Y+5	; 0x05
    87a8:	9e 81       	ldd	r25, Y+6	; 0x06
    87aa:	80 93 05 2e 	sts	0x2E05, r24
    87ae:	90 93 06 2e 	sts	0x2E06, r25
             OS_EXIT_CRITICAL();
    87b2:	8c 81       	ldd	r24, Y+4	; 0x04
    87b4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    87b8:	89 81       	ldd	r24, Y+1	; 0x01
    87ba:	81 30       	cpi	r24, 0x01	; 1
    87bc:	11 f4       	brne	.+4      	; 0x87c2 <OSSemDel+0x164>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    87be:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    87c2:	88 85       	ldd	r24, Y+8	; 0x08
    87c4:	99 85       	ldd	r25, Y+9	; 0x09
    87c6:	fc 01       	movw	r30, r24
    87c8:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    87ca:	1a 82       	std	Y+2, r1	; 0x02
    87cc:	1b 82       	std	Y+3, r1	; 0x03
             break;
    87ce:	0d c0       	rjmp	.+26     	; 0x87ea <OSSemDel+0x18c>

        default:
             OS_EXIT_CRITICAL();
    87d0:	8c 81       	ldd	r24, Y+4	; 0x04
    87d2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    87d6:	88 85       	ldd	r24, Y+8	; 0x08
    87d8:	99 85       	ldd	r25, Y+9	; 0x09
    87da:	27 e0       	ldi	r18, 0x07	; 7
    87dc:	fc 01       	movw	r30, r24
    87de:	20 83       	st	Z, r18
             pevent_return          = pevent;
    87e0:	8d 81       	ldd	r24, Y+5	; 0x05
    87e2:	9e 81       	ldd	r25, Y+6	; 0x06
    87e4:	8a 83       	std	Y+2, r24	; 0x02
    87e6:	9b 83       	std	Y+3, r25	; 0x03
             break;
    87e8:	00 00       	nop
    }
    return (pevent_return);
    87ea:	8a 81       	ldd	r24, Y+2	; 0x02
    87ec:	9b 81       	ldd	r25, Y+3	; 0x03
}
    87ee:	29 96       	adiw	r28, 0x09	; 9
    87f0:	cd bf       	out	0x3d, r28	; 61
    87f2:	de bf       	out	0x3e, r29	; 62
    87f4:	cf 91       	pop	r28
    87f6:	df 91       	pop	r29
    87f8:	08 95       	ret

000087fa <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    87fa:	df 93       	push	r29
    87fc:	cf 93       	push	r28
    87fe:	cd b7       	in	r28, 0x3d	; 61
    8800:	de b7       	in	r29, 0x3e	; 62
    8802:	27 97       	sbiw	r28, 0x07	; 7
    8804:	cd bf       	out	0x3d, r28	; 61
    8806:	de bf       	out	0x3e, r29	; 62
    8808:	8a 83       	std	Y+2, r24	; 0x02
    880a:	9b 83       	std	Y+3, r25	; 0x03
    880c:	6c 83       	std	Y+4, r22	; 0x04
    880e:	7d 83       	std	Y+5, r23	; 0x05
    8810:	4e 83       	std	Y+6, r20	; 0x06
    8812:	5f 83       	std	Y+7, r21	; 0x07
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8814:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8816:	8a 81       	ldd	r24, Y+2	; 0x02
    8818:	9b 81       	ldd	r25, Y+3	; 0x03
    881a:	fc 01       	movw	r30, r24
    881c:	80 81       	ld	r24, Z
    881e:	83 30       	cpi	r24, 0x03	; 3
    8820:	31 f0       	breq	.+12     	; 0x882e <OSSemPend+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    8822:	8e 81       	ldd	r24, Y+6	; 0x06
    8824:	9f 81       	ldd	r25, Y+7	; 0x07
    8826:	21 e0       	ldi	r18, 0x01	; 1
    8828:	fc 01       	movw	r30, r24
    882a:	20 83       	st	Z, r18
        return;
    882c:	a0 c0       	rjmp	.+320    	; 0x896e <OSSemPend+0x174>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    882e:	80 91 07 2e 	lds	r24, 0x2E07
    8832:	88 23       	and	r24, r24
    8834:	31 f0       	breq	.+12     	; 0x8842 <OSSemPend+0x48>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    8836:	8e 81       	ldd	r24, Y+6	; 0x06
    8838:	9f 81       	ldd	r25, Y+7	; 0x07
    883a:	22 e0       	ldi	r18, 0x02	; 2
    883c:	fc 01       	movw	r30, r24
    883e:	20 83       	st	Z, r18
        return;
    8840:	96 c0       	rjmp	.+300    	; 0x896e <OSSemPend+0x174>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    8842:	80 91 fa 27 	lds	r24, 0x27FA
    8846:	88 23       	and	r24, r24
    8848:	31 f0       	breq	.+12     	; 0x8856 <OSSemPend+0x5c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    884a:	8e 81       	ldd	r24, Y+6	; 0x06
    884c:	9f 81       	ldd	r25, Y+7	; 0x07
    884e:	2d e0       	ldi	r18, 0x0D	; 13
    8850:	fc 01       	movw	r30, r24
    8852:	20 83       	st	Z, r18
        return;
    8854:	8c c0       	rjmp	.+280    	; 0x896e <OSSemPend+0x174>
    }
    OS_ENTER_CRITICAL();
    8856:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    885a:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    885c:	8a 81       	ldd	r24, Y+2	; 0x02
    885e:	9b 81       	ldd	r25, Y+3	; 0x03
    8860:	fc 01       	movw	r30, r24
    8862:	83 81       	ldd	r24, Z+3	; 0x03
    8864:	94 81       	ldd	r25, Z+4	; 0x04
    8866:	00 97       	sbiw	r24, 0x00	; 0
    8868:	a9 f0       	breq	.+42     	; 0x8894 <OSSemPend+0x9a>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    886a:	8a 81       	ldd	r24, Y+2	; 0x02
    886c:	9b 81       	ldd	r25, Y+3	; 0x03
    886e:	fc 01       	movw	r30, r24
    8870:	83 81       	ldd	r24, Z+3	; 0x03
    8872:	94 81       	ldd	r25, Z+4	; 0x04
    8874:	9c 01       	movw	r18, r24
    8876:	21 50       	subi	r18, 0x01	; 1
    8878:	30 40       	sbci	r19, 0x00	; 0
    887a:	8a 81       	ldd	r24, Y+2	; 0x02
    887c:	9b 81       	ldd	r25, Y+3	; 0x03
    887e:	fc 01       	movw	r30, r24
    8880:	23 83       	std	Z+3, r18	; 0x03
    8882:	34 83       	std	Z+4, r19	; 0x04
        OS_EXIT_CRITICAL();
    8884:	89 81       	ldd	r24, Y+1	; 0x01
    8886:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    888a:	8e 81       	ldd	r24, Y+6	; 0x06
    888c:	9f 81       	ldd	r25, Y+7	; 0x07
    888e:	fc 01       	movw	r30, r24
    8890:	10 82       	st	Z, r1
        return;
    8892:	6d c0       	rjmp	.+218    	; 0x896e <OSSemPend+0x174>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    8894:	80 91 08 2e 	lds	r24, 0x2E08
    8898:	90 91 09 2e 	lds	r25, 0x2E09
    889c:	20 91 08 2e 	lds	r18, 0x2E08
    88a0:	30 91 09 2e 	lds	r19, 0x2E09
    88a4:	f9 01       	movw	r30, r18
    88a6:	26 8d       	ldd	r18, Z+30	; 0x1e
    88a8:	21 60       	ori	r18, 0x01	; 1
    88aa:	fc 01       	movw	r30, r24
    88ac:	26 8f       	std	Z+30, r18	; 0x1e
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    88ae:	80 91 08 2e 	lds	r24, 0x2E08
    88b2:	90 91 09 2e 	lds	r25, 0x2E09
    88b6:	fc 01       	movw	r30, r24
    88b8:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    88ba:	80 91 08 2e 	lds	r24, 0x2E08
    88be:	90 91 09 2e 	lds	r25, 0x2E09
    88c2:	2c 81       	ldd	r18, Y+4	; 0x04
    88c4:	3d 81       	ldd	r19, Y+5	; 0x05
    88c6:	fc 01       	movw	r30, r24
    88c8:	24 8f       	std	Z+28, r18	; 0x1c
    88ca:	35 8f       	std	Z+29, r19	; 0x1d
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    88cc:	8a 81       	ldd	r24, Y+2	; 0x02
    88ce:	9b 81       	ldd	r25, Y+3	; 0x03
    88d0:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    88d4:	89 81       	ldd	r24, Y+1	; 0x01
    88d6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    88da:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    OS_ENTER_CRITICAL();
    88de:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    88e2:	89 83       	std	Y+1, r24	; 0x01
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    88e4:	80 91 08 2e 	lds	r24, 0x2E08
    88e8:	90 91 09 2e 	lds	r25, 0x2E09
    88ec:	fc 01       	movw	r30, r24
    88ee:	87 8d       	ldd	r24, Z+31	; 0x1f
    88f0:	88 2f       	mov	r24, r24
    88f2:	90 e0       	ldi	r25, 0x00	; 0
    88f4:	00 97       	sbiw	r24, 0x00	; 0
    88f6:	21 f0       	breq	.+8      	; 0x8900 <OSSemPend+0x106>
    88f8:	82 30       	cpi	r24, 0x02	; 2
    88fa:	91 05       	cpc	r25, r1
    88fc:	31 f0       	breq	.+12     	; 0x890a <OSSemPend+0x110>
    88fe:	0b c0       	rjmp	.+22     	; 0x8916 <OSSemPend+0x11c>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    8900:	8e 81       	ldd	r24, Y+6	; 0x06
    8902:	9f 81       	ldd	r25, Y+7	; 0x07
    8904:	fc 01       	movw	r30, r24
    8906:	10 82       	st	Z, r1
             break;
    8908:	15 c0       	rjmp	.+42     	; 0x8934 <OSSemPend+0x13a>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    890a:	8e 81       	ldd	r24, Y+6	; 0x06
    890c:	9f 81       	ldd	r25, Y+7	; 0x07
    890e:	2e e0       	ldi	r18, 0x0E	; 14
    8910:	fc 01       	movw	r30, r24
    8912:	20 83       	st	Z, r18
             break;
    8914:	0f c0       	rjmp	.+30     	; 0x8934 <OSSemPend+0x13a>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    8916:	80 91 08 2e 	lds	r24, 0x2E08
    891a:	90 91 09 2e 	lds	r25, 0x2E09
    891e:	2a 81       	ldd	r18, Y+2	; 0x02
    8920:	3b 81       	ldd	r19, Y+3	; 0x03
    8922:	b9 01       	movw	r22, r18
    8924:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    8928:	8e 81       	ldd	r24, Y+6	; 0x06
    892a:	9f 81       	ldd	r25, Y+7	; 0x07
    892c:	2a e0       	ldi	r18, 0x0A	; 10
    892e:	fc 01       	movw	r30, r24
    8930:	20 83       	st	Z, r18
             break;
    8932:	00 00       	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    8934:	80 91 08 2e 	lds	r24, 0x2E08
    8938:	90 91 09 2e 	lds	r25, 0x2E09
    893c:	fc 01       	movw	r30, r24
    893e:	16 8e       	std	Z+30, r1	; 0x1e
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    8940:	80 91 08 2e 	lds	r24, 0x2E08
    8944:	90 91 09 2e 	lds	r25, 0x2E09
    8948:	fc 01       	movw	r30, r24
    894a:	17 8e       	std	Z+31, r1	; 0x1f
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    894c:	80 91 08 2e 	lds	r24, 0x2E08
    8950:	90 91 09 2e 	lds	r25, 0x2E09
    8954:	fc 01       	movw	r30, r24
    8956:	12 8a       	std	Z+18, r1	; 0x12
    8958:	13 8a       	std	Z+19, r1	; 0x13
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    895a:	80 91 08 2e 	lds	r24, 0x2E08
    895e:	90 91 09 2e 	lds	r25, 0x2E09
    8962:	fc 01       	movw	r30, r24
    8964:	14 8a       	std	Z+20, r1	; 0x14
    8966:	15 8a       	std	Z+21, r1	; 0x15
#endif
    OS_EXIT_CRITICAL();
    8968:	89 81       	ldd	r24, Y+1	; 0x01
    896a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    896e:	27 96       	adiw	r28, 0x07	; 7
    8970:	cd bf       	out	0x3d, r28	; 61
    8972:	de bf       	out	0x3e, r29	; 62
    8974:	cf 91       	pop	r28
    8976:	df 91       	pop	r29
    8978:	08 95       	ret

0000897a <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    897a:	df 93       	push	r29
    897c:	cf 93       	push	r28
    897e:	cd b7       	in	r28, 0x3d	; 61
    8980:	de b7       	in	r29, 0x3e	; 62
    8982:	27 97       	sbiw	r28, 0x07	; 7
    8984:	cd bf       	out	0x3d, r28	; 61
    8986:	de bf       	out	0x3e, r29	; 62
    8988:	8b 83       	std	Y+3, r24	; 0x03
    898a:	9c 83       	std	Y+4, r25	; 0x04
    898c:	6d 83       	std	Y+5, r22	; 0x05
    898e:	4e 83       	std	Y+6, r20	; 0x06
    8990:	5f 83       	std	Y+7, r21	; 0x07
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8992:	1a 82       	std	Y+2, r1	; 0x02
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8994:	8b 81       	ldd	r24, Y+3	; 0x03
    8996:	9c 81       	ldd	r25, Y+4	; 0x04
    8998:	fc 01       	movw	r30, r24
    899a:	80 81       	ld	r24, Z
    899c:	83 30       	cpi	r24, 0x03	; 3
    899e:	39 f0       	breq	.+14     	; 0x89ae <OSSemPendAbort+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    89a0:	8e 81       	ldd	r24, Y+6	; 0x06
    89a2:	9f 81       	ldd	r25, Y+7	; 0x07
    89a4:	21 e0       	ldi	r18, 0x01	; 1
    89a6:	fc 01       	movw	r30, r24
    89a8:	20 83       	st	Z, r18
        return (0);
    89aa:	80 e0       	ldi	r24, 0x00	; 0
    89ac:	45 c0       	rjmp	.+138    	; 0x8a38 <OSSemPendAbort+0xbe>
    }
    OS_ENTER_CRITICAL();
    89ae:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    89b2:	8a 83       	std	Y+2, r24	; 0x02
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    89b4:	8b 81       	ldd	r24, Y+3	; 0x03
    89b6:	9c 81       	ldd	r25, Y+4	; 0x04
    89b8:	fc 01       	movw	r30, r24
    89ba:	85 81       	ldd	r24, Z+5	; 0x05
    89bc:	88 23       	and	r24, r24
    89be:	a1 f1       	breq	.+104    	; 0x8a28 <OSSemPendAbort+0xae>
        nbr_tasks = 0;
    89c0:	19 82       	std	Y+1, r1	; 0x01
        switch (opt) {
    89c2:	8d 81       	ldd	r24, Y+5	; 0x05
    89c4:	88 2f       	mov	r24, r24
    89c6:	90 e0       	ldi	r25, 0x00	; 0
    89c8:	81 30       	cpi	r24, 0x01	; 1
    89ca:	91 05       	cpc	r25, r1
    89cc:	69 f0       	breq	.+26     	; 0x89e8 <OSSemPendAbort+0x6e>
    89ce:	14 c0       	rjmp	.+40     	; 0x89f8 <OSSemPendAbort+0x7e>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    89d0:	8b 81       	ldd	r24, Y+3	; 0x03
    89d2:	9c 81       	ldd	r25, Y+4	; 0x04
    89d4:	60 e0       	ldi	r22, 0x00	; 0
    89d6:	70 e0       	ldi	r23, 0x00	; 0
    89d8:	41 e0       	ldi	r20, 0x01	; 1
    89da:	22 e0       	ldi	r18, 0x02	; 2
    89dc:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                     nbr_tasks++;
    89e0:	89 81       	ldd	r24, Y+1	; 0x01
    89e2:	8f 5f       	subi	r24, 0xFF	; 255
    89e4:	89 83       	std	Y+1, r24	; 0x01
    89e6:	01 c0       	rjmp	.+2      	; 0x89ea <OSSemPendAbort+0x70>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    89e8:	00 00       	nop
    89ea:	8b 81       	ldd	r24, Y+3	; 0x03
    89ec:	9c 81       	ldd	r25, Y+4	; 0x04
    89ee:	fc 01       	movw	r30, r24
    89f0:	85 81       	ldd	r24, Z+5	; 0x05
    89f2:	88 23       	and	r24, r24
    89f4:	69 f7       	brne	.-38     	; 0x89d0 <OSSemPendAbort+0x56>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    89f6:	0c c0       	rjmp	.+24     	; 0x8a10 <OSSemPendAbort+0x96>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    89f8:	8b 81       	ldd	r24, Y+3	; 0x03
    89fa:	9c 81       	ldd	r25, Y+4	; 0x04
    89fc:	60 e0       	ldi	r22, 0x00	; 0
    89fe:	70 e0       	ldi	r23, 0x00	; 0
    8a00:	41 e0       	ldi	r20, 0x01	; 1
    8a02:	22 e0       	ldi	r18, 0x02	; 2
    8a04:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
                 nbr_tasks++;
    8a08:	89 81       	ldd	r24, Y+1	; 0x01
    8a0a:	8f 5f       	subi	r24, 0xFF	; 255
    8a0c:	89 83       	std	Y+1, r24	; 0x01
                 break;
    8a0e:	00 00       	nop
        }
        OS_EXIT_CRITICAL();
    8a10:	8a 81       	ldd	r24, Y+2	; 0x02
    8a12:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    8a16:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    8a1c:	9f 81       	ldd	r25, Y+7	; 0x07
    8a1e:	2e e0       	ldi	r18, 0x0E	; 14
    8a20:	fc 01       	movw	r30, r24
    8a22:	20 83       	st	Z, r18
        return (nbr_tasks);
    8a24:	89 81       	ldd	r24, Y+1	; 0x01
    8a26:	08 c0       	rjmp	.+16     	; 0x8a38 <OSSemPendAbort+0xbe>
    }
    OS_EXIT_CRITICAL();
    8a28:	8a 81       	ldd	r24, Y+2	; 0x02
    8a2a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    8a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    8a30:	9f 81       	ldd	r25, Y+7	; 0x07
    8a32:	fc 01       	movw	r30, r24
    8a34:	10 82       	st	Z, r1
    return (0);                                       /* No tasks waiting on semaphore                 */
    8a36:	80 e0       	ldi	r24, 0x00	; 0
}
    8a38:	27 96       	adiw	r28, 0x07	; 7
    8a3a:	cd bf       	out	0x3d, r28	; 61
    8a3c:	de bf       	out	0x3e, r29	; 62
    8a3e:	cf 91       	pop	r28
    8a40:	df 91       	pop	r29
    8a42:	08 95       	ret

00008a44 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    8a44:	df 93       	push	r29
    8a46:	cf 93       	push	r28
    8a48:	00 d0       	rcall	.+0      	; 0x8a4a <OSSemPost+0x6>
    8a4a:	cd b7       	in	r28, 0x3d	; 61
    8a4c:	de b7       	in	r29, 0x3e	; 62
    8a4e:	8a 83       	std	Y+2, r24	; 0x02
    8a50:	9b 83       	std	Y+3, r25	; 0x03
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8a52:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8a54:	8a 81       	ldd	r24, Y+2	; 0x02
    8a56:	9b 81       	ldd	r25, Y+3	; 0x03
    8a58:	fc 01       	movw	r30, r24
    8a5a:	80 81       	ld	r24, Z
    8a5c:	83 30       	cpi	r24, 0x03	; 3
    8a5e:	11 f0       	breq	.+4      	; 0x8a64 <OSSemPost+0x20>
        return (OS_ERR_EVENT_TYPE);
    8a60:	81 e0       	ldi	r24, 0x01	; 1
    8a62:	37 c0       	rjmp	.+110    	; 0x8ad2 <OSSemPost+0x8e>
    }
    OS_ENTER_CRITICAL();
    8a64:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8a68:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    8a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    8a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    8a6e:	fc 01       	movw	r30, r24
    8a70:	85 81       	ldd	r24, Z+5	; 0x05
    8a72:	88 23       	and	r24, r24
    8a74:	79 f0       	breq	.+30     	; 0x8a94 <OSSemPost+0x50>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    8a76:	8a 81       	ldd	r24, Y+2	; 0x02
    8a78:	9b 81       	ldd	r25, Y+3	; 0x03
    8a7a:	60 e0       	ldi	r22, 0x00	; 0
    8a7c:	70 e0       	ldi	r23, 0x00	; 0
    8a7e:	41 e0       	ldi	r20, 0x01	; 1
    8a80:	20 e0       	ldi	r18, 0x00	; 0
    8a82:	0e 94 b5 21 	call	0x436a	; 0x436a <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    8a86:	89 81       	ldd	r24, Y+1	; 0x01
    8a88:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    8a8c:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
        return (OS_ERR_NONE);
    8a90:	80 e0       	ldi	r24, 0x00	; 0
    8a92:	1f c0       	rjmp	.+62     	; 0x8ad2 <OSSemPost+0x8e>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    8a94:	8a 81       	ldd	r24, Y+2	; 0x02
    8a96:	9b 81       	ldd	r25, Y+3	; 0x03
    8a98:	fc 01       	movw	r30, r24
    8a9a:	83 81       	ldd	r24, Z+3	; 0x03
    8a9c:	94 81       	ldd	r25, Z+4	; 0x04
    8a9e:	ff ef       	ldi	r31, 0xFF	; 255
    8aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    8aa2:	9f 07       	cpc	r25, r31
    8aa4:	91 f0       	breq	.+36     	; 0x8aca <OSSemPost+0x86>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    8aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    8aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    8aaa:	fc 01       	movw	r30, r24
    8aac:	83 81       	ldd	r24, Z+3	; 0x03
    8aae:	94 81       	ldd	r25, Z+4	; 0x04
    8ab0:	9c 01       	movw	r18, r24
    8ab2:	2f 5f       	subi	r18, 0xFF	; 255
    8ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    8ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    8aba:	fc 01       	movw	r30, r24
    8abc:	23 83       	std	Z+3, r18	; 0x03
    8abe:	34 83       	std	Z+4, r19	; 0x04
        OS_EXIT_CRITICAL();
    8ac0:	89 81       	ldd	r24, Y+1	; 0x01
    8ac2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    8ac6:	80 e0       	ldi	r24, 0x00	; 0
    8ac8:	04 c0       	rjmp	.+8      	; 0x8ad2 <OSSemPost+0x8e>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    8aca:	89 81       	ldd	r24, Y+1	; 0x01
    8acc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    8ad0:	82 e3       	ldi	r24, 0x32	; 50
}
    8ad2:	23 96       	adiw	r28, 0x03	; 3
    8ad4:	cd bf       	out	0x3d, r28	; 61
    8ad6:	de bf       	out	0x3e, r29	; 62
    8ad8:	cf 91       	pop	r28
    8ada:	df 91       	pop	r29
    8adc:	08 95       	ret

00008ade <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    8ade:	df 93       	push	r29
    8ae0:	cf 93       	push	r28
    8ae2:	cd b7       	in	r28, 0x3d	; 61
    8ae4:	de b7       	in	r29, 0x3e	; 62
    8ae6:	2a 97       	sbiw	r28, 0x0a	; 10
    8ae8:	cd bf       	out	0x3d, r28	; 61
    8aea:	de bf       	out	0x3e, r29	; 62
    8aec:	8f 83       	std	Y+7, r24	; 0x07
    8aee:	98 87       	std	Y+8, r25	; 0x08
    8af0:	69 87       	std	Y+9, r22	; 0x09
    8af2:	7a 87       	std	Y+10, r23	; 0x0a
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8af4:	1e 82       	std	Y+6, r1	; 0x06
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8af6:	8f 81       	ldd	r24, Y+7	; 0x07
    8af8:	98 85       	ldd	r25, Y+8	; 0x08
    8afa:	fc 01       	movw	r30, r24
    8afc:	80 81       	ld	r24, Z
    8afe:	83 30       	cpi	r24, 0x03	; 3
    8b00:	11 f0       	breq	.+4      	; 0x8b06 <OSSemQuery+0x28>
        return (OS_ERR_EVENT_TYPE);
    8b02:	81 e0       	ldi	r24, 0x01	; 1
    8b04:	3d c0       	rjmp	.+122    	; 0x8b80 <OSSemQuery+0xa2>
    }
    OS_ENTER_CRITICAL();
    8b06:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8b0a:	8e 83       	std	Y+6, r24	; 0x06
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    8b0c:	8f 81       	ldd	r24, Y+7	; 0x07
    8b0e:	98 85       	ldd	r25, Y+8	; 0x08
    8b10:	fc 01       	movw	r30, r24
    8b12:	25 81       	ldd	r18, Z+5	; 0x05
    8b14:	89 85       	ldd	r24, Y+9	; 0x09
    8b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b18:	fc 01       	movw	r30, r24
    8b1a:	22 87       	std	Z+10, r18	; 0x0a
    psrc                   = &pevent->OSEventTbl[0];
    8b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    8b1e:	98 85       	ldd	r25, Y+8	; 0x08
    8b20:	06 96       	adiw	r24, 0x06	; 6
    8b22:	89 83       	std	Y+1, r24	; 0x01
    8b24:	9a 83       	std	Y+2, r25	; 0x02
    pdest                  = &p_sem_data->OSEventTbl[0];
    8b26:	89 85       	ldd	r24, Y+9	; 0x09
    8b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b2a:	02 96       	adiw	r24, 0x02	; 2
    8b2c:	8b 83       	std	Y+3, r24	; 0x03
    8b2e:	9c 83       	std	Y+4, r25	; 0x04
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b30:	1d 82       	std	Y+5, r1	; 0x05
    8b32:	15 c0       	rjmp	.+42     	; 0x8b5e <OSSemQuery+0x80>
        *pdest++ = *psrc++;
    8b34:	89 81       	ldd	r24, Y+1	; 0x01
    8b36:	9a 81       	ldd	r25, Y+2	; 0x02
    8b38:	fc 01       	movw	r30, r24
    8b3a:	20 81       	ld	r18, Z
    8b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    8b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    8b40:	fc 01       	movw	r30, r24
    8b42:	20 83       	st	Z, r18
    8b44:	8b 81       	ldd	r24, Y+3	; 0x03
    8b46:	9c 81       	ldd	r25, Y+4	; 0x04
    8b48:	01 96       	adiw	r24, 0x01	; 1
    8b4a:	8b 83       	std	Y+3, r24	; 0x03
    8b4c:	9c 83       	std	Y+4, r25	; 0x04
    8b4e:	89 81       	ldd	r24, Y+1	; 0x01
    8b50:	9a 81       	ldd	r25, Y+2	; 0x02
    8b52:	01 96       	adiw	r24, 0x01	; 1
    8b54:	89 83       	std	Y+1, r24	; 0x01
    8b56:	9a 83       	std	Y+2, r25	; 0x02
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b58:	8d 81       	ldd	r24, Y+5	; 0x05
    8b5a:	8f 5f       	subi	r24, 0xFF	; 255
    8b5c:	8d 83       	std	Y+5, r24	; 0x05
    8b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    8b60:	88 30       	cpi	r24, 0x08	; 8
    8b62:	40 f3       	brcs	.-48     	; 0x8b34 <OSSemQuery+0x56>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    8b64:	8f 81       	ldd	r24, Y+7	; 0x07
    8b66:	98 85       	ldd	r25, Y+8	; 0x08
    8b68:	fc 01       	movw	r30, r24
    8b6a:	23 81       	ldd	r18, Z+3	; 0x03
    8b6c:	34 81       	ldd	r19, Z+4	; 0x04
    8b6e:	89 85       	ldd	r24, Y+9	; 0x09
    8b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    8b72:	fc 01       	movw	r30, r24
    8b74:	20 83       	st	Z, r18
    8b76:	31 83       	std	Z+1, r19	; 0x01
    OS_EXIT_CRITICAL();
    8b78:	8e 81       	ldd	r24, Y+6	; 0x06
    8b7a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    8b7e:	80 e0       	ldi	r24, 0x00	; 0
}
    8b80:	2a 96       	adiw	r28, 0x0a	; 10
    8b82:	cd bf       	out	0x3d, r28	; 61
    8b84:	de bf       	out	0x3e, r29	; 62
    8b86:	cf 91       	pop	r28
    8b88:	df 91       	pop	r29
    8b8a:	08 95       	ret

00008b8c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    8b8c:	df 93       	push	r29
    8b8e:	cf 93       	push	r28
    8b90:	cd b7       	in	r28, 0x3d	; 61
    8b92:	de b7       	in	r29, 0x3e	; 62
    8b94:	27 97       	sbiw	r28, 0x07	; 7
    8b96:	cd bf       	out	0x3d, r28	; 61
    8b98:	de bf       	out	0x3e, r29	; 62
    8b9a:	8a 83       	std	Y+2, r24	; 0x02
    8b9c:	9b 83       	std	Y+3, r25	; 0x03
    8b9e:	6c 83       	std	Y+4, r22	; 0x04
    8ba0:	7d 83       	std	Y+5, r23	; 0x05
    8ba2:	4e 83       	std	Y+6, r20	; 0x06
    8ba4:	5f 83       	std	Y+7, r21	; 0x07
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ba6:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    8baa:	9b 81       	ldd	r25, Y+3	; 0x03
    8bac:	fc 01       	movw	r30, r24
    8bae:	80 81       	ld	r24, Z
    8bb0:	83 30       	cpi	r24, 0x03	; 3
    8bb2:	31 f0       	breq	.+12     	; 0x8bc0 <OSSemSet+0x34>
        *perr = OS_ERR_EVENT_TYPE;
    8bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    8bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    8bb8:	21 e0       	ldi	r18, 0x01	; 1
    8bba:	fc 01       	movw	r30, r24
    8bbc:	20 83       	st	Z, r18
        return;
    8bbe:	2c c0       	rjmp	.+88     	; 0x8c18 <OSSemSet+0x8c>
    }
    OS_ENTER_CRITICAL();
    8bc0:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8bc4:	89 83       	std	Y+1, r24	; 0x01
    *perr = OS_ERR_NONE;
    8bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    8bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    8bca:	fc 01       	movw	r30, r24
    8bcc:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    8bce:	8a 81       	ldd	r24, Y+2	; 0x02
    8bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    8bd2:	fc 01       	movw	r30, r24
    8bd4:	83 81       	ldd	r24, Z+3	; 0x03
    8bd6:	94 81       	ldd	r25, Z+4	; 0x04
    8bd8:	00 97       	sbiw	r24, 0x00	; 0
    8bda:	41 f0       	breq	.+16     	; 0x8bec <OSSemSet+0x60>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    8bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    8bde:	9b 81       	ldd	r25, Y+3	; 0x03
    8be0:	2c 81       	ldd	r18, Y+4	; 0x04
    8be2:	3d 81       	ldd	r19, Y+5	; 0x05
    8be4:	fc 01       	movw	r30, r24
    8be6:	23 83       	std	Z+3, r18	; 0x03
    8be8:	34 83       	std	Z+4, r19	; 0x04
    8bea:	13 c0       	rjmp	.+38     	; 0x8c12 <OSSemSet+0x86>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    8bec:	8a 81       	ldd	r24, Y+2	; 0x02
    8bee:	9b 81       	ldd	r25, Y+3	; 0x03
    8bf0:	fc 01       	movw	r30, r24
    8bf2:	85 81       	ldd	r24, Z+5	; 0x05
    8bf4:	88 23       	and	r24, r24
    8bf6:	41 f4       	brne	.+16     	; 0x8c08 <OSSemSet+0x7c>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    8bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    8bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    8bfc:	2c 81       	ldd	r18, Y+4	; 0x04
    8bfe:	3d 81       	ldd	r19, Y+5	; 0x05
    8c00:	fc 01       	movw	r30, r24
    8c02:	23 83       	std	Z+3, r18	; 0x03
    8c04:	34 83       	std	Z+4, r19	; 0x04
    8c06:	05 c0       	rjmp	.+10     	; 0x8c12 <OSSemSet+0x86>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    8c08:	8e 81       	ldd	r24, Y+6	; 0x06
    8c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    8c0c:	29 e4       	ldi	r18, 0x49	; 73
    8c0e:	fc 01       	movw	r30, r24
    8c10:	20 83       	st	Z, r18
        }
    }
    OS_EXIT_CRITICAL();
    8c12:	89 81       	ldd	r24, Y+1	; 0x01
    8c14:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    8c18:	27 96       	adiw	r28, 0x07	; 7
    8c1a:	cd bf       	out	0x3d, r28	; 61
    8c1c:	de bf       	out	0x3e, r29	; 62
    8c1e:	cf 91       	pop	r28
    8c20:	df 91       	pop	r29
    8c22:	08 95       	ret

00008c24 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    8c24:	df 93       	push	r29
    8c26:	cf 93       	push	r28
    8c28:	cd b7       	in	r28, 0x3d	; 61
    8c2a:	de b7       	in	r29, 0x3e	; 62
    8c2c:	60 97       	sbiw	r28, 0x10	; 16
    8c2e:	cd bf       	out	0x3d, r28	; 61
    8c30:	de bf       	out	0x3e, r29	; 62
    8c32:	8f 87       	std	Y+15, r24	; 0x0f
    8c34:	68 8b       	std	Y+16, r22	; 0x10
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    8c36:	1d 82       	std	Y+5, r1	; 0x05
    }
    if (newprio >= OS_LOWEST_PRIO) {
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    8c38:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    8c3c:	8d 83       	std	Y+5, r24	; 0x05
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    8c3e:	88 89       	ldd	r24, Y+16	; 0x10
    8c40:	88 2f       	mov	r24, r24
    8c42:	90 e0       	ldi	r25, 0x00	; 0
    8c44:	88 0f       	add	r24, r24
    8c46:	99 1f       	adc	r25, r25
    8c48:	8d 58       	subi	r24, 0x8D	; 141
    8c4a:	9a 4c       	sbci	r25, 0xCA	; 202
    8c4c:	fc 01       	movw	r30, r24
    8c4e:	80 81       	ld	r24, Z
    8c50:	91 81       	ldd	r25, Z+1	; 0x01
    8c52:	00 97       	sbiw	r24, 0x00	; 0
    8c54:	29 f0       	breq	.+10     	; 0x8c60 <OSTaskChangePrio+0x3c>
        OS_EXIT_CRITICAL();
    8c56:	8d 81       	ldd	r24, Y+5	; 0x05
    8c58:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO_EXIST);
    8c5c:	88 e2       	ldi	r24, 0x28	; 40
    8c5e:	b3 c1       	rjmp	.+870    	; 0x8fc6 <OSTaskChangePrio+0x3a2>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    8c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c62:	8f 3f       	cpi	r24, 0xFF	; 255
    8c64:	39 f4       	brne	.+14     	; 0x8c74 <OSTaskChangePrio+0x50>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    8c66:	80 91 08 2e 	lds	r24, 0x2E08
    8c6a:	90 91 09 2e 	lds	r25, 0x2E09
    8c6e:	fc 01       	movw	r30, r24
    8c70:	80 a1       	ldd	r24, Z+32	; 0x20
    8c72:	8f 87       	std	Y+15, r24	; 0x0f
    }
    ptcb = OSTCBPrioTbl[oldprio];
    8c74:	8f 85       	ldd	r24, Y+15	; 0x0f
    8c76:	88 2f       	mov	r24, r24
    8c78:	90 e0       	ldi	r25, 0x00	; 0
    8c7a:	88 0f       	add	r24, r24
    8c7c:	99 1f       	adc	r25, r25
    8c7e:	8d 58       	subi	r24, 0x8D	; 141
    8c80:	9a 4c       	sbci	r25, 0xCA	; 202
    8c82:	fc 01       	movw	r30, r24
    8c84:	80 81       	ld	r24, Z
    8c86:	91 81       	ldd	r25, Z+1	; 0x01
    8c88:	8e 83       	std	Y+6, r24	; 0x06
    8c8a:	9f 83       	std	Y+7, r25	; 0x07
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    8c8c:	8e 81       	ldd	r24, Y+6	; 0x06
    8c8e:	9f 81       	ldd	r25, Y+7	; 0x07
    8c90:	00 97       	sbiw	r24, 0x00	; 0
    8c92:	29 f4       	brne	.+10     	; 0x8c9e <OSTaskChangePrio+0x7a>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
    8c94:	8d 81       	ldd	r24, Y+5	; 0x05
    8c96:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    8c9a:	89 e2       	ldi	r24, 0x29	; 41
    8c9c:	94 c1       	rjmp	.+808    	; 0x8fc6 <OSTaskChangePrio+0x3a2>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    8c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    8ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    8ca2:	81 30       	cpi	r24, 0x01	; 1
    8ca4:	91 05       	cpc	r25, r1
    8ca6:	29 f4       	brne	.+10     	; 0x8cb2 <OSTaskChangePrio+0x8e>
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
    8ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    8caa:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    8cae:	83 e4       	ldi	r24, 0x43	; 67
    8cb0:	8a c1       	rjmp	.+788    	; 0x8fc6 <OSTaskChangePrio+0x3a2>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    8cb2:	88 89       	ldd	r24, Y+16	; 0x10
    8cb4:	86 95       	lsr	r24
    8cb6:	86 95       	lsr	r24
    8cb8:	86 95       	lsr	r24
    8cba:	88 87       	std	Y+8, r24	; 0x08
    x_new                 = (INT8U)(newprio & 0x07);
    8cbc:	88 89       	ldd	r24, Y+16	; 0x10
    8cbe:	87 70       	andi	r24, 0x07	; 7
    8cc0:	89 87       	std	Y+9, r24	; 0x09
    bity_new              = (INT8U)(1 << y_new);
    8cc2:	88 85       	ldd	r24, Y+8	; 0x08
    8cc4:	28 2f       	mov	r18, r24
    8cc6:	30 e0       	ldi	r19, 0x00	; 0
    8cc8:	81 e0       	ldi	r24, 0x01	; 1
    8cca:	90 e0       	ldi	r25, 0x00	; 0
    8ccc:	02 c0       	rjmp	.+4      	; 0x8cd2 <OSTaskChangePrio+0xae>
    8cce:	88 0f       	add	r24, r24
    8cd0:	99 1f       	adc	r25, r25
    8cd2:	2a 95       	dec	r18
    8cd4:	e2 f7       	brpl	.-8      	; 0x8cce <OSTaskChangePrio+0xaa>
    8cd6:	8a 87       	std	Y+10, r24	; 0x0a
    bitx_new              = (INT8U)(1 << x_new);
    8cd8:	89 85       	ldd	r24, Y+9	; 0x09
    8cda:	28 2f       	mov	r18, r24
    8cdc:	30 e0       	ldi	r19, 0x00	; 0
    8cde:	81 e0       	ldi	r24, 0x01	; 1
    8ce0:	90 e0       	ldi	r25, 0x00	; 0
    8ce2:	02 c0       	rjmp	.+4      	; 0x8ce8 <OSTaskChangePrio+0xc4>
    8ce4:	88 0f       	add	r24, r24
    8ce6:	99 1f       	adc	r25, r25
    8ce8:	2a 95       	dec	r18
    8cea:	e2 f7       	brpl	.-8      	; 0x8ce4 <OSTaskChangePrio+0xc0>
    8cec:	8b 87       	std	Y+11, r24	; 0x0b
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    8cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    8cf0:	88 2f       	mov	r24, r24
    8cf2:	90 e0       	ldi	r25, 0x00	; 0
    8cf4:	88 0f       	add	r24, r24
    8cf6:	99 1f       	adc	r25, r25
    8cf8:	8d 58       	subi	r24, 0x8D	; 141
    8cfa:	9a 4c       	sbci	r25, 0xCA	; 202
    8cfc:	fc 01       	movw	r30, r24
    8cfe:	10 82       	st	Z, r1
    8d00:	11 82       	std	Z+1, r1	; 0x01
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    8d02:	88 89       	ldd	r24, Y+16	; 0x10
    8d04:	88 2f       	mov	r24, r24
    8d06:	90 e0       	ldi	r25, 0x00	; 0
    8d08:	88 0f       	add	r24, r24
    8d0a:	99 1f       	adc	r25, r25
    8d0c:	8d 58       	subi	r24, 0x8D	; 141
    8d0e:	9a 4c       	sbci	r25, 0xCA	; 202
    8d10:	2e 81       	ldd	r18, Y+6	; 0x06
    8d12:	3f 81       	ldd	r19, Y+7	; 0x07
    8d14:	fc 01       	movw	r30, r24
    8d16:	20 83       	st	Z, r18
    8d18:	31 83       	std	Z+1, r19	; 0x01
    y_old                 =  ptcb->OSTCBY;
    8d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    8d1c:	9f 81       	ldd	r25, Y+7	; 0x07
    8d1e:	fc 01       	movw	r30, r24
    8d20:	82 a1       	ldd	r24, Z+34	; 0x22
    8d22:	8c 87       	std	Y+12, r24	; 0x0c
    bity_old              =  ptcb->OSTCBBitY;
    8d24:	8e 81       	ldd	r24, Y+6	; 0x06
    8d26:	9f 81       	ldd	r25, Y+7	; 0x07
    8d28:	fc 01       	movw	r30, r24
    8d2a:	84 a1       	ldd	r24, Z+36	; 0x24
    8d2c:	8d 87       	std	Y+13, r24	; 0x0d
    bitx_old              =  ptcb->OSTCBBitX;
    8d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    8d30:	9f 81       	ldd	r25, Y+7	; 0x07
    8d32:	fc 01       	movw	r30, r24
    8d34:	83 a1       	ldd	r24, Z+35	; 0x23
    8d36:	8e 87       	std	Y+14, r24	; 0x0e
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    8d38:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d3a:	88 2f       	mov	r24, r24
    8d3c:	90 e0       	ldi	r25, 0x00	; 0
    8d3e:	8b 56       	subi	r24, 0x6B	; 107
    8d40:	93 4d       	sbci	r25, 0xD3	; 211
    8d42:	fc 01       	movw	r30, r24
    8d44:	90 81       	ld	r25, Z
    8d46:	8e 85       	ldd	r24, Y+14	; 0x0e
    8d48:	89 23       	and	r24, r25
    8d4a:	88 23       	and	r24, r24
    8d4c:	c9 f1       	breq	.+114    	; 0x8dc0 <OSTaskChangePrio+0x19c>
         OSRdyTbl[y_old] &= ~bitx_old;
    8d4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d50:	88 2f       	mov	r24, r24
    8d52:	90 e0       	ldi	r25, 0x00	; 0
    8d54:	2c 85       	ldd	r18, Y+12	; 0x0c
    8d56:	22 2f       	mov	r18, r18
    8d58:	30 e0       	ldi	r19, 0x00	; 0
    8d5a:	2b 56       	subi	r18, 0x6B	; 107
    8d5c:	33 4d       	sbci	r19, 0xD3	; 211
    8d5e:	f9 01       	movw	r30, r18
    8d60:	20 81       	ld	r18, Z
    8d62:	32 2f       	mov	r19, r18
    8d64:	2e 85       	ldd	r18, Y+14	; 0x0e
    8d66:	20 95       	com	r18
    8d68:	23 23       	and	r18, r19
    8d6a:	8b 56       	subi	r24, 0x6B	; 107
    8d6c:	93 4d       	sbci	r25, 0xD3	; 211
    8d6e:	fc 01       	movw	r30, r24
    8d70:	20 83       	st	Z, r18
         if (OSRdyTbl[y_old] == 0) {
    8d72:	8c 85       	ldd	r24, Y+12	; 0x0c
    8d74:	88 2f       	mov	r24, r24
    8d76:	90 e0       	ldi	r25, 0x00	; 0
    8d78:	8b 56       	subi	r24, 0x6B	; 107
    8d7a:	93 4d       	sbci	r25, 0xD3	; 211
    8d7c:	fc 01       	movw	r30, r24
    8d7e:	80 81       	ld	r24, Z
    8d80:	88 23       	and	r24, r24
    8d82:	41 f4       	brne	.+16     	; 0x8d94 <OSTaskChangePrio+0x170>
             OSRdyGrp &= ~bity_old;
    8d84:	8d 85       	ldd	r24, Y+13	; 0x0d
    8d86:	98 2f       	mov	r25, r24
    8d88:	90 95       	com	r25
    8d8a:	80 91 94 2c 	lds	r24, 0x2C94
    8d8e:	89 23       	and	r24, r25
    8d90:	80 93 94 2c 	sts	0x2C94, r24
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    8d94:	90 91 94 2c 	lds	r25, 0x2C94
    8d98:	8a 85       	ldd	r24, Y+10	; 0x0a
    8d9a:	89 2b       	or	r24, r25
    8d9c:	80 93 94 2c 	sts	0x2C94, r24
         OSRdyTbl[y_new] |= bitx_new;
    8da0:	88 85       	ldd	r24, Y+8	; 0x08
    8da2:	88 2f       	mov	r24, r24
    8da4:	90 e0       	ldi	r25, 0x00	; 0
    8da6:	28 85       	ldd	r18, Y+8	; 0x08
    8da8:	22 2f       	mov	r18, r18
    8daa:	30 e0       	ldi	r19, 0x00	; 0
    8dac:	2b 56       	subi	r18, 0x6B	; 107
    8dae:	33 4d       	sbci	r19, 0xD3	; 211
    8db0:	f9 01       	movw	r30, r18
    8db2:	30 81       	ld	r19, Z
    8db4:	2b 85       	ldd	r18, Y+11	; 0x0b
    8db6:	23 2b       	or	r18, r19
    8db8:	8b 56       	subi	r24, 0x6B	; 107
    8dba:	93 4d       	sbci	r25, 0xD3	; 211
    8dbc:	fc 01       	movw	r30, r24
    8dbe:	20 83       	st	Z, r18
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    8dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    8dc2:	9f 81       	ldd	r25, Y+7	; 0x07
    8dc4:	fc 01       	movw	r30, r24
    8dc6:	82 89       	ldd	r24, Z+18	; 0x12
    8dc8:	93 89       	ldd	r25, Z+19	; 0x13
    8dca:	89 83       	std	Y+1, r24	; 0x01
    8dcc:	9a 83       	std	Y+2, r25	; 0x02
    if (pevent != (OS_EVENT *)0) {
    8dce:	89 81       	ldd	r24, Y+1	; 0x01
    8dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    8dd2:	00 97       	sbiw	r24, 0x00	; 0
    8dd4:	09 f4       	brne	.+2      	; 0x8dd8 <OSTaskChangePrio+0x1b4>
    8dd6:	56 c0       	rjmp	.+172    	; 0x8e84 <OSTaskChangePrio+0x260>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    8dd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    8dda:	88 2f       	mov	r24, r24
    8ddc:	90 e0       	ldi	r25, 0x00	; 0
    8dde:	2c 85       	ldd	r18, Y+12	; 0x0c
    8de0:	22 2f       	mov	r18, r18
    8de2:	30 e0       	ldi	r19, 0x00	; 0
    8de4:	49 81       	ldd	r20, Y+1	; 0x01
    8de6:	5a 81       	ldd	r21, Y+2	; 0x02
    8de8:	24 0f       	add	r18, r20
    8dea:	35 1f       	adc	r19, r21
    8dec:	2a 5f       	subi	r18, 0xFA	; 250
    8dee:	3f 4f       	sbci	r19, 0xFF	; 255
    8df0:	f9 01       	movw	r30, r18
    8df2:	20 81       	ld	r18, Z
    8df4:	32 2f       	mov	r19, r18
    8df6:	2e 85       	ldd	r18, Y+14	; 0x0e
    8df8:	20 95       	com	r18
    8dfa:	23 23       	and	r18, r19
    8dfc:	42 2f       	mov	r20, r18
    8dfe:	29 81       	ldd	r18, Y+1	; 0x01
    8e00:	3a 81       	ldd	r19, Y+2	; 0x02
    8e02:	82 0f       	add	r24, r18
    8e04:	93 1f       	adc	r25, r19
    8e06:	06 96       	adiw	r24, 0x06	; 6
    8e08:	fc 01       	movw	r30, r24
    8e0a:	40 83       	st	Z, r20
        if (pevent->OSEventTbl[y_old] == 0) {
    8e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    8e0e:	88 2f       	mov	r24, r24
    8e10:	90 e0       	ldi	r25, 0x00	; 0
    8e12:	29 81       	ldd	r18, Y+1	; 0x01
    8e14:	3a 81       	ldd	r19, Y+2	; 0x02
    8e16:	82 0f       	add	r24, r18
    8e18:	93 1f       	adc	r25, r19
    8e1a:	06 96       	adiw	r24, 0x06	; 6
    8e1c:	fc 01       	movw	r30, r24
    8e1e:	80 81       	ld	r24, Z
    8e20:	88 23       	and	r24, r24
    8e22:	69 f4       	brne	.+26     	; 0x8e3e <OSTaskChangePrio+0x21a>
            pevent->OSEventGrp    &= ~bity_old;
    8e24:	89 81       	ldd	r24, Y+1	; 0x01
    8e26:	9a 81       	ldd	r25, Y+2	; 0x02
    8e28:	fc 01       	movw	r30, r24
    8e2a:	85 81       	ldd	r24, Z+5	; 0x05
    8e2c:	98 2f       	mov	r25, r24
    8e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    8e30:	80 95       	com	r24
    8e32:	89 23       	and	r24, r25
    8e34:	28 2f       	mov	r18, r24
    8e36:	89 81       	ldd	r24, Y+1	; 0x01
    8e38:	9a 81       	ldd	r25, Y+2	; 0x02
    8e3a:	fc 01       	movw	r30, r24
    8e3c:	25 83       	std	Z+5, r18	; 0x05
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    8e3e:	89 81       	ldd	r24, Y+1	; 0x01
    8e40:	9a 81       	ldd	r25, Y+2	; 0x02
    8e42:	fc 01       	movw	r30, r24
    8e44:	95 81       	ldd	r25, Z+5	; 0x05
    8e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    8e48:	29 2f       	mov	r18, r25
    8e4a:	28 2b       	or	r18, r24
    8e4c:	89 81       	ldd	r24, Y+1	; 0x01
    8e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    8e50:	fc 01       	movw	r30, r24
    8e52:	25 83       	std	Z+5, r18	; 0x05
        pevent->OSEventTbl[y_new] |= bitx_new;
    8e54:	88 85       	ldd	r24, Y+8	; 0x08
    8e56:	88 2f       	mov	r24, r24
    8e58:	90 e0       	ldi	r25, 0x00	; 0
    8e5a:	28 85       	ldd	r18, Y+8	; 0x08
    8e5c:	22 2f       	mov	r18, r18
    8e5e:	30 e0       	ldi	r19, 0x00	; 0
    8e60:	49 81       	ldd	r20, Y+1	; 0x01
    8e62:	5a 81       	ldd	r21, Y+2	; 0x02
    8e64:	24 0f       	add	r18, r20
    8e66:	35 1f       	adc	r19, r21
    8e68:	2a 5f       	subi	r18, 0xFA	; 250
    8e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e6c:	f9 01       	movw	r30, r18
    8e6e:	30 81       	ld	r19, Z
    8e70:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e72:	43 2f       	mov	r20, r19
    8e74:	42 2b       	or	r20, r18
    8e76:	29 81       	ldd	r18, Y+1	; 0x01
    8e78:	3a 81       	ldd	r19, Y+2	; 0x02
    8e7a:	82 0f       	add	r24, r18
    8e7c:	93 1f       	adc	r25, r19
    8e7e:	06 96       	adiw	r24, 0x06	; 6
    8e80:	fc 01       	movw	r30, r24
    8e82:	40 83       	st	Z, r20
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    8e84:	8e 81       	ldd	r24, Y+6	; 0x06
    8e86:	9f 81       	ldd	r25, Y+7	; 0x07
    8e88:	fc 01       	movw	r30, r24
    8e8a:	84 89       	ldd	r24, Z+20	; 0x14
    8e8c:	95 89       	ldd	r25, Z+21	; 0x15
    8e8e:	00 97       	sbiw	r24, 0x00	; 0
    8e90:	09 f4       	brne	.+2      	; 0x8e94 <OSTaskChangePrio+0x270>
    8e92:	76 c0       	rjmp	.+236    	; 0x8f80 <OSTaskChangePrio+0x35c>
        pevents =  ptcb->OSTCBEventMultiPtr;
    8e94:	8e 81       	ldd	r24, Y+6	; 0x06
    8e96:	9f 81       	ldd	r25, Y+7	; 0x07
    8e98:	fc 01       	movw	r30, r24
    8e9a:	84 89       	ldd	r24, Z+20	; 0x14
    8e9c:	95 89       	ldd	r25, Z+21	; 0x15
    8e9e:	8b 83       	std	Y+3, r24	; 0x03
    8ea0:	9c 83       	std	Y+4, r25	; 0x04
        pevent  = *pevents;
    8ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    8ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    8ea6:	fc 01       	movw	r30, r24
    8ea8:	80 81       	ld	r24, Z
    8eaa:	91 81       	ldd	r25, Z+1	; 0x01
    8eac:	89 83       	std	Y+1, r24	; 0x01
    8eae:	9a 83       	std	Y+2, r25	; 0x02
        while (pevent != (OS_EVENT *)0) {
    8eb0:	62 c0       	rjmp	.+196    	; 0x8f76 <OSTaskChangePrio+0x352>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    8eb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    8eb4:	88 2f       	mov	r24, r24
    8eb6:	90 e0       	ldi	r25, 0x00	; 0
    8eb8:	2c 85       	ldd	r18, Y+12	; 0x0c
    8eba:	22 2f       	mov	r18, r18
    8ebc:	30 e0       	ldi	r19, 0x00	; 0
    8ebe:	49 81       	ldd	r20, Y+1	; 0x01
    8ec0:	5a 81       	ldd	r21, Y+2	; 0x02
    8ec2:	24 0f       	add	r18, r20
    8ec4:	35 1f       	adc	r19, r21
    8ec6:	2a 5f       	subi	r18, 0xFA	; 250
    8ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    8eca:	f9 01       	movw	r30, r18
    8ecc:	20 81       	ld	r18, Z
    8ece:	32 2f       	mov	r19, r18
    8ed0:	2e 85       	ldd	r18, Y+14	; 0x0e
    8ed2:	20 95       	com	r18
    8ed4:	23 23       	and	r18, r19
    8ed6:	42 2f       	mov	r20, r18
    8ed8:	29 81       	ldd	r18, Y+1	; 0x01
    8eda:	3a 81       	ldd	r19, Y+2	; 0x02
    8edc:	82 0f       	add	r24, r18
    8ede:	93 1f       	adc	r25, r19
    8ee0:	06 96       	adiw	r24, 0x06	; 6
    8ee2:	fc 01       	movw	r30, r24
    8ee4:	40 83       	st	Z, r20
            if (pevent->OSEventTbl[y_old] == 0) {
    8ee6:	8c 85       	ldd	r24, Y+12	; 0x0c
    8ee8:	88 2f       	mov	r24, r24
    8eea:	90 e0       	ldi	r25, 0x00	; 0
    8eec:	29 81       	ldd	r18, Y+1	; 0x01
    8eee:	3a 81       	ldd	r19, Y+2	; 0x02
    8ef0:	82 0f       	add	r24, r18
    8ef2:	93 1f       	adc	r25, r19
    8ef4:	06 96       	adiw	r24, 0x06	; 6
    8ef6:	fc 01       	movw	r30, r24
    8ef8:	80 81       	ld	r24, Z
    8efa:	88 23       	and	r24, r24
    8efc:	69 f4       	brne	.+26     	; 0x8f18 <OSTaskChangePrio+0x2f4>
                pevent->OSEventGrp    &= ~bity_old;
    8efe:	89 81       	ldd	r24, Y+1	; 0x01
    8f00:	9a 81       	ldd	r25, Y+2	; 0x02
    8f02:	fc 01       	movw	r30, r24
    8f04:	85 81       	ldd	r24, Z+5	; 0x05
    8f06:	98 2f       	mov	r25, r24
    8f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    8f0a:	80 95       	com	r24
    8f0c:	89 23       	and	r24, r25
    8f0e:	28 2f       	mov	r18, r24
    8f10:	89 81       	ldd	r24, Y+1	; 0x01
    8f12:	9a 81       	ldd	r25, Y+2	; 0x02
    8f14:	fc 01       	movw	r30, r24
    8f16:	25 83       	std	Z+5, r18	; 0x05
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    8f18:	89 81       	ldd	r24, Y+1	; 0x01
    8f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    8f1c:	fc 01       	movw	r30, r24
    8f1e:	95 81       	ldd	r25, Z+5	; 0x05
    8f20:	8a 85       	ldd	r24, Y+10	; 0x0a
    8f22:	29 2f       	mov	r18, r25
    8f24:	28 2b       	or	r18, r24
    8f26:	89 81       	ldd	r24, Y+1	; 0x01
    8f28:	9a 81       	ldd	r25, Y+2	; 0x02
    8f2a:	fc 01       	movw	r30, r24
    8f2c:	25 83       	std	Z+5, r18	; 0x05
            pevent->OSEventTbl[y_new] |= bitx_new;
    8f2e:	88 85       	ldd	r24, Y+8	; 0x08
    8f30:	88 2f       	mov	r24, r24
    8f32:	90 e0       	ldi	r25, 0x00	; 0
    8f34:	28 85       	ldd	r18, Y+8	; 0x08
    8f36:	22 2f       	mov	r18, r18
    8f38:	30 e0       	ldi	r19, 0x00	; 0
    8f3a:	49 81       	ldd	r20, Y+1	; 0x01
    8f3c:	5a 81       	ldd	r21, Y+2	; 0x02
    8f3e:	24 0f       	add	r18, r20
    8f40:	35 1f       	adc	r19, r21
    8f42:	2a 5f       	subi	r18, 0xFA	; 250
    8f44:	3f 4f       	sbci	r19, 0xFF	; 255
    8f46:	f9 01       	movw	r30, r18
    8f48:	30 81       	ld	r19, Z
    8f4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    8f4c:	43 2f       	mov	r20, r19
    8f4e:	42 2b       	or	r20, r18
    8f50:	29 81       	ldd	r18, Y+1	; 0x01
    8f52:	3a 81       	ldd	r19, Y+2	; 0x02
    8f54:	82 0f       	add	r24, r18
    8f56:	93 1f       	adc	r25, r19
    8f58:	06 96       	adiw	r24, 0x06	; 6
    8f5a:	fc 01       	movw	r30, r24
    8f5c:	40 83       	st	Z, r20
            pevents++;
    8f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    8f60:	9c 81       	ldd	r25, Y+4	; 0x04
    8f62:	02 96       	adiw	r24, 0x02	; 2
    8f64:	8b 83       	std	Y+3, r24	; 0x03
    8f66:	9c 83       	std	Y+4, r25	; 0x04
            pevent                     = *pevents;
    8f68:	8b 81       	ldd	r24, Y+3	; 0x03
    8f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    8f6c:	fc 01       	movw	r30, r24
    8f6e:	80 81       	ld	r24, Z
    8f70:	91 81       	ldd	r25, Z+1	; 0x01
    8f72:	89 83       	std	Y+1, r24	; 0x01
    8f74:	9a 83       	std	Y+2, r25	; 0x02
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    8f76:	89 81       	ldd	r24, Y+1	; 0x01
    8f78:	9a 81       	ldd	r25, Y+2	; 0x02
    8f7a:	00 97       	sbiw	r24, 0x00	; 0
    8f7c:	09 f0       	breq	.+2      	; 0x8f80 <OSTaskChangePrio+0x35c>
    8f7e:	99 cf       	rjmp	.-206    	; 0x8eb2 <OSTaskChangePrio+0x28e>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    8f80:	8e 81       	ldd	r24, Y+6	; 0x06
    8f82:	9f 81       	ldd	r25, Y+7	; 0x07
    8f84:	28 89       	ldd	r18, Y+16	; 0x10
    8f86:	fc 01       	movw	r30, r24
    8f88:	20 a3       	std	Z+32, r18	; 0x20
    ptcb->OSTCBY    = y_new;
    8f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    8f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    8f8e:	28 85       	ldd	r18, Y+8	; 0x08
    8f90:	fc 01       	movw	r30, r24
    8f92:	22 a3       	std	Z+34, r18	; 0x22
    ptcb->OSTCBX    = x_new;
    8f94:	8e 81       	ldd	r24, Y+6	; 0x06
    8f96:	9f 81       	ldd	r25, Y+7	; 0x07
    8f98:	29 85       	ldd	r18, Y+9	; 0x09
    8f9a:	fc 01       	movw	r30, r24
    8f9c:	21 a3       	std	Z+33, r18	; 0x21
    ptcb->OSTCBBitY = bity_new;
    8f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    8fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    8fa2:	2a 85       	ldd	r18, Y+10	; 0x0a
    8fa4:	fc 01       	movw	r30, r24
    8fa6:	24 a3       	std	Z+36, r18	; 0x24
    ptcb->OSTCBBitX = bitx_new;
    8fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    8faa:	9f 81       	ldd	r25, Y+7	; 0x07
    8fac:	2b 85       	ldd	r18, Y+11	; 0x0b
    8fae:	fc 01       	movw	r30, r24
    8fb0:	23 a3       	std	Z+35, r18	; 0x23
    OS_EXIT_CRITICAL();
    8fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    8fb4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
    8fb8:	80 91 fd 27 	lds	r24, 0x27FD
    8fbc:	81 30       	cpi	r24, 0x01	; 1
    8fbe:	11 f4       	brne	.+4      	; 0x8fc4 <OSTaskChangePrio+0x3a0>
        OS_Sched();                                         /* Find new highest priority task          */
    8fc0:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    8fc4:	80 e0       	ldi	r24, 0x00	; 0
}
    8fc6:	60 96       	adiw	r28, 0x10	; 16
    8fc8:	cd bf       	out	0x3d, r28	; 61
    8fca:	de bf       	out	0x3e, r29	; 62
    8fcc:	cf 91       	pop	r28
    8fce:	df 91       	pop	r29
    8fd0:	08 95       	ret

00008fd2 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    8fd2:	af 92       	push	r10
    8fd4:	bf 92       	push	r11
    8fd6:	cf 92       	push	r12
    8fd8:	df 92       	push	r13
    8fda:	ef 92       	push	r14
    8fdc:	ff 92       	push	r15
    8fde:	0f 93       	push	r16
    8fe0:	1f 93       	push	r17
    8fe2:	df 93       	push	r29
    8fe4:	cf 93       	push	r28
    8fe6:	cd b7       	in	r28, 0x3d	; 61
    8fe8:	de b7       	in	r29, 0x3e	; 62
    8fea:	2b 97       	sbiw	r28, 0x0b	; 11
    8fec:	cd bf       	out	0x3d, r28	; 61
    8fee:	de bf       	out	0x3e, r29	; 62
    8ff0:	8d 83       	std	Y+5, r24	; 0x05
    8ff2:	9e 83       	std	Y+6, r25	; 0x06
    8ff4:	6f 83       	std	Y+7, r22	; 0x07
    8ff6:	78 87       	std	Y+8, r23	; 0x08
    8ff8:	49 87       	std	Y+9, r20	; 0x09
    8ffa:	5a 87       	std	Y+10, r21	; 0x0a
    8ffc:	2b 87       	std	Y+11, r18	; 0x0b
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    8ffe:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    9000:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9004:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9006:	80 91 07 2e 	lds	r24, 0x2E07
    900a:	88 23       	and	r24, r24
    900c:	29 f0       	breq	.+10     	; 0x9018 <OSTaskCreate+0x46>
        OS_EXIT_CRITICAL();
    900e:	89 81       	ldd	r24, Y+1	; 0x01
    9010:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    9014:	8c e3       	ldi	r24, 0x3C	; 60
    9016:	5c c0       	rjmp	.+184    	; 0x90d0 <OSTaskCreate+0xfe>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    9018:	8b 85       	ldd	r24, Y+11	; 0x0b
    901a:	88 2f       	mov	r24, r24
    901c:	90 e0       	ldi	r25, 0x00	; 0
    901e:	88 0f       	add	r24, r24
    9020:	99 1f       	adc	r25, r25
    9022:	8d 58       	subi	r24, 0x8D	; 141
    9024:	9a 4c       	sbci	r25, 0xCA	; 202
    9026:	fc 01       	movw	r30, r24
    9028:	80 81       	ld	r24, Z
    902a:	91 81       	ldd	r25, Z+1	; 0x01
    902c:	00 97       	sbiw	r24, 0x00	; 0
    902e:	09 f0       	breq	.+2      	; 0x9032 <OSTaskCreate+0x60>
    9030:	4b c0       	rjmp	.+150    	; 0x90c8 <OSTaskCreate+0xf6>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9032:	8b 85       	ldd	r24, Y+11	; 0x0b
    9034:	88 2f       	mov	r24, r24
    9036:	90 e0       	ldi	r25, 0x00	; 0
    9038:	88 0f       	add	r24, r24
    903a:	99 1f       	adc	r25, r25
    903c:	8d 58       	subi	r24, 0x8D	; 141
    903e:	9a 4c       	sbci	r25, 0xCA	; 202
    9040:	21 e0       	ldi	r18, 0x01	; 1
    9042:	30 e0       	ldi	r19, 0x00	; 0
    9044:	fc 01       	movw	r30, r24
    9046:	20 83       	st	Z, r18
    9048:	31 83       	std	Z+1, r19	; 0x01
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    904a:	89 81       	ldd	r24, Y+1	; 0x01
    904c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    9050:	8d 81       	ldd	r24, Y+5	; 0x05
    9052:	9e 81       	ldd	r25, Y+6	; 0x06
    9054:	4f 81       	ldd	r20, Y+7	; 0x07
    9056:	58 85       	ldd	r21, Y+8	; 0x08
    9058:	29 85       	ldd	r18, Y+9	; 0x09
    905a:	3a 85       	ldd	r19, Y+10	; 0x0a
    905c:	ba 01       	movw	r22, r20
    905e:	a9 01       	movw	r20, r18
    9060:	20 e0       	ldi	r18, 0x00	; 0
    9062:	30 e0       	ldi	r19, 0x00	; 0
    9064:	0e 94 6e 19 	call	0x32dc	; 0x32dc <OSTaskStkInit>
    9068:	8a 83       	std	Y+2, r24	; 0x02
    906a:	9b 83       	std	Y+3, r25	; 0x03
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    906c:	2a 81       	ldd	r18, Y+2	; 0x02
    906e:	3b 81       	ldd	r19, Y+3	; 0x03
    9070:	8b 85       	ldd	r24, Y+11	; 0x0b
    9072:	b9 01       	movw	r22, r18
    9074:	40 e0       	ldi	r20, 0x00	; 0
    9076:	50 e0       	ldi	r21, 0x00	; 0
    9078:	20 e0       	ldi	r18, 0x00	; 0
    907a:	30 e0       	ldi	r19, 0x00	; 0
    907c:	ee 24       	eor	r14, r14
    907e:	ff 24       	eor	r15, r15
    9080:	87 01       	movw	r16, r14
    9082:	cc 24       	eor	r12, r12
    9084:	dd 24       	eor	r13, r13
    9086:	aa 24       	eor	r10, r10
    9088:	bb 24       	eor	r11, r11
    908a:	0e 94 3d 28 	call	0x507a	; 0x507a <OS_TCBInit>
    908e:	8c 83       	std	Y+4, r24	; 0x04
        if (err == OS_ERR_NONE) {
    9090:	8c 81       	ldd	r24, Y+4	; 0x04
    9092:	88 23       	and	r24, r24
    9094:	39 f4       	brne	.+14     	; 0x90a4 <OSTaskCreate+0xd2>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9096:	80 91 fd 27 	lds	r24, 0x27FD
    909a:	81 30       	cpi	r24, 0x01	; 1
    909c:	99 f4       	brne	.+38     	; 0x90c4 <OSTaskCreate+0xf2>
                OS_Sched();
    909e:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    90a2:	10 c0       	rjmp	.+32     	; 0x90c4 <OSTaskCreate+0xf2>
            }
        } else {
            OS_ENTER_CRITICAL();
    90a4:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    90a8:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    90aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    90ac:	88 2f       	mov	r24, r24
    90ae:	90 e0       	ldi	r25, 0x00	; 0
    90b0:	88 0f       	add	r24, r24
    90b2:	99 1f       	adc	r25, r25
    90b4:	8d 58       	subi	r24, 0x8D	; 141
    90b6:	9a 4c       	sbci	r25, 0xCA	; 202
    90b8:	fc 01       	movw	r30, r24
    90ba:	10 82       	st	Z, r1
    90bc:	11 82       	std	Z+1, r1	; 0x01
            OS_EXIT_CRITICAL();
    90be:	89 81       	ldd	r24, Y+1	; 0x01
    90c0:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        }
        return (err);
    90c4:	8c 81       	ldd	r24, Y+4	; 0x04
    90c6:	04 c0       	rjmp	.+8      	; 0x90d0 <OSTaskCreate+0xfe>
    }
    OS_EXIT_CRITICAL();
    90c8:	89 81       	ldd	r24, Y+1	; 0x01
    90ca:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    90ce:	88 e2       	ldi	r24, 0x28	; 40
}
    90d0:	2b 96       	adiw	r28, 0x0b	; 11
    90d2:	cd bf       	out	0x3d, r28	; 61
    90d4:	de bf       	out	0x3e, r29	; 62
    90d6:	cf 91       	pop	r28
    90d8:	df 91       	pop	r29
    90da:	1f 91       	pop	r17
    90dc:	0f 91       	pop	r16
    90de:	ff 90       	pop	r15
    90e0:	ef 90       	pop	r14
    90e2:	df 90       	pop	r13
    90e4:	cf 90       	pop	r12
    90e6:	bf 90       	pop	r11
    90e8:	af 90       	pop	r10
    90ea:	08 95       	ret

000090ec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    90ec:	8f 92       	push	r8
    90ee:	9f 92       	push	r9
    90f0:	af 92       	push	r10
    90f2:	bf 92       	push	r11
    90f4:	cf 92       	push	r12
    90f6:	df 92       	push	r13
    90f8:	ef 92       	push	r14
    90fa:	ff 92       	push	r15
    90fc:	0f 93       	push	r16
    90fe:	1f 93       	push	r17
    9100:	df 93       	push	r29
    9102:	cf 93       	push	r28
    9104:	cd b7       	in	r28, 0x3d	; 61
    9106:	de b7       	in	r29, 0x3e	; 62
    9108:	65 97       	sbiw	r28, 0x15	; 21
    910a:	cd bf       	out	0x3d, r28	; 61
    910c:	de bf       	out	0x3e, r29	; 62
    910e:	8d 83       	std	Y+5, r24	; 0x05
    9110:	9e 83       	std	Y+6, r25	; 0x06
    9112:	6f 83       	std	Y+7, r22	; 0x07
    9114:	78 87       	std	Y+8, r23	; 0x08
    9116:	49 87       	std	Y+9, r20	; 0x09
    9118:	5a 87       	std	Y+10, r21	; 0x0a
    911a:	2b 87       	std	Y+11, r18	; 0x0b
    911c:	0c 87       	std	Y+12, r16	; 0x0c
    911e:	1d 87       	std	Y+13, r17	; 0x0d
    9120:	ee 86       	std	Y+14, r14	; 0x0e
    9122:	ff 86       	std	Y+15, r15	; 0x0f
    9124:	a8 8a       	std	Y+16, r10	; 0x10
    9126:	b9 8a       	std	Y+17, r11	; 0x11
    9128:	ca 8a       	std	Y+18, r12	; 0x12
    912a:	db 8a       	std	Y+19, r13	; 0x13
    912c:	8c 8a       	std	Y+20, r8	; 0x14
    912e:	9d 8a       	std	Y+21, r9	; 0x15
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9130:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    9132:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9136:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9138:	80 91 07 2e 	lds	r24, 0x2E07
    913c:	88 23       	and	r24, r24
    913e:	29 f0       	breq	.+10     	; 0x914a <OSTaskCreateExt+0x5e>
        OS_EXIT_CRITICAL();
    9140:	89 81       	ldd	r24, Y+1	; 0x01
    9142:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    9146:	8c e3       	ldi	r24, 0x3C	; 60
    9148:	69 c0       	rjmp	.+210    	; 0x921c <OSTaskCreateExt+0x130>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    914a:	8b 85       	ldd	r24, Y+11	; 0x0b
    914c:	88 2f       	mov	r24, r24
    914e:	90 e0       	ldi	r25, 0x00	; 0
    9150:	88 0f       	add	r24, r24
    9152:	99 1f       	adc	r25, r25
    9154:	8d 58       	subi	r24, 0x8D	; 141
    9156:	9a 4c       	sbci	r25, 0xCA	; 202
    9158:	fc 01       	movw	r30, r24
    915a:	80 81       	ld	r24, Z
    915c:	91 81       	ldd	r25, Z+1	; 0x01
    915e:	00 97       	sbiw	r24, 0x00	; 0
    9160:	09 f0       	breq	.+2      	; 0x9164 <OSTaskCreateExt+0x78>
    9162:	58 c0       	rjmp	.+176    	; 0x9214 <OSTaskCreateExt+0x128>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9164:	8b 85       	ldd	r24, Y+11	; 0x0b
    9166:	88 2f       	mov	r24, r24
    9168:	90 e0       	ldi	r25, 0x00	; 0
    916a:	88 0f       	add	r24, r24
    916c:	99 1f       	adc	r25, r25
    916e:	8d 58       	subi	r24, 0x8D	; 141
    9170:	9a 4c       	sbci	r25, 0xCA	; 202
    9172:	21 e0       	ldi	r18, 0x01	; 1
    9174:	30 e0       	ldi	r19, 0x00	; 0
    9176:	fc 01       	movw	r30, r24
    9178:	20 83       	st	Z, r18
    917a:	31 83       	std	Z+1, r19	; 0x01
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    917c:	89 81       	ldd	r24, Y+1	; 0x01
    917e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    9182:	8e 85       	ldd	r24, Y+14	; 0x0e
    9184:	9f 85       	ldd	r25, Y+15	; 0x0f
    9186:	28 89       	ldd	r18, Y+16	; 0x10
    9188:	39 89       	ldd	r19, Y+17	; 0x11
    918a:	4a 89       	ldd	r20, Y+18	; 0x12
    918c:	5b 89       	ldd	r21, Y+19	; 0x13
    918e:	ed a1       	ldd	r30, Y+37	; 0x25
    9190:	fe a1       	ldd	r31, Y+38	; 0x26
    9192:	ba 01       	movw	r22, r20
    9194:	a9 01       	movw	r20, r18
    9196:	9f 01       	movw	r18, r30
    9198:	0e 94 95 4d 	call	0x9b2a	; 0x9b2a <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    919c:	8d 81       	ldd	r24, Y+5	; 0x05
    919e:	9e 81       	ldd	r25, Y+6	; 0x06
    91a0:	6f 81       	ldd	r22, Y+7	; 0x07
    91a2:	78 85       	ldd	r23, Y+8	; 0x08
    91a4:	49 85       	ldd	r20, Y+9	; 0x09
    91a6:	5a 85       	ldd	r21, Y+10	; 0x0a
    91a8:	2d a1       	ldd	r18, Y+37	; 0x25
    91aa:	3e a1       	ldd	r19, Y+38	; 0x26
    91ac:	0e 94 6e 19 	call	0x32dc	; 0x32dc <OSTaskStkInit>
    91b0:	8a 83       	std	Y+2, r24	; 0x02
    91b2:	9b 83       	std	Y+3, r25	; 0x03
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    91b4:	6a 81       	ldd	r22, Y+2	; 0x02
    91b6:	7b 81       	ldd	r23, Y+3	; 0x03
    91b8:	4e 85       	ldd	r20, Y+14	; 0x0e
    91ba:	5f 85       	ldd	r21, Y+15	; 0x0f
    91bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    91be:	3d 85       	ldd	r19, Y+13	; 0x0d
    91c0:	e8 88       	ldd	r14, Y+16	; 0x10
    91c2:	f9 88       	ldd	r15, Y+17	; 0x11
    91c4:	0a 89       	ldd	r16, Y+18	; 0x12
    91c6:	1b 89       	ldd	r17, Y+19	; 0x13
    91c8:	ac 89       	ldd	r26, Y+20	; 0x14
    91ca:	bd 89       	ldd	r27, Y+21	; 0x15
    91cc:	ed a1       	ldd	r30, Y+37	; 0x25
    91ce:	fe a1       	ldd	r31, Y+38	; 0x26
    91d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    91d2:	6d 01       	movw	r12, r26
    91d4:	5f 01       	movw	r10, r30
    91d6:	0e 94 3d 28 	call	0x507a	; 0x507a <OS_TCBInit>
    91da:	8c 83       	std	Y+4, r24	; 0x04
        if (err == OS_ERR_NONE) {
    91dc:	8c 81       	ldd	r24, Y+4	; 0x04
    91de:	88 23       	and	r24, r24
    91e0:	39 f4       	brne	.+14     	; 0x91f0 <OSTaskCreateExt+0x104>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    91e2:	80 91 fd 27 	lds	r24, 0x27FD
    91e6:	81 30       	cpi	r24, 0x01	; 1
    91e8:	99 f4       	brne	.+38     	; 0x9210 <OSTaskCreateExt+0x124>
                OS_Sched();
    91ea:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    91ee:	10 c0       	rjmp	.+32     	; 0x9210 <OSTaskCreateExt+0x124>
            }
        } else {
            OS_ENTER_CRITICAL();
    91f0:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    91f4:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    91f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    91f8:	88 2f       	mov	r24, r24
    91fa:	90 e0       	ldi	r25, 0x00	; 0
    91fc:	88 0f       	add	r24, r24
    91fe:	99 1f       	adc	r25, r25
    9200:	8d 58       	subi	r24, 0x8D	; 141
    9202:	9a 4c       	sbci	r25, 0xCA	; 202
    9204:	fc 01       	movw	r30, r24
    9206:	10 82       	st	Z, r1
    9208:	11 82       	std	Z+1, r1	; 0x01
            OS_EXIT_CRITICAL();
    920a:	89 81       	ldd	r24, Y+1	; 0x01
    920c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        }
        return (err);
    9210:	8c 81       	ldd	r24, Y+4	; 0x04
    9212:	04 c0       	rjmp	.+8      	; 0x921c <OSTaskCreateExt+0x130>
    }
    OS_EXIT_CRITICAL();
    9214:	89 81       	ldd	r24, Y+1	; 0x01
    9216:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    921a:	88 e2       	ldi	r24, 0x28	; 40
}
    921c:	65 96       	adiw	r28, 0x15	; 21
    921e:	cd bf       	out	0x3d, r28	; 61
    9220:	de bf       	out	0x3e, r29	; 62
    9222:	cf 91       	pop	r28
    9224:	df 91       	pop	r29
    9226:	1f 91       	pop	r17
    9228:	0f 91       	pop	r16
    922a:	ff 90       	pop	r15
    922c:	ef 90       	pop	r14
    922e:	df 90       	pop	r13
    9230:	cf 90       	pop	r12
    9232:	bf 90       	pop	r11
    9234:	af 90       	pop	r10
    9236:	9f 90       	pop	r9
    9238:	8f 90       	pop	r8
    923a:	08 95       	ret

0000923c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    923c:	df 93       	push	r29
    923e:	cf 93       	push	r28
    9240:	00 d0       	rcall	.+0      	; 0x9242 <OSTaskDel+0x6>
    9242:	00 d0       	rcall	.+0      	; 0x9244 <OSTaskDel+0x8>
    9244:	cd b7       	in	r28, 0x3d	; 61
    9246:	de b7       	in	r29, 0x3e	; 62
    9248:	8e 83       	std	Y+6, r24	; 0x06
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    924a:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    924c:	80 91 07 2e 	lds	r24, 0x2E07
    9250:	88 23       	and	r24, r24
    9252:	11 f0       	breq	.+4      	; 0x9258 <OSTaskDel+0x1c>
        return (OS_ERR_TASK_DEL_ISR);
    9254:	80 e4       	ldi	r24, 0x40	; 64
    9256:	23 c1       	rjmp	.+582    	; 0x949e <OSTaskDel+0x262>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    9258:	8e 81       	ldd	r24, Y+6	; 0x06
    925a:	8f 33       	cpi	r24, 0x3F	; 63
    925c:	11 f4       	brne	.+4      	; 0x9262 <OSTaskDel+0x26>
        return (OS_ERR_TASK_DEL_IDLE);
    925e:	8e e3       	ldi	r24, 0x3E	; 62
    9260:	1e c1       	rjmp	.+572    	; 0x949e <OSTaskDel+0x262>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    9262:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9266:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    9268:	8e 81       	ldd	r24, Y+6	; 0x06
    926a:	8f 3f       	cpi	r24, 0xFF	; 255
    926c:	39 f4       	brne	.+14     	; 0x927c <OSTaskDel+0x40>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    926e:	80 91 08 2e 	lds	r24, 0x2E08
    9272:	90 91 09 2e 	lds	r25, 0x2E09
    9276:	fc 01       	movw	r30, r24
    9278:	80 a1       	ldd	r24, Z+32	; 0x20
    927a:	8e 83       	std	Y+6, r24	; 0x06
    }
    ptcb = OSTCBPrioTbl[prio];
    927c:	8e 81       	ldd	r24, Y+6	; 0x06
    927e:	88 2f       	mov	r24, r24
    9280:	90 e0       	ldi	r25, 0x00	; 0
    9282:	88 0f       	add	r24, r24
    9284:	99 1f       	adc	r25, r25
    9286:	8d 58       	subi	r24, 0x8D	; 141
    9288:	9a 4c       	sbci	r25, 0xCA	; 202
    928a:	fc 01       	movw	r30, r24
    928c:	80 81       	ld	r24, Z
    928e:	91 81       	ldd	r25, Z+1	; 0x01
    9290:	8a 83       	std	Y+2, r24	; 0x02
    9292:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    9294:	8a 81       	ldd	r24, Y+2	; 0x02
    9296:	9b 81       	ldd	r25, Y+3	; 0x03
    9298:	00 97       	sbiw	r24, 0x00	; 0
    929a:	29 f4       	brne	.+10     	; 0x92a6 <OSTaskDel+0x6a>
        OS_EXIT_CRITICAL();
    929c:	89 81       	ldd	r24, Y+1	; 0x01
    929e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    92a2:	83 e4       	ldi	r24, 0x43	; 67
    92a4:	fc c0       	rjmp	.+504    	; 0x949e <OSTaskDel+0x262>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    92a6:	8a 81       	ldd	r24, Y+2	; 0x02
    92a8:	9b 81       	ldd	r25, Y+3	; 0x03
    92aa:	81 30       	cpi	r24, 0x01	; 1
    92ac:	91 05       	cpc	r25, r1
    92ae:	29 f4       	brne	.+10     	; 0x92ba <OSTaskDel+0x7e>
        OS_EXIT_CRITICAL();
    92b0:	89 81       	ldd	r24, Y+1	; 0x01
    92b2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
    92b6:	8d e3       	ldi	r24, 0x3D	; 61
    92b8:	f2 c0       	rjmp	.+484    	; 0x949e <OSTaskDel+0x262>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    92ba:	8a 81       	ldd	r24, Y+2	; 0x02
    92bc:	9b 81       	ldd	r25, Y+3	; 0x03
    92be:	fc 01       	movw	r30, r24
    92c0:	82 a1       	ldd	r24, Z+34	; 0x22
    92c2:	88 2f       	mov	r24, r24
    92c4:	90 e0       	ldi	r25, 0x00	; 0
    92c6:	2a 81       	ldd	r18, Y+2	; 0x02
    92c8:	3b 81       	ldd	r19, Y+3	; 0x03
    92ca:	f9 01       	movw	r30, r18
    92cc:	22 a1       	ldd	r18, Z+34	; 0x22
    92ce:	22 2f       	mov	r18, r18
    92d0:	30 e0       	ldi	r19, 0x00	; 0
    92d2:	2b 56       	subi	r18, 0x6B	; 107
    92d4:	33 4d       	sbci	r19, 0xD3	; 211
    92d6:	f9 01       	movw	r30, r18
    92d8:	20 81       	ld	r18, Z
    92da:	42 2f       	mov	r20, r18
    92dc:	2a 81       	ldd	r18, Y+2	; 0x02
    92de:	3b 81       	ldd	r19, Y+3	; 0x03
    92e0:	f9 01       	movw	r30, r18
    92e2:	23 a1       	ldd	r18, Z+35	; 0x23
    92e4:	20 95       	com	r18
    92e6:	24 23       	and	r18, r20
    92e8:	8b 56       	subi	r24, 0x6B	; 107
    92ea:	93 4d       	sbci	r25, 0xD3	; 211
    92ec:	fc 01       	movw	r30, r24
    92ee:	20 83       	st	Z, r18
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    92f0:	8a 81       	ldd	r24, Y+2	; 0x02
    92f2:	9b 81       	ldd	r25, Y+3	; 0x03
    92f4:	fc 01       	movw	r30, r24
    92f6:	82 a1       	ldd	r24, Z+34	; 0x22
    92f8:	88 2f       	mov	r24, r24
    92fa:	90 e0       	ldi	r25, 0x00	; 0
    92fc:	8b 56       	subi	r24, 0x6B	; 107
    92fe:	93 4d       	sbci	r25, 0xD3	; 211
    9300:	fc 01       	movw	r30, r24
    9302:	80 81       	ld	r24, Z
    9304:	88 23       	and	r24, r24
    9306:	59 f4       	brne	.+22     	; 0x931e <OSTaskDel+0xe2>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    9308:	8a 81       	ldd	r24, Y+2	; 0x02
    930a:	9b 81       	ldd	r25, Y+3	; 0x03
    930c:	fc 01       	movw	r30, r24
    930e:	84 a1       	ldd	r24, Z+36	; 0x24
    9310:	98 2f       	mov	r25, r24
    9312:	90 95       	com	r25
    9314:	80 91 94 2c 	lds	r24, 0x2C94
    9318:	89 23       	and	r24, r25
    931a:	80 93 94 2c 	sts	0x2C94, r24
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    931e:	8a 81       	ldd	r24, Y+2	; 0x02
    9320:	9b 81       	ldd	r25, Y+3	; 0x03
    9322:	fc 01       	movw	r30, r24
    9324:	82 89       	ldd	r24, Z+18	; 0x12
    9326:	93 89       	ldd	r25, Z+19	; 0x13
    9328:	00 97       	sbiw	r24, 0x00	; 0
    932a:	51 f0       	breq	.+20     	; 0x9340 <OSTaskDel+0x104>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    932c:	8a 81       	ldd	r24, Y+2	; 0x02
    932e:	9b 81       	ldd	r25, Y+3	; 0x03
    9330:	fc 01       	movw	r30, r24
    9332:	22 89       	ldd	r18, Z+18	; 0x12
    9334:	33 89       	ldd	r19, Z+19	; 0x13
    9336:	8a 81       	ldd	r24, Y+2	; 0x02
    9338:	9b 81       	ldd	r25, Y+3	; 0x03
    933a:	b9 01       	movw	r22, r18
    933c:	0e 94 80 23 	call	0x4700	; 0x4700 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    9340:	8a 81       	ldd	r24, Y+2	; 0x02
    9342:	9b 81       	ldd	r25, Y+3	; 0x03
    9344:	fc 01       	movw	r30, r24
    9346:	84 89       	ldd	r24, Z+20	; 0x14
    9348:	95 89       	ldd	r25, Z+21	; 0x15
    934a:	00 97       	sbiw	r24, 0x00	; 0
    934c:	51 f0       	breq	.+20     	; 0x9362 <OSTaskDel+0x126>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    934e:	8a 81       	ldd	r24, Y+2	; 0x02
    9350:	9b 81       	ldd	r25, Y+3	; 0x03
    9352:	fc 01       	movw	r30, r24
    9354:	24 89       	ldd	r18, Z+20	; 0x14
    9356:	35 89       	ldd	r19, Z+21	; 0x15
    9358:	8a 81       	ldd	r24, Y+2	; 0x02
    935a:	9b 81       	ldd	r25, Y+3	; 0x03
    935c:	b9 01       	movw	r22, r18
    935e:	0e 94 cf 23 	call	0x479e	; 0x479e <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    9362:	8a 81       	ldd	r24, Y+2	; 0x02
    9364:	9b 81       	ldd	r25, Y+3	; 0x03
    9366:	fc 01       	movw	r30, r24
    9368:	80 8d       	ldd	r24, Z+24	; 0x18
    936a:	91 8d       	ldd	r25, Z+25	; 0x19
    936c:	8c 83       	std	Y+4, r24	; 0x04
    936e:	9d 83       	std	Y+5, r25	; 0x05
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    9370:	8c 81       	ldd	r24, Y+4	; 0x04
    9372:	9d 81       	ldd	r25, Y+5	; 0x05
    9374:	00 97       	sbiw	r24, 0x00	; 0
    9376:	21 f0       	breq	.+8      	; 0x9380 <OSTaskDel+0x144>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    9378:	8c 81       	ldd	r24, Y+4	; 0x04
    937a:	9d 81       	ldd	r25, Y+5	; 0x05
    937c:	0e 94 c3 31 	call	0x6386	; 0x6386 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    9380:	8a 81       	ldd	r24, Y+2	; 0x02
    9382:	9b 81       	ldd	r25, Y+3	; 0x03
    9384:	fc 01       	movw	r30, r24
    9386:	14 8e       	std	Z+28, r1	; 0x1c
    9388:	15 8e       	std	Z+29, r1	; 0x1d
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    938a:	8a 81       	ldd	r24, Y+2	; 0x02
    938c:	9b 81       	ldd	r25, Y+3	; 0x03
    938e:	fc 01       	movw	r30, r24
    9390:	16 8e       	std	Z+30, r1	; 0x1e
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    9392:	8a 81       	ldd	r24, Y+2	; 0x02
    9394:	9b 81       	ldd	r25, Y+3	; 0x03
    9396:	fc 01       	movw	r30, r24
    9398:	17 8e       	std	Z+31, r1	; 0x1f
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    939a:	80 91 fa 27 	lds	r24, 0x27FA
    939e:	8f 3f       	cpi	r24, 0xFF	; 255
    93a0:	29 f0       	breq	.+10     	; 0x93ac <OSTaskDel+0x170>
        OSLockNesting++;
    93a2:	80 91 fa 27 	lds	r24, 0x27FA
    93a6:	8f 5f       	subi	r24, 0xFF	; 255
    93a8:	80 93 fa 27 	sts	0x27FA, r24
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    93ac:	89 81       	ldd	r24, Y+1	; 0x01
    93ae:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    93b2:	0e 94 ae 21 	call	0x435c	; 0x435c <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    93b6:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    93ba:	89 83       	std	Y+1, r24	; 0x01
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    93bc:	80 91 fa 27 	lds	r24, 0x27FA
    93c0:	88 23       	and	r24, r24
    93c2:	29 f0       	breq	.+10     	; 0x93ce <OSTaskDel+0x192>
        OSLockNesting--;
    93c4:	80 91 fa 27 	lds	r24, 0x27FA
    93c8:	81 50       	subi	r24, 0x01	; 1
    93ca:	80 93 fa 27 	sts	0x27FA, r24
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    93ce:	8a 81       	ldd	r24, Y+2	; 0x02
    93d0:	9b 81       	ldd	r25, Y+3	; 0x03
    93d2:	0e 94 4b 19 	call	0x3296	; 0x3296 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    93d6:	80 91 57 2c 	lds	r24, 0x2C57
    93da:	81 50       	subi	r24, 0x01	; 1
    93dc:	80 93 57 2c 	sts	0x2C57, r24
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    93e0:	8e 81       	ldd	r24, Y+6	; 0x06
    93e2:	88 2f       	mov	r24, r24
    93e4:	90 e0       	ldi	r25, 0x00	; 0
    93e6:	88 0f       	add	r24, r24
    93e8:	99 1f       	adc	r25, r25
    93ea:	8d 58       	subi	r24, 0x8D	; 141
    93ec:	9a 4c       	sbci	r25, 0xCA	; 202
    93ee:	fc 01       	movw	r30, r24
    93f0:	10 82       	st	Z, r1
    93f2:	11 82       	std	Z+1, r1	; 0x01
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    93f4:	8a 81       	ldd	r24, Y+2	; 0x02
    93f6:	9b 81       	ldd	r25, Y+3	; 0x03
    93f8:	fc 01       	movw	r30, r24
    93fa:	80 89       	ldd	r24, Z+16	; 0x10
    93fc:	91 89       	ldd	r25, Z+17	; 0x11
    93fe:	00 97       	sbiw	r24, 0x00	; 0
    9400:	91 f4       	brne	.+36     	; 0x9426 <OSTaskDel+0x1ea>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    9402:	8a 81       	ldd	r24, Y+2	; 0x02
    9404:	9b 81       	ldd	r25, Y+3	; 0x03
    9406:	fc 01       	movw	r30, r24
    9408:	86 85       	ldd	r24, Z+14	; 0x0e
    940a:	97 85       	ldd	r25, Z+15	; 0x0f
    940c:	fc 01       	movw	r30, r24
    940e:	10 8a       	std	Z+16, r1	; 0x10
    9410:	11 8a       	std	Z+17, r1	; 0x11
        OSTCBList                  = ptcb->OSTCBNext;
    9412:	8a 81       	ldd	r24, Y+2	; 0x02
    9414:	9b 81       	ldd	r25, Y+3	; 0x03
    9416:	fc 01       	movw	r30, r24
    9418:	86 85       	ldd	r24, Z+14	; 0x0e
    941a:	97 85       	ldd	r25, Z+15	; 0x0f
    941c:	80 93 df 2a 	sts	0x2ADF, r24
    9420:	90 93 e0 2a 	sts	0x2AE0, r25
    9424:	1a c0       	rjmp	.+52     	; 0x945a <OSTaskDel+0x21e>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    9426:	8a 81       	ldd	r24, Y+2	; 0x02
    9428:	9b 81       	ldd	r25, Y+3	; 0x03
    942a:	fc 01       	movw	r30, r24
    942c:	80 89       	ldd	r24, Z+16	; 0x10
    942e:	91 89       	ldd	r25, Z+17	; 0x11
    9430:	2a 81       	ldd	r18, Y+2	; 0x02
    9432:	3b 81       	ldd	r19, Y+3	; 0x03
    9434:	f9 01       	movw	r30, r18
    9436:	26 85       	ldd	r18, Z+14	; 0x0e
    9438:	37 85       	ldd	r19, Z+15	; 0x0f
    943a:	fc 01       	movw	r30, r24
    943c:	26 87       	std	Z+14, r18	; 0x0e
    943e:	37 87       	std	Z+15, r19	; 0x0f
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    9440:	8a 81       	ldd	r24, Y+2	; 0x02
    9442:	9b 81       	ldd	r25, Y+3	; 0x03
    9444:	fc 01       	movw	r30, r24
    9446:	86 85       	ldd	r24, Z+14	; 0x0e
    9448:	97 85       	ldd	r25, Z+15	; 0x0f
    944a:	2a 81       	ldd	r18, Y+2	; 0x02
    944c:	3b 81       	ldd	r19, Y+3	; 0x03
    944e:	f9 01       	movw	r30, r18
    9450:	20 89       	ldd	r18, Z+16	; 0x10
    9452:	31 89       	ldd	r19, Z+17	; 0x11
    9454:	fc 01       	movw	r30, r24
    9456:	20 8b       	std	Z+16, r18	; 0x10
    9458:	31 8b       	std	Z+17, r19	; 0x11
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    945a:	20 91 54 2c 	lds	r18, 0x2C54
    945e:	30 91 55 2c 	lds	r19, 0x2C55
    9462:	8a 81       	ldd	r24, Y+2	; 0x02
    9464:	9b 81       	ldd	r25, Y+3	; 0x03
    9466:	fc 01       	movw	r30, r24
    9468:	26 87       	std	Z+14, r18	; 0x0e
    946a:	37 87       	std	Z+15, r19	; 0x0f
    OSTCBFreeList     = ptcb;
    946c:	8a 81       	ldd	r24, Y+2	; 0x02
    946e:	9b 81       	ldd	r25, Y+3	; 0x03
    9470:	80 93 54 2c 	sts	0x2C54, r24
    9474:	90 93 55 2c 	sts	0x2C55, r25
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    9478:	8a 81       	ldd	r24, Y+2	; 0x02
    947a:	9b 81       	ldd	r25, Y+3	; 0x03
    947c:	2f e3       	ldi	r18, 0x3F	; 63
    947e:	fc 01       	movw	r30, r24
    9480:	20 af       	std	Z+56, r18	; 0x38
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    9482:	8a 81       	ldd	r24, Y+2	; 0x02
    9484:	9b 81       	ldd	r25, Y+3	; 0x03
    9486:	fc 01       	movw	r30, r24
    9488:	11 ae       	std	Z+57, r1	; 0x39
#endif
    OS_EXIT_CRITICAL();
    948a:	89 81       	ldd	r24, Y+1	; 0x01
    948c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
    9490:	80 91 fd 27 	lds	r24, 0x27FD
    9494:	81 30       	cpi	r24, 0x01	; 1
    9496:	11 f4       	brne	.+4      	; 0x949c <OSTaskDel+0x260>
        OS_Sched();                                     /* Find new highest priority task              */
    9498:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    949c:	80 e0       	ldi	r24, 0x00	; 0
}
    949e:	26 96       	adiw	r28, 0x06	; 6
    94a0:	cd bf       	out	0x3d, r28	; 61
    94a2:	de bf       	out	0x3e, r29	; 62
    94a4:	cf 91       	pop	r28
    94a6:	df 91       	pop	r29
    94a8:	08 95       	ret

000094aa <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    94aa:	df 93       	push	r29
    94ac:	cf 93       	push	r28
    94ae:	cd b7       	in	r28, 0x3d	; 61
    94b0:	de b7       	in	r29, 0x3e	; 62
    94b2:	25 97       	sbiw	r28, 0x05	; 5
    94b4:	cd bf       	out	0x3d, r28	; 61
    94b6:	de bf       	out	0x3e, r29	; 62
    94b8:	8d 83       	std	Y+5, r24	; 0x05
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    94ba:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    94bc:	8d 81       	ldd	r24, Y+5	; 0x05
    94be:	8f 33       	cpi	r24, 0x3F	; 63
    94c0:	11 f4       	brne	.+4      	; 0x94c6 <OSTaskDelReq+0x1c>
        return (OS_ERR_TASK_DEL_IDLE);
    94c2:	8e e3       	ldi	r24, 0x3E	; 62
    94c4:	3d c0       	rjmp	.+122    	; 0x9540 <OSTaskDelReq+0x96>
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    94c6:	8d 81       	ldd	r24, Y+5	; 0x05
    94c8:	8f 3f       	cpi	r24, 0xFF	; 255
    94ca:	79 f4       	brne	.+30     	; 0x94ea <OSTaskDelReq+0x40>
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    94cc:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    94d0:	89 83       	std	Y+1, r24	; 0x01
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    94d2:	80 91 08 2e 	lds	r24, 0x2E08
    94d6:	90 91 09 2e 	lds	r25, 0x2E09
    94da:	fc 01       	movw	r30, r24
    94dc:	85 a1       	ldd	r24, Z+37	; 0x25
    94de:	8a 83       	std	Y+2, r24	; 0x02
        OS_EXIT_CRITICAL();
    94e0:	89 81       	ldd	r24, Y+1	; 0x01
    94e2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (stat);
    94e6:	8a 81       	ldd	r24, Y+2	; 0x02
    94e8:	2b c0       	rjmp	.+86     	; 0x9540 <OSTaskDelReq+0x96>
    }
    OS_ENTER_CRITICAL();
    94ea:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    94ee:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    94f0:	8d 81       	ldd	r24, Y+5	; 0x05
    94f2:	88 2f       	mov	r24, r24
    94f4:	90 e0       	ldi	r25, 0x00	; 0
    94f6:	88 0f       	add	r24, r24
    94f8:	99 1f       	adc	r25, r25
    94fa:	8d 58       	subi	r24, 0x8D	; 141
    94fc:	9a 4c       	sbci	r25, 0xCA	; 202
    94fe:	fc 01       	movw	r30, r24
    9500:	80 81       	ld	r24, Z
    9502:	91 81       	ldd	r25, Z+1	; 0x01
    9504:	8b 83       	std	Y+3, r24	; 0x03
    9506:	9c 83       	std	Y+4, r25	; 0x04
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    9508:	8b 81       	ldd	r24, Y+3	; 0x03
    950a:	9c 81       	ldd	r25, Y+4	; 0x04
    950c:	00 97       	sbiw	r24, 0x00	; 0
    950e:	29 f4       	brne	.+10     	; 0x951a <OSTaskDelReq+0x70>
        OS_EXIT_CRITICAL();
    9510:	89 81       	ldd	r24, Y+1	; 0x01
    9512:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    9516:	83 e4       	ldi	r24, 0x43	; 67
    9518:	13 c0       	rjmp	.+38     	; 0x9540 <OSTaskDelReq+0x96>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    951a:	8b 81       	ldd	r24, Y+3	; 0x03
    951c:	9c 81       	ldd	r25, Y+4	; 0x04
    951e:	81 30       	cpi	r24, 0x01	; 1
    9520:	91 05       	cpc	r25, r1
    9522:	29 f4       	brne	.+10     	; 0x952e <OSTaskDelReq+0x84>
        OS_EXIT_CRITICAL();
    9524:	89 81       	ldd	r24, Y+1	; 0x01
    9526:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
    952a:	8d e3       	ldi	r24, 0x3D	; 61
    952c:	09 c0       	rjmp	.+18     	; 0x9540 <OSTaskDelReq+0x96>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    952e:	8b 81       	ldd	r24, Y+3	; 0x03
    9530:	9c 81       	ldd	r25, Y+4	; 0x04
    9532:	2f e3       	ldi	r18, 0x3F	; 63
    9534:	fc 01       	movw	r30, r24
    9536:	25 a3       	std	Z+37, r18	; 0x25
    OS_EXIT_CRITICAL();
    9538:	89 81       	ldd	r24, Y+1	; 0x01
    953a:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    953e:	80 e0       	ldi	r24, 0x00	; 0
}
    9540:	25 96       	adiw	r28, 0x05	; 5
    9542:	cd bf       	out	0x3d, r28	; 61
    9544:	de bf       	out	0x3e, r29	; 62
    9546:	cf 91       	pop	r28
    9548:	df 91       	pop	r29
    954a:	08 95       	ret

0000954c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    954c:	df 93       	push	r29
    954e:	cf 93       	push	r28
    9550:	cd b7       	in	r28, 0x3d	; 61
    9552:	de b7       	in	r29, 0x3e	; 62
    9554:	29 97       	sbiw	r28, 0x09	; 9
    9556:	cd bf       	out	0x3d, r28	; 61
    9558:	de bf       	out	0x3e, r29	; 62
    955a:	8d 83       	std	Y+5, r24	; 0x05
    955c:	6e 83       	std	Y+6, r22	; 0x06
    955e:	7f 83       	std	Y+7, r23	; 0x07
    9560:	48 87       	std	Y+8, r20	; 0x08
    9562:	59 87       	std	Y+9, r21	; 0x09
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    9564:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    9566:	80 91 07 2e 	lds	r24, 0x2E07
    956a:	88 23       	and	r24, r24
    956c:	39 f0       	breq	.+14     	; 0x957c <OSTaskNameGet+0x30>
        *perr = OS_ERR_NAME_GET_ISR;
    956e:	88 85       	ldd	r24, Y+8	; 0x08
    9570:	99 85       	ldd	r25, Y+9	; 0x09
    9572:	21 e1       	ldi	r18, 0x11	; 17
    9574:	fc 01       	movw	r30, r24
    9576:	20 83       	st	Z, r18
        return (0);
    9578:	80 e0       	ldi	r24, 0x00	; 0
    957a:	49 c0       	rjmp	.+146    	; 0x960e <OSTaskNameGet+0xc2>
    }
    OS_ENTER_CRITICAL();
    957c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9580:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    9582:	8d 81       	ldd	r24, Y+5	; 0x05
    9584:	8f 3f       	cpi	r24, 0xFF	; 255
    9586:	39 f4       	brne	.+14     	; 0x9596 <OSTaskNameGet+0x4a>
        prio = OSTCBCur->OSTCBPrio;
    9588:	80 91 08 2e 	lds	r24, 0x2E08
    958c:	90 91 09 2e 	lds	r25, 0x2E09
    9590:	fc 01       	movw	r30, r24
    9592:	80 a1       	ldd	r24, Z+32	; 0x20
    9594:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    9596:	8d 81       	ldd	r24, Y+5	; 0x05
    9598:	88 2f       	mov	r24, r24
    959a:	90 e0       	ldi	r25, 0x00	; 0
    959c:	88 0f       	add	r24, r24
    959e:	99 1f       	adc	r25, r25
    95a0:	8d 58       	subi	r24, 0x8D	; 141
    95a2:	9a 4c       	sbci	r25, 0xCA	; 202
    95a4:	fc 01       	movw	r30, r24
    95a6:	80 81       	ld	r24, Z
    95a8:	91 81       	ldd	r25, Z+1	; 0x01
    95aa:	8a 83       	std	Y+2, r24	; 0x02
    95ac:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    95ae:	8a 81       	ldd	r24, Y+2	; 0x02
    95b0:	9b 81       	ldd	r25, Y+3	; 0x03
    95b2:	00 97       	sbiw	r24, 0x00	; 0
    95b4:	51 f4       	brne	.+20     	; 0x95ca <OSTaskNameGet+0x7e>
        OS_EXIT_CRITICAL();                              /* No                                         */
    95b6:	89 81       	ldd	r24, Y+1	; 0x01
    95b8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    95bc:	88 85       	ldd	r24, Y+8	; 0x08
    95be:	99 85       	ldd	r25, Y+9	; 0x09
    95c0:	23 e4       	ldi	r18, 0x43	; 67
    95c2:	fc 01       	movw	r30, r24
    95c4:	20 83       	st	Z, r18
        return (0);
    95c6:	80 e0       	ldi	r24, 0x00	; 0
    95c8:	22 c0       	rjmp	.+68     	; 0x960e <OSTaskNameGet+0xc2>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    95ca:	8a 81       	ldd	r24, Y+2	; 0x02
    95cc:	9b 81       	ldd	r25, Y+3	; 0x03
    95ce:	81 30       	cpi	r24, 0x01	; 1
    95d0:	91 05       	cpc	r25, r1
    95d2:	51 f4       	brne	.+20     	; 0x95e8 <OSTaskNameGet+0x9c>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
    95d4:	89 81       	ldd	r24, Y+1	; 0x01
    95d6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    95da:	88 85       	ldd	r24, Y+8	; 0x08
    95dc:	99 85       	ldd	r25, Y+9	; 0x09
    95de:	23 e4       	ldi	r18, 0x43	; 67
    95e0:	fc 01       	movw	r30, r24
    95e2:	20 83       	st	Z, r18
        return (0);
    95e4:	80 e0       	ldi	r24, 0x00	; 0
    95e6:	13 c0       	rjmp	.+38     	; 0x960e <OSTaskNameGet+0xc2>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    95e8:	8a 81       	ldd	r24, Y+2	; 0x02
    95ea:	9b 81       	ldd	r25, Y+3	; 0x03
    95ec:	9c 01       	movw	r18, r24
    95ee:	28 5c       	subi	r18, 0xC8	; 200
    95f0:	3f 4f       	sbci	r19, 0xFF	; 255
    95f2:	8e 81       	ldd	r24, Y+6	; 0x06
    95f4:	9f 81       	ldd	r25, Y+7	; 0x07
    95f6:	b9 01       	movw	r22, r18
    95f8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    95fc:	8c 83       	std	Y+4, r24	; 0x04
    OS_EXIT_CRITICAL();
    95fe:	89 81       	ldd	r24, Y+1	; 0x01
    9600:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    9604:	88 85       	ldd	r24, Y+8	; 0x08
    9606:	99 85       	ldd	r25, Y+9	; 0x09
    9608:	fc 01       	movw	r30, r24
    960a:	10 82       	st	Z, r1
    return (len);
    960c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    960e:	29 96       	adiw	r28, 0x09	; 9
    9610:	cd bf       	out	0x3d, r28	; 61
    9612:	de bf       	out	0x3e, r29	; 62
    9614:	cf 91       	pop	r28
    9616:	df 91       	pop	r29
    9618:	08 95       	ret

0000961a <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    961a:	df 93       	push	r29
    961c:	cf 93       	push	r28
    961e:	cd b7       	in	r28, 0x3d	; 61
    9620:	de b7       	in	r29, 0x3e	; 62
    9622:	29 97       	sbiw	r28, 0x09	; 9
    9624:	cd bf       	out	0x3d, r28	; 61
    9626:	de bf       	out	0x3e, r29	; 62
    9628:	8d 83       	std	Y+5, r24	; 0x05
    962a:	6e 83       	std	Y+6, r22	; 0x06
    962c:	7f 83       	std	Y+7, r23	; 0x07
    962e:	48 87       	std	Y+8, r20	; 0x08
    9630:	59 87       	std	Y+9, r21	; 0x09
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9632:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    9634:	80 91 07 2e 	lds	r24, 0x2E07
    9638:	88 23       	and	r24, r24
    963a:	31 f0       	breq	.+12     	; 0x9648 <OSTaskNameSet+0x2e>
        *perr = OS_ERR_NAME_SET_ISR;
    963c:	88 85       	ldd	r24, Y+8	; 0x08
    963e:	99 85       	ldd	r25, Y+9	; 0x09
    9640:	22 e1       	ldi	r18, 0x12	; 18
    9642:	fc 01       	movw	r30, r24
    9644:	20 83       	st	Z, r18
        return;
    9646:	54 c0       	rjmp	.+168    	; 0x96f0 <OSTaskNameSet+0xd6>
    }
    OS_ENTER_CRITICAL();
    9648:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    964c:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    964e:	8d 81       	ldd	r24, Y+5	; 0x05
    9650:	8f 3f       	cpi	r24, 0xFF	; 255
    9652:	39 f4       	brne	.+14     	; 0x9662 <OSTaskNameSet+0x48>
        prio = OSTCBCur->OSTCBPrio;
    9654:	80 91 08 2e 	lds	r24, 0x2E08
    9658:	90 91 09 2e 	lds	r25, 0x2E09
    965c:	fc 01       	movw	r30, r24
    965e:	80 a1       	ldd	r24, Z+32	; 0x20
    9660:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    9662:	8d 81       	ldd	r24, Y+5	; 0x05
    9664:	88 2f       	mov	r24, r24
    9666:	90 e0       	ldi	r25, 0x00	; 0
    9668:	88 0f       	add	r24, r24
    966a:	99 1f       	adc	r25, r25
    966c:	8d 58       	subi	r24, 0x8D	; 141
    966e:	9a 4c       	sbci	r25, 0xCA	; 202
    9670:	fc 01       	movw	r30, r24
    9672:	80 81       	ld	r24, Z
    9674:	91 81       	ldd	r25, Z+1	; 0x01
    9676:	8a 83       	std	Y+2, r24	; 0x02
    9678:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    967a:	8a 81       	ldd	r24, Y+2	; 0x02
    967c:	9b 81       	ldd	r25, Y+3	; 0x03
    967e:	00 97       	sbiw	r24, 0x00	; 0
    9680:	49 f4       	brne	.+18     	; 0x9694 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
    9682:	89 81       	ldd	r24, Y+1	; 0x01
    9684:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    9688:	88 85       	ldd	r24, Y+8	; 0x08
    968a:	99 85       	ldd	r25, Y+9	; 0x09
    968c:	23 e4       	ldi	r18, 0x43	; 67
    968e:	fc 01       	movw	r30, r24
    9690:	20 83       	st	Z, r18
        return;
    9692:	2e c0       	rjmp	.+92     	; 0x96f0 <OSTaskNameSet+0xd6>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    9694:	8a 81       	ldd	r24, Y+2	; 0x02
    9696:	9b 81       	ldd	r25, Y+3	; 0x03
    9698:	81 30       	cpi	r24, 0x01	; 1
    969a:	91 05       	cpc	r25, r1
    969c:	49 f4       	brne	.+18     	; 0x96b0 <OSTaskNameSet+0x96>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
    969e:	89 81       	ldd	r24, Y+1	; 0x01
    96a0:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    96a4:	88 85       	ldd	r24, Y+8	; 0x08
    96a6:	99 85       	ldd	r25, Y+9	; 0x09
    96a8:	23 e4       	ldi	r18, 0x43	; 67
    96aa:	fc 01       	movw	r30, r24
    96ac:	20 83       	st	Z, r18
        return;
    96ae:	20 c0       	rjmp	.+64     	; 0x96f0 <OSTaskNameSet+0xd6>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    96b0:	8e 81       	ldd	r24, Y+6	; 0x06
    96b2:	9f 81       	ldd	r25, Y+7	; 0x07
    96b4:	0e 94 28 27 	call	0x4e50	; 0x4e50 <OS_StrLen>
    96b8:	8c 83       	std	Y+4, r24	; 0x04
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    96ba:	8c 81       	ldd	r24, Y+4	; 0x04
    96bc:	80 31       	cpi	r24, 0x10	; 16
    96be:	48 f0       	brcs	.+18     	; 0x96d2 <OSTaskNameSet+0xb8>
        OS_EXIT_CRITICAL();
    96c0:	89 81       	ldd	r24, Y+1	; 0x01
    96c2:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    96c6:	88 85       	ldd	r24, Y+8	; 0x08
    96c8:	99 85       	ldd	r25, Y+9	; 0x09
    96ca:	21 e4       	ldi	r18, 0x41	; 65
    96cc:	fc 01       	movw	r30, r24
    96ce:	20 83       	st	Z, r18
        return;
    96d0:	0f c0       	rjmp	.+30     	; 0x96f0 <OSTaskNameSet+0xd6>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    96d2:	8a 81       	ldd	r24, Y+2	; 0x02
    96d4:	9b 81       	ldd	r25, Y+3	; 0x03
    96d6:	c8 96       	adiw	r24, 0x38	; 56
    96d8:	2e 81       	ldd	r18, Y+6	; 0x06
    96da:	3f 81       	ldd	r19, Y+7	; 0x07
    96dc:	b9 01       	movw	r22, r18
    96de:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    OS_EXIT_CRITICAL();
    96e2:	89 81       	ldd	r24, Y+1	; 0x01
    96e4:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    96e8:	88 85       	ldd	r24, Y+8	; 0x08
    96ea:	99 85       	ldd	r25, Y+9	; 0x09
    96ec:	fc 01       	movw	r30, r24
    96ee:	10 82       	st	Z, r1
}
    96f0:	29 96       	adiw	r28, 0x09	; 9
    96f2:	cd bf       	out	0x3d, r28	; 61
    96f4:	de bf       	out	0x3e, r29	; 62
    96f6:	cf 91       	pop	r28
    96f8:	df 91       	pop	r29
    96fa:	08 95       	ret

000096fc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    96fc:	df 93       	push	r29
    96fe:	cf 93       	push	r28
    9700:	00 d0       	rcall	.+0      	; 0x9702 <OSTaskResume+0x6>
    9702:	0f 92       	push	r0
    9704:	cd b7       	in	r28, 0x3d	; 61
    9706:	de b7       	in	r29, 0x3e	; 62
    9708:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    970a:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    970c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9710:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    9712:	8c 81       	ldd	r24, Y+4	; 0x04
    9714:	88 2f       	mov	r24, r24
    9716:	90 e0       	ldi	r25, 0x00	; 0
    9718:	88 0f       	add	r24, r24
    971a:	99 1f       	adc	r25, r25
    971c:	8d 58       	subi	r24, 0x8D	; 141
    971e:	9a 4c       	sbci	r25, 0xCA	; 202
    9720:	fc 01       	movw	r30, r24
    9722:	80 81       	ld	r24, Z
    9724:	91 81       	ldd	r25, Z+1	; 0x01
    9726:	8a 83       	std	Y+2, r24	; 0x02
    9728:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    972a:	8a 81       	ldd	r24, Y+2	; 0x02
    972c:	9b 81       	ldd	r25, Y+3	; 0x03
    972e:	00 97       	sbiw	r24, 0x00	; 0
    9730:	29 f4       	brne	.+10     	; 0x973c <OSTaskResume+0x40>
        OS_EXIT_CRITICAL();
    9732:	89 81       	ldd	r24, Y+1	; 0x01
    9734:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
    9738:	86 e4       	ldi	r24, 0x46	; 70
    973a:	65 c0       	rjmp	.+202    	; 0x9806 <OSTaskResume+0x10a>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    973c:	8a 81       	ldd	r24, Y+2	; 0x02
    973e:	9b 81       	ldd	r25, Y+3	; 0x03
    9740:	81 30       	cpi	r24, 0x01	; 1
    9742:	91 05       	cpc	r25, r1
    9744:	29 f4       	brne	.+10     	; 0x9750 <OSTaskResume+0x54>
        OS_EXIT_CRITICAL();
    9746:	89 81       	ldd	r24, Y+1	; 0x01
    9748:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    974c:	83 e4       	ldi	r24, 0x43	; 67
    974e:	5b c0       	rjmp	.+182    	; 0x9806 <OSTaskResume+0x10a>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    9750:	8a 81       	ldd	r24, Y+2	; 0x02
    9752:	9b 81       	ldd	r25, Y+3	; 0x03
    9754:	fc 01       	movw	r30, r24
    9756:	86 8d       	ldd	r24, Z+30	; 0x1e
    9758:	88 2f       	mov	r24, r24
    975a:	90 e0       	ldi	r25, 0x00	; 0
    975c:	88 70       	andi	r24, 0x08	; 8
    975e:	90 70       	andi	r25, 0x00	; 0
    9760:	00 97       	sbiw	r24, 0x00	; 0
    9762:	09 f4       	brne	.+2      	; 0x9766 <OSTaskResume+0x6a>
    9764:	4c c0       	rjmp	.+152    	; 0x97fe <OSTaskResume+0x102>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    9766:	8a 81       	ldd	r24, Y+2	; 0x02
    9768:	9b 81       	ldd	r25, Y+3	; 0x03
    976a:	fc 01       	movw	r30, r24
    976c:	86 8d       	ldd	r24, Z+30	; 0x1e
    976e:	28 2f       	mov	r18, r24
    9770:	27 7f       	andi	r18, 0xF7	; 247
    9772:	8a 81       	ldd	r24, Y+2	; 0x02
    9774:	9b 81       	ldd	r25, Y+3	; 0x03
    9776:	fc 01       	movw	r30, r24
    9778:	26 8f       	std	Z+30, r18	; 0x1e
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    977a:	8a 81       	ldd	r24, Y+2	; 0x02
    977c:	9b 81       	ldd	r25, Y+3	; 0x03
    977e:	fc 01       	movw	r30, r24
    9780:	86 8d       	ldd	r24, Z+30	; 0x1e
    9782:	88 23       	and	r24, r24
    9784:	b9 f5       	brne	.+110    	; 0x97f4 <OSTaskResume+0xf8>
            if (ptcb->OSTCBDly == 0) {
    9786:	8a 81       	ldd	r24, Y+2	; 0x02
    9788:	9b 81       	ldd	r25, Y+3	; 0x03
    978a:	fc 01       	movw	r30, r24
    978c:	84 8d       	ldd	r24, Z+28	; 0x1c
    978e:	95 8d       	ldd	r25, Z+29	; 0x1d
    9790:	00 97       	sbiw	r24, 0x00	; 0
    9792:	61 f5       	brne	.+88     	; 0x97ec <OSTaskResume+0xf0>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    9794:	8a 81       	ldd	r24, Y+2	; 0x02
    9796:	9b 81       	ldd	r25, Y+3	; 0x03
    9798:	fc 01       	movw	r30, r24
    979a:	94 a1       	ldd	r25, Z+36	; 0x24
    979c:	80 91 94 2c 	lds	r24, 0x2C94
    97a0:	89 2b       	or	r24, r25
    97a2:	80 93 94 2c 	sts	0x2C94, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    97a6:	8a 81       	ldd	r24, Y+2	; 0x02
    97a8:	9b 81       	ldd	r25, Y+3	; 0x03
    97aa:	fc 01       	movw	r30, r24
    97ac:	82 a1       	ldd	r24, Z+34	; 0x22
    97ae:	88 2f       	mov	r24, r24
    97b0:	90 e0       	ldi	r25, 0x00	; 0
    97b2:	2a 81       	ldd	r18, Y+2	; 0x02
    97b4:	3b 81       	ldd	r19, Y+3	; 0x03
    97b6:	f9 01       	movw	r30, r18
    97b8:	22 a1       	ldd	r18, Z+34	; 0x22
    97ba:	22 2f       	mov	r18, r18
    97bc:	30 e0       	ldi	r19, 0x00	; 0
    97be:	2b 56       	subi	r18, 0x6B	; 107
    97c0:	33 4d       	sbci	r19, 0xD3	; 211
    97c2:	f9 01       	movw	r30, r18
    97c4:	40 81       	ld	r20, Z
    97c6:	2a 81       	ldd	r18, Y+2	; 0x02
    97c8:	3b 81       	ldd	r19, Y+3	; 0x03
    97ca:	f9 01       	movw	r30, r18
    97cc:	23 a1       	ldd	r18, Z+35	; 0x23
    97ce:	24 2b       	or	r18, r20
    97d0:	8b 56       	subi	r24, 0x6B	; 107
    97d2:	93 4d       	sbci	r25, 0xD3	; 211
    97d4:	fc 01       	movw	r30, r24
    97d6:	20 83       	st	Z, r18
                OS_EXIT_CRITICAL();
    97d8:	89 81       	ldd	r24, Y+1	; 0x01
    97da:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
    97de:	80 91 fd 27 	lds	r24, 0x27FD
    97e2:	81 30       	cpi	r24, 0x01	; 1
    97e4:	51 f4       	brne	.+20     	; 0x97fa <OSTaskResume+0xfe>
                    OS_Sched();                               /* Find new highest priority task        */
    97e6:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    97ea:	07 c0       	rjmp	.+14     	; 0x97fa <OSTaskResume+0xfe>
                }
            } else {
                OS_EXIT_CRITICAL();
    97ec:	89 81       	ldd	r24, Y+1	; 0x01
    97ee:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    97f2:	03 c0       	rjmp	.+6      	; 0x97fa <OSTaskResume+0xfe>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
    97f4:	89 81       	ldd	r24, Y+1	; 0x01
    97f6:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
    97fa:	80 e0       	ldi	r24, 0x00	; 0
    97fc:	04 c0       	rjmp	.+8      	; 0x9806 <OSTaskResume+0x10a>
    }
    OS_EXIT_CRITICAL();
    97fe:	89 81       	ldd	r24, Y+1	; 0x01
    9800:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
    9804:	84 e4       	ldi	r24, 0x44	; 68
}
    9806:	24 96       	adiw	r28, 0x04	; 4
    9808:	cd bf       	out	0x3d, r28	; 61
    980a:	de bf       	out	0x3e, r29	; 62
    980c:	cf 91       	pop	r28
    980e:	df 91       	pop	r29
    9810:	08 95       	ret

00009812 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    9812:	ef 92       	push	r14
    9814:	ff 92       	push	r15
    9816:	0f 93       	push	r16
    9818:	1f 93       	push	r17
    981a:	df 93       	push	r29
    981c:	cf 93       	push	r28
    981e:	cd b7       	in	r28, 0x3d	; 61
    9820:	de b7       	in	r29, 0x3e	; 62
    9822:	60 97       	sbiw	r28, 0x10	; 16
    9824:	cd bf       	out	0x3d, r28	; 61
    9826:	de bf       	out	0x3e, r29	; 62
    9828:	8e 87       	std	Y+14, r24	; 0x0e
    982a:	6f 87       	std	Y+15, r22	; 0x0f
    982c:	78 8b       	std	Y+16, r23	; 0x10
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    982e:	1f 82       	std	Y+7, r1	; 0x07
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    9830:	8f 85       	ldd	r24, Y+15	; 0x0f
    9832:	98 89       	ldd	r25, Y+16	; 0x10
    9834:	fc 01       	movw	r30, r24
    9836:	10 82       	st	Z, r1
    9838:	11 82       	std	Z+1, r1	; 0x01
    983a:	12 82       	std	Z+2, r1	; 0x02
    983c:	13 82       	std	Z+3, r1	; 0x03
    p_stk_data->OSUsed = 0;
    983e:	8f 85       	ldd	r24, Y+15	; 0x0f
    9840:	98 89       	ldd	r25, Y+16	; 0x10
    9842:	fc 01       	movw	r30, r24
    9844:	14 82       	std	Z+4, r1	; 0x04
    9846:	15 82       	std	Z+5, r1	; 0x05
    9848:	16 82       	std	Z+6, r1	; 0x06
    984a:	17 82       	std	Z+7, r1	; 0x07
    OS_ENTER_CRITICAL();
    984c:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9850:	8f 83       	std	Y+7, r24	; 0x07
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    9852:	8e 85       	ldd	r24, Y+14	; 0x0e
    9854:	8f 3f       	cpi	r24, 0xFF	; 255
    9856:	39 f4       	brne	.+14     	; 0x9866 <OSTaskStkChk+0x54>
        prio = OSTCBCur->OSTCBPrio;
    9858:	80 91 08 2e 	lds	r24, 0x2E08
    985c:	90 91 09 2e 	lds	r25, 0x2E09
    9860:	fc 01       	movw	r30, r24
    9862:	80 a1       	ldd	r24, Z+32	; 0x20
    9864:	8e 87       	std	Y+14, r24	; 0x0e
    }
    ptcb = OSTCBPrioTbl[prio];
    9866:	8e 85       	ldd	r24, Y+14	; 0x0e
    9868:	88 2f       	mov	r24, r24
    986a:	90 e0       	ldi	r25, 0x00	; 0
    986c:	88 0f       	add	r24, r24
    986e:	99 1f       	adc	r25, r25
    9870:	8d 58       	subi	r24, 0x8D	; 141
    9872:	9a 4c       	sbci	r25, 0xCA	; 202
    9874:	fc 01       	movw	r30, r24
    9876:	80 81       	ld	r24, Z
    9878:	91 81       	ldd	r25, Z+1	; 0x01
    987a:	88 87       	std	Y+8, r24	; 0x08
    987c:	99 87       	std	Y+9, r25	; 0x09
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    987e:	88 85       	ldd	r24, Y+8	; 0x08
    9880:	99 85       	ldd	r25, Y+9	; 0x09
    9882:	00 97       	sbiw	r24, 0x00	; 0
    9884:	29 f4       	brne	.+10     	; 0x9890 <OSTaskStkChk+0x7e>
        OS_EXIT_CRITICAL();
    9886:	8f 81       	ldd	r24, Y+7	; 0x07
    9888:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    988c:	83 e4       	ldi	r24, 0x43	; 67
    988e:	6f c0       	rjmp	.+222    	; 0x996e <OSTaskStkChk+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9890:	88 85       	ldd	r24, Y+8	; 0x08
    9892:	99 85       	ldd	r25, Y+9	; 0x09
    9894:	81 30       	cpi	r24, 0x01	; 1
    9896:	91 05       	cpc	r25, r1
    9898:	29 f4       	brne	.+10     	; 0x98a4 <OSTaskStkChk+0x92>
        OS_EXIT_CRITICAL();
    989a:	8f 81       	ldd	r24, Y+7	; 0x07
    989c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    98a0:	83 e4       	ldi	r24, 0x43	; 67
    98a2:	65 c0       	rjmp	.+202    	; 0x996e <OSTaskStkChk+0x15c>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    98a4:	88 85       	ldd	r24, Y+8	; 0x08
    98a6:	99 85       	ldd	r25, Y+9	; 0x09
    98a8:	fc 01       	movw	r30, r24
    98aa:	82 85       	ldd	r24, Z+10	; 0x0a
    98ac:	93 85       	ldd	r25, Z+11	; 0x0b
    98ae:	81 70       	andi	r24, 0x01	; 1
    98b0:	90 70       	andi	r25, 0x00	; 0
    98b2:	00 97       	sbiw	r24, 0x00	; 0
    98b4:	29 f4       	brne	.+10     	; 0x98c0 <OSTaskStkChk+0xae>
        OS_EXIT_CRITICAL();
    98b6:	8f 81       	ldd	r24, Y+7	; 0x07
    98b8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
    98bc:	85 e4       	ldi	r24, 0x45	; 69
    98be:	57 c0       	rjmp	.+174    	; 0x996e <OSTaskStkChk+0x15c>
    }
    nfree = 0;
    98c0:	1b 82       	std	Y+3, r1	; 0x03
    98c2:	1c 82       	std	Y+4, r1	; 0x04
    98c4:	1d 82       	std	Y+5, r1	; 0x05
    98c6:	1e 82       	std	Y+6, r1	; 0x06
    size  = ptcb->OSTCBStkSize;
    98c8:	88 85       	ldd	r24, Y+8	; 0x08
    98ca:	99 85       	ldd	r25, Y+9	; 0x09
    98cc:	fc 01       	movw	r30, r24
    98ce:	86 81       	ldd	r24, Z+6	; 0x06
    98d0:	97 81       	ldd	r25, Z+7	; 0x07
    98d2:	a0 85       	ldd	r26, Z+8	; 0x08
    98d4:	b1 85       	ldd	r27, Z+9	; 0x09
    98d6:	8a 87       	std	Y+10, r24	; 0x0a
    98d8:	9b 87       	std	Y+11, r25	; 0x0b
    98da:	ac 87       	std	Y+12, r26	; 0x0c
    98dc:	bd 87       	std	Y+13, r27	; 0x0d
    pchk  = ptcb->OSTCBStkBottom;
    98de:	88 85       	ldd	r24, Y+8	; 0x08
    98e0:	99 85       	ldd	r25, Y+9	; 0x09
    98e2:	fc 01       	movw	r30, r24
    98e4:	84 81       	ldd	r24, Z+4	; 0x04
    98e6:	95 81       	ldd	r25, Z+5	; 0x05
    98e8:	89 83       	std	Y+1, r24	; 0x01
    98ea:	9a 83       	std	Y+2, r25	; 0x02
    OS_EXIT_CRITICAL();
    98ec:	8f 81       	ldd	r24, Y+7	; 0x07
    98ee:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    98f2:	0b c0       	rjmp	.+22     	; 0x990a <OSTaskStkChk+0xf8>
        nfree++;
    98f4:	8b 81       	ldd	r24, Y+3	; 0x03
    98f6:	9c 81       	ldd	r25, Y+4	; 0x04
    98f8:	ad 81       	ldd	r26, Y+5	; 0x05
    98fa:	be 81       	ldd	r27, Y+6	; 0x06
    98fc:	01 96       	adiw	r24, 0x01	; 1
    98fe:	a1 1d       	adc	r26, r1
    9900:	b1 1d       	adc	r27, r1
    9902:	8b 83       	std	Y+3, r24	; 0x03
    9904:	9c 83       	std	Y+4, r25	; 0x04
    9906:	ad 83       	std	Y+5, r26	; 0x05
    9908:	be 83       	std	Y+6, r27	; 0x06
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    990a:	89 81       	ldd	r24, Y+1	; 0x01
    990c:	9a 81       	ldd	r25, Y+2	; 0x02
    990e:	fc 01       	movw	r30, r24
    9910:	80 81       	ld	r24, Z
    9912:	21 e0       	ldi	r18, 0x01	; 1
    9914:	88 23       	and	r24, r24
    9916:	09 f0       	breq	.+2      	; 0x991a <OSTaskStkChk+0x108>
    9918:	20 e0       	ldi	r18, 0x00	; 0
    991a:	89 81       	ldd	r24, Y+1	; 0x01
    991c:	9a 81       	ldd	r25, Y+2	; 0x02
    991e:	01 96       	adiw	r24, 0x01	; 1
    9920:	89 83       	std	Y+1, r24	; 0x01
    9922:	9a 83       	std	Y+2, r25	; 0x02
    9924:	22 23       	and	r18, r18
    9926:	31 f7       	brne	.-52     	; 0x98f4 <OSTaskStkChk+0xe2>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    9928:	2f 85       	ldd	r18, Y+15	; 0x0f
    992a:	38 89       	ldd	r19, Y+16	; 0x10
    992c:	8b 81       	ldd	r24, Y+3	; 0x03
    992e:	9c 81       	ldd	r25, Y+4	; 0x04
    9930:	ad 81       	ldd	r26, Y+5	; 0x05
    9932:	be 81       	ldd	r27, Y+6	; 0x06
    9934:	f9 01       	movw	r30, r18
    9936:	80 83       	st	Z, r24
    9938:	91 83       	std	Z+1, r25	; 0x01
    993a:	a2 83       	std	Z+2, r26	; 0x02
    993c:	b3 83       	std	Z+3, r27	; 0x03
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    993e:	2a 85       	ldd	r18, Y+10	; 0x0a
    9940:	3b 85       	ldd	r19, Y+11	; 0x0b
    9942:	4c 85       	ldd	r20, Y+12	; 0x0c
    9944:	5d 85       	ldd	r21, Y+13	; 0x0d
    9946:	8b 81       	ldd	r24, Y+3	; 0x03
    9948:	9c 81       	ldd	r25, Y+4	; 0x04
    994a:	ad 81       	ldd	r26, Y+5	; 0x05
    994c:	be 81       	ldd	r27, Y+6	; 0x06
    994e:	79 01       	movw	r14, r18
    9950:	8a 01       	movw	r16, r20
    9952:	e8 1a       	sub	r14, r24
    9954:	f9 0a       	sbc	r15, r25
    9956:	0a 0b       	sbc	r16, r26
    9958:	1b 0b       	sbc	r17, r27
    995a:	d8 01       	movw	r26, r16
    995c:	c7 01       	movw	r24, r14
    995e:	2f 85       	ldd	r18, Y+15	; 0x0f
    9960:	38 89       	ldd	r19, Y+16	; 0x10
    9962:	f9 01       	movw	r30, r18
    9964:	84 83       	std	Z+4, r24	; 0x04
    9966:	95 83       	std	Z+5, r25	; 0x05
    9968:	a6 83       	std	Z+6, r26	; 0x06
    996a:	b7 83       	std	Z+7, r27	; 0x07
    return (OS_ERR_NONE);
    996c:	80 e0       	ldi	r24, 0x00	; 0
}
    996e:	60 96       	adiw	r28, 0x10	; 16
    9970:	cd bf       	out	0x3d, r28	; 61
    9972:	de bf       	out	0x3e, r29	; 62
    9974:	cf 91       	pop	r28
    9976:	df 91       	pop	r29
    9978:	1f 91       	pop	r17
    997a:	0f 91       	pop	r16
    997c:	ff 90       	pop	r15
    997e:	ef 90       	pop	r14
    9980:	08 95       	ret

00009982 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    9982:	df 93       	push	r29
    9984:	cf 93       	push	r28
    9986:	00 d0       	rcall	.+0      	; 0x9988 <OSTaskSuspend+0x6>
    9988:	00 d0       	rcall	.+0      	; 0x998a <OSTaskSuspend+0x8>
    998a:	cd b7       	in	r28, 0x3d	; 61
    998c:	de b7       	in	r29, 0x3e	; 62
    998e:	8e 83       	std	Y+6, r24	; 0x06
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9990:	1a 82       	std	Y+2, r1	; 0x02
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    9992:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9996:	8a 83       	std	Y+2, r24	; 0x02
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    9998:	8e 81       	ldd	r24, Y+6	; 0x06
    999a:	8f 3f       	cpi	r24, 0xFF	; 255
    999c:	51 f4       	brne	.+20     	; 0x99b2 <OSTaskSuspend+0x30>
        prio = OSTCBCur->OSTCBPrio;
    999e:	80 91 08 2e 	lds	r24, 0x2E08
    99a2:	90 91 09 2e 	lds	r25, 0x2E09
    99a6:	fc 01       	movw	r30, r24
    99a8:	80 a1       	ldd	r24, Z+32	; 0x20
    99aa:	8e 83       	std	Y+6, r24	; 0x06
        self = OS_TRUE;
    99ac:	81 e0       	ldi	r24, 0x01	; 1
    99ae:	89 83       	std	Y+1, r24	; 0x01
    99b0:	0d c0       	rjmp	.+26     	; 0x99cc <OSTaskSuspend+0x4a>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    99b2:	80 91 08 2e 	lds	r24, 0x2E08
    99b6:	90 91 09 2e 	lds	r25, 0x2E09
    99ba:	fc 01       	movw	r30, r24
    99bc:	90 a1       	ldd	r25, Z+32	; 0x20
    99be:	8e 81       	ldd	r24, Y+6	; 0x06
    99c0:	98 17       	cp	r25, r24
    99c2:	19 f4       	brne	.+6      	; 0x99ca <OSTaskSuspend+0x48>
        self = OS_TRUE;
    99c4:	81 e0       	ldi	r24, 0x01	; 1
    99c6:	89 83       	std	Y+1, r24	; 0x01
    99c8:	01 c0       	rjmp	.+2      	; 0x99cc <OSTaskSuspend+0x4a>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    99ca:	19 82       	std	Y+1, r1	; 0x01
    }
    ptcb = OSTCBPrioTbl[prio];
    99cc:	8e 81       	ldd	r24, Y+6	; 0x06
    99ce:	88 2f       	mov	r24, r24
    99d0:	90 e0       	ldi	r25, 0x00	; 0
    99d2:	88 0f       	add	r24, r24
    99d4:	99 1f       	adc	r25, r25
    99d6:	8d 58       	subi	r24, 0x8D	; 141
    99d8:	9a 4c       	sbci	r25, 0xCA	; 202
    99da:	fc 01       	movw	r30, r24
    99dc:	80 81       	ld	r24, Z
    99de:	91 81       	ldd	r25, Z+1	; 0x01
    99e0:	8b 83       	std	Y+3, r24	; 0x03
    99e2:	9c 83       	std	Y+4, r25	; 0x04
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    99e4:	8b 81       	ldd	r24, Y+3	; 0x03
    99e6:	9c 81       	ldd	r25, Y+4	; 0x04
    99e8:	00 97       	sbiw	r24, 0x00	; 0
    99ea:	29 f4       	brne	.+10     	; 0x99f6 <OSTaskSuspend+0x74>
        OS_EXIT_CRITICAL();
    99ec:	8a 81       	ldd	r24, Y+2	; 0x02
    99ee:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    99f2:	88 e4       	ldi	r24, 0x48	; 72
    99f4:	4b c0       	rjmp	.+150    	; 0x9a8c <OSTaskSuspend+0x10a>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    99f6:	8b 81       	ldd	r24, Y+3	; 0x03
    99f8:	9c 81       	ldd	r25, Y+4	; 0x04
    99fa:	81 30       	cpi	r24, 0x01	; 1
    99fc:	91 05       	cpc	r25, r1
    99fe:	29 f4       	brne	.+10     	; 0x9a0a <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
    9a00:	8a 81       	ldd	r24, Y+2	; 0x02
    9a02:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    9a06:	83 e4       	ldi	r24, 0x43	; 67
    9a08:	41 c0       	rjmp	.+130    	; 0x9a8c <OSTaskSuspend+0x10a>
    }
    y            = ptcb->OSTCBY;
    9a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    9a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    9a0e:	fc 01       	movw	r30, r24
    9a10:	82 a1       	ldd	r24, Z+34	; 0x22
    9a12:	8d 83       	std	Y+5, r24	; 0x05
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    9a14:	8d 81       	ldd	r24, Y+5	; 0x05
    9a16:	88 2f       	mov	r24, r24
    9a18:	90 e0       	ldi	r25, 0x00	; 0
    9a1a:	2d 81       	ldd	r18, Y+5	; 0x05
    9a1c:	22 2f       	mov	r18, r18
    9a1e:	30 e0       	ldi	r19, 0x00	; 0
    9a20:	2b 56       	subi	r18, 0x6B	; 107
    9a22:	33 4d       	sbci	r19, 0xD3	; 211
    9a24:	f9 01       	movw	r30, r18
    9a26:	20 81       	ld	r18, Z
    9a28:	42 2f       	mov	r20, r18
    9a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    9a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    9a2e:	f9 01       	movw	r30, r18
    9a30:	23 a1       	ldd	r18, Z+35	; 0x23
    9a32:	20 95       	com	r18
    9a34:	24 23       	and	r18, r20
    9a36:	8b 56       	subi	r24, 0x6B	; 107
    9a38:	93 4d       	sbci	r25, 0xD3	; 211
    9a3a:	fc 01       	movw	r30, r24
    9a3c:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    9a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    9a40:	88 2f       	mov	r24, r24
    9a42:	90 e0       	ldi	r25, 0x00	; 0
    9a44:	8b 56       	subi	r24, 0x6B	; 107
    9a46:	93 4d       	sbci	r25, 0xD3	; 211
    9a48:	fc 01       	movw	r30, r24
    9a4a:	80 81       	ld	r24, Z
    9a4c:	88 23       	and	r24, r24
    9a4e:	59 f4       	brne	.+22     	; 0x9a66 <OSTaskSuspend+0xe4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    9a50:	8b 81       	ldd	r24, Y+3	; 0x03
    9a52:	9c 81       	ldd	r25, Y+4	; 0x04
    9a54:	fc 01       	movw	r30, r24
    9a56:	84 a1       	ldd	r24, Z+36	; 0x24
    9a58:	98 2f       	mov	r25, r24
    9a5a:	90 95       	com	r25
    9a5c:	80 91 94 2c 	lds	r24, 0x2C94
    9a60:	89 23       	and	r24, r25
    9a62:	80 93 94 2c 	sts	0x2C94, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    9a66:	8b 81       	ldd	r24, Y+3	; 0x03
    9a68:	9c 81       	ldd	r25, Y+4	; 0x04
    9a6a:	fc 01       	movw	r30, r24
    9a6c:	86 8d       	ldd	r24, Z+30	; 0x1e
    9a6e:	28 2f       	mov	r18, r24
    9a70:	28 60       	ori	r18, 0x08	; 8
    9a72:	8b 81       	ldd	r24, Y+3	; 0x03
    9a74:	9c 81       	ldd	r25, Y+4	; 0x04
    9a76:	fc 01       	movw	r30, r24
    9a78:	26 8f       	std	Z+30, r18	; 0x1e
    OS_EXIT_CRITICAL();
    9a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    9a7c:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    9a80:	89 81       	ldd	r24, Y+1	; 0x01
    9a82:	81 30       	cpi	r24, 0x01	; 1
    9a84:	11 f4       	brne	.+4      	; 0x9a8a <OSTaskSuspend+0x108>
        OS_Sched();                                             /* Find new highest priority task      */
    9a86:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    }
    return (OS_ERR_NONE);
    9a8a:	80 e0       	ldi	r24, 0x00	; 0
}
    9a8c:	26 96       	adiw	r28, 0x06	; 6
    9a8e:	cd bf       	out	0x3d, r28	; 61
    9a90:	de bf       	out	0x3e, r29	; 62
    9a92:	cf 91       	pop	r28
    9a94:	df 91       	pop	r29
    9a96:	08 95       	ret

00009a98 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    9a98:	df 93       	push	r29
    9a9a:	cf 93       	push	r28
    9a9c:	00 d0       	rcall	.+0      	; 0x9a9e <OSTaskQuery+0x6>
    9a9e:	00 d0       	rcall	.+0      	; 0x9aa0 <OSTaskQuery+0x8>
    9aa0:	cd b7       	in	r28, 0x3d	; 61
    9aa2:	de b7       	in	r29, 0x3e	; 62
    9aa4:	8c 83       	std	Y+4, r24	; 0x04
    9aa6:	6d 83       	std	Y+5, r22	; 0x05
    9aa8:	7e 83       	std	Y+6, r23	; 0x06
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9aaa:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    9aac:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9ab0:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    9ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    9ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    9ab6:	39 f4       	brne	.+14     	; 0x9ac6 <OSTaskQuery+0x2e>
        prio = OSTCBCur->OSTCBPrio;
    9ab8:	80 91 08 2e 	lds	r24, 0x2E08
    9abc:	90 91 09 2e 	lds	r25, 0x2E09
    9ac0:	fc 01       	movw	r30, r24
    9ac2:	80 a1       	ldd	r24, Z+32	; 0x20
    9ac4:	8c 83       	std	Y+4, r24	; 0x04
    }
    ptcb = OSTCBPrioTbl[prio];
    9ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    9ac8:	88 2f       	mov	r24, r24
    9aca:	90 e0       	ldi	r25, 0x00	; 0
    9acc:	88 0f       	add	r24, r24
    9ace:	99 1f       	adc	r25, r25
    9ad0:	8d 58       	subi	r24, 0x8D	; 141
    9ad2:	9a 4c       	sbci	r25, 0xCA	; 202
    9ad4:	fc 01       	movw	r30, r24
    9ad6:	80 81       	ld	r24, Z
    9ad8:	91 81       	ldd	r25, Z+1	; 0x01
    9ada:	8a 83       	std	Y+2, r24	; 0x02
    9adc:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    9ade:	8a 81       	ldd	r24, Y+2	; 0x02
    9ae0:	9b 81       	ldd	r25, Y+3	; 0x03
    9ae2:	00 97       	sbiw	r24, 0x00	; 0
    9ae4:	29 f4       	brne	.+10     	; 0x9af0 <OSTaskQuery+0x58>
        OS_EXIT_CRITICAL();
    9ae6:	89 81       	ldd	r24, Y+1	; 0x01
    9ae8:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    9aec:	89 e2       	ldi	r24, 0x29	; 41
    9aee:	17 c0       	rjmp	.+46     	; 0x9b1e <OSTaskQuery+0x86>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    9af0:	8a 81       	ldd	r24, Y+2	; 0x02
    9af2:	9b 81       	ldd	r25, Y+3	; 0x03
    9af4:	81 30       	cpi	r24, 0x01	; 1
    9af6:	91 05       	cpc	r25, r1
    9af8:	29 f4       	brne	.+10     	; 0x9b04 <OSTaskQuery+0x6c>
        OS_EXIT_CRITICAL();
    9afa:	89 81       	ldd	r24, Y+1	; 0x01
    9afc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    9b00:	83 e4       	ldi	r24, 0x43	; 67
    9b02:	0d c0       	rjmp	.+26     	; 0x9b1e <OSTaskQuery+0x86>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    9b04:	8d 81       	ldd	r24, Y+5	; 0x05
    9b06:	9e 81       	ldd	r25, Y+6	; 0x06
    9b08:	2a 81       	ldd	r18, Y+2	; 0x02
    9b0a:	3b 81       	ldd	r19, Y+3	; 0x03
    9b0c:	b9 01       	movw	r22, r18
    9b0e:	48 e4       	ldi	r20, 0x48	; 72
    9b10:	50 e0       	ldi	r21, 0x00	; 0
    9b12:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <OS_MemCopy>
    OS_EXIT_CRITICAL();
    9b16:	89 81       	ldd	r24, Y+1	; 0x01
    9b18:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    9b1c:	80 e0       	ldi	r24, 0x00	; 0
}
    9b1e:	26 96       	adiw	r28, 0x06	; 6
    9b20:	cd bf       	out	0x3d, r28	; 61
    9b22:	de bf       	out	0x3e, r29	; 62
    9b24:	cf 91       	pop	r28
    9b26:	df 91       	pop	r29
    9b28:	08 95       	ret

00009b2a <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    9b2a:	df 93       	push	r29
    9b2c:	cf 93       	push	r28
    9b2e:	cd b7       	in	r28, 0x3d	; 61
    9b30:	de b7       	in	r29, 0x3e	; 62
    9b32:	28 97       	sbiw	r28, 0x08	; 8
    9b34:	cd bf       	out	0x3d, r28	; 61
    9b36:	de bf       	out	0x3e, r29	; 62
    9b38:	89 83       	std	Y+1, r24	; 0x01
    9b3a:	9a 83       	std	Y+2, r25	; 0x02
    9b3c:	4b 83       	std	Y+3, r20	; 0x03
    9b3e:	5c 83       	std	Y+4, r21	; 0x04
    9b40:	6d 83       	std	Y+5, r22	; 0x05
    9b42:	7e 83       	std	Y+6, r23	; 0x06
    9b44:	2f 83       	std	Y+7, r18	; 0x07
    9b46:	38 87       	std	Y+8, r19	; 0x08
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    9b48:	8f 81       	ldd	r24, Y+7	; 0x07
    9b4a:	98 85       	ldd	r25, Y+8	; 0x08
    9b4c:	81 70       	andi	r24, 0x01	; 1
    9b4e:	90 70       	andi	r25, 0x00	; 0
    9b50:	88 23       	and	r24, r24
    9b52:	19 f1       	breq	.+70     	; 0x9b9a <OS_TaskStkClr+0x70>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    9b54:	8f 81       	ldd	r24, Y+7	; 0x07
    9b56:	98 85       	ldd	r25, Y+8	; 0x08
    9b58:	82 70       	andi	r24, 0x02	; 2
    9b5a:	90 70       	andi	r25, 0x00	; 0
    9b5c:	00 97       	sbiw	r24, 0x00	; 0
    9b5e:	e9 f0       	breq	.+58     	; 0x9b9a <OS_TaskStkClr+0x70>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    9b60:	14 c0       	rjmp	.+40     	; 0x9b8a <OS_TaskStkClr+0x60>
                size--;
    9b62:	8b 81       	ldd	r24, Y+3	; 0x03
    9b64:	9c 81       	ldd	r25, Y+4	; 0x04
    9b66:	ad 81       	ldd	r26, Y+5	; 0x05
    9b68:	be 81       	ldd	r27, Y+6	; 0x06
    9b6a:	01 97       	sbiw	r24, 0x01	; 1
    9b6c:	a1 09       	sbc	r26, r1
    9b6e:	b1 09       	sbc	r27, r1
    9b70:	8b 83       	std	Y+3, r24	; 0x03
    9b72:	9c 83       	std	Y+4, r25	; 0x04
    9b74:	ad 83       	std	Y+5, r26	; 0x05
    9b76:	be 83       	std	Y+6, r27	; 0x06
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    9b78:	89 81       	ldd	r24, Y+1	; 0x01
    9b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    9b7c:	fc 01       	movw	r30, r24
    9b7e:	10 82       	st	Z, r1
    9b80:	89 81       	ldd	r24, Y+1	; 0x01
    9b82:	9a 81       	ldd	r25, Y+2	; 0x02
    9b84:	01 96       	adiw	r24, 0x01	; 1
    9b86:	89 83       	std	Y+1, r24	; 0x01
    9b88:	9a 83       	std	Y+2, r25	; 0x02
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    9b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    9b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    9b8e:	ad 81       	ldd	r26, Y+5	; 0x05
    9b90:	be 81       	ldd	r27, Y+6	; 0x06
    9b92:	00 97       	sbiw	r24, 0x00	; 0
    9b94:	a1 05       	cpc	r26, r1
    9b96:	b1 05       	cpc	r27, r1
    9b98:	21 f7       	brne	.-56     	; 0x9b62 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    9b9a:	28 96       	adiw	r28, 0x08	; 8
    9b9c:	cd bf       	out	0x3d, r28	; 61
    9b9e:	de bf       	out	0x3e, r29	; 62
    9ba0:	cf 91       	pop	r28
    9ba2:	df 91       	pop	r29
    9ba4:	08 95       	ret

00009ba6 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    9ba6:	df 93       	push	r29
    9ba8:	cf 93       	push	r28
    9baa:	00 d0       	rcall	.+0      	; 0x9bac <OSTimeDly+0x6>
    9bac:	0f 92       	push	r0
    9bae:	cd b7       	in	r28, 0x3d	; 61
    9bb0:	de b7       	in	r29, 0x3e	; 62
    9bb2:	8b 83       	std	Y+3, r24	; 0x03
    9bb4:	9c 83       	std	Y+4, r25	; 0x04
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9bb6:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9bb8:	80 91 07 2e 	lds	r24, 0x2E07
    9bbc:	88 23       	and	r24, r24
    9bbe:	09 f0       	breq	.+2      	; 0x9bc2 <OSTimeDly+0x1c>
    9bc0:	4b c0       	rjmp	.+150    	; 0x9c58 <OSTimeDly+0xb2>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    9bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    9bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    9bc6:	00 97       	sbiw	r24, 0x00	; 0
    9bc8:	09 f4       	brne	.+2      	; 0x9bcc <OSTimeDly+0x26>
    9bca:	47 c0       	rjmp	.+142    	; 0x9c5a <OSTimeDly+0xb4>
        OS_ENTER_CRITICAL();
    9bcc:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9bd0:	89 83       	std	Y+1, r24	; 0x01
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    9bd2:	80 91 08 2e 	lds	r24, 0x2E08
    9bd6:	90 91 09 2e 	lds	r25, 0x2E09
    9bda:	fc 01       	movw	r30, r24
    9bdc:	82 a1       	ldd	r24, Z+34	; 0x22
    9bde:	8a 83       	std	Y+2, r24	; 0x02
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    9be0:	8a 81       	ldd	r24, Y+2	; 0x02
    9be2:	88 2f       	mov	r24, r24
    9be4:	90 e0       	ldi	r25, 0x00	; 0
    9be6:	2a 81       	ldd	r18, Y+2	; 0x02
    9be8:	22 2f       	mov	r18, r18
    9bea:	30 e0       	ldi	r19, 0x00	; 0
    9bec:	2b 56       	subi	r18, 0x6B	; 107
    9bee:	33 4d       	sbci	r19, 0xD3	; 211
    9bf0:	f9 01       	movw	r30, r18
    9bf2:	20 81       	ld	r18, Z
    9bf4:	42 2f       	mov	r20, r18
    9bf6:	20 91 08 2e 	lds	r18, 0x2E08
    9bfa:	30 91 09 2e 	lds	r19, 0x2E09
    9bfe:	f9 01       	movw	r30, r18
    9c00:	23 a1       	ldd	r18, Z+35	; 0x23
    9c02:	20 95       	com	r18
    9c04:	24 23       	and	r18, r20
    9c06:	8b 56       	subi	r24, 0x6B	; 107
    9c08:	93 4d       	sbci	r25, 0xD3	; 211
    9c0a:	fc 01       	movw	r30, r24
    9c0c:	20 83       	st	Z, r18
        if (OSRdyTbl[y] == 0) {
    9c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    9c10:	88 2f       	mov	r24, r24
    9c12:	90 e0       	ldi	r25, 0x00	; 0
    9c14:	8b 56       	subi	r24, 0x6B	; 107
    9c16:	93 4d       	sbci	r25, 0xD3	; 211
    9c18:	fc 01       	movw	r30, r24
    9c1a:	80 81       	ld	r24, Z
    9c1c:	88 23       	and	r24, r24
    9c1e:	69 f4       	brne	.+26     	; 0x9c3a <OSTimeDly+0x94>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    9c20:	80 91 08 2e 	lds	r24, 0x2E08
    9c24:	90 91 09 2e 	lds	r25, 0x2E09
    9c28:	fc 01       	movw	r30, r24
    9c2a:	84 a1       	ldd	r24, Z+36	; 0x24
    9c2c:	98 2f       	mov	r25, r24
    9c2e:	90 95       	com	r25
    9c30:	80 91 94 2c 	lds	r24, 0x2C94
    9c34:	89 23       	and	r24, r25
    9c36:	80 93 94 2c 	sts	0x2C94, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    9c3a:	80 91 08 2e 	lds	r24, 0x2E08
    9c3e:	90 91 09 2e 	lds	r25, 0x2E09
    9c42:	2b 81       	ldd	r18, Y+3	; 0x03
    9c44:	3c 81       	ldd	r19, Y+4	; 0x04
    9c46:	fc 01       	movw	r30, r24
    9c48:	24 8f       	std	Z+28, r18	; 0x1c
    9c4a:	35 8f       	std	Z+29, r19	; 0x1d
        OS_EXIT_CRITICAL();
    9c4c:	89 81       	ldd	r24, Y+1	; 0x01
    9c4e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    9c52:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    9c56:	01 c0       	rjmp	.+2      	; 0x9c5a <OSTimeDly+0xb4>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    9c58:	00 00       	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    9c5a:	24 96       	adiw	r28, 0x04	; 4
    9c5c:	cd bf       	out	0x3d, r28	; 61
    9c5e:	de bf       	out	0x3e, r29	; 62
    9c60:	cf 91       	pop	r28
    9c62:	df 91       	pop	r29
    9c64:	08 95       	ret

00009c66 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    9c66:	ef 92       	push	r14
    9c68:	ff 92       	push	r15
    9c6a:	0f 93       	push	r16
    9c6c:	1f 93       	push	r17
    9c6e:	df 93       	push	r29
    9c70:	cf 93       	push	r28
    9c72:	cd b7       	in	r28, 0x3d	; 61
    9c74:	de b7       	in	r29, 0x3e	; 62
    9c76:	2b 97       	sbiw	r28, 0x0b	; 11
    9c78:	cd bf       	out	0x3d, r28	; 61
    9c7a:	de bf       	out	0x3e, r29	; 62
    9c7c:	8f 83       	std	Y+7, r24	; 0x07
    9c7e:	68 87       	std	Y+8, r22	; 0x08
    9c80:	49 87       	std	Y+9, r20	; 0x09
    9c82:	2a 87       	std	Y+10, r18	; 0x0a
    9c84:	3b 87       	std	Y+11, r19	; 0x0b
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    9c86:	80 91 07 2e 	lds	r24, 0x2E07
    9c8a:	88 23       	and	r24, r24
    9c8c:	11 f0       	breq	.+4      	; 0x9c92 <OSTimeDlyHMSM+0x2c>
        return (OS_ERR_TIME_DLY_ISR);
    9c8e:	85 e5       	ldi	r24, 0x55	; 85
    9c90:	82 c0       	rjmp	.+260    	; 0x9d96 <OSTimeDlyHMSM+0x130>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    9c92:	8f 81       	ldd	r24, Y+7	; 0x07
    9c94:	88 2f       	mov	r24, r24
    9c96:	90 e0       	ldi	r25, 0x00	; 0
    9c98:	a0 e0       	ldi	r26, 0x00	; 0
    9c9a:	b0 e0       	ldi	r27, 0x00	; 0
    9c9c:	20 e1       	ldi	r18, 0x10	; 16
    9c9e:	3e e0       	ldi	r19, 0x0E	; 14
    9ca0:	40 e0       	ldi	r20, 0x00	; 0
    9ca2:	50 e0       	ldi	r21, 0x00	; 0
    9ca4:	bc 01       	movw	r22, r24
    9ca6:	cd 01       	movw	r24, r26
    9ca8:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
    9cac:	7b 01       	movw	r14, r22
    9cae:	8c 01       	movw	r16, r24
    9cb0:	88 85       	ldd	r24, Y+8	; 0x08
    9cb2:	88 2f       	mov	r24, r24
    9cb4:	90 e0       	ldi	r25, 0x00	; 0
    9cb6:	a0 e0       	ldi	r26, 0x00	; 0
    9cb8:	b0 e0       	ldi	r27, 0x00	; 0
    9cba:	2c e3       	ldi	r18, 0x3C	; 60
    9cbc:	30 e0       	ldi	r19, 0x00	; 0
    9cbe:	40 e0       	ldi	r20, 0x00	; 0
    9cc0:	50 e0       	ldi	r21, 0x00	; 0
    9cc2:	bc 01       	movw	r22, r24
    9cc4:	cd 01       	movw	r24, r26
    9cc6:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
    9cca:	dc 01       	movw	r26, r24
    9ccc:	cb 01       	movw	r24, r22
    9cce:	a8 01       	movw	r20, r16
    9cd0:	97 01       	movw	r18, r14
    9cd2:	28 0f       	add	r18, r24
    9cd4:	39 1f       	adc	r19, r25
    9cd6:	4a 1f       	adc	r20, r26
    9cd8:	5b 1f       	adc	r21, r27
    9cda:	89 85       	ldd	r24, Y+9	; 0x09
    9cdc:	88 2f       	mov	r24, r24
    9cde:	90 e0       	ldi	r25, 0x00	; 0
    9ce0:	a0 e0       	ldi	r26, 0x00	; 0
    9ce2:	b0 e0       	ldi	r27, 0x00	; 0
    9ce4:	82 0f       	add	r24, r18
    9ce6:	93 1f       	adc	r25, r19
    9ce8:	a4 1f       	adc	r26, r20
    9cea:	b5 1f       	adc	r27, r21
    9cec:	28 ee       	ldi	r18, 0xE8	; 232
    9cee:	33 e0       	ldi	r19, 0x03	; 3
    9cf0:	40 e0       	ldi	r20, 0x00	; 0
    9cf2:	50 e0       	ldi	r21, 0x00	; 0
    9cf4:	bc 01       	movw	r22, r24
    9cf6:	cd 01       	movw	r24, r26
    9cf8:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
    9cfc:	7b 01       	movw	r14, r22
    9cfe:	8c 01       	movw	r16, r24
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    9d00:	8a 85       	ldd	r24, Y+10	; 0x0a
    9d02:	9b 85       	ldd	r25, Y+11	; 0x0b
    9d04:	cc 01       	movw	r24, r24
    9d06:	a0 e0       	ldi	r26, 0x00	; 0
    9d08:	b0 e0       	ldi	r27, 0x00	; 0
    9d0a:	28 ee       	ldi	r18, 0xE8	; 232
    9d0c:	33 e0       	ldi	r19, 0x03	; 3
    9d0e:	40 e0       	ldi	r20, 0x00	; 0
    9d10:	50 e0       	ldi	r21, 0x00	; 0
    9d12:	bc 01       	movw	r22, r24
    9d14:	cd 01       	movw	r24, r26
    9d16:	0e 94 2c 57 	call	0xae58	; 0xae58 <__mulsi3>
    9d1a:	dc 01       	movw	r26, r24
    9d1c:	cb 01       	movw	r24, r22
    9d1e:	28 ee       	ldi	r18, 0xE8	; 232
    9d20:	33 e0       	ldi	r19, 0x03	; 3
    9d22:	40 e0       	ldi	r20, 0x00	; 0
    9d24:	50 e0       	ldi	r21, 0x00	; 0
    9d26:	bc 01       	movw	r22, r24
    9d28:	cd 01       	movw	r24, r26
    9d2a:	0e 94 4b 57 	call	0xae96	; 0xae96 <__udivmodsi4>
    9d2e:	da 01       	movw	r26, r20
    9d30:	c9 01       	movw	r24, r18
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    9d32:	8e 0d       	add	r24, r14
    9d34:	9f 1d       	adc	r25, r15
    9d36:	a0 1f       	adc	r26, r16
    9d38:	b1 1f       	adc	r27, r17
    9d3a:	8b 83       	std	Y+3, r24	; 0x03
    9d3c:	9c 83       	std	Y+4, r25	; 0x04
    9d3e:	ad 83       	std	Y+5, r26	; 0x05
    9d40:	be 83       	std	Y+6, r27	; 0x06
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    9d42:	8b 81       	ldd	r24, Y+3	; 0x03
    9d44:	9c 81       	ldd	r25, Y+4	; 0x04
    9d46:	ad 81       	ldd	r26, Y+5	; 0x05
    9d48:	be 81       	ldd	r27, Y+6	; 0x06
    9d4a:	cd 01       	movw	r24, r26
    9d4c:	aa 27       	eor	r26, r26
    9d4e:	bb 27       	eor	r27, r27
    9d50:	89 83       	std	Y+1, r24	; 0x01
    9d52:	9a 83       	std	Y+2, r25	; 0x02
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    9d54:	8b 81       	ldd	r24, Y+3	; 0x03
    9d56:	9c 81       	ldd	r25, Y+4	; 0x04
    9d58:	ad 81       	ldd	r26, Y+5	; 0x05
    9d5a:	be 81       	ldd	r27, Y+6	; 0x06
    9d5c:	a0 70       	andi	r26, 0x00	; 0
    9d5e:	b0 70       	andi	r27, 0x00	; 0
    9d60:	8b 83       	std	Y+3, r24	; 0x03
    9d62:	9c 83       	std	Y+4, r25	; 0x04
    9d64:	ad 83       	std	Y+5, r26	; 0x05
    9d66:	be 83       	std	Y+6, r27	; 0x06
    OSTimeDly((INT16U)ticks);
    9d68:	8b 81       	ldd	r24, Y+3	; 0x03
    9d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    9d6c:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
    while (loops > 0) {
    9d70:	0d c0       	rjmp	.+26     	; 0x9d8c <OSTimeDlyHMSM+0x126>
        OSTimeDly((INT16U)32768u);
    9d72:	80 e0       	ldi	r24, 0x00	; 0
    9d74:	90 e8       	ldi	r25, 0x80	; 128
    9d76:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    9d7a:	80 e0       	ldi	r24, 0x00	; 0
    9d7c:	90 e8       	ldi	r25, 0x80	; 128
    9d7e:	0e 94 d3 4d 	call	0x9ba6	; 0x9ba6 <OSTimeDly>
        loops--;
    9d82:	89 81       	ldd	r24, Y+1	; 0x01
    9d84:	9a 81       	ldd	r25, Y+2	; 0x02
    9d86:	01 97       	sbiw	r24, 0x01	; 1
    9d88:	89 83       	std	Y+1, r24	; 0x01
    9d8a:	9a 83       	std	Y+2, r25	; 0x02
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    9d8c:	89 81       	ldd	r24, Y+1	; 0x01
    9d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    9d90:	00 97       	sbiw	r24, 0x00	; 0
    9d92:	79 f7       	brne	.-34     	; 0x9d72 <OSTimeDlyHMSM+0x10c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    9d94:	80 e0       	ldi	r24, 0x00	; 0
}
    9d96:	2b 96       	adiw	r28, 0x0b	; 11
    9d98:	cd bf       	out	0x3d, r28	; 61
    9d9a:	de bf       	out	0x3e, r29	; 62
    9d9c:	cf 91       	pop	r28
    9d9e:	df 91       	pop	r29
    9da0:	1f 91       	pop	r17
    9da2:	0f 91       	pop	r16
    9da4:	ff 90       	pop	r15
    9da6:	ef 90       	pop	r14
    9da8:	08 95       	ret

00009daa <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    9daa:	df 93       	push	r29
    9dac:	cf 93       	push	r28
    9dae:	00 d0       	rcall	.+0      	; 0x9db0 <OSTimeDlyResume+0x6>
    9db0:	0f 92       	push	r0
    9db2:	cd b7       	in	r28, 0x3d	; 61
    9db4:	de b7       	in	r29, 0x3e	; 62
    9db6:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    9db8:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio >= OS_LOWEST_PRIO) {
    9dba:	8c 81       	ldd	r24, Y+4	; 0x04
    9dbc:	8f 33       	cpi	r24, 0x3F	; 63
    9dbe:	10 f0       	brcs	.+4      	; 0x9dc4 <OSTimeDlyResume+0x1a>
        return (OS_ERR_PRIO_INVALID);
    9dc0:	8a e2       	ldi	r24, 0x2A	; 42
    9dc2:	87 c0       	rjmp	.+270    	; 0x9ed2 <OSTimeDlyResume+0x128>
    }
    OS_ENTER_CRITICAL();
    9dc4:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9dc8:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    9dca:	8c 81       	ldd	r24, Y+4	; 0x04
    9dcc:	88 2f       	mov	r24, r24
    9dce:	90 e0       	ldi	r25, 0x00	; 0
    9dd0:	88 0f       	add	r24, r24
    9dd2:	99 1f       	adc	r25, r25
    9dd4:	8d 58       	subi	r24, 0x8D	; 141
    9dd6:	9a 4c       	sbci	r25, 0xCA	; 202
    9dd8:	fc 01       	movw	r30, r24
    9dda:	80 81       	ld	r24, Z
    9ddc:	91 81       	ldd	r25, Z+1	; 0x01
    9dde:	8a 83       	std	Y+2, r24	; 0x02
    9de0:	9b 83       	std	Y+3, r25	; 0x03
    if (ptcb == (OS_TCB *)0) {
    9de2:	8a 81       	ldd	r24, Y+2	; 0x02
    9de4:	9b 81       	ldd	r25, Y+3	; 0x03
    9de6:	00 97       	sbiw	r24, 0x00	; 0
    9de8:	29 f4       	brne	.+10     	; 0x9df4 <OSTimeDlyResume+0x4a>
        OS_EXIT_CRITICAL();
    9dea:	89 81       	ldd	r24, Y+1	; 0x01
    9dec:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9df0:	83 e4       	ldi	r24, 0x43	; 67
    9df2:	6f c0       	rjmp	.+222    	; 0x9ed2 <OSTimeDlyResume+0x128>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9df4:	8a 81       	ldd	r24, Y+2	; 0x02
    9df6:	9b 81       	ldd	r25, Y+3	; 0x03
    9df8:	81 30       	cpi	r24, 0x01	; 1
    9dfa:	91 05       	cpc	r25, r1
    9dfc:	29 f4       	brne	.+10     	; 0x9e08 <OSTimeDlyResume+0x5e>
        OS_EXIT_CRITICAL();
    9dfe:	89 81       	ldd	r24, Y+1	; 0x01
    9e00:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    9e04:	83 e4       	ldi	r24, 0x43	; 67
    9e06:	65 c0       	rjmp	.+202    	; 0x9ed2 <OSTimeDlyResume+0x128>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    9e08:	8a 81       	ldd	r24, Y+2	; 0x02
    9e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    9e0c:	fc 01       	movw	r30, r24
    9e0e:	84 8d       	ldd	r24, Z+28	; 0x1c
    9e10:	95 8d       	ldd	r25, Z+29	; 0x1d
    9e12:	00 97       	sbiw	r24, 0x00	; 0
    9e14:	29 f4       	brne	.+10     	; 0x9e20 <OSTimeDlyResume+0x76>
        OS_EXIT_CRITICAL();
    9e16:	89 81       	ldd	r24, Y+1	; 0x01
    9e18:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    9e1c:	80 e5       	ldi	r24, 0x50	; 80
    9e1e:	59 c0       	rjmp	.+178    	; 0x9ed2 <OSTimeDlyResume+0x128>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    9e20:	8a 81       	ldd	r24, Y+2	; 0x02
    9e22:	9b 81       	ldd	r25, Y+3	; 0x03
    9e24:	fc 01       	movw	r30, r24
    9e26:	14 8e       	std	Z+28, r1	; 0x1c
    9e28:	15 8e       	std	Z+29, r1	; 0x1d
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    9e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    9e2e:	fc 01       	movw	r30, r24
    9e30:	86 8d       	ldd	r24, Z+30	; 0x1e
    9e32:	88 2f       	mov	r24, r24
    9e34:	90 e0       	ldi	r25, 0x00	; 0
    9e36:	87 73       	andi	r24, 0x37	; 55
    9e38:	90 70       	andi	r25, 0x00	; 0
    9e3a:	00 97       	sbiw	r24, 0x00	; 0
    9e3c:	81 f0       	breq	.+32     	; 0x9e5e <OSTimeDlyResume+0xb4>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    9e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    9e40:	9b 81       	ldd	r25, Y+3	; 0x03
    9e42:	fc 01       	movw	r30, r24
    9e44:	86 8d       	ldd	r24, Z+30	; 0x1e
    9e46:	28 2f       	mov	r18, r24
    9e48:	28 7c       	andi	r18, 0xC8	; 200
    9e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    9e4e:	fc 01       	movw	r30, r24
    9e50:	26 8f       	std	Z+30, r18	; 0x1e
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    9e52:	8a 81       	ldd	r24, Y+2	; 0x02
    9e54:	9b 81       	ldd	r25, Y+3	; 0x03
    9e56:	21 e0       	ldi	r18, 0x01	; 1
    9e58:	fc 01       	movw	r30, r24
    9e5a:	27 8f       	std	Z+31, r18	; 0x1f
    9e5c:	04 c0       	rjmp	.+8      	; 0x9e66 <OSTimeDlyResume+0xbc>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    9e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    9e60:	9b 81       	ldd	r25, Y+3	; 0x03
    9e62:	fc 01       	movw	r30, r24
    9e64:	17 8e       	std	Z+31, r1	; 0x1f
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    9e66:	8a 81       	ldd	r24, Y+2	; 0x02
    9e68:	9b 81       	ldd	r25, Y+3	; 0x03
    9e6a:	fc 01       	movw	r30, r24
    9e6c:	86 8d       	ldd	r24, Z+30	; 0x1e
    9e6e:	88 2f       	mov	r24, r24
    9e70:	90 e0       	ldi	r25, 0x00	; 0
    9e72:	88 70       	andi	r24, 0x08	; 8
    9e74:	90 70       	andi	r25, 0x00	; 0
    9e76:	00 97       	sbiw	r24, 0x00	; 0
    9e78:	41 f5       	brne	.+80     	; 0x9eca <OSTimeDlyResume+0x120>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    9e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    9e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    9e7e:	fc 01       	movw	r30, r24
    9e80:	94 a1       	ldd	r25, Z+36	; 0x24
    9e82:	80 91 94 2c 	lds	r24, 0x2C94
    9e86:	89 2b       	or	r24, r25
    9e88:	80 93 94 2c 	sts	0x2C94, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    9e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    9e90:	fc 01       	movw	r30, r24
    9e92:	82 a1       	ldd	r24, Z+34	; 0x22
    9e94:	88 2f       	mov	r24, r24
    9e96:	90 e0       	ldi	r25, 0x00	; 0
    9e98:	2a 81       	ldd	r18, Y+2	; 0x02
    9e9a:	3b 81       	ldd	r19, Y+3	; 0x03
    9e9c:	f9 01       	movw	r30, r18
    9e9e:	22 a1       	ldd	r18, Z+34	; 0x22
    9ea0:	22 2f       	mov	r18, r18
    9ea2:	30 e0       	ldi	r19, 0x00	; 0
    9ea4:	2b 56       	subi	r18, 0x6B	; 107
    9ea6:	33 4d       	sbci	r19, 0xD3	; 211
    9ea8:	f9 01       	movw	r30, r18
    9eaa:	40 81       	ld	r20, Z
    9eac:	2a 81       	ldd	r18, Y+2	; 0x02
    9eae:	3b 81       	ldd	r19, Y+3	; 0x03
    9eb0:	f9 01       	movw	r30, r18
    9eb2:	23 a1       	ldd	r18, Z+35	; 0x23
    9eb4:	24 2b       	or	r18, r20
    9eb6:	8b 56       	subi	r24, 0x6B	; 107
    9eb8:	93 4d       	sbci	r25, 0xD3	; 211
    9eba:	fc 01       	movw	r30, r24
    9ebc:	20 83       	st	Z, r18
        OS_EXIT_CRITICAL();
    9ebe:	89 81       	ldd	r24, Y+1	; 0x01
    9ec0:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
    9ec4:	0e 94 78 26 	call	0x4cf0	; 0x4cf0 <OS_Sched>
    9ec8:	03 c0       	rjmp	.+6      	; 0x9ed0 <OSTimeDlyResume+0x126>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    9eca:	89 81       	ldd	r24, Y+1	; 0x01
    9ecc:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
    9ed0:	80 e0       	ldi	r24, 0x00	; 0
}
    9ed2:	24 96       	adiw	r28, 0x04	; 4
    9ed4:	cd bf       	out	0x3d, r28	; 61
    9ed6:	de bf       	out	0x3e, r29	; 62
    9ed8:	cf 91       	pop	r28
    9eda:	df 91       	pop	r29
    9edc:	08 95       	ret

00009ede <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    9ede:	df 93       	push	r29
    9ee0:	cf 93       	push	r28
    9ee2:	cd b7       	in	r28, 0x3d	; 61
    9ee4:	de b7       	in	r29, 0x3e	; 62
    9ee6:	25 97       	sbiw	r28, 0x05	; 5
    9ee8:	cd bf       	out	0x3d, r28	; 61
    9eea:	de bf       	out	0x3e, r29	; 62
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9eec:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    9eee:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9ef2:	89 83       	std	Y+1, r24	; 0x01
    ticks = OSTime;
    9ef4:	80 91 0e 2e 	lds	r24, 0x2E0E
    9ef8:	90 91 0f 2e 	lds	r25, 0x2E0F
    9efc:	a0 91 10 2e 	lds	r26, 0x2E10
    9f00:	b0 91 11 2e 	lds	r27, 0x2E11
    9f04:	8a 83       	std	Y+2, r24	; 0x02
    9f06:	9b 83       	std	Y+3, r25	; 0x03
    9f08:	ac 83       	std	Y+4, r26	; 0x04
    9f0a:	bd 83       	std	Y+5, r27	; 0x05
    OS_EXIT_CRITICAL();
    9f0c:	89 81       	ldd	r24, Y+1	; 0x01
    9f0e:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
    return (ticks);
    9f12:	8a 81       	ldd	r24, Y+2	; 0x02
    9f14:	9b 81       	ldd	r25, Y+3	; 0x03
    9f16:	ac 81       	ldd	r26, Y+4	; 0x04
    9f18:	bd 81       	ldd	r27, Y+5	; 0x05
}
    9f1a:	bc 01       	movw	r22, r24
    9f1c:	cd 01       	movw	r24, r26
    9f1e:	25 96       	adiw	r28, 0x05	; 5
    9f20:	cd bf       	out	0x3d, r28	; 61
    9f22:	de bf       	out	0x3e, r29	; 62
    9f24:	cf 91       	pop	r28
    9f26:	df 91       	pop	r29
    9f28:	08 95       	ret

00009f2a <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    9f2a:	df 93       	push	r29
    9f2c:	cf 93       	push	r28
    9f2e:	cd b7       	in	r28, 0x3d	; 61
    9f30:	de b7       	in	r29, 0x3e	; 62
    9f32:	25 97       	sbiw	r28, 0x05	; 5
    9f34:	cd bf       	out	0x3d, r28	; 61
    9f36:	de bf       	out	0x3e, r29	; 62
    9f38:	6a 83       	std	Y+2, r22	; 0x02
    9f3a:	7b 83       	std	Y+3, r23	; 0x03
    9f3c:	8c 83       	std	Y+4, r24	; 0x04
    9f3e:	9d 83       	std	Y+5, r25	; 0x05
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9f40:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    9f42:	0e 94 34 18 	call	0x3068	; 0x3068 <OS_CPU_SR_Save>
    9f46:	89 83       	std	Y+1, r24	; 0x01
    OSTime = ticks;
    9f48:	8a 81       	ldd	r24, Y+2	; 0x02
    9f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    9f4c:	ac 81       	ldd	r26, Y+4	; 0x04
    9f4e:	bd 81       	ldd	r27, Y+5	; 0x05
    9f50:	80 93 0e 2e 	sts	0x2E0E, r24
    9f54:	90 93 0f 2e 	sts	0x2E0F, r25
    9f58:	a0 93 10 2e 	sts	0x2E10, r26
    9f5c:	b0 93 11 2e 	sts	0x2E11, r27
    OS_EXIT_CRITICAL();
    9f60:	89 81       	ldd	r24, Y+1	; 0x01
    9f62:	0e 94 37 18 	call	0x306e	; 0x306e <OS_CPU_SR_Restore>
}
    9f66:	25 96       	adiw	r28, 0x05	; 5
    9f68:	cd bf       	out	0x3d, r28	; 61
    9f6a:	de bf       	out	0x3e, r29	; 62
    9f6c:	cf 91       	pop	r28
    9f6e:	df 91       	pop	r29
    9f70:	08 95       	ret

00009f72 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
    9f72:	8f 92       	push	r8
    9f74:	9f 92       	push	r9
    9f76:	af 92       	push	r10
    9f78:	bf 92       	push	r11
    9f7a:	cf 92       	push	r12
    9f7c:	df 92       	push	r13
    9f7e:	ef 92       	push	r14
    9f80:	ff 92       	push	r15
    9f82:	0f 93       	push	r16
    9f84:	df 93       	push	r29
    9f86:	cf 93       	push	r28
    9f88:	cd b7       	in	r28, 0x3d	; 61
    9f8a:	de b7       	in	r29, 0x3e	; 62
    9f8c:	64 97       	sbiw	r28, 0x14	; 20
    9f8e:	cd bf       	out	0x3d, r28	; 61
    9f90:	de bf       	out	0x3e, r29	; 62
    9f92:	6c 83       	std	Y+4, r22	; 0x04
    9f94:	7d 83       	std	Y+5, r23	; 0x05
    9f96:	8e 83       	std	Y+6, r24	; 0x06
    9f98:	9f 83       	std	Y+7, r25	; 0x07
    9f9a:	28 87       	std	Y+8, r18	; 0x08
    9f9c:	39 87       	std	Y+9, r19	; 0x09
    9f9e:	4a 87       	std	Y+10, r20	; 0x0a
    9fa0:	5b 87       	std	Y+11, r21	; 0x0b
    9fa2:	0c 87       	std	Y+12, r16	; 0x0c
    9fa4:	ed 86       	std	Y+13, r14	; 0x0d
    9fa6:	fe 86       	std	Y+14, r15	; 0x0e
    9fa8:	cf 86       	std	Y+15, r12	; 0x0f
    9faa:	d8 8a       	std	Y+16, r13	; 0x10
    9fac:	a9 8a       	std	Y+17, r10	; 0x11
    9fae:	ba 8a       	std	Y+18, r11	; 0x12
    9fb0:	8b 8a       	std	Y+19, r8	; 0x13
    9fb2:	9c 8a       	std	Y+20, r9	; 0x14
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    9fb4:	80 91 07 2e 	lds	r24, 0x2E07
    9fb8:	88 23       	and	r24, r24
    9fba:	41 f0       	breq	.+16     	; 0x9fcc <OSTmrCreate+0x5a>
        *perr  = OS_ERR_TMR_ISR;
    9fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    9fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    9fc0:	2b e8       	ldi	r18, 0x8B	; 139
    9fc2:	fc 01       	movw	r30, r24
    9fc4:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    9fc6:	80 e0       	ldi	r24, 0x00	; 0
    9fc8:	90 e0       	ldi	r25, 0x00	; 0
    9fca:	72 c0       	rjmp	.+228    	; 0xa0b0 <OSTmrCreate+0x13e>
    }
    OSTmr_Lock();
    9fcc:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    9fd0:	0e 94 84 53 	call	0xa708	; 0xa708 <OSTmr_Alloc>
    9fd4:	89 83       	std	Y+1, r24	; 0x01
    9fd6:	9a 83       	std	Y+2, r25	; 0x02
    if (ptmr == (OS_TMR *)0) {
    9fd8:	89 81       	ldd	r24, Y+1	; 0x01
    9fda:	9a 81       	ldd	r25, Y+2	; 0x02
    9fdc:	00 97       	sbiw	r24, 0x00	; 0
    9fde:	51 f4       	brne	.+20     	; 0x9ff4 <OSTmrCreate+0x82>
        OSTmr_Unlock();
    9fe0:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
    9fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    9fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    9fe8:	26 e8       	ldi	r18, 0x86	; 134
    9fea:	fc 01       	movw	r30, r24
    9fec:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    9fee:	80 e0       	ldi	r24, 0x00	; 0
    9ff0:	90 e0       	ldi	r25, 0x00	; 0
    9ff2:	5e c0       	rjmp	.+188    	; 0xa0b0 <OSTmrCreate+0x13e>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    9ff4:	89 81       	ldd	r24, Y+1	; 0x01
    9ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    9ff8:	21 e0       	ldi	r18, 0x01	; 1
    9ffa:	fc 01       	movw	r30, r24
    9ffc:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrDly         = dly;
    9ffe:	29 81       	ldd	r18, Y+1	; 0x01
    a000:	3a 81       	ldd	r19, Y+2	; 0x02
    a002:	8c 81       	ldd	r24, Y+4	; 0x04
    a004:	9d 81       	ldd	r25, Y+5	; 0x05
    a006:	ae 81       	ldd	r26, Y+6	; 0x06
    a008:	bf 81       	ldd	r27, Y+7	; 0x07
    a00a:	f9 01       	movw	r30, r18
    a00c:	85 87       	std	Z+13, r24	; 0x0d
    a00e:	96 87       	std	Z+14, r25	; 0x0e
    a010:	a7 87       	std	Z+15, r26	; 0x0f
    a012:	b0 8b       	std	Z+16, r27	; 0x10
    ptmr->OSTmrPeriod      = period;
    a014:	29 81       	ldd	r18, Y+1	; 0x01
    a016:	3a 81       	ldd	r19, Y+2	; 0x02
    a018:	88 85       	ldd	r24, Y+8	; 0x08
    a01a:	99 85       	ldd	r25, Y+9	; 0x09
    a01c:	aa 85       	ldd	r26, Y+10	; 0x0a
    a01e:	bb 85       	ldd	r27, Y+11	; 0x0b
    a020:	f9 01       	movw	r30, r18
    a022:	81 8b       	std	Z+17, r24	; 0x11
    a024:	92 8b       	std	Z+18, r25	; 0x12
    a026:	a3 8b       	std	Z+19, r26	; 0x13
    a028:	b4 8b       	std	Z+20, r27	; 0x14
    ptmr->OSTmrOpt         = opt;
    a02a:	89 81       	ldd	r24, Y+1	; 0x01
    a02c:	9a 81       	ldd	r25, Y+2	; 0x02
    a02e:	2c 85       	ldd	r18, Y+12	; 0x0c
    a030:	fc 01       	movw	r30, r24
    a032:	25 a3       	std	Z+37, r18	; 0x25
    ptmr->OSTmrCallback    = callback;
    a034:	89 81       	ldd	r24, Y+1	; 0x01
    a036:	9a 81       	ldd	r25, Y+2	; 0x02
    a038:	2d 85       	ldd	r18, Y+13	; 0x0d
    a03a:	3e 85       	ldd	r19, Y+14	; 0x0e
    a03c:	fc 01       	movw	r30, r24
    a03e:	21 83       	std	Z+1, r18	; 0x01
    a040:	32 83       	std	Z+2, r19	; 0x02
    ptmr->OSTmrCallbackArg = callback_arg;
    a042:	89 81       	ldd	r24, Y+1	; 0x01
    a044:	9a 81       	ldd	r25, Y+2	; 0x02
    a046:	2f 85       	ldd	r18, Y+15	; 0x0f
    a048:	38 89       	ldd	r19, Y+16	; 0x10
    a04a:	fc 01       	movw	r30, r24
    a04c:	23 83       	std	Z+3, r18	; 0x03
    a04e:	34 83       	std	Z+4, r19	; 0x04
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
    a050:	89 89       	ldd	r24, Y+17	; 0x11
    a052:	9a 89       	ldd	r25, Y+18	; 0x12
    a054:	00 97       	sbiw	r24, 0x00	; 0
    a056:	21 f1       	breq	.+72     	; 0xa0a0 <OSTmrCreate+0x12e>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
    a058:	89 89       	ldd	r24, Y+17	; 0x11
    a05a:	9a 89       	ldd	r25, Y+18	; 0x12
    a05c:	0e 94 28 27 	call	0x4e50	; 0x4e50 <OS_StrLen>
    a060:	8b 83       	std	Y+3, r24	; 0x03
        if (len < OS_TMR_CFG_NAME_SIZE) {
    a062:	8b 81       	ldd	r24, Y+3	; 0x03
    a064:	80 31       	cpi	r24, 0x10	; 16
    a066:	48 f4       	brcc	.+18     	; 0xa07a <OSTmrCreate+0x108>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
    a068:	89 81       	ldd	r24, Y+1	; 0x01
    a06a:	9a 81       	ldd	r25, Y+2	; 0x02
    a06c:	45 96       	adiw	r24, 0x15	; 21
    a06e:	29 89       	ldd	r18, Y+17	; 0x11
    a070:	3a 89       	ldd	r19, Y+18	; 0x12
    a072:	b9 01       	movw	r22, r18
    a074:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    a078:	13 c0       	rjmp	.+38     	; 0xa0a0 <OSTmrCreate+0x12e>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    a07a:	89 81       	ldd	r24, Y+1	; 0x01
    a07c:	9a 81       	ldd	r25, Y+2	; 0x02
    a07e:	23 e2       	ldi	r18, 0x23	; 35
    a080:	fc 01       	movw	r30, r24
    a082:	25 8b       	std	Z+21, r18	; 0x15
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
    a084:	89 81       	ldd	r24, Y+1	; 0x01
    a086:	9a 81       	ldd	r25, Y+2	; 0x02
    a088:	fc 01       	movw	r30, r24
    a08a:	16 8a       	std	Z+22, r1	; 0x16
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    a08c:	8b 89       	ldd	r24, Y+19	; 0x13
    a08e:	9c 89       	ldd	r25, Y+20	; 0x14
    a090:	2c e8       	ldi	r18, 0x8C	; 140
    a092:	fc 01       	movw	r30, r24
    a094:	20 83       	st	Z, r18
            OSTmr_Unlock();
    a096:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
            return (ptmr);
    a09a:	89 81       	ldd	r24, Y+1	; 0x01
    a09c:	9a 81       	ldd	r25, Y+2	; 0x02
    a09e:	08 c0       	rjmp	.+16     	; 0xa0b0 <OSTmrCreate+0x13e>
        }
    }
#endif
    OSTmr_Unlock();
    a0a0:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
    a0a4:	8b 89       	ldd	r24, Y+19	; 0x13
    a0a6:	9c 89       	ldd	r25, Y+20	; 0x14
    a0a8:	fc 01       	movw	r30, r24
    a0aa:	10 82       	st	Z, r1
    return (ptmr);
    a0ac:	89 81       	ldd	r24, Y+1	; 0x01
    a0ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a0b0:	64 96       	adiw	r28, 0x14	; 20
    a0b2:	cd bf       	out	0x3d, r28	; 61
    a0b4:	de bf       	out	0x3e, r29	; 62
    a0b6:	cf 91       	pop	r28
    a0b8:	df 91       	pop	r29
    a0ba:	0f 91       	pop	r16
    a0bc:	ff 90       	pop	r15
    a0be:	ef 90       	pop	r14
    a0c0:	df 90       	pop	r13
    a0c2:	cf 90       	pop	r12
    a0c4:	bf 90       	pop	r11
    a0c6:	af 90       	pop	r10
    a0c8:	9f 90       	pop	r9
    a0ca:	8f 90       	pop	r8
    a0cc:	08 95       	ret

0000a0ce <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
    a0ce:	df 93       	push	r29
    a0d0:	cf 93       	push	r28
    a0d2:	00 d0       	rcall	.+0      	; 0xa0d4 <OSTmrDel+0x6>
    a0d4:	0f 92       	push	r0
    a0d6:	cd b7       	in	r28, 0x3d	; 61
    a0d8:	de b7       	in	r29, 0x3e	; 62
    a0da:	89 83       	std	Y+1, r24	; 0x01
    a0dc:	9a 83       	std	Y+2, r25	; 0x02
    a0de:	6b 83       	std	Y+3, r22	; 0x03
    a0e0:	7c 83       	std	Y+4, r23	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    a0e2:	89 81       	ldd	r24, Y+1	; 0x01
    a0e4:	9a 81       	ldd	r25, Y+2	; 0x02
    a0e6:	fc 01       	movw	r30, r24
    a0e8:	80 81       	ld	r24, Z
    a0ea:	84 36       	cpi	r24, 0x64	; 100
    a0ec:	39 f0       	breq	.+14     	; 0xa0fc <OSTmrDel+0x2e>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a0ee:	8b 81       	ldd	r24, Y+3	; 0x03
    a0f0:	9c 81       	ldd	r25, Y+4	; 0x04
    a0f2:	29 e8       	ldi	r18, 0x89	; 137
    a0f4:	fc 01       	movw	r30, r24
    a0f6:	20 83       	st	Z, r18
        return (OS_FALSE);
    a0f8:	80 e0       	ldi	r24, 0x00	; 0
    a0fa:	4c c0       	rjmp	.+152    	; 0xa194 <OSTmrDel+0xc6>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    a0fc:	80 91 07 2e 	lds	r24, 0x2E07
    a100:	88 23       	and	r24, r24
    a102:	39 f0       	breq	.+14     	; 0xa112 <OSTmrDel+0x44>
        *perr  = OS_ERR_TMR_ISR;
    a104:	8b 81       	ldd	r24, Y+3	; 0x03
    a106:	9c 81       	ldd	r25, Y+4	; 0x04
    a108:	2b e8       	ldi	r18, 0x8B	; 139
    a10a:	fc 01       	movw	r30, r24
    a10c:	20 83       	st	Z, r18
        return (OS_FALSE);
    a10e:	80 e0       	ldi	r24, 0x00	; 0
    a110:	41 c0       	rjmp	.+130    	; 0xa194 <OSTmrDel+0xc6>
    }
    OSTmr_Lock();
    a112:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    a116:	89 81       	ldd	r24, Y+1	; 0x01
    a118:	9a 81       	ldd	r25, Y+2	; 0x02
    a11a:	fc 01       	movw	r30, r24
    a11c:	86 a1       	ldd	r24, Z+38	; 0x26
    a11e:	88 2f       	mov	r24, r24
    a120:	90 e0       	ldi	r25, 0x00	; 0
    a122:	83 30       	cpi	r24, 0x03	; 3
    a124:	91 05       	cpc	r25, r1
    a126:	34 f4       	brge	.+12     	; 0xa134 <OSTmrDel+0x66>
    a128:	81 30       	cpi	r24, 0x01	; 1
    a12a:	91 05       	cpc	r25, r1
    a12c:	b4 f4       	brge	.+44     	; 0xa15a <OSTmrDel+0x8c>
    a12e:	00 97       	sbiw	r24, 0x00	; 0
    a130:	01 f1       	breq	.+64     	; 0xa172 <OSTmrDel+0xa4>
    a132:	28 c0       	rjmp	.+80     	; 0xa184 <OSTmrDel+0xb6>
    a134:	83 30       	cpi	r24, 0x03	; 3
    a136:	91 05       	cpc	r25, r1
    a138:	29 f5       	brne	.+74     	; 0xa184 <OSTmrDel+0xb6>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
    a13a:	89 81       	ldd	r24, Y+1	; 0x01
    a13c:	9a 81       	ldd	r25, Y+2	; 0x02
    a13e:	0e 94 ed 55 	call	0xabda	; 0xabda <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    a142:	89 81       	ldd	r24, Y+1	; 0x01
    a144:	9a 81       	ldd	r25, Y+2	; 0x02
    a146:	0e 94 c5 53 	call	0xa78a	; 0xa78a <OSTmr_Free>
             OSTmr_Unlock();
    a14a:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a14e:	8b 81       	ldd	r24, Y+3	; 0x03
    a150:	9c 81       	ldd	r25, Y+4	; 0x04
    a152:	fc 01       	movw	r30, r24
    a154:	10 82       	st	Z, r1
             return (OS_TRUE);
    a156:	81 e0       	ldi	r24, 0x01	; 1
    a158:	1d c0       	rjmp	.+58     	; 0xa194 <OSTmrDel+0xc6>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    a15a:	89 81       	ldd	r24, Y+1	; 0x01
    a15c:	9a 81       	ldd	r25, Y+2	; 0x02
    a15e:	0e 94 c5 53 	call	0xa78a	; 0xa78a <OSTmr_Free>
             OSTmr_Unlock();
    a162:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a166:	8b 81       	ldd	r24, Y+3	; 0x03
    a168:	9c 81       	ldd	r25, Y+4	; 0x04
    a16a:	fc 01       	movw	r30, r24
    a16c:	10 82       	st	Z, r1
             return (OS_TRUE);
    a16e:	81 e0       	ldi	r24, 0x01	; 1
    a170:	11 c0       	rjmp	.+34     	; 0xa194 <OSTmrDel+0xc6>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
    a172:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    a176:	8b 81       	ldd	r24, Y+3	; 0x03
    a178:	9c 81       	ldd	r25, Y+4	; 0x04
    a17a:	27 e8       	ldi	r18, 0x87	; 135
    a17c:	fc 01       	movw	r30, r24
    a17e:	20 83       	st	Z, r18
             return (OS_FALSE);
    a180:	80 e0       	ldi	r24, 0x00	; 0
    a182:	08 c0       	rjmp	.+16     	; 0xa194 <OSTmrDel+0xc6>

        default:
             OSTmr_Unlock();
    a184:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    a188:	8b 81       	ldd	r24, Y+3	; 0x03
    a18a:	9c 81       	ldd	r25, Y+4	; 0x04
    a18c:	2d e8       	ldi	r18, 0x8D	; 141
    a18e:	fc 01       	movw	r30, r24
    a190:	20 83       	st	Z, r18
             return (OS_FALSE);
    a192:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    a194:	24 96       	adiw	r28, 0x04	; 4
    a196:	cd bf       	out	0x3d, r28	; 61
    a198:	de bf       	out	0x3e, r29	; 62
    a19a:	cf 91       	pop	r28
    a19c:	df 91       	pop	r29
    a19e:	08 95       	ret

0000a1a0 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
    a1a0:	df 93       	push	r29
    a1a2:	cf 93       	push	r28
    a1a4:	cd b7       	in	r28, 0x3d	; 61
    a1a6:	de b7       	in	r29, 0x3e	; 62
    a1a8:	27 97       	sbiw	r28, 0x07	; 7
    a1aa:	cd bf       	out	0x3d, r28	; 61
    a1ac:	de bf       	out	0x3e, r29	; 62
    a1ae:	8a 83       	std	Y+2, r24	; 0x02
    a1b0:	9b 83       	std	Y+3, r25	; 0x03
    a1b2:	6c 83       	std	Y+4, r22	; 0x04
    a1b4:	7d 83       	std	Y+5, r23	; 0x05
    a1b6:	4e 83       	std	Y+6, r20	; 0x06
    a1b8:	5f 83       	std	Y+7, r21	; 0x07
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    a1ba:	8a 81       	ldd	r24, Y+2	; 0x02
    a1bc:	9b 81       	ldd	r25, Y+3	; 0x03
    a1be:	fc 01       	movw	r30, r24
    a1c0:	80 81       	ld	r24, Z
    a1c2:	84 36       	cpi	r24, 0x64	; 100
    a1c4:	39 f0       	breq	.+14     	; 0xa1d4 <OSTmrNameGet+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a1c6:	8e 81       	ldd	r24, Y+6	; 0x06
    a1c8:	9f 81       	ldd	r25, Y+7	; 0x07
    a1ca:	29 e8       	ldi	r18, 0x89	; 137
    a1cc:	fc 01       	movw	r30, r24
    a1ce:	20 83       	st	Z, r18
        return (0);
    a1d0:	80 e0       	ldi	r24, 0x00	; 0
    a1d2:	3e c0       	rjmp	.+124    	; 0xa250 <OSTmrNameGet+0xb0>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    a1d4:	80 91 07 2e 	lds	r24, 0x2E07
    a1d8:	88 23       	and	r24, r24
    a1da:	39 f0       	breq	.+14     	; 0xa1ea <OSTmrNameGet+0x4a>
        *perr = OS_ERR_NAME_GET_ISR;
    a1dc:	8e 81       	ldd	r24, Y+6	; 0x06
    a1de:	9f 81       	ldd	r25, Y+7	; 0x07
    a1e0:	21 e1       	ldi	r18, 0x11	; 17
    a1e2:	fc 01       	movw	r30, r24
    a1e4:	20 83       	st	Z, r18
        return (0);
    a1e6:	80 e0       	ldi	r24, 0x00	; 0
    a1e8:	33 c0       	rjmp	.+102    	; 0xa250 <OSTmrNameGet+0xb0>
    }
    OSTmr_Lock();
    a1ea:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    a1ee:	8a 81       	ldd	r24, Y+2	; 0x02
    a1f0:	9b 81       	ldd	r25, Y+3	; 0x03
    a1f2:	fc 01       	movw	r30, r24
    a1f4:	86 a1       	ldd	r24, Z+38	; 0x26
    a1f6:	88 2f       	mov	r24, r24
    a1f8:	90 e0       	ldi	r25, 0x00	; 0
    a1fa:	00 97       	sbiw	r24, 0x00	; 0
    a1fc:	c1 f0       	breq	.+48     	; 0xa22e <OSTmrNameGet+0x8e>
    a1fe:	99 23       	and	r25, r25
    a200:	fc f0       	brlt	.+62     	; 0xa240 <OSTmrNameGet+0xa0>
    a202:	84 30       	cpi	r24, 0x04	; 4
    a204:	91 05       	cpc	r25, r1
    a206:	e4 f4       	brge	.+56     	; 0xa240 <OSTmrNameGet+0xa0>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
    a208:	8a 81       	ldd	r24, Y+2	; 0x02
    a20a:	9b 81       	ldd	r25, Y+3	; 0x03
    a20c:	9c 01       	movw	r18, r24
    a20e:	2b 5e       	subi	r18, 0xEB	; 235
    a210:	3f 4f       	sbci	r19, 0xFF	; 255
    a212:	8c 81       	ldd	r24, Y+4	; 0x04
    a214:	9d 81       	ldd	r25, Y+5	; 0x05
    a216:	b9 01       	movw	r22, r18
    a218:	0e 94 f5 26 	call	0x4dea	; 0x4dea <OS_StrCopy>
    a21c:	89 83       	std	Y+1, r24	; 0x01
             OSTmr_Unlock();
    a21e:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a222:	8e 81       	ldd	r24, Y+6	; 0x06
    a224:	9f 81       	ldd	r25, Y+7	; 0x07
    a226:	fc 01       	movw	r30, r24
    a228:	10 82       	st	Z, r1
             return (len);
    a22a:	89 81       	ldd	r24, Y+1	; 0x01
    a22c:	11 c0       	rjmp	.+34     	; 0xa250 <OSTmrNameGet+0xb0>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
    a22e:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    a232:	8e 81       	ldd	r24, Y+6	; 0x06
    a234:	9f 81       	ldd	r25, Y+7	; 0x07
    a236:	27 e8       	ldi	r18, 0x87	; 135
    a238:	fc 01       	movw	r30, r24
    a23a:	20 83       	st	Z, r18
             return (0);
    a23c:	80 e0       	ldi	r24, 0x00	; 0
    a23e:	08 c0       	rjmp	.+16     	; 0xa250 <OSTmrNameGet+0xb0>

        default:
             OSTmr_Unlock();
    a240:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    a244:	8e 81       	ldd	r24, Y+6	; 0x06
    a246:	9f 81       	ldd	r25, Y+7	; 0x07
    a248:	2d e8       	ldi	r18, 0x8D	; 141
    a24a:	fc 01       	movw	r30, r24
    a24c:	20 83       	st	Z, r18
             return (0);
    a24e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    a250:	27 96       	adiw	r28, 0x07	; 7
    a252:	cd bf       	out	0x3d, r28	; 61
    a254:	de bf       	out	0x3e, r29	; 62
    a256:	cf 91       	pop	r28
    a258:	df 91       	pop	r29
    a25a:	08 95       	ret

0000a25c <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
    a25c:	ef 92       	push	r14
    a25e:	ff 92       	push	r15
    a260:	0f 93       	push	r16
    a262:	1f 93       	push	r17
    a264:	df 93       	push	r29
    a266:	cf 93       	push	r28
    a268:	cd b7       	in	r28, 0x3d	; 61
    a26a:	de b7       	in	r29, 0x3e	; 62
    a26c:	28 97       	sbiw	r28, 0x08	; 8
    a26e:	cd bf       	out	0x3d, r28	; 61
    a270:	de bf       	out	0x3e, r29	; 62
    a272:	8d 83       	std	Y+5, r24	; 0x05
    a274:	9e 83       	std	Y+6, r25	; 0x06
    a276:	6f 83       	std	Y+7, r22	; 0x07
    a278:	78 87       	std	Y+8, r23	; 0x08
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    a27a:	8d 81       	ldd	r24, Y+5	; 0x05
    a27c:	9e 81       	ldd	r25, Y+6	; 0x06
    a27e:	fc 01       	movw	r30, r24
    a280:	80 81       	ld	r24, Z
    a282:	84 36       	cpi	r24, 0x64	; 100
    a284:	49 f0       	breq	.+18     	; 0xa298 <OSTmrRemainGet+0x3c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a286:	8f 81       	ldd	r24, Y+7	; 0x07
    a288:	98 85       	ldd	r25, Y+8	; 0x08
    a28a:	29 e8       	ldi	r18, 0x89	; 137
    a28c:	fc 01       	movw	r30, r24
    a28e:	20 83       	st	Z, r18
        return (0);
    a290:	80 e0       	ldi	r24, 0x00	; 0
    a292:	90 e0       	ldi	r25, 0x00	; 0
    a294:	dc 01       	movw	r26, r24
    a296:	b5 c0       	rjmp	.+362    	; 0xa402 <OSTmrRemainGet+0x1a6>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    a298:	80 91 07 2e 	lds	r24, 0x2E07
    a29c:	88 23       	and	r24, r24
    a29e:	49 f0       	breq	.+18     	; 0xa2b2 <OSTmrRemainGet+0x56>
        *perr = OS_ERR_TMR_ISR;
    a2a0:	8f 81       	ldd	r24, Y+7	; 0x07
    a2a2:	98 85       	ldd	r25, Y+8	; 0x08
    a2a4:	2b e8       	ldi	r18, 0x8B	; 139
    a2a6:	fc 01       	movw	r30, r24
    a2a8:	20 83       	st	Z, r18
        return (0);
    a2aa:	80 e0       	ldi	r24, 0x00	; 0
    a2ac:	90 e0       	ldi	r25, 0x00	; 0
    a2ae:	dc 01       	movw	r26, r24
    a2b0:	a8 c0       	rjmp	.+336    	; 0xa402 <OSTmrRemainGet+0x1a6>
    }
    OSTmr_Lock();
    a2b2:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    a2b6:	8d 81       	ldd	r24, Y+5	; 0x05
    a2b8:	9e 81       	ldd	r25, Y+6	; 0x06
    a2ba:	fc 01       	movw	r30, r24
    a2bc:	86 a1       	ldd	r24, Z+38	; 0x26
    a2be:	88 2f       	mov	r24, r24
    a2c0:	90 e0       	ldi	r25, 0x00	; 0
    a2c2:	81 30       	cpi	r24, 0x01	; 1
    a2c4:	91 05       	cpc	r25, r1
    a2c6:	a9 f1       	breq	.+106    	; 0xa332 <OSTmrRemainGet+0xd6>
    a2c8:	82 30       	cpi	r24, 0x02	; 2
    a2ca:	91 05       	cpc	r25, r1
    a2cc:	24 f4       	brge	.+8      	; 0xa2d6 <OSTmrRemainGet+0x7a>
    a2ce:	00 97       	sbiw	r24, 0x00	; 0
    a2d0:	09 f4       	brne	.+2      	; 0xa2d4 <OSTmrRemainGet+0x78>
    a2d2:	82 c0       	rjmp	.+260    	; 0xa3d8 <OSTmrRemainGet+0x17c>
    a2d4:	8c c0       	rjmp	.+280    	; 0xa3ee <OSTmrRemainGet+0x192>
    a2d6:	82 30       	cpi	r24, 0x02	; 2
    a2d8:	91 05       	cpc	r25, r1
    a2da:	09 f4       	brne	.+2      	; 0xa2de <OSTmrRemainGet+0x82>
    a2dc:	73 c0       	rjmp	.+230    	; 0xa3c4 <OSTmrRemainGet+0x168>
    a2de:	83 30       	cpi	r24, 0x03	; 3
    a2e0:	91 05       	cpc	r25, r1
    a2e2:	09 f0       	breq	.+2      	; 0xa2e6 <OSTmrRemainGet+0x8a>
    a2e4:	84 c0       	rjmp	.+264    	; 0xa3ee <OSTmrRemainGet+0x192>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
    a2e6:	8d 81       	ldd	r24, Y+5	; 0x05
    a2e8:	9e 81       	ldd	r25, Y+6	; 0x06
    a2ea:	fc 01       	movw	r30, r24
    a2ec:	21 85       	ldd	r18, Z+9	; 0x09
    a2ee:	32 85       	ldd	r19, Z+10	; 0x0a
    a2f0:	43 85       	ldd	r20, Z+11	; 0x0b
    a2f2:	54 85       	ldd	r21, Z+12	; 0x0c
    a2f4:	80 91 0a 2e 	lds	r24, 0x2E0A
    a2f8:	90 91 0b 2e 	lds	r25, 0x2E0B
    a2fc:	a0 91 0c 2e 	lds	r26, 0x2E0C
    a300:	b0 91 0d 2e 	lds	r27, 0x2E0D
    a304:	79 01       	movw	r14, r18
    a306:	8a 01       	movw	r16, r20
    a308:	e8 1a       	sub	r14, r24
    a30a:	f9 0a       	sbc	r15, r25
    a30c:	0a 0b       	sbc	r16, r26
    a30e:	1b 0b       	sbc	r17, r27
    a310:	d8 01       	movw	r26, r16
    a312:	c7 01       	movw	r24, r14
    a314:	89 83       	std	Y+1, r24	; 0x01
    a316:	9a 83       	std	Y+2, r25	; 0x02
    a318:	ab 83       	std	Y+3, r26	; 0x03
    a31a:	bc 83       	std	Y+4, r27	; 0x04
             OSTmr_Unlock();
    a31c:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
    a320:	8f 81       	ldd	r24, Y+7	; 0x07
    a322:	98 85       	ldd	r25, Y+8	; 0x08
    a324:	fc 01       	movw	r30, r24
    a326:	10 82       	st	Z, r1
             return (remain);
    a328:	89 81       	ldd	r24, Y+1	; 0x01
    a32a:	9a 81       	ldd	r25, Y+2	; 0x02
    a32c:	ab 81       	ldd	r26, Y+3	; 0x03
    a32e:	bc 81       	ldd	r27, Y+4	; 0x04
    a330:	68 c0       	rjmp	.+208    	; 0xa402 <OSTmrRemainGet+0x1a6>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
    a332:	8d 81       	ldd	r24, Y+5	; 0x05
    a334:	9e 81       	ldd	r25, Y+6	; 0x06
    a336:	fc 01       	movw	r30, r24
    a338:	85 a1       	ldd	r24, Z+37	; 0x25
    a33a:	88 2f       	mov	r24, r24
    a33c:	90 e0       	ldi	r25, 0x00	; 0
    a33e:	82 30       	cpi	r24, 0x02	; 2
    a340:	91 05       	cpc	r25, r1
    a342:	49 f5       	brne	.+82     	; 0xa396 <OSTmrRemainGet+0x13a>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
    a344:	8d 81       	ldd	r24, Y+5	; 0x05
    a346:	9e 81       	ldd	r25, Y+6	; 0x06
    a348:	fc 01       	movw	r30, r24
    a34a:	85 85       	ldd	r24, Z+13	; 0x0d
    a34c:	96 85       	ldd	r25, Z+14	; 0x0e
    a34e:	a7 85       	ldd	r26, Z+15	; 0x0f
    a350:	b0 89       	ldd	r27, Z+16	; 0x10
    a352:	00 97       	sbiw	r24, 0x00	; 0
    a354:	a1 05       	cpc	r26, r1
    a356:	b1 05       	cpc	r27, r1
    a358:	61 f4       	brne	.+24     	; 0xa372 <OSTmrRemainGet+0x116>
                          remain = ptmr->OSTmrPeriod;
    a35a:	8d 81       	ldd	r24, Y+5	; 0x05
    a35c:	9e 81       	ldd	r25, Y+6	; 0x06
    a35e:	fc 01       	movw	r30, r24
    a360:	81 89       	ldd	r24, Z+17	; 0x11
    a362:	92 89       	ldd	r25, Z+18	; 0x12
    a364:	a3 89       	ldd	r26, Z+19	; 0x13
    a366:	b4 89       	ldd	r27, Z+20	; 0x14
    a368:	89 83       	std	Y+1, r24	; 0x01
    a36a:	9a 83       	std	Y+2, r25	; 0x02
    a36c:	ab 83       	std	Y+3, r26	; 0x03
    a36e:	bc 83       	std	Y+4, r27	; 0x04
    a370:	0b c0       	rjmp	.+22     	; 0xa388 <OSTmrRemainGet+0x12c>
                      } else {
                          remain = ptmr->OSTmrDly;
    a372:	8d 81       	ldd	r24, Y+5	; 0x05
    a374:	9e 81       	ldd	r25, Y+6	; 0x06
    a376:	fc 01       	movw	r30, r24
    a378:	85 85       	ldd	r24, Z+13	; 0x0d
    a37a:	96 85       	ldd	r25, Z+14	; 0x0e
    a37c:	a7 85       	ldd	r26, Z+15	; 0x0f
    a37e:	b0 89       	ldd	r27, Z+16	; 0x10
    a380:	89 83       	std	Y+1, r24	; 0x01
    a382:	9a 83       	std	Y+2, r25	; 0x02
    a384:	ab 83       	std	Y+3, r26	; 0x03
    a386:	bc 83       	std	Y+4, r27	; 0x04
                      }
                      OSTmr_Unlock();
    a388:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    a38c:	8f 81       	ldd	r24, Y+7	; 0x07
    a38e:	98 85       	ldd	r25, Y+8	; 0x08
    a390:	fc 01       	movw	r30, r24
    a392:	10 82       	st	Z, r1
                      break;
    a394:	12 c0       	rjmp	.+36     	; 0xa3ba <OSTmrRemainGet+0x15e>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
    a396:	8d 81       	ldd	r24, Y+5	; 0x05
    a398:	9e 81       	ldd	r25, Y+6	; 0x06
    a39a:	fc 01       	movw	r30, r24
    a39c:	85 85       	ldd	r24, Z+13	; 0x0d
    a39e:	96 85       	ldd	r25, Z+14	; 0x0e
    a3a0:	a7 85       	ldd	r26, Z+15	; 0x0f
    a3a2:	b0 89       	ldd	r27, Z+16	; 0x10
    a3a4:	89 83       	std	Y+1, r24	; 0x01
    a3a6:	9a 83       	std	Y+2, r25	; 0x02
    a3a8:	ab 83       	std	Y+3, r26	; 0x03
    a3aa:	bc 83       	std	Y+4, r27	; 0x04
                      OSTmr_Unlock();
    a3ac:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    a3b0:	8f 81       	ldd	r24, Y+7	; 0x07
    a3b2:	98 85       	ldd	r25, Y+8	; 0x08
    a3b4:	fc 01       	movw	r30, r24
    a3b6:	10 82       	st	Z, r1
                      break;
    a3b8:	00 00       	nop
             }
             return (remain);
    a3ba:	89 81       	ldd	r24, Y+1	; 0x01
    a3bc:	9a 81       	ldd	r25, Y+2	; 0x02
    a3be:	ab 81       	ldd	r26, Y+3	; 0x03
    a3c0:	bc 81       	ldd	r27, Y+4	; 0x04
    a3c2:	1f c0       	rjmp	.+62     	; 0xa402 <OSTmrRemainGet+0x1a6>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
    a3c4:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a3c8:	8f 81       	ldd	r24, Y+7	; 0x07
    a3ca:	98 85       	ldd	r25, Y+8	; 0x08
    a3cc:	fc 01       	movw	r30, r24
    a3ce:	10 82       	st	Z, r1
             return (0);
    a3d0:	80 e0       	ldi	r24, 0x00	; 0
    a3d2:	90 e0       	ldi	r25, 0x00	; 0
    a3d4:	dc 01       	movw	r26, r24
    a3d6:	15 c0       	rjmp	.+42     	; 0xa402 <OSTmrRemainGet+0x1a6>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
    a3d8:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    a3dc:	8f 81       	ldd	r24, Y+7	; 0x07
    a3de:	98 85       	ldd	r25, Y+8	; 0x08
    a3e0:	27 e8       	ldi	r18, 0x87	; 135
    a3e2:	fc 01       	movw	r30, r24
    a3e4:	20 83       	st	Z, r18
             return (0);
    a3e6:	80 e0       	ldi	r24, 0x00	; 0
    a3e8:	90 e0       	ldi	r25, 0x00	; 0
    a3ea:	dc 01       	movw	r26, r24
    a3ec:	0a c0       	rjmp	.+20     	; 0xa402 <OSTmrRemainGet+0x1a6>

        default:
             OSTmr_Unlock();
    a3ee:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    a3f2:	8f 81       	ldd	r24, Y+7	; 0x07
    a3f4:	98 85       	ldd	r25, Y+8	; 0x08
    a3f6:	2d e8       	ldi	r18, 0x8D	; 141
    a3f8:	fc 01       	movw	r30, r24
    a3fa:	20 83       	st	Z, r18
             return (0);
    a3fc:	80 e0       	ldi	r24, 0x00	; 0
    a3fe:	90 e0       	ldi	r25, 0x00	; 0
    a400:	dc 01       	movw	r26, r24
    }
}
    a402:	bc 01       	movw	r22, r24
    a404:	cd 01       	movw	r24, r26
    a406:	28 96       	adiw	r28, 0x08	; 8
    a408:	cd bf       	out	0x3d, r28	; 61
    a40a:	de bf       	out	0x3e, r29	; 62
    a40c:	cf 91       	pop	r28
    a40e:	df 91       	pop	r29
    a410:	1f 91       	pop	r17
    a412:	0f 91       	pop	r16
    a414:	ff 90       	pop	r15
    a416:	ef 90       	pop	r14
    a418:	08 95       	ret

0000a41a <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
    a41a:	df 93       	push	r29
    a41c:	cf 93       	push	r28
    a41e:	cd b7       	in	r28, 0x3d	; 61
    a420:	de b7       	in	r29, 0x3e	; 62
    a422:	25 97       	sbiw	r28, 0x05	; 5
    a424:	cd bf       	out	0x3d, r28	; 61
    a426:	de bf       	out	0x3e, r29	; 62
    a428:	8a 83       	std	Y+2, r24	; 0x02
    a42a:	9b 83       	std	Y+3, r25	; 0x03
    a42c:	6c 83       	std	Y+4, r22	; 0x04
    a42e:	7d 83       	std	Y+5, r23	; 0x05
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    a430:	8a 81       	ldd	r24, Y+2	; 0x02
    a432:	9b 81       	ldd	r25, Y+3	; 0x03
    a434:	fc 01       	movw	r30, r24
    a436:	80 81       	ld	r24, Z
    a438:	84 36       	cpi	r24, 0x64	; 100
    a43a:	39 f0       	breq	.+14     	; 0xa44a <OSTmrStateGet+0x30>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a43c:	8c 81       	ldd	r24, Y+4	; 0x04
    a43e:	9d 81       	ldd	r25, Y+5	; 0x05
    a440:	29 e8       	ldi	r18, 0x89	; 137
    a442:	fc 01       	movw	r30, r24
    a444:	20 83       	st	Z, r18
        return (0);
    a446:	80 e0       	ldi	r24, 0x00	; 0
    a448:	27 c0       	rjmp	.+78     	; 0xa498 <OSTmrStateGet+0x7e>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    a44a:	80 91 07 2e 	lds	r24, 0x2E07
    a44e:	88 23       	and	r24, r24
    a450:	39 f0       	breq	.+14     	; 0xa460 <OSTmrStateGet+0x46>
        *perr = OS_ERR_TMR_ISR;
    a452:	8c 81       	ldd	r24, Y+4	; 0x04
    a454:	9d 81       	ldd	r25, Y+5	; 0x05
    a456:	2b e8       	ldi	r18, 0x8B	; 139
    a458:	fc 01       	movw	r30, r24
    a45a:	20 83       	st	Z, r18
        return (0);
    a45c:	80 e0       	ldi	r24, 0x00	; 0
    a45e:	1c c0       	rjmp	.+56     	; 0xa498 <OSTmrStateGet+0x7e>
    }
    OSTmr_Lock();
    a460:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    state = ptmr->OSTmrState;
    a464:	8a 81       	ldd	r24, Y+2	; 0x02
    a466:	9b 81       	ldd	r25, Y+3	; 0x03
    a468:	fc 01       	movw	r30, r24
    a46a:	86 a1       	ldd	r24, Z+38	; 0x26
    a46c:	89 83       	std	Y+1, r24	; 0x01
    switch (state) {
    a46e:	89 81       	ldd	r24, Y+1	; 0x01
    a470:	88 2f       	mov	r24, r24
    a472:	90 e0       	ldi	r25, 0x00	; 0
    a474:	00 96       	adiw	r24, 0x00	; 0
    a476:	84 30       	cpi	r24, 0x04	; 4
    a478:	91 05       	cpc	r25, r1
    a47a:	28 f4       	brcc	.+10     	; 0xa486 <OSTmrStateGet+0x6c>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
    a47c:	8c 81       	ldd	r24, Y+4	; 0x04
    a47e:	9d 81       	ldd	r25, Y+5	; 0x05
    a480:	fc 01       	movw	r30, r24
    a482:	10 82       	st	Z, r1
             break;
    a484:	06 c0       	rjmp	.+12     	; 0xa492 <OSTmrStateGet+0x78>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
    a486:	8c 81       	ldd	r24, Y+4	; 0x04
    a488:	9d 81       	ldd	r25, Y+5	; 0x05
    a48a:	2d e8       	ldi	r18, 0x8D	; 141
    a48c:	fc 01       	movw	r30, r24
    a48e:	20 83       	st	Z, r18
             break;
    a490:	00 00       	nop
    }
    OSTmr_Unlock();
    a492:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
    return (state);
    a496:	89 81       	ldd	r24, Y+1	; 0x01
}
    a498:	25 96       	adiw	r28, 0x05	; 5
    a49a:	cd bf       	out	0x3d, r28	; 61
    a49c:	de bf       	out	0x3e, r29	; 62
    a49e:	cf 91       	pop	r28
    a4a0:	df 91       	pop	r29
    a4a2:	08 95       	ret

0000a4a4 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
    a4a4:	df 93       	push	r29
    a4a6:	cf 93       	push	r28
    a4a8:	00 d0       	rcall	.+0      	; 0xa4aa <OSTmrStart+0x6>
    a4aa:	0f 92       	push	r0
    a4ac:	cd b7       	in	r28, 0x3d	; 61
    a4ae:	de b7       	in	r29, 0x3e	; 62
    a4b0:	89 83       	std	Y+1, r24	; 0x01
    a4b2:	9a 83       	std	Y+2, r25	; 0x02
    a4b4:	6b 83       	std	Y+3, r22	; 0x03
    a4b6:	7c 83       	std	Y+4, r23	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    a4b8:	89 81       	ldd	r24, Y+1	; 0x01
    a4ba:	9a 81       	ldd	r25, Y+2	; 0x02
    a4bc:	fc 01       	movw	r30, r24
    a4be:	80 81       	ld	r24, Z
    a4c0:	84 36       	cpi	r24, 0x64	; 100
    a4c2:	39 f0       	breq	.+14     	; 0xa4d2 <OSTmrStart+0x2e>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a4c4:	8b 81       	ldd	r24, Y+3	; 0x03
    a4c6:	9c 81       	ldd	r25, Y+4	; 0x04
    a4c8:	29 e8       	ldi	r18, 0x89	; 137
    a4ca:	fc 01       	movw	r30, r24
    a4cc:	20 83       	st	Z, r18
        return (OS_FALSE);
    a4ce:	80 e0       	ldi	r24, 0x00	; 0
    a4d0:	4e c0       	rjmp	.+156    	; 0xa56e <OSTmrStart+0xca>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    a4d2:	80 91 07 2e 	lds	r24, 0x2E07
    a4d6:	88 23       	and	r24, r24
    a4d8:	39 f0       	breq	.+14     	; 0xa4e8 <OSTmrStart+0x44>
        *perr  = OS_ERR_TMR_ISR;
    a4da:	8b 81       	ldd	r24, Y+3	; 0x03
    a4dc:	9c 81       	ldd	r25, Y+4	; 0x04
    a4de:	2b e8       	ldi	r18, 0x8B	; 139
    a4e0:	fc 01       	movw	r30, r24
    a4e2:	20 83       	st	Z, r18
        return (OS_FALSE);
    a4e4:	80 e0       	ldi	r24, 0x00	; 0
    a4e6:	43 c0       	rjmp	.+134    	; 0xa56e <OSTmrStart+0xca>
    }
    OSTmr_Lock();
    a4e8:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    a4ec:	89 81       	ldd	r24, Y+1	; 0x01
    a4ee:	9a 81       	ldd	r25, Y+2	; 0x02
    a4f0:	fc 01       	movw	r30, r24
    a4f2:	86 a1       	ldd	r24, Z+38	; 0x26
    a4f4:	88 2f       	mov	r24, r24
    a4f6:	90 e0       	ldi	r25, 0x00	; 0
    a4f8:	83 30       	cpi	r24, 0x03	; 3
    a4fa:	91 05       	cpc	r25, r1
    a4fc:	34 f4       	brge	.+12     	; 0xa50a <OSTmrStart+0x66>
    a4fe:	81 30       	cpi	r24, 0x01	; 1
    a500:	91 05       	cpc	r25, r1
    a502:	bc f4       	brge	.+46     	; 0xa532 <OSTmrStart+0x8e>
    a504:	00 97       	sbiw	r24, 0x00	; 0
    a506:	11 f1       	breq	.+68     	; 0xa54c <OSTmrStart+0xa8>
    a508:	2a c0       	rjmp	.+84     	; 0xa55e <OSTmrStart+0xba>
    a50a:	83 30       	cpi	r24, 0x03	; 3
    a50c:	91 05       	cpc	r25, r1
    a50e:	39 f5       	brne	.+78     	; 0xa55e <OSTmrStart+0xba>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
    a510:	89 81       	ldd	r24, Y+1	; 0x01
    a512:	9a 81       	ldd	r25, Y+2	; 0x02
    a514:	0e 94 ed 55 	call	0xabda	; 0xabda <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    a518:	89 81       	ldd	r24, Y+1	; 0x01
    a51a:	9a 81       	ldd	r25, Y+2	; 0x02
    a51c:	60 e0       	ldi	r22, 0x00	; 0
    a51e:	0e 94 1c 55 	call	0xaa38	; 0xaa38 <OSTmr_Link>
             OSTmr_Unlock();
    a522:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a526:	8b 81       	ldd	r24, Y+3	; 0x03
    a528:	9c 81       	ldd	r25, Y+4	; 0x04
    a52a:	fc 01       	movw	r30, r24
    a52c:	10 82       	st	Z, r1
             return (OS_TRUE);
    a52e:	81 e0       	ldi	r24, 0x01	; 1
    a530:	1e c0       	rjmp	.+60     	; 0xa56e <OSTmrStart+0xca>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    a532:	89 81       	ldd	r24, Y+1	; 0x01
    a534:	9a 81       	ldd	r25, Y+2	; 0x02
    a536:	60 e0       	ldi	r22, 0x00	; 0
    a538:	0e 94 1c 55 	call	0xaa38	; 0xaa38 <OSTmr_Link>
             OSTmr_Unlock();
    a53c:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    a540:	8b 81       	ldd	r24, Y+3	; 0x03
    a542:	9c 81       	ldd	r25, Y+4	; 0x04
    a544:	fc 01       	movw	r30, r24
    a546:	10 82       	st	Z, r1
             return (OS_TRUE);
    a548:	81 e0       	ldi	r24, 0x01	; 1
    a54a:	11 c0       	rjmp	.+34     	; 0xa56e <OSTmrStart+0xca>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
    a54c:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    a550:	8b 81       	ldd	r24, Y+3	; 0x03
    a552:	9c 81       	ldd	r25, Y+4	; 0x04
    a554:	27 e8       	ldi	r18, 0x87	; 135
    a556:	fc 01       	movw	r30, r24
    a558:	20 83       	st	Z, r18
             return (OS_FALSE);
    a55a:	80 e0       	ldi	r24, 0x00	; 0
    a55c:	08 c0       	rjmp	.+16     	; 0xa56e <OSTmrStart+0xca>

        default:
             OSTmr_Unlock();
    a55e:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    a562:	8b 81       	ldd	r24, Y+3	; 0x03
    a564:	9c 81       	ldd	r25, Y+4	; 0x04
    a566:	2d e8       	ldi	r18, 0x8D	; 141
    a568:	fc 01       	movw	r30, r24
    a56a:	20 83       	st	Z, r18
             return (OS_FALSE);
    a56c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    a56e:	24 96       	adiw	r28, 0x04	; 4
    a570:	cd bf       	out	0x3d, r28	; 61
    a572:	de bf       	out	0x3e, r29	; 62
    a574:	cf 91       	pop	r28
    a576:	df 91       	pop	r29
    a578:	08 95       	ret

0000a57a <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
    a57a:	df 93       	push	r29
    a57c:	cf 93       	push	r28
    a57e:	cd b7       	in	r28, 0x3d	; 61
    a580:	de b7       	in	r29, 0x3e	; 62
    a582:	29 97       	sbiw	r28, 0x09	; 9
    a584:	cd bf       	out	0x3d, r28	; 61
    a586:	de bf       	out	0x3e, r29	; 62
    a588:	8b 83       	std	Y+3, r24	; 0x03
    a58a:	9c 83       	std	Y+4, r25	; 0x04
    a58c:	6d 83       	std	Y+5, r22	; 0x05
    a58e:	4e 83       	std	Y+6, r20	; 0x06
    a590:	5f 83       	std	Y+7, r21	; 0x07
    a592:	28 87       	std	Y+8, r18	; 0x08
    a594:	39 87       	std	Y+9, r19	; 0x09
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
    a596:	8b 81       	ldd	r24, Y+3	; 0x03
    a598:	9c 81       	ldd	r25, Y+4	; 0x04
    a59a:	fc 01       	movw	r30, r24
    a59c:	80 81       	ld	r24, Z
    a59e:	84 36       	cpi	r24, 0x64	; 100
    a5a0:	39 f0       	breq	.+14     	; 0xa5b0 <OSTmrStop+0x36>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    a5a2:	88 85       	ldd	r24, Y+8	; 0x08
    a5a4:	99 85       	ldd	r25, Y+9	; 0x09
    a5a6:	29 e8       	ldi	r18, 0x89	; 137
    a5a8:	fc 01       	movw	r30, r24
    a5aa:	20 83       	st	Z, r18
        return (OS_FALSE);
    a5ac:	80 e0       	ldi	r24, 0x00	; 0
    a5ae:	95 c0       	rjmp	.+298    	; 0xa6da <OSTmrStop+0x160>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
    a5b0:	80 91 07 2e 	lds	r24, 0x2E07
    a5b4:	88 23       	and	r24, r24
    a5b6:	39 f0       	breq	.+14     	; 0xa5c6 <OSTmrStop+0x4c>
        *perr  = OS_ERR_TMR_ISR;
    a5b8:	88 85       	ldd	r24, Y+8	; 0x08
    a5ba:	99 85       	ldd	r25, Y+9	; 0x09
    a5bc:	2b e8       	ldi	r18, 0x8B	; 139
    a5be:	fc 01       	movw	r30, r24
    a5c0:	20 83       	st	Z, r18
        return (OS_FALSE);
    a5c2:	80 e0       	ldi	r24, 0x00	; 0
    a5c4:	8a c0       	rjmp	.+276    	; 0xa6da <OSTmrStop+0x160>
    }
    OSTmr_Lock();
    a5c6:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    a5ca:	8b 81       	ldd	r24, Y+3	; 0x03
    a5cc:	9c 81       	ldd	r25, Y+4	; 0x04
    a5ce:	fc 01       	movw	r30, r24
    a5d0:	86 a1       	ldd	r24, Z+38	; 0x26
    a5d2:	88 2f       	mov	r24, r24
    a5d4:	90 e0       	ldi	r25, 0x00	; 0
    a5d6:	83 30       	cpi	r24, 0x03	; 3
    a5d8:	91 05       	cpc	r25, r1
    a5da:	44 f4       	brge	.+16     	; 0xa5ec <OSTmrStop+0x72>
    a5dc:	81 30       	cpi	r24, 0x01	; 1
    a5de:	91 05       	cpc	r25, r1
    a5e0:	0c f0       	brlt	.+2      	; 0xa5e4 <OSTmrStop+0x6a>
    a5e2:	61 c0       	rjmp	.+194    	; 0xa6a6 <OSTmrStop+0x12c>
    a5e4:	00 97       	sbiw	r24, 0x00	; 0
    a5e6:	09 f4       	brne	.+2      	; 0xa5ea <OSTmrStop+0x70>
    a5e8:	67 c0       	rjmp	.+206    	; 0xa6b8 <OSTmrStop+0x13e>
    a5ea:	6f c0       	rjmp	.+222    	; 0xa6ca <OSTmrStop+0x150>
    a5ec:	83 30       	cpi	r24, 0x03	; 3
    a5ee:	91 05       	cpc	r25, r1
    a5f0:	09 f0       	breq	.+2      	; 0xa5f4 <OSTmrStop+0x7a>
    a5f2:	6b c0       	rjmp	.+214    	; 0xa6ca <OSTmrStop+0x150>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
    a5f4:	8b 81       	ldd	r24, Y+3	; 0x03
    a5f6:	9c 81       	ldd	r25, Y+4	; 0x04
    a5f8:	0e 94 ed 55 	call	0xabda	; 0xabda <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
    a5fc:	88 85       	ldd	r24, Y+8	; 0x08
    a5fe:	99 85       	ldd	r25, Y+9	; 0x09
    a600:	fc 01       	movw	r30, r24
    a602:	10 82       	st	Z, r1
             switch (opt) {
    a604:	8d 81       	ldd	r24, Y+5	; 0x05
    a606:	88 2f       	mov	r24, r24
    a608:	90 e0       	ldi	r25, 0x00	; 0
    a60a:	83 30       	cpi	r24, 0x03	; 3
    a60c:	91 05       	cpc	r25, r1
    a60e:	39 f0       	breq	.+14     	; 0xa61e <OSTmrStop+0xa4>
    a610:	84 30       	cpi	r24, 0x04	; 4
    a612:	91 05       	cpc	r25, r1
    a614:	11 f1       	breq	.+68     	; 0xa65a <OSTmrStop+0xe0>
    a616:	00 97       	sbiw	r24, 0x00	; 0
    a618:	09 f4       	brne	.+2      	; 0xa61c <OSTmrStop+0xa2>
    a61a:	40 c0       	rjmp	.+128    	; 0xa69c <OSTmrStop+0x122>
    a61c:	39 c0       	rjmp	.+114    	; 0xa690 <OSTmrStop+0x116>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    a61e:	8b 81       	ldd	r24, Y+3	; 0x03
    a620:	9c 81       	ldd	r25, Y+4	; 0x04
    a622:	fc 01       	movw	r30, r24
    a624:	81 81       	ldd	r24, Z+1	; 0x01
    a626:	92 81       	ldd	r25, Z+2	; 0x02
    a628:	89 83       	std	Y+1, r24	; 0x01
    a62a:	9a 83       	std	Y+2, r25	; 0x02
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    a62c:	89 81       	ldd	r24, Y+1	; 0x01
    a62e:	9a 81       	ldd	r25, Y+2	; 0x02
    a630:	00 97       	sbiw	r24, 0x00	; 0
    a632:	69 f0       	breq	.+26     	; 0xa64e <OSTmrStop+0xd4>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
    a634:	8b 81       	ldd	r24, Y+3	; 0x03
    a636:	9c 81       	ldd	r25, Y+4	; 0x04
    a638:	fc 01       	movw	r30, r24
    a63a:	43 81       	ldd	r20, Z+3	; 0x03
    a63c:	54 81       	ldd	r21, Z+4	; 0x04
    a63e:	8b 81       	ldd	r24, Y+3	; 0x03
    a640:	9c 81       	ldd	r25, Y+4	; 0x04
    a642:	29 81       	ldd	r18, Y+1	; 0x01
    a644:	3a 81       	ldd	r19, Y+2	; 0x02
    a646:	ba 01       	movw	r22, r20
    a648:	f9 01       	movw	r30, r18
    a64a:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    a64c:	28 c0       	rjmp	.+80     	; 0xa69e <OSTmrStop+0x124>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    a64e:	88 85       	ldd	r24, Y+8	; 0x08
    a650:	99 85       	ldd	r25, Y+9	; 0x09
    a652:	2f e8       	ldi	r18, 0x8F	; 143
    a654:	fc 01       	movw	r30, r24
    a656:	20 83       	st	Z, r18
                      }
                      break;
    a658:	22 c0       	rjmp	.+68     	; 0xa69e <OSTmrStop+0x124>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    a65a:	8b 81       	ldd	r24, Y+3	; 0x03
    a65c:	9c 81       	ldd	r25, Y+4	; 0x04
    a65e:	fc 01       	movw	r30, r24
    a660:	81 81       	ldd	r24, Z+1	; 0x01
    a662:	92 81       	ldd	r25, Z+2	; 0x02
    a664:	89 83       	std	Y+1, r24	; 0x01
    a666:	9a 83       	std	Y+2, r25	; 0x02
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    a668:	89 81       	ldd	r24, Y+1	; 0x01
    a66a:	9a 81       	ldd	r25, Y+2	; 0x02
    a66c:	00 97       	sbiw	r24, 0x00	; 0
    a66e:	51 f0       	breq	.+20     	; 0xa684 <OSTmrStop+0x10a>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
    a670:	8b 81       	ldd	r24, Y+3	; 0x03
    a672:	9c 81       	ldd	r25, Y+4	; 0x04
    a674:	4e 81       	ldd	r20, Y+6	; 0x06
    a676:	5f 81       	ldd	r21, Y+7	; 0x07
    a678:	29 81       	ldd	r18, Y+1	; 0x01
    a67a:	3a 81       	ldd	r19, Y+2	; 0x02
    a67c:	ba 01       	movw	r22, r20
    a67e:	f9 01       	movw	r30, r18
    a680:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    a682:	0d c0       	rjmp	.+26     	; 0xa69e <OSTmrStop+0x124>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    a684:	88 85       	ldd	r24, Y+8	; 0x08
    a686:	99 85       	ldd	r25, Y+9	; 0x09
    a688:	2f e8       	ldi	r18, 0x8F	; 143
    a68a:	fc 01       	movw	r30, r24
    a68c:	20 83       	st	Z, r18
                      }
                      break;
    a68e:	07 c0       	rjmp	.+14     	; 0xa69e <OSTmrStop+0x124>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
    a690:	88 85       	ldd	r24, Y+8	; 0x08
    a692:	99 85       	ldd	r25, Y+9	; 0x09
    a694:	24 e8       	ldi	r18, 0x84	; 132
    a696:	fc 01       	movw	r30, r24
    a698:	20 83       	st	Z, r18
                     break;
    a69a:	01 c0       	rjmp	.+2      	; 0xa69e <OSTmrStop+0x124>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
    a69c:	00 00       	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
    a69e:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             return (OS_TRUE);
    a6a2:	81 e0       	ldi	r24, 0x01	; 1
    a6a4:	1a c0       	rjmp	.+52     	; 0xa6da <OSTmrStop+0x160>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
    a6a6:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
    a6aa:	88 85       	ldd	r24, Y+8	; 0x08
    a6ac:	99 85       	ldd	r25, Y+9	; 0x09
    a6ae:	2e e8       	ldi	r18, 0x8E	; 142
    a6b0:	fc 01       	movw	r30, r24
    a6b2:	20 83       	st	Z, r18
             return (OS_TRUE);
    a6b4:	81 e0       	ldi	r24, 0x01	; 1
    a6b6:	11 c0       	rjmp	.+34     	; 0xa6da <OSTmrStop+0x160>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
    a6b8:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    a6bc:	88 85       	ldd	r24, Y+8	; 0x08
    a6be:	99 85       	ldd	r25, Y+9	; 0x09
    a6c0:	27 e8       	ldi	r18, 0x87	; 135
    a6c2:	fc 01       	movw	r30, r24
    a6c4:	20 83       	st	Z, r18
             return (OS_FALSE);
    a6c6:	80 e0       	ldi	r24, 0x00	; 0
    a6c8:	08 c0       	rjmp	.+16     	; 0xa6da <OSTmrStop+0x160>

        default:
             OSTmr_Unlock();
    a6ca:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    a6ce:	88 85       	ldd	r24, Y+8	; 0x08
    a6d0:	99 85       	ldd	r25, Y+9	; 0x09
    a6d2:	2d e8       	ldi	r18, 0x8D	; 141
    a6d4:	fc 01       	movw	r30, r24
    a6d6:	20 83       	st	Z, r18
             return (OS_FALSE);
    a6d8:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    a6da:	29 96       	adiw	r28, 0x09	; 9
    a6dc:	cd bf       	out	0x3d, r28	; 61
    a6de:	de bf       	out	0x3e, r29	; 62
    a6e0:	cf 91       	pop	r28
    a6e2:	df 91       	pop	r29
    a6e4:	08 95       	ret

0000a6e6 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
    a6e6:	df 93       	push	r29
    a6e8:	cf 93       	push	r28
    a6ea:	0f 92       	push	r0
    a6ec:	cd b7       	in	r28, 0x3d	; 61
    a6ee:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    a6f0:	80 91 fb 27 	lds	r24, 0x27FB
    a6f4:	90 91 fc 27 	lds	r25, 0x27FC
    a6f8:	0e 94 22 45 	call	0x8a44	; 0x8a44 <OSSemPost>
    a6fc:	89 83       	std	Y+1, r24	; 0x01
    return (err);
    a6fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    a700:	0f 90       	pop	r0
    a702:	cf 91       	pop	r28
    a704:	df 91       	pop	r29
    a706:	08 95       	ret

0000a708 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
    a708:	df 93       	push	r29
    a70a:	cf 93       	push	r28
    a70c:	0f 92       	push	r0
    a70e:	0f 92       	push	r0
    a710:	cd b7       	in	r28, 0x3d	; 61
    a712:	de b7       	in	r29, 0x3e	; 62
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
    a714:	80 91 d8 27 	lds	r24, 0x27D8
    a718:	90 91 d9 27 	lds	r25, 0x27D9
    a71c:	00 97       	sbiw	r24, 0x00	; 0
    a71e:	19 f4       	brne	.+6      	; 0xa726 <OSTmr_Alloc+0x1e>
        return ((OS_TMR *)0);
    a720:	80 e0       	ldi	r24, 0x00	; 0
    a722:	90 e0       	ldi	r25, 0x00	; 0
    a724:	2d c0       	rjmp	.+90     	; 0xa780 <OSTmr_Alloc+0x78>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    a726:	80 91 d8 27 	lds	r24, 0x27D8
    a72a:	90 91 d9 27 	lds	r25, 0x27D9
    a72e:	89 83       	std	Y+1, r24	; 0x01
    a730:	9a 83       	std	Y+2, r25	; 0x02
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    a732:	89 81       	ldd	r24, Y+1	; 0x01
    a734:	9a 81       	ldd	r25, Y+2	; 0x02
    a736:	fc 01       	movw	r30, r24
    a738:	85 81       	ldd	r24, Z+5	; 0x05
    a73a:	96 81       	ldd	r25, Z+6	; 0x06
    a73c:	80 93 d8 27 	sts	0x27D8, r24
    a740:	90 93 d9 27 	sts	0x27D9, r25
    ptmr->OSTmrNext = (OS_TCB *)0;
    a744:	89 81       	ldd	r24, Y+1	; 0x01
    a746:	9a 81       	ldd	r25, Y+2	; 0x02
    a748:	fc 01       	movw	r30, r24
    a74a:	15 82       	std	Z+5, r1	; 0x05
    a74c:	16 82       	std	Z+6, r1	; 0x06
    ptmr->OSTmrPrev = (OS_TCB *)0;
    a74e:	89 81       	ldd	r24, Y+1	; 0x01
    a750:	9a 81       	ldd	r25, Y+2	; 0x02
    a752:	fc 01       	movw	r30, r24
    a754:	17 82       	std	Z+7, r1	; 0x07
    a756:	10 86       	std	Z+8, r1	; 0x08
    OSTmrUsed++;
    a758:	80 91 02 28 	lds	r24, 0x2802
    a75c:	90 91 03 28 	lds	r25, 0x2803
    a760:	01 96       	adiw	r24, 0x01	; 1
    a762:	80 93 02 28 	sts	0x2802, r24
    a766:	90 93 03 28 	sts	0x2803, r25
    OSTmrFree--;
    a76a:	80 91 4e 2c 	lds	r24, 0x2C4E
    a76e:	90 91 4f 2c 	lds	r25, 0x2C4F
    a772:	01 97       	sbiw	r24, 0x01	; 1
    a774:	80 93 4e 2c 	sts	0x2C4E, r24
    a778:	90 93 4f 2c 	sts	0x2C4F, r25
    return (ptmr);
    a77c:	89 81       	ldd	r24, Y+1	; 0x01
    a77e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    a780:	0f 90       	pop	r0
    a782:	0f 90       	pop	r0
    a784:	cf 91       	pop	r28
    a786:	df 91       	pop	r29
    a788:	08 95       	ret

0000a78a <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    a78a:	df 93       	push	r29
    a78c:	cf 93       	push	r28
    a78e:	0f 92       	push	r0
    a790:	0f 92       	push	r0
    a792:	cd b7       	in	r28, 0x3d	; 61
    a794:	de b7       	in	r29, 0x3e	; 62
    a796:	89 83       	std	Y+1, r24	; 0x01
    a798:	9a 83       	std	Y+2, r25	; 0x02
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    a79a:	89 81       	ldd	r24, Y+1	; 0x01
    a79c:	9a 81       	ldd	r25, Y+2	; 0x02
    a79e:	fc 01       	movw	r30, r24
    a7a0:	16 a2       	std	Z+38, r1	; 0x26
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    a7a2:	89 81       	ldd	r24, Y+1	; 0x01
    a7a4:	9a 81       	ldd	r25, Y+2	; 0x02
    a7a6:	fc 01       	movw	r30, r24
    a7a8:	15 a2       	std	Z+37, r1	; 0x25
    ptmr->OSTmrPeriod      = 0;
    a7aa:	89 81       	ldd	r24, Y+1	; 0x01
    a7ac:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ae:	fc 01       	movw	r30, r24
    a7b0:	11 8a       	std	Z+17, r1	; 0x11
    a7b2:	12 8a       	std	Z+18, r1	; 0x12
    a7b4:	13 8a       	std	Z+19, r1	; 0x13
    a7b6:	14 8a       	std	Z+20, r1	; 0x14
    ptmr->OSTmrMatch       = 0;
    a7b8:	89 81       	ldd	r24, Y+1	; 0x01
    a7ba:	9a 81       	ldd	r25, Y+2	; 0x02
    a7bc:	fc 01       	movw	r30, r24
    a7be:	11 86       	std	Z+9, r1	; 0x09
    a7c0:	12 86       	std	Z+10, r1	; 0x0a
    a7c2:	13 86       	std	Z+11, r1	; 0x0b
    a7c4:	14 86       	std	Z+12, r1	; 0x0c
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    a7c6:	89 81       	ldd	r24, Y+1	; 0x01
    a7c8:	9a 81       	ldd	r25, Y+2	; 0x02
    a7ca:	fc 01       	movw	r30, r24
    a7cc:	11 82       	std	Z+1, r1	; 0x01
    a7ce:	12 82       	std	Z+2, r1	; 0x02
    ptmr->OSTmrCallbackArg = (void *)0;
    a7d0:	89 81       	ldd	r24, Y+1	; 0x01
    a7d2:	9a 81       	ldd	r25, Y+2	; 0x02
    a7d4:	fc 01       	movw	r30, r24
    a7d6:	13 82       	std	Z+3, r1	; 0x03
    a7d8:	14 82       	std	Z+4, r1	; 0x04
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    a7da:	89 81       	ldd	r24, Y+1	; 0x01
    a7dc:	9a 81       	ldd	r25, Y+2	; 0x02
    a7de:	2f e3       	ldi	r18, 0x3F	; 63
    a7e0:	fc 01       	movw	r30, r24
    a7e2:	25 8b       	std	Z+21, r18	; 0x15
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
    a7e4:	89 81       	ldd	r24, Y+1	; 0x01
    a7e6:	9a 81       	ldd	r25, Y+2	; 0x02
    a7e8:	fc 01       	movw	r30, r24
    a7ea:	16 8a       	std	Z+22, r1	; 0x16
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    a7ec:	89 81       	ldd	r24, Y+1	; 0x01
    a7ee:	9a 81       	ldd	r25, Y+2	; 0x02
    a7f0:	fc 01       	movw	r30, r24
    a7f2:	17 82       	std	Z+7, r1	; 0x07
    a7f4:	10 86       	std	Z+8, r1	; 0x08
    ptmr->OSTmrNext        = OSTmrFreeList;
    a7f6:	20 91 d8 27 	lds	r18, 0x27D8
    a7fa:	30 91 d9 27 	lds	r19, 0x27D9
    a7fe:	89 81       	ldd	r24, Y+1	; 0x01
    a800:	9a 81       	ldd	r25, Y+2	; 0x02
    a802:	fc 01       	movw	r30, r24
    a804:	25 83       	std	Z+5, r18	; 0x05
    a806:	36 83       	std	Z+6, r19	; 0x06
    OSTmrFreeList          = ptmr;
    a808:	89 81       	ldd	r24, Y+1	; 0x01
    a80a:	9a 81       	ldd	r25, Y+2	; 0x02
    a80c:	80 93 d8 27 	sts	0x27D8, r24
    a810:	90 93 d9 27 	sts	0x27D9, r25

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    a814:	80 91 02 28 	lds	r24, 0x2802
    a818:	90 91 03 28 	lds	r25, 0x2803
    a81c:	01 97       	sbiw	r24, 0x01	; 1
    a81e:	80 93 02 28 	sts	0x2802, r24
    a822:	90 93 03 28 	sts	0x2803, r25
    OSTmrFree++;
    a826:	80 91 4e 2c 	lds	r24, 0x2C4E
    a82a:	90 91 4f 2c 	lds	r25, 0x2C4F
    a82e:	01 96       	adiw	r24, 0x01	; 1
    a830:	80 93 4e 2c 	sts	0x2C4E, r24
    a834:	90 93 4f 2c 	sts	0x2C4F, r25
}
    a838:	0f 90       	pop	r0
    a83a:	0f 90       	pop	r0
    a83c:	cf 91       	pop	r28
    a83e:	df 91       	pop	r29
    a840:	08 95       	ret

0000a842 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
    a842:	df 93       	push	r29
    a844:	cf 93       	push	r28
    a846:	cd b7       	in	r28, 0x3d	; 61
    a848:	de b7       	in	r29, 0x3e	; 62
    a84a:	27 97       	sbiw	r28, 0x07	; 7
    a84c:	cd bf       	out	0x3d, r28	; 61
    a84e:	de bf       	out	0x3e, r29	; 62
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    a850:	8e e6       	ldi	r24, 0x6E	; 110
    a852:	98 e2       	ldi	r25, 0x28	; 40
    a854:	60 e7       	ldi	r22, 0x70	; 112
    a856:	72 e0       	ldi	r23, 0x02	; 2
    a858:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    a85c:	8a ed       	ldi	r24, 0xDA	; 218
    a85e:	97 e2       	ldi	r25, 0x27	; 39
    a860:	60 e2       	ldi	r22, 0x20	; 32
    a862:	70 e0       	ldi	r23, 0x00	; 0
    a864:	0e 94 27 26 	call	0x4c4e	; 0x4c4e <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
    a868:	8e e6       	ldi	r24, 0x6E	; 110
    a86a:	98 e2       	ldi	r25, 0x28	; 40
    a86c:	8b 83       	std	Y+3, r24	; 0x03
    a86e:	9c 83       	std	Y+4, r25	; 0x04
    ptmr2 = &OSTmrTbl[1];
    a870:	85 e9       	ldi	r24, 0x95	; 149
    a872:	98 e2       	ldi	r25, 0x28	; 40
    a874:	8d 83       	std	Y+5, r24	; 0x05
    a876:	9e 83       	std	Y+6, r25	; 0x06
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    a878:	19 82       	std	Y+1, r1	; 0x01
    a87a:	1a 82       	std	Y+2, r1	; 0x02
    a87c:	28 c0       	rjmp	.+80     	; 0xa8ce <OSTmr_Init+0x8c>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    a87e:	8b 81       	ldd	r24, Y+3	; 0x03
    a880:	9c 81       	ldd	r25, Y+4	; 0x04
    a882:	24 e6       	ldi	r18, 0x64	; 100
    a884:	fc 01       	movw	r30, r24
    a886:	20 83       	st	Z, r18
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    a888:	8b 81       	ldd	r24, Y+3	; 0x03
    a88a:	9c 81       	ldd	r25, Y+4	; 0x04
    a88c:	fc 01       	movw	r30, r24
    a88e:	16 a2       	std	Z+38, r1	; 0x26
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    a890:	8b 81       	ldd	r24, Y+3	; 0x03
    a892:	9c 81       	ldd	r25, Y+4	; 0x04
    a894:	2d 81       	ldd	r18, Y+5	; 0x05
    a896:	3e 81       	ldd	r19, Y+6	; 0x06
    a898:	fc 01       	movw	r30, r24
    a89a:	25 83       	std	Z+5, r18	; 0x05
    a89c:	36 83       	std	Z+6, r19	; 0x06
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
    a89e:	8b 81       	ldd	r24, Y+3	; 0x03
    a8a0:	9c 81       	ldd	r25, Y+4	; 0x04
    a8a2:	2f e3       	ldi	r18, 0x3F	; 63
    a8a4:	fc 01       	movw	r30, r24
    a8a6:	25 8b       	std	Z+21, r18	; 0x15
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    a8a8:	8b 81       	ldd	r24, Y+3	; 0x03
    a8aa:	9c 81       	ldd	r25, Y+4	; 0x04
    a8ac:	fc 01       	movw	r30, r24
    a8ae:	16 8a       	std	Z+22, r1	; 0x16
#endif
        ptmr1++;
    a8b0:	8b 81       	ldd	r24, Y+3	; 0x03
    a8b2:	9c 81       	ldd	r25, Y+4	; 0x04
    a8b4:	87 96       	adiw	r24, 0x27	; 39
    a8b6:	8b 83       	std	Y+3, r24	; 0x03
    a8b8:	9c 83       	std	Y+4, r25	; 0x04
        ptmr2++;
    a8ba:	8d 81       	ldd	r24, Y+5	; 0x05
    a8bc:	9e 81       	ldd	r25, Y+6	; 0x06
    a8be:	87 96       	adiw	r24, 0x27	; 39
    a8c0:	8d 83       	std	Y+5, r24	; 0x05
    a8c2:	9e 83       	std	Y+6, r25	; 0x06
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    a8c4:	89 81       	ldd	r24, Y+1	; 0x01
    a8c6:	9a 81       	ldd	r25, Y+2	; 0x02
    a8c8:	01 96       	adiw	r24, 0x01	; 1
    a8ca:	89 83       	std	Y+1, r24	; 0x01
    a8cc:	9a 83       	std	Y+2, r25	; 0x02
    a8ce:	89 81       	ldd	r24, Y+1	; 0x01
    a8d0:	9a 81       	ldd	r25, Y+2	; 0x02
    a8d2:	8f 30       	cpi	r24, 0x0F	; 15
    a8d4:	91 05       	cpc	r25, r1
    a8d6:	98 f2       	brcs	.-90     	; 0xa87e <OSTmr_Init+0x3c>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    a8d8:	8b 81       	ldd	r24, Y+3	; 0x03
    a8da:	9c 81       	ldd	r25, Y+4	; 0x04
    a8dc:	24 e6       	ldi	r18, 0x64	; 100
    a8de:	fc 01       	movw	r30, r24
    a8e0:	20 83       	st	Z, r18
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    a8e2:	8b 81       	ldd	r24, Y+3	; 0x03
    a8e4:	9c 81       	ldd	r25, Y+4	; 0x04
    a8e6:	fc 01       	movw	r30, r24
    a8e8:	16 a2       	std	Z+38, r1	; 0x26
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    a8ea:	8b 81       	ldd	r24, Y+3	; 0x03
    a8ec:	9c 81       	ldd	r25, Y+4	; 0x04
    a8ee:	fc 01       	movw	r30, r24
    a8f0:	15 82       	std	Z+5, r1	; 0x05
    a8f2:	16 82       	std	Z+6, r1	; 0x06
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    a8f4:	8b 81       	ldd	r24, Y+3	; 0x03
    a8f6:	9c 81       	ldd	r25, Y+4	; 0x04
    a8f8:	2f e3       	ldi	r18, 0x3F	; 63
    a8fa:	fc 01       	movw	r30, r24
    a8fc:	25 8b       	std	Z+21, r18	; 0x15
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    a8fe:	8b 81       	ldd	r24, Y+3	; 0x03
    a900:	9c 81       	ldd	r25, Y+4	; 0x04
    a902:	fc 01       	movw	r30, r24
    a904:	16 8a       	std	Z+22, r1	; 0x16
#endif
    OSTmrTime           = 0;
    a906:	10 92 0a 2e 	sts	0x2E0A, r1
    a90a:	10 92 0b 2e 	sts	0x2E0B, r1
    a90e:	10 92 0c 2e 	sts	0x2E0C, r1
    a912:	10 92 0d 2e 	sts	0x2E0D, r1
    OSTmrUsed           = 0;
    a916:	10 92 02 28 	sts	0x2802, r1
    a91a:	10 92 03 28 	sts	0x2803, r1
    OSTmrFree           = OS_TMR_CFG_MAX;
    a91e:	80 e1       	ldi	r24, 0x10	; 16
    a920:	90 e0       	ldi	r25, 0x00	; 0
    a922:	80 93 4e 2c 	sts	0x2C4E, r24
    a926:	90 93 4f 2c 	sts	0x2C4F, r25
    OSTmrFreeList       = &OSTmrTbl[0];
    a92a:	8e e6       	ldi	r24, 0x6E	; 110
    a92c:	98 e2       	ldi	r25, 0x28	; 40
    a92e:	80 93 d8 27 	sts	0x27D8, r24
    a932:	90 93 d9 27 	sts	0x27D9, r25
    OSTmrSem            = OSSemCreate(1);
    a936:	81 e0       	ldi	r24, 0x01	; 1
    a938:	90 e0       	ldi	r25, 0x00	; 0
    a93a:	0e 94 d7 42 	call	0x85ae	; 0x85ae <OSSemCreate>
    a93e:	80 93 12 2e 	sts	0x2E12, r24
    a942:	90 93 13 2e 	sts	0x2E13, r25
    OSTmrSemSignal      = OSSemCreate(0);
    a946:	80 e0       	ldi	r24, 0x00	; 0
    a948:	90 e0       	ldi	r25, 0x00	; 0
    a94a:	0e 94 d7 42 	call	0x85ae	; 0x85ae <OSSemCreate>
    a94e:	80 93 fb 27 	sts	0x27FB, r24
    a952:	90 93 fc 27 	sts	0x27FC, r25

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
    a956:	80 91 12 2e 	lds	r24, 0x2E12
    a95a:	90 91 13 2e 	lds	r25, 0x2E13
    a95e:	44 ed       	ldi	r20, 0xD4	; 212
    a960:	52 e2       	ldi	r21, 0x22	; 34
    a962:	9e 01       	movw	r18, r28
    a964:	29 5f       	subi	r18, 0xF9	; 249
    a966:	3f 4f       	sbci	r19, 0xFF	; 255
    a968:	ba 01       	movw	r22, r20
    a96a:	a9 01       	movw	r20, r18
    a96c:	0e 94 91 1c 	call	0x3922	; 0x3922 <OSEventNameSet>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
    a970:	80 91 fb 27 	lds	r24, 0x27FB
    a974:	90 91 fc 27 	lds	r25, 0x27FC
    a978:	4f ed       	ldi	r20, 0xDF	; 223
    a97a:	52 e2       	ldi	r21, 0x22	; 34
    a97c:	9e 01       	movw	r18, r28
    a97e:	29 5f       	subi	r18, 0xF9	; 249
    a980:	3f 4f       	sbci	r19, 0xFF	; 255
    a982:	ba 01       	movw	r22, r20
    a984:	a9 01       	movw	r20, r18
    a986:	0e 94 91 1c 	call	0x3922	; 0x3922 <OSEventNameSet>
#endif
#endif

    OSTmr_InitTask();
    a98a:	0e 94 cd 54 	call	0xa99a	; 0xa99a <OSTmr_InitTask>
}
    a98e:	27 96       	adiw	r28, 0x07	; 7
    a990:	cd bf       	out	0x3d, r28	; 61
    a992:	de bf       	out	0x3e, r29	; 62
    a994:	cf 91       	pop	r28
    a996:	df 91       	pop	r29
    a998:	08 95       	ret

0000a99a <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
    a99a:	8f 92       	push	r8
    a99c:	9f 92       	push	r9
    a99e:	af 92       	push	r10
    a9a0:	bf 92       	push	r11
    a9a2:	cf 92       	push	r12
    a9a4:	df 92       	push	r13
    a9a6:	ef 92       	push	r14
    a9a8:	ff 92       	push	r15
    a9aa:	0f 93       	push	r16
    a9ac:	1f 93       	push	r17
    a9ae:	df 93       	push	r29
    a9b0:	cf 93       	push	r28
    a9b2:	0f 92       	push	r0
    a9b4:	cd b7       	in	r28, 0x3d	; 61
    a9b6:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
    a9b8:	0f 92       	push	r0
    a9ba:	0f 92       	push	r0
    a9bc:	4d b7       	in	r20, 0x3d	; 61
    a9be:	5e b7       	in	r21, 0x3e	; 62
    a9c0:	4f 5f       	subi	r20, 0xFF	; 255
    a9c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a9c4:	81 e9       	ldi	r24, 0x91	; 145
    a9c6:	96 e5       	ldi	r25, 0x56	; 86
    a9c8:	24 e0       	ldi	r18, 0x04	; 4
    a9ca:	3e e2       	ldi	r19, 0x2E	; 46
    a9cc:	ed e9       	ldi	r30, 0x9D	; 157
    a9ce:	fc e2       	ldi	r31, 0x2C	; 44
    a9d0:	63 e0       	ldi	r22, 0x03	; 3
    a9d2:	70 e0       	ldi	r23, 0x00	; 0
    a9d4:	da 01       	movw	r26, r20
    a9d6:	6d 93       	st	X+, r22
    a9d8:	7c 93       	st	X, r23
    a9da:	60 e0       	ldi	r22, 0x00	; 0
    a9dc:	70 e0       	ldi	r23, 0x00	; 0
    a9de:	a9 01       	movw	r20, r18
    a9e0:	2d e3       	ldi	r18, 0x3D	; 61
    a9e2:	0d ef       	ldi	r16, 0xFD	; 253
    a9e4:	1f ef       	ldi	r17, 0xFF	; 255
    a9e6:	7f 01       	movw	r14, r30
    a9e8:	0f 2e       	mov	r0, r31
    a9ea:	f8 e6       	ldi	r31, 0x68	; 104
    a9ec:	af 2e       	mov	r10, r31
    a9ee:	f1 e0       	ldi	r31, 0x01	; 1
    a9f0:	bf 2e       	mov	r11, r31
    a9f2:	f0 e0       	ldi	r31, 0x00	; 0
    a9f4:	cf 2e       	mov	r12, r31
    a9f6:	f0 e0       	ldi	r31, 0x00	; 0
    a9f8:	df 2e       	mov	r13, r31
    a9fa:	f0 2d       	mov	r31, r0
    a9fc:	88 24       	eor	r8, r8
    a9fe:	99 24       	eor	r9, r9
    aa00:	0e 94 76 48 	call	0x90ec	; 0x90ec <OSTaskCreateExt>
    aa04:	0f 90       	pop	r0
    aa06:	0f 90       	pop	r0
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
    aa08:	29 ee       	ldi	r18, 0xE9	; 233
    aa0a:	32 e2       	ldi	r19, 0x22	; 34
    aa0c:	8d e3       	ldi	r24, 0x3D	; 61
    aa0e:	b9 01       	movw	r22, r18
    aa10:	9e 01       	movw	r18, r28
    aa12:	2f 5f       	subi	r18, 0xFF	; 255
    aa14:	3f 4f       	sbci	r19, 0xFF	; 255
    aa16:	a9 01       	movw	r20, r18
    aa18:	0e 94 0d 4b 	call	0x961a	; 0x961a <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
    aa1c:	0f 90       	pop	r0
    aa1e:	cf 91       	pop	r28
    aa20:	df 91       	pop	r29
    aa22:	1f 91       	pop	r17
    aa24:	0f 91       	pop	r16
    aa26:	ff 90       	pop	r15
    aa28:	ef 90       	pop	r14
    aa2a:	df 90       	pop	r13
    aa2c:	cf 90       	pop	r12
    aa2e:	bf 90       	pop	r11
    aa30:	af 90       	pop	r10
    aa32:	9f 90       	pop	r9
    aa34:	8f 90       	pop	r8
    aa36:	08 95       	ret

0000aa38 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
    aa38:	df 93       	push	r29
    aa3a:	cf 93       	push	r28
    aa3c:	cd b7       	in	r28, 0x3d	; 61
    aa3e:	de b7       	in	r29, 0x3e	; 62
    aa40:	29 97       	sbiw	r28, 0x09	; 9
    aa42:	cd bf       	out	0x3d, r28	; 61
    aa44:	de bf       	out	0x3e, r29	; 62
    aa46:	8f 83       	std	Y+7, r24	; 0x07
    aa48:	98 87       	std	Y+8, r25	; 0x08
    aa4a:	69 87       	std	Y+9, r22	; 0x09
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
    aa4c:	8f 81       	ldd	r24, Y+7	; 0x07
    aa4e:	98 85       	ldd	r25, Y+8	; 0x08
    aa50:	23 e0       	ldi	r18, 0x03	; 3
    aa52:	fc 01       	movw	r30, r24
    aa54:	26 a3       	std	Z+38, r18	; 0x26
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
    aa56:	89 85       	ldd	r24, Y+9	; 0x09
    aa58:	81 30       	cpi	r24, 0x01	; 1
    aa5a:	d9 f4       	brne	.+54     	; 0xaa92 <OSTmr_Link+0x5a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    aa5c:	8f 81       	ldd	r24, Y+7	; 0x07
    aa5e:	98 85       	ldd	r25, Y+8	; 0x08
    aa60:	fc 01       	movw	r30, r24
    aa62:	21 89       	ldd	r18, Z+17	; 0x11
    aa64:	32 89       	ldd	r19, Z+18	; 0x12
    aa66:	43 89       	ldd	r20, Z+19	; 0x13
    aa68:	54 89       	ldd	r21, Z+20	; 0x14
    aa6a:	80 91 0a 2e 	lds	r24, 0x2E0A
    aa6e:	90 91 0b 2e 	lds	r25, 0x2E0B
    aa72:	a0 91 0c 2e 	lds	r26, 0x2E0C
    aa76:	b0 91 0d 2e 	lds	r27, 0x2E0D
    aa7a:	82 0f       	add	r24, r18
    aa7c:	93 1f       	adc	r25, r19
    aa7e:	a4 1f       	adc	r26, r20
    aa80:	b5 1f       	adc	r27, r21
    aa82:	2f 81       	ldd	r18, Y+7	; 0x07
    aa84:	38 85       	ldd	r19, Y+8	; 0x08
    aa86:	f9 01       	movw	r30, r18
    aa88:	81 87       	std	Z+9, r24	; 0x09
    aa8a:	92 87       	std	Z+10, r25	; 0x0a
    aa8c:	a3 87       	std	Z+11, r26	; 0x0b
    aa8e:	b4 87       	std	Z+12, r27	; 0x0c
    aa90:	40 c0       	rjmp	.+128    	; 0xab12 <OSTmr_Link+0xda>
    } else {
        if (ptmr->OSTmrDly == 0) {
    aa92:	8f 81       	ldd	r24, Y+7	; 0x07
    aa94:	98 85       	ldd	r25, Y+8	; 0x08
    aa96:	fc 01       	movw	r30, r24
    aa98:	85 85       	ldd	r24, Z+13	; 0x0d
    aa9a:	96 85       	ldd	r25, Z+14	; 0x0e
    aa9c:	a7 85       	ldd	r26, Z+15	; 0x0f
    aa9e:	b0 89       	ldd	r27, Z+16	; 0x10
    aaa0:	00 97       	sbiw	r24, 0x00	; 0
    aaa2:	a1 05       	cpc	r26, r1
    aaa4:	b1 05       	cpc	r27, r1
    aaa6:	d9 f4       	brne	.+54     	; 0xaade <OSTmr_Link+0xa6>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    aaa8:	8f 81       	ldd	r24, Y+7	; 0x07
    aaaa:	98 85       	ldd	r25, Y+8	; 0x08
    aaac:	fc 01       	movw	r30, r24
    aaae:	21 89       	ldd	r18, Z+17	; 0x11
    aab0:	32 89       	ldd	r19, Z+18	; 0x12
    aab2:	43 89       	ldd	r20, Z+19	; 0x13
    aab4:	54 89       	ldd	r21, Z+20	; 0x14
    aab6:	80 91 0a 2e 	lds	r24, 0x2E0A
    aaba:	90 91 0b 2e 	lds	r25, 0x2E0B
    aabe:	a0 91 0c 2e 	lds	r26, 0x2E0C
    aac2:	b0 91 0d 2e 	lds	r27, 0x2E0D
    aac6:	82 0f       	add	r24, r18
    aac8:	93 1f       	adc	r25, r19
    aaca:	a4 1f       	adc	r26, r20
    aacc:	b5 1f       	adc	r27, r21
    aace:	2f 81       	ldd	r18, Y+7	; 0x07
    aad0:	38 85       	ldd	r19, Y+8	; 0x08
    aad2:	f9 01       	movw	r30, r18
    aad4:	81 87       	std	Z+9, r24	; 0x09
    aad6:	92 87       	std	Z+10, r25	; 0x0a
    aad8:	a3 87       	std	Z+11, r26	; 0x0b
    aada:	b4 87       	std	Z+12, r27	; 0x0c
    aadc:	1a c0       	rjmp	.+52     	; 0xab12 <OSTmr_Link+0xda>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
    aade:	8f 81       	ldd	r24, Y+7	; 0x07
    aae0:	98 85       	ldd	r25, Y+8	; 0x08
    aae2:	fc 01       	movw	r30, r24
    aae4:	25 85       	ldd	r18, Z+13	; 0x0d
    aae6:	36 85       	ldd	r19, Z+14	; 0x0e
    aae8:	47 85       	ldd	r20, Z+15	; 0x0f
    aaea:	50 89       	ldd	r21, Z+16	; 0x10
    aaec:	80 91 0a 2e 	lds	r24, 0x2E0A
    aaf0:	90 91 0b 2e 	lds	r25, 0x2E0B
    aaf4:	a0 91 0c 2e 	lds	r26, 0x2E0C
    aaf8:	b0 91 0d 2e 	lds	r27, 0x2E0D
    aafc:	82 0f       	add	r24, r18
    aafe:	93 1f       	adc	r25, r19
    ab00:	a4 1f       	adc	r26, r20
    ab02:	b5 1f       	adc	r27, r21
    ab04:	2f 81       	ldd	r18, Y+7	; 0x07
    ab06:	38 85       	ldd	r19, Y+8	; 0x08
    ab08:	f9 01       	movw	r30, r18
    ab0a:	81 87       	std	Z+9, r24	; 0x09
    ab0c:	92 87       	std	Z+10, r25	; 0x0a
    ab0e:	a3 87       	std	Z+11, r26	; 0x0b
    ab10:	b4 87       	std	Z+12, r27	; 0x0c
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    ab12:	8f 81       	ldd	r24, Y+7	; 0x07
    ab14:	98 85       	ldd	r25, Y+8	; 0x08
    ab16:	fc 01       	movw	r30, r24
    ab18:	81 85       	ldd	r24, Z+9	; 0x09
    ab1a:	92 85       	ldd	r25, Z+10	; 0x0a
    ab1c:	a3 85       	ldd	r26, Z+11	; 0x0b
    ab1e:	b4 85       	ldd	r27, Z+12	; 0x0c
    ab20:	87 70       	andi	r24, 0x07	; 7
    ab22:	90 70       	andi	r25, 0x00	; 0
    ab24:	89 83       	std	Y+1, r24	; 0x01
    ab26:	9a 83       	std	Y+2, r25	; 0x02
    pspoke = &OSTmrWheelTbl[spoke];
    ab28:	89 81       	ldd	r24, Y+1	; 0x01
    ab2a:	9a 81       	ldd	r25, Y+2	; 0x02
    ab2c:	88 0f       	add	r24, r24
    ab2e:	99 1f       	adc	r25, r25
    ab30:	88 0f       	add	r24, r24
    ab32:	99 1f       	adc	r25, r25
    ab34:	86 52       	subi	r24, 0x26	; 38
    ab36:	98 4d       	sbci	r25, 0xD8	; 216
    ab38:	8b 83       	std	Y+3, r24	; 0x03
    ab3a:	9c 83       	std	Y+4, r25	; 0x04

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
    ab3c:	8b 81       	ldd	r24, Y+3	; 0x03
    ab3e:	9c 81       	ldd	r25, Y+4	; 0x04
    ab40:	fc 01       	movw	r30, r24
    ab42:	80 81       	ld	r24, Z
    ab44:	91 81       	ldd	r25, Z+1	; 0x01
    ab46:	00 97       	sbiw	r24, 0x00	; 0
    ab48:	a1 f4       	brne	.+40     	; 0xab72 <OSTmr_Link+0x13a>
        pspoke->OSTmrFirst   = ptmr;
    ab4a:	8b 81       	ldd	r24, Y+3	; 0x03
    ab4c:	9c 81       	ldd	r25, Y+4	; 0x04
    ab4e:	2f 81       	ldd	r18, Y+7	; 0x07
    ab50:	38 85       	ldd	r19, Y+8	; 0x08
    ab52:	fc 01       	movw	r30, r24
    ab54:	20 83       	st	Z, r18
    ab56:	31 83       	std	Z+1, r19	; 0x01
        ptmr->OSTmrNext      = (OS_TMR *)0;
    ab58:	8f 81       	ldd	r24, Y+7	; 0x07
    ab5a:	98 85       	ldd	r25, Y+8	; 0x08
    ab5c:	fc 01       	movw	r30, r24
    ab5e:	15 82       	std	Z+5, r1	; 0x05
    ab60:	16 82       	std	Z+6, r1	; 0x06
        pspoke->OSTmrEntries = 1;
    ab62:	8b 81       	ldd	r24, Y+3	; 0x03
    ab64:	9c 81       	ldd	r25, Y+4	; 0x04
    ab66:	21 e0       	ldi	r18, 0x01	; 1
    ab68:	30 e0       	ldi	r19, 0x00	; 0
    ab6a:	fc 01       	movw	r30, r24
    ab6c:	22 83       	std	Z+2, r18	; 0x02
    ab6e:	33 83       	std	Z+3, r19	; 0x03
    ab70:	29 c0       	rjmp	.+82     	; 0xabc4 <OSTmr_Link+0x18c>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    ab72:	8b 81       	ldd	r24, Y+3	; 0x03
    ab74:	9c 81       	ldd	r25, Y+4	; 0x04
    ab76:	fc 01       	movw	r30, r24
    ab78:	80 81       	ld	r24, Z
    ab7a:	91 81       	ldd	r25, Z+1	; 0x01
    ab7c:	8d 83       	std	Y+5, r24	; 0x05
    ab7e:	9e 83       	std	Y+6, r25	; 0x06
        pspoke->OSTmrFirst   = ptmr;
    ab80:	8b 81       	ldd	r24, Y+3	; 0x03
    ab82:	9c 81       	ldd	r25, Y+4	; 0x04
    ab84:	2f 81       	ldd	r18, Y+7	; 0x07
    ab86:	38 85       	ldd	r19, Y+8	; 0x08
    ab88:	fc 01       	movw	r30, r24
    ab8a:	20 83       	st	Z, r18
    ab8c:	31 83       	std	Z+1, r19	; 0x01
        ptmr->OSTmrNext      = (void *)ptmr1;
    ab8e:	8f 81       	ldd	r24, Y+7	; 0x07
    ab90:	98 85       	ldd	r25, Y+8	; 0x08
    ab92:	2d 81       	ldd	r18, Y+5	; 0x05
    ab94:	3e 81       	ldd	r19, Y+6	; 0x06
    ab96:	fc 01       	movw	r30, r24
    ab98:	25 83       	std	Z+5, r18	; 0x05
    ab9a:	36 83       	std	Z+6, r19	; 0x06
        ptmr1->OSTmrPrev     = (void *)ptmr;
    ab9c:	8d 81       	ldd	r24, Y+5	; 0x05
    ab9e:	9e 81       	ldd	r25, Y+6	; 0x06
    aba0:	2f 81       	ldd	r18, Y+7	; 0x07
    aba2:	38 85       	ldd	r19, Y+8	; 0x08
    aba4:	fc 01       	movw	r30, r24
    aba6:	27 83       	std	Z+7, r18	; 0x07
    aba8:	30 87       	std	Z+8, r19	; 0x08
        pspoke->OSTmrEntries++;
    abaa:	8b 81       	ldd	r24, Y+3	; 0x03
    abac:	9c 81       	ldd	r25, Y+4	; 0x04
    abae:	fc 01       	movw	r30, r24
    abb0:	82 81       	ldd	r24, Z+2	; 0x02
    abb2:	93 81       	ldd	r25, Z+3	; 0x03
    abb4:	9c 01       	movw	r18, r24
    abb6:	2f 5f       	subi	r18, 0xFF	; 255
    abb8:	3f 4f       	sbci	r19, 0xFF	; 255
    abba:	8b 81       	ldd	r24, Y+3	; 0x03
    abbc:	9c 81       	ldd	r25, Y+4	; 0x04
    abbe:	fc 01       	movw	r30, r24
    abc0:	22 83       	std	Z+2, r18	; 0x02
    abc2:	33 83       	std	Z+3, r19	; 0x03
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
    abc4:	8f 81       	ldd	r24, Y+7	; 0x07
    abc6:	98 85       	ldd	r25, Y+8	; 0x08
    abc8:	fc 01       	movw	r30, r24
    abca:	17 82       	std	Z+7, r1	; 0x07
    abcc:	10 86       	std	Z+8, r1	; 0x08
}
    abce:	29 96       	adiw	r28, 0x09	; 9
    abd0:	cd bf       	out	0x3d, r28	; 61
    abd2:	de bf       	out	0x3e, r29	; 62
    abd4:	cf 91       	pop	r28
    abd6:	df 91       	pop	r29
    abd8:	08 95       	ret

0000abda <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
    abda:	df 93       	push	r29
    abdc:	cf 93       	push	r28
    abde:	cd b7       	in	r28, 0x3d	; 61
    abe0:	de b7       	in	r29, 0x3e	; 62
    abe2:	2a 97       	sbiw	r28, 0x0a	; 10
    abe4:	cd bf       	out	0x3d, r28	; 61
    abe6:	de bf       	out	0x3e, r29	; 62
    abe8:	89 87       	std	Y+9, r24	; 0x09
    abea:	9a 87       	std	Y+10, r25	; 0x0a
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    abec:	89 85       	ldd	r24, Y+9	; 0x09
    abee:	9a 85       	ldd	r25, Y+10	; 0x0a
    abf0:	fc 01       	movw	r30, r24
    abf2:	81 85       	ldd	r24, Z+9	; 0x09
    abf4:	92 85       	ldd	r25, Z+10	; 0x0a
    abf6:	a3 85       	ldd	r26, Z+11	; 0x0b
    abf8:	b4 85       	ldd	r27, Z+12	; 0x0c
    abfa:	87 70       	andi	r24, 0x07	; 7
    abfc:	90 70       	andi	r25, 0x00	; 0
    abfe:	89 83       	std	Y+1, r24	; 0x01
    ac00:	9a 83       	std	Y+2, r25	; 0x02
    pspoke = &OSTmrWheelTbl[spoke];
    ac02:	89 81       	ldd	r24, Y+1	; 0x01
    ac04:	9a 81       	ldd	r25, Y+2	; 0x02
    ac06:	88 0f       	add	r24, r24
    ac08:	99 1f       	adc	r25, r25
    ac0a:	88 0f       	add	r24, r24
    ac0c:	99 1f       	adc	r25, r25
    ac0e:	86 52       	subi	r24, 0x26	; 38
    ac10:	98 4d       	sbci	r25, 0xD8	; 216
    ac12:	8b 83       	std	Y+3, r24	; 0x03
    ac14:	9c 83       	std	Y+4, r25	; 0x04

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
    ac16:	8b 81       	ldd	r24, Y+3	; 0x03
    ac18:	9c 81       	ldd	r25, Y+4	; 0x04
    ac1a:	fc 01       	movw	r30, r24
    ac1c:	20 81       	ld	r18, Z
    ac1e:	31 81       	ldd	r19, Z+1	; 0x01
    ac20:	89 85       	ldd	r24, Y+9	; 0x09
    ac22:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac24:	28 17       	cp	r18, r24
    ac26:	39 07       	cpc	r19, r25
    ac28:	c1 f4       	brne	.+48     	; 0xac5a <OSTmr_Unlink+0x80>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
    ac2a:	89 85       	ldd	r24, Y+9	; 0x09
    ac2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac2e:	fc 01       	movw	r30, r24
    ac30:	85 81       	ldd	r24, Z+5	; 0x05
    ac32:	96 81       	ldd	r25, Z+6	; 0x06
    ac34:	8d 83       	std	Y+5, r24	; 0x05
    ac36:	9e 83       	std	Y+6, r25	; 0x06
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
    ac38:	8b 81       	ldd	r24, Y+3	; 0x03
    ac3a:	9c 81       	ldd	r25, Y+4	; 0x04
    ac3c:	2d 81       	ldd	r18, Y+5	; 0x05
    ac3e:	3e 81       	ldd	r19, Y+6	; 0x06
    ac40:	fc 01       	movw	r30, r24
    ac42:	20 83       	st	Z, r18
    ac44:	31 83       	std	Z+1, r19	; 0x01
        if (ptmr1 != (OS_TMR *)0) {
    ac46:	8d 81       	ldd	r24, Y+5	; 0x05
    ac48:	9e 81       	ldd	r25, Y+6	; 0x06
    ac4a:	00 97       	sbiw	r24, 0x00	; 0
    ac4c:	31 f1       	breq	.+76     	; 0xac9a <OSTmr_Unlink+0xc0>
            ptmr1->OSTmrPrev = (void *)0;
    ac4e:	8d 81       	ldd	r24, Y+5	; 0x05
    ac50:	9e 81       	ldd	r25, Y+6	; 0x06
    ac52:	fc 01       	movw	r30, r24
    ac54:	17 82       	std	Z+7, r1	; 0x07
    ac56:	10 86       	std	Z+8, r1	; 0x08
    ac58:	20 c0       	rjmp	.+64     	; 0xac9a <OSTmr_Unlink+0xc0>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
    ac5a:	89 85       	ldd	r24, Y+9	; 0x09
    ac5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac5e:	fc 01       	movw	r30, r24
    ac60:	87 81       	ldd	r24, Z+7	; 0x07
    ac62:	90 85       	ldd	r25, Z+8	; 0x08
    ac64:	8d 83       	std	Y+5, r24	; 0x05
    ac66:	9e 83       	std	Y+6, r25	; 0x06
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
    ac68:	89 85       	ldd	r24, Y+9	; 0x09
    ac6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac6c:	fc 01       	movw	r30, r24
    ac6e:	85 81       	ldd	r24, Z+5	; 0x05
    ac70:	96 81       	ldd	r25, Z+6	; 0x06
    ac72:	8f 83       	std	Y+7, r24	; 0x07
    ac74:	98 87       	std	Y+8, r25	; 0x08
        ptmr1->OSTmrNext = ptmr2;
    ac76:	8d 81       	ldd	r24, Y+5	; 0x05
    ac78:	9e 81       	ldd	r25, Y+6	; 0x06
    ac7a:	2f 81       	ldd	r18, Y+7	; 0x07
    ac7c:	38 85       	ldd	r19, Y+8	; 0x08
    ac7e:	fc 01       	movw	r30, r24
    ac80:	25 83       	std	Z+5, r18	; 0x05
    ac82:	36 83       	std	Z+6, r19	; 0x06
        if (ptmr2 != (OS_TMR *)0) {
    ac84:	8f 81       	ldd	r24, Y+7	; 0x07
    ac86:	98 85       	ldd	r25, Y+8	; 0x08
    ac88:	00 97       	sbiw	r24, 0x00	; 0
    ac8a:	39 f0       	breq	.+14     	; 0xac9a <OSTmr_Unlink+0xc0>
            ptmr2->OSTmrPrev = (void *)ptmr1;
    ac8c:	8f 81       	ldd	r24, Y+7	; 0x07
    ac8e:	98 85       	ldd	r25, Y+8	; 0x08
    ac90:	2d 81       	ldd	r18, Y+5	; 0x05
    ac92:	3e 81       	ldd	r19, Y+6	; 0x06
    ac94:	fc 01       	movw	r30, r24
    ac96:	27 83       	std	Z+7, r18	; 0x07
    ac98:	30 87       	std	Z+8, r19	; 0x08
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    ac9a:	89 85       	ldd	r24, Y+9	; 0x09
    ac9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac9e:	21 e0       	ldi	r18, 0x01	; 1
    aca0:	fc 01       	movw	r30, r24
    aca2:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrNext  = (void *)0;
    aca4:	89 85       	ldd	r24, Y+9	; 0x09
    aca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    aca8:	fc 01       	movw	r30, r24
    acaa:	15 82       	std	Z+5, r1	; 0x05
    acac:	16 82       	std	Z+6, r1	; 0x06
    ptmr->OSTmrPrev  = (void *)0;
    acae:	89 85       	ldd	r24, Y+9	; 0x09
    acb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    acb2:	fc 01       	movw	r30, r24
    acb4:	17 82       	std	Z+7, r1	; 0x07
    acb6:	10 86       	std	Z+8, r1	; 0x08
    pspoke->OSTmrEntries--;
    acb8:	8b 81       	ldd	r24, Y+3	; 0x03
    acba:	9c 81       	ldd	r25, Y+4	; 0x04
    acbc:	fc 01       	movw	r30, r24
    acbe:	82 81       	ldd	r24, Z+2	; 0x02
    acc0:	93 81       	ldd	r25, Z+3	; 0x03
    acc2:	9c 01       	movw	r18, r24
    acc4:	21 50       	subi	r18, 0x01	; 1
    acc6:	30 40       	sbci	r19, 0x00	; 0
    acc8:	8b 81       	ldd	r24, Y+3	; 0x03
    acca:	9c 81       	ldd	r25, Y+4	; 0x04
    accc:	fc 01       	movw	r30, r24
    acce:	22 83       	std	Z+2, r18	; 0x02
    acd0:	33 83       	std	Z+3, r19	; 0x03
}
    acd2:	2a 96       	adiw	r28, 0x0a	; 10
    acd4:	cd bf       	out	0x3d, r28	; 61
    acd6:	de bf       	out	0x3e, r29	; 62
    acd8:	cf 91       	pop	r28
    acda:	df 91       	pop	r29
    acdc:	08 95       	ret

0000acde <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
    acde:	df 93       	push	r29
    ace0:	cf 93       	push	r28
    ace2:	0f 92       	push	r0
    ace4:	cd b7       	in	r28, 0x3d	; 61
    ace6:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
    ace8:	80 91 12 2e 	lds	r24, 0x2E12
    acec:	90 91 13 2e 	lds	r25, 0x2E13
    acf0:	60 e0       	ldi	r22, 0x00	; 0
    acf2:	70 e0       	ldi	r23, 0x00	; 0
    acf4:	9e 01       	movw	r18, r28
    acf6:	2f 5f       	subi	r18, 0xFF	; 255
    acf8:	3f 4f       	sbci	r19, 0xFF	; 255
    acfa:	a9 01       	movw	r20, r18
    acfc:	0e 94 fd 43 	call	0x87fa	; 0x87fa <OSSemPend>
    (void)err;
}
    ad00:	0f 90       	pop	r0
    ad02:	cf 91       	pop	r28
    ad04:	df 91       	pop	r29
    ad06:	08 95       	ret

0000ad08 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    ad08:	df 93       	push	r29
    ad0a:	cf 93       	push	r28
    ad0c:	cd b7       	in	r28, 0x3d	; 61
    ad0e:	de b7       	in	r29, 0x3e	; 62
    (void)OSSemPost(OSTmrSem);
    ad10:	80 91 12 2e 	lds	r24, 0x2E12
    ad14:	90 91 13 2e 	lds	r25, 0x2E13
    ad18:	0e 94 22 45 	call	0x8a44	; 0x8a44 <OSSemPost>
}
    ad1c:	cf 91       	pop	r28
    ad1e:	df 91       	pop	r29
    ad20:	08 95       	ret

0000ad22 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
    ad22:	df 93       	push	r29
    ad24:	cf 93       	push	r28
    ad26:	cd b7       	in	r28, 0x3d	; 61
    ad28:	de b7       	in	r29, 0x3e	; 62
    ad2a:	2d 97       	sbiw	r28, 0x0d	; 13
    ad2c:	cd bf       	out	0x3d, r28	; 61
    ad2e:	de bf       	out	0x3e, r29	; 62
    ad30:	8c 87       	std	Y+12, r24	; 0x0c
    ad32:	9d 87       	std	Y+13, r25	; 0x0d
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
    ad34:	80 91 fb 27 	lds	r24, 0x27FB
    ad38:	90 91 fc 27 	lds	r25, 0x27FC
    ad3c:	9e 01       	movw	r18, r28
    ad3e:	25 5f       	subi	r18, 0xF5	; 245
    ad40:	3f 4f       	sbci	r19, 0xFF	; 255
    ad42:	60 e0       	ldi	r22, 0x00	; 0
    ad44:	70 e0       	ldi	r23, 0x00	; 0
    ad46:	a9 01       	movw	r20, r18
    ad48:	0e 94 fd 43 	call	0x87fa	; 0x87fa <OSSemPend>
        OSTmr_Lock();
    ad4c:	0e 94 6f 56 	call	0xacde	; 0xacde <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
    ad50:	80 91 0a 2e 	lds	r24, 0x2E0A
    ad54:	90 91 0b 2e 	lds	r25, 0x2E0B
    ad58:	a0 91 0c 2e 	lds	r26, 0x2E0C
    ad5c:	b0 91 0d 2e 	lds	r27, 0x2E0D
    ad60:	01 96       	adiw	r24, 0x01	; 1
    ad62:	a1 1d       	adc	r26, r1
    ad64:	b1 1d       	adc	r27, r1
    ad66:	80 93 0a 2e 	sts	0x2E0A, r24
    ad6a:	90 93 0b 2e 	sts	0x2E0B, r25
    ad6e:	a0 93 0c 2e 	sts	0x2E0C, r26
    ad72:	b0 93 0d 2e 	sts	0x2E0D, r27
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
    ad76:	80 91 0a 2e 	lds	r24, 0x2E0A
    ad7a:	90 91 0b 2e 	lds	r25, 0x2E0B
    ad7e:	a0 91 0c 2e 	lds	r26, 0x2E0C
    ad82:	b0 91 0d 2e 	lds	r27, 0x2E0D
    ad86:	87 70       	andi	r24, 0x07	; 7
    ad88:	90 70       	andi	r25, 0x00	; 0
    ad8a:	8b 83       	std	Y+3, r24	; 0x03
    ad8c:	9c 83       	std	Y+4, r25	; 0x04
        pspoke = &OSTmrWheelTbl[spoke];
    ad8e:	8b 81       	ldd	r24, Y+3	; 0x03
    ad90:	9c 81       	ldd	r25, Y+4	; 0x04
    ad92:	88 0f       	add	r24, r24
    ad94:	99 1f       	adc	r25, r25
    ad96:	88 0f       	add	r24, r24
    ad98:	99 1f       	adc	r25, r25
    ad9a:	86 52       	subi	r24, 0x26	; 38
    ad9c:	98 4d       	sbci	r25, 0xD8	; 216
    ad9e:	8d 83       	std	Y+5, r24	; 0x05
    ada0:	9e 83       	std	Y+6, r25	; 0x06
        ptmr   = pspoke->OSTmrFirst;
    ada2:	8d 81       	ldd	r24, Y+5	; 0x05
    ada4:	9e 81       	ldd	r25, Y+6	; 0x06
    ada6:	fc 01       	movw	r30, r24
    ada8:	80 81       	ld	r24, Z
    adaa:	91 81       	ldd	r25, Z+1	; 0x01
    adac:	89 83       	std	Y+1, r24	; 0x01
    adae:	9a 83       	std	Y+2, r25	; 0x02
        while (ptmr != (OS_TMR *)0) {
    adb0:	4b c0       	rjmp	.+150    	; 0xae48 <OSTmr_Task+0x126>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
    adb2:	89 81       	ldd	r24, Y+1	; 0x01
    adb4:	9a 81       	ldd	r25, Y+2	; 0x02
    adb6:	fc 01       	movw	r30, r24
    adb8:	85 81       	ldd	r24, Z+5	; 0x05
    adba:	96 81       	ldd	r25, Z+6	; 0x06
    adbc:	8f 83       	std	Y+7, r24	; 0x07
    adbe:	98 87       	std	Y+8, r25	; 0x08
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
    adc0:	89 81       	ldd	r24, Y+1	; 0x01
    adc2:	9a 81       	ldd	r25, Y+2	; 0x02
    adc4:	fc 01       	movw	r30, r24
    adc6:	21 85       	ldd	r18, Z+9	; 0x09
    adc8:	32 85       	ldd	r19, Z+10	; 0x0a
    adca:	43 85       	ldd	r20, Z+11	; 0x0b
    adcc:	54 85       	ldd	r21, Z+12	; 0x0c
    adce:	80 91 0a 2e 	lds	r24, 0x2E0A
    add2:	90 91 0b 2e 	lds	r25, 0x2E0B
    add6:	a0 91 0c 2e 	lds	r26, 0x2E0C
    adda:	b0 91 0d 2e 	lds	r27, 0x2E0D
    adde:	28 17       	cp	r18, r24
    ade0:	39 07       	cpc	r19, r25
    ade2:	4a 07       	cpc	r20, r26
    ade4:	5b 07       	cpc	r21, r27
    ade6:	61 f5       	brne	.+88     	; 0xae40 <OSTmr_Task+0x11e>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
    ade8:	89 81       	ldd	r24, Y+1	; 0x01
    adea:	9a 81       	ldd	r25, Y+2	; 0x02
    adec:	fc 01       	movw	r30, r24
    adee:	81 81       	ldd	r24, Z+1	; 0x01
    adf0:	92 81       	ldd	r25, Z+2	; 0x02
    adf2:	89 87       	std	Y+9, r24	; 0x09
    adf4:	9a 87       	std	Y+10, r25	; 0x0a
                if (pfnct != (OS_TMR_CALLBACK)0) {
    adf6:	89 85       	ldd	r24, Y+9	; 0x09
    adf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    adfa:	00 97       	sbiw	r24, 0x00	; 0
    adfc:	61 f0       	breq	.+24     	; 0xae16 <OSTmr_Task+0xf4>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
    adfe:	89 81       	ldd	r24, Y+1	; 0x01
    ae00:	9a 81       	ldd	r25, Y+2	; 0x02
    ae02:	fc 01       	movw	r30, r24
    ae04:	43 81       	ldd	r20, Z+3	; 0x03
    ae06:	54 81       	ldd	r21, Z+4	; 0x04
    ae08:	89 81       	ldd	r24, Y+1	; 0x01
    ae0a:	9a 81       	ldd	r25, Y+2	; 0x02
    ae0c:	29 85       	ldd	r18, Y+9	; 0x09
    ae0e:	3a 85       	ldd	r19, Y+10	; 0x0a
    ae10:	ba 01       	movw	r22, r20
    ae12:	f9 01       	movw	r30, r18
    ae14:	19 95       	eicall
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
    ae16:	89 81       	ldd	r24, Y+1	; 0x01
    ae18:	9a 81       	ldd	r25, Y+2	; 0x02
    ae1a:	0e 94 ed 55 	call	0xabda	; 0xabda <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
    ae1e:	89 81       	ldd	r24, Y+1	; 0x01
    ae20:	9a 81       	ldd	r25, Y+2	; 0x02
    ae22:	fc 01       	movw	r30, r24
    ae24:	85 a1       	ldd	r24, Z+37	; 0x25
    ae26:	82 30       	cpi	r24, 0x02	; 2
    ae28:	31 f4       	brne	.+12     	; 0xae36 <OSTmr_Task+0x114>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
    ae2a:	89 81       	ldd	r24, Y+1	; 0x01
    ae2c:	9a 81       	ldd	r25, Y+2	; 0x02
    ae2e:	61 e0       	ldi	r22, 0x01	; 1
    ae30:	0e 94 1c 55 	call	0xaa38	; 0xaa38 <OSTmr_Link>
    ae34:	05 c0       	rjmp	.+10     	; 0xae40 <OSTmr_Task+0x11e>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    ae36:	89 81       	ldd	r24, Y+1	; 0x01
    ae38:	9a 81       	ldd	r25, Y+2	; 0x02
    ae3a:	22 e0       	ldi	r18, 0x02	; 2
    ae3c:	fc 01       	movw	r30, r24
    ae3e:	26 a3       	std	Z+38, r18	; 0x26
                }
            }
            ptmr = ptmr_next;
    ae40:	8f 81       	ldd	r24, Y+7	; 0x07
    ae42:	98 85       	ldd	r25, Y+8	; 0x08
    ae44:	89 83       	std	Y+1, r24	; 0x01
    ae46:	9a 83       	std	Y+2, r25	; 0x02
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
    ae48:	89 81       	ldd	r24, Y+1	; 0x01
    ae4a:	9a 81       	ldd	r25, Y+2	; 0x02
    ae4c:	00 97       	sbiw	r24, 0x00	; 0
    ae4e:	09 f0       	breq	.+2      	; 0xae52 <OSTmr_Task+0x130>
    ae50:	b0 cf       	rjmp	.-160    	; 0xadb2 <OSTmr_Task+0x90>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
    ae52:	0e 94 84 56 	call	0xad08	; 0xad08 <OSTmr_Unlock>
    }
    ae56:	6e cf       	rjmp	.-292    	; 0xad34 <OSTmr_Task+0x12>

0000ae58 <__mulsi3>:
    ae58:	62 9f       	mul	r22, r18
    ae5a:	d0 01       	movw	r26, r0
    ae5c:	73 9f       	mul	r23, r19
    ae5e:	f0 01       	movw	r30, r0
    ae60:	82 9f       	mul	r24, r18
    ae62:	e0 0d       	add	r30, r0
    ae64:	f1 1d       	adc	r31, r1
    ae66:	64 9f       	mul	r22, r20
    ae68:	e0 0d       	add	r30, r0
    ae6a:	f1 1d       	adc	r31, r1
    ae6c:	92 9f       	mul	r25, r18
    ae6e:	f0 0d       	add	r31, r0
    ae70:	83 9f       	mul	r24, r19
    ae72:	f0 0d       	add	r31, r0
    ae74:	74 9f       	mul	r23, r20
    ae76:	f0 0d       	add	r31, r0
    ae78:	65 9f       	mul	r22, r21
    ae7a:	f0 0d       	add	r31, r0
    ae7c:	99 27       	eor	r25, r25
    ae7e:	72 9f       	mul	r23, r18
    ae80:	b0 0d       	add	r27, r0
    ae82:	e1 1d       	adc	r30, r1
    ae84:	f9 1f       	adc	r31, r25
    ae86:	63 9f       	mul	r22, r19
    ae88:	b0 0d       	add	r27, r0
    ae8a:	e1 1d       	adc	r30, r1
    ae8c:	f9 1f       	adc	r31, r25
    ae8e:	bd 01       	movw	r22, r26
    ae90:	cf 01       	movw	r24, r30
    ae92:	11 24       	eor	r1, r1
    ae94:	08 95       	ret

0000ae96 <__udivmodsi4>:
    ae96:	a1 e2       	ldi	r26, 0x21	; 33
    ae98:	1a 2e       	mov	r1, r26
    ae9a:	aa 1b       	sub	r26, r26
    ae9c:	bb 1b       	sub	r27, r27
    ae9e:	fd 01       	movw	r30, r26
    aea0:	0d c0       	rjmp	.+26     	; 0xaebc <__udivmodsi4_ep>

0000aea2 <__udivmodsi4_loop>:
    aea2:	aa 1f       	adc	r26, r26
    aea4:	bb 1f       	adc	r27, r27
    aea6:	ee 1f       	adc	r30, r30
    aea8:	ff 1f       	adc	r31, r31
    aeaa:	a2 17       	cp	r26, r18
    aeac:	b3 07       	cpc	r27, r19
    aeae:	e4 07       	cpc	r30, r20
    aeb0:	f5 07       	cpc	r31, r21
    aeb2:	20 f0       	brcs	.+8      	; 0xaebc <__udivmodsi4_ep>
    aeb4:	a2 1b       	sub	r26, r18
    aeb6:	b3 0b       	sbc	r27, r19
    aeb8:	e4 0b       	sbc	r30, r20
    aeba:	f5 0b       	sbc	r31, r21

0000aebc <__udivmodsi4_ep>:
    aebc:	66 1f       	adc	r22, r22
    aebe:	77 1f       	adc	r23, r23
    aec0:	88 1f       	adc	r24, r24
    aec2:	99 1f       	adc	r25, r25
    aec4:	1a 94       	dec	r1
    aec6:	69 f7       	brne	.-38     	; 0xaea2 <__udivmodsi4_loop>
    aec8:	60 95       	com	r22
    aeca:	70 95       	com	r23
    aecc:	80 95       	com	r24
    aece:	90 95       	com	r25
    aed0:	9b 01       	movw	r18, r22
    aed2:	ac 01       	movw	r20, r24
    aed4:	bd 01       	movw	r22, r26
    aed6:	cf 01       	movw	r24, r30
    aed8:	08 95       	ret

0000aeda <vsprintf>:
    aeda:	0f 93       	push	r16
    aedc:	1f 93       	push	r17
    aede:	df 93       	push	r29
    aee0:	cf 93       	push	r28
    aee2:	cd b7       	in	r28, 0x3d	; 61
    aee4:	de b7       	in	r29, 0x3e	; 62
    aee6:	2e 97       	sbiw	r28, 0x0e	; 14
    aee8:	cd bf       	out	0x3d, r28	; 61
    aeea:	de bf       	out	0x3e, r29	; 62
    aeec:	8c 01       	movw	r16, r24
    aeee:	86 e0       	ldi	r24, 0x06	; 6
    aef0:	8c 83       	std	Y+4, r24	; 0x04
    aef2:	09 83       	std	Y+1, r16	; 0x01
    aef4:	1a 83       	std	Y+2, r17	; 0x02
    aef6:	8f ef       	ldi	r24, 0xFF	; 255
    aef8:	9f e7       	ldi	r25, 0x7F	; 127
    aefa:	8d 83       	std	Y+5, r24	; 0x05
    aefc:	9e 83       	std	Y+6, r25	; 0x06
    aefe:	ce 01       	movw	r24, r28
    af00:	01 96       	adiw	r24, 0x01	; 1
    af02:	0e 94 90 57 	call	0xaf20	; 0xaf20 <vfprintf>
    af06:	ef 81       	ldd	r30, Y+7	; 0x07
    af08:	f8 85       	ldd	r31, Y+8	; 0x08
    af0a:	e0 0f       	add	r30, r16
    af0c:	f1 1f       	adc	r31, r17
    af0e:	10 82       	st	Z, r1
    af10:	2e 96       	adiw	r28, 0x0e	; 14
    af12:	cd bf       	out	0x3d, r28	; 61
    af14:	de bf       	out	0x3e, r29	; 62
    af16:	cf 91       	pop	r28
    af18:	df 91       	pop	r29
    af1a:	1f 91       	pop	r17
    af1c:	0f 91       	pop	r16
    af1e:	08 95       	ret

0000af20 <vfprintf>:
    af20:	2f 92       	push	r2
    af22:	3f 92       	push	r3
    af24:	4f 92       	push	r4
    af26:	5f 92       	push	r5
    af28:	6f 92       	push	r6
    af2a:	7f 92       	push	r7
    af2c:	8f 92       	push	r8
    af2e:	9f 92       	push	r9
    af30:	af 92       	push	r10
    af32:	bf 92       	push	r11
    af34:	cf 92       	push	r12
    af36:	df 92       	push	r13
    af38:	ef 92       	push	r14
    af3a:	ff 92       	push	r15
    af3c:	0f 93       	push	r16
    af3e:	1f 93       	push	r17
    af40:	df 93       	push	r29
    af42:	cf 93       	push	r28
    af44:	cd b7       	in	r28, 0x3d	; 61
    af46:	de b7       	in	r29, 0x3e	; 62
    af48:	2c 97       	sbiw	r28, 0x0c	; 12
    af4a:	cd bf       	out	0x3d, r28	; 61
    af4c:	de bf       	out	0x3e, r29	; 62
    af4e:	6c 01       	movw	r12, r24
    af50:	1b 01       	movw	r2, r22
    af52:	8a 01       	movw	r16, r20
    af54:	fc 01       	movw	r30, r24
    af56:	16 82       	std	Z+6, r1	; 0x06
    af58:	17 82       	std	Z+7, r1	; 0x07
    af5a:	83 81       	ldd	r24, Z+3	; 0x03
    af5c:	81 ff       	sbrs	r24, 1
    af5e:	d1 c1       	rjmp	.+930    	; 0xb302 <vfprintf+0x3e2>
    af60:	2e 01       	movw	r4, r28
    af62:	08 94       	sec
    af64:	41 1c       	adc	r4, r1
    af66:	51 1c       	adc	r5, r1
    af68:	f6 01       	movw	r30, r12
    af6a:	93 81       	ldd	r25, Z+3	; 0x03
    af6c:	f1 01       	movw	r30, r2
    af6e:	93 fd       	sbrc	r25, 3
    af70:	85 91       	lpm	r24, Z+
    af72:	93 ff       	sbrs	r25, 3
    af74:	81 91       	ld	r24, Z+
    af76:	1f 01       	movw	r2, r30
    af78:	88 23       	and	r24, r24
    af7a:	09 f4       	brne	.+2      	; 0xaf7e <vfprintf+0x5e>
    af7c:	be c1       	rjmp	.+892    	; 0xb2fa <vfprintf+0x3da>
    af7e:	85 32       	cpi	r24, 0x25	; 37
    af80:	39 f4       	brne	.+14     	; 0xaf90 <vfprintf+0x70>
    af82:	93 fd       	sbrc	r25, 3
    af84:	85 91       	lpm	r24, Z+
    af86:	93 ff       	sbrs	r25, 3
    af88:	81 91       	ld	r24, Z+
    af8a:	1f 01       	movw	r2, r30
    af8c:	85 32       	cpi	r24, 0x25	; 37
    af8e:	29 f4       	brne	.+10     	; 0xaf9a <vfprintf+0x7a>
    af90:	90 e0       	ldi	r25, 0x00	; 0
    af92:	b6 01       	movw	r22, r12
    af94:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    af98:	e7 cf       	rjmp	.-50     	; 0xaf68 <vfprintf+0x48>
    af9a:	ee 24       	eor	r14, r14
    af9c:	ff 24       	eor	r15, r15
    af9e:	20 e0       	ldi	r18, 0x00	; 0
    afa0:	20 32       	cpi	r18, 0x20	; 32
    afa2:	b0 f4       	brcc	.+44     	; 0xafd0 <vfprintf+0xb0>
    afa4:	8b 32       	cpi	r24, 0x2B	; 43
    afa6:	69 f0       	breq	.+26     	; 0xafc2 <vfprintf+0xa2>
    afa8:	8c 32       	cpi	r24, 0x2C	; 44
    afaa:	28 f4       	brcc	.+10     	; 0xafb6 <vfprintf+0x96>
    afac:	80 32       	cpi	r24, 0x20	; 32
    afae:	51 f0       	breq	.+20     	; 0xafc4 <vfprintf+0xa4>
    afb0:	83 32       	cpi	r24, 0x23	; 35
    afb2:	71 f4       	brne	.+28     	; 0xafd0 <vfprintf+0xb0>
    afb4:	0b c0       	rjmp	.+22     	; 0xafcc <vfprintf+0xac>
    afb6:	8d 32       	cpi	r24, 0x2D	; 45
    afb8:	39 f0       	breq	.+14     	; 0xafc8 <vfprintf+0xa8>
    afba:	80 33       	cpi	r24, 0x30	; 48
    afbc:	49 f4       	brne	.+18     	; 0xafd0 <vfprintf+0xb0>
    afbe:	21 60       	ori	r18, 0x01	; 1
    afc0:	2c c0       	rjmp	.+88     	; 0xb01a <vfprintf+0xfa>
    afc2:	22 60       	ori	r18, 0x02	; 2
    afc4:	24 60       	ori	r18, 0x04	; 4
    afc6:	29 c0       	rjmp	.+82     	; 0xb01a <vfprintf+0xfa>
    afc8:	28 60       	ori	r18, 0x08	; 8
    afca:	27 c0       	rjmp	.+78     	; 0xb01a <vfprintf+0xfa>
    afcc:	20 61       	ori	r18, 0x10	; 16
    afce:	25 c0       	rjmp	.+74     	; 0xb01a <vfprintf+0xfa>
    afd0:	27 fd       	sbrc	r18, 7
    afd2:	2c c0       	rjmp	.+88     	; 0xb02c <vfprintf+0x10c>
    afd4:	38 2f       	mov	r19, r24
    afd6:	30 53       	subi	r19, 0x30	; 48
    afd8:	3a 30       	cpi	r19, 0x0A	; 10
    afda:	98 f4       	brcc	.+38     	; 0xb002 <vfprintf+0xe2>
    afdc:	26 ff       	sbrs	r18, 6
    afde:	08 c0       	rjmp	.+16     	; 0xaff0 <vfprintf+0xd0>
    afe0:	8e 2d       	mov	r24, r14
    afe2:	88 0f       	add	r24, r24
    afe4:	e8 2e       	mov	r14, r24
    afe6:	ee 0c       	add	r14, r14
    afe8:	ee 0c       	add	r14, r14
    afea:	e8 0e       	add	r14, r24
    afec:	e3 0e       	add	r14, r19
    afee:	15 c0       	rjmp	.+42     	; 0xb01a <vfprintf+0xfa>
    aff0:	8f 2d       	mov	r24, r15
    aff2:	88 0f       	add	r24, r24
    aff4:	f8 2e       	mov	r15, r24
    aff6:	ff 0c       	add	r15, r15
    aff8:	ff 0c       	add	r15, r15
    affa:	f8 0e       	add	r15, r24
    affc:	f3 0e       	add	r15, r19
    affe:	20 62       	ori	r18, 0x20	; 32
    b000:	0c c0       	rjmp	.+24     	; 0xb01a <vfprintf+0xfa>
    b002:	8e 32       	cpi	r24, 0x2E	; 46
    b004:	21 f4       	brne	.+8      	; 0xb00e <vfprintf+0xee>
    b006:	26 fd       	sbrc	r18, 6
    b008:	78 c1       	rjmp	.+752    	; 0xb2fa <vfprintf+0x3da>
    b00a:	20 64       	ori	r18, 0x40	; 64
    b00c:	06 c0       	rjmp	.+12     	; 0xb01a <vfprintf+0xfa>
    b00e:	8c 36       	cpi	r24, 0x6C	; 108
    b010:	11 f4       	brne	.+4      	; 0xb016 <vfprintf+0xf6>
    b012:	20 68       	ori	r18, 0x80	; 128
    b014:	02 c0       	rjmp	.+4      	; 0xb01a <vfprintf+0xfa>
    b016:	88 36       	cpi	r24, 0x68	; 104
    b018:	49 f4       	brne	.+18     	; 0xb02c <vfprintf+0x10c>
    b01a:	f1 01       	movw	r30, r2
    b01c:	93 fd       	sbrc	r25, 3
    b01e:	85 91       	lpm	r24, Z+
    b020:	93 ff       	sbrs	r25, 3
    b022:	81 91       	ld	r24, Z+
    b024:	1f 01       	movw	r2, r30
    b026:	88 23       	and	r24, r24
    b028:	09 f0       	breq	.+2      	; 0xb02c <vfprintf+0x10c>
    b02a:	ba cf       	rjmp	.-140    	; 0xafa0 <vfprintf+0x80>
    b02c:	98 2f       	mov	r25, r24
    b02e:	95 54       	subi	r25, 0x45	; 69
    b030:	93 30       	cpi	r25, 0x03	; 3
    b032:	18 f0       	brcs	.+6      	; 0xb03a <vfprintf+0x11a>
    b034:	90 52       	subi	r25, 0x20	; 32
    b036:	93 30       	cpi	r25, 0x03	; 3
    b038:	28 f4       	brcc	.+10     	; 0xb044 <vfprintf+0x124>
    b03a:	0c 5f       	subi	r16, 0xFC	; 252
    b03c:	1f 4f       	sbci	r17, 0xFF	; 255
    b03e:	ff e3       	ldi	r31, 0x3F	; 63
    b040:	f9 83       	std	Y+1, r31	; 0x01
    b042:	0d c0       	rjmp	.+26     	; 0xb05e <vfprintf+0x13e>
    b044:	83 36       	cpi	r24, 0x63	; 99
    b046:	31 f0       	breq	.+12     	; 0xb054 <vfprintf+0x134>
    b048:	83 37       	cpi	r24, 0x73	; 115
    b04a:	71 f0       	breq	.+28     	; 0xb068 <vfprintf+0x148>
    b04c:	83 35       	cpi	r24, 0x53	; 83
    b04e:	09 f0       	breq	.+2      	; 0xb052 <vfprintf+0x132>
    b050:	60 c0       	rjmp	.+192    	; 0xb112 <vfprintf+0x1f2>
    b052:	22 c0       	rjmp	.+68     	; 0xb098 <vfprintf+0x178>
    b054:	f8 01       	movw	r30, r16
    b056:	80 81       	ld	r24, Z
    b058:	89 83       	std	Y+1, r24	; 0x01
    b05a:	0e 5f       	subi	r16, 0xFE	; 254
    b05c:	1f 4f       	sbci	r17, 0xFF	; 255
    b05e:	42 01       	movw	r8, r4
    b060:	71 e0       	ldi	r23, 0x01	; 1
    b062:	a7 2e       	mov	r10, r23
    b064:	b1 2c       	mov	r11, r1
    b066:	16 c0       	rjmp	.+44     	; 0xb094 <vfprintf+0x174>
    b068:	62 e0       	ldi	r22, 0x02	; 2
    b06a:	66 2e       	mov	r6, r22
    b06c:	71 2c       	mov	r7, r1
    b06e:	60 0e       	add	r6, r16
    b070:	71 1e       	adc	r7, r17
    b072:	f8 01       	movw	r30, r16
    b074:	80 80       	ld	r8, Z
    b076:	91 80       	ldd	r9, Z+1	; 0x01
    b078:	26 ff       	sbrs	r18, 6
    b07a:	03 c0       	rjmp	.+6      	; 0xb082 <vfprintf+0x162>
    b07c:	6e 2d       	mov	r22, r14
    b07e:	70 e0       	ldi	r23, 0x00	; 0
    b080:	02 c0       	rjmp	.+4      	; 0xb086 <vfprintf+0x166>
    b082:	6f ef       	ldi	r22, 0xFF	; 255
    b084:	7f ef       	ldi	r23, 0xFF	; 255
    b086:	c4 01       	movw	r24, r8
    b088:	2c 87       	std	Y+12, r18	; 0x0c
    b08a:	0e 94 a5 59 	call	0xb34a	; 0xb34a <strnlen>
    b08e:	5c 01       	movw	r10, r24
    b090:	83 01       	movw	r16, r6
    b092:	2c 85       	ldd	r18, Y+12	; 0x0c
    b094:	2f 77       	andi	r18, 0x7F	; 127
    b096:	17 c0       	rjmp	.+46     	; 0xb0c6 <vfprintf+0x1a6>
    b098:	52 e0       	ldi	r21, 0x02	; 2
    b09a:	65 2e       	mov	r6, r21
    b09c:	71 2c       	mov	r7, r1
    b09e:	60 0e       	add	r6, r16
    b0a0:	71 1e       	adc	r7, r17
    b0a2:	f8 01       	movw	r30, r16
    b0a4:	80 80       	ld	r8, Z
    b0a6:	91 80       	ldd	r9, Z+1	; 0x01
    b0a8:	26 ff       	sbrs	r18, 6
    b0aa:	03 c0       	rjmp	.+6      	; 0xb0b2 <vfprintf+0x192>
    b0ac:	6e 2d       	mov	r22, r14
    b0ae:	70 e0       	ldi	r23, 0x00	; 0
    b0b0:	02 c0       	rjmp	.+4      	; 0xb0b6 <vfprintf+0x196>
    b0b2:	6f ef       	ldi	r22, 0xFF	; 255
    b0b4:	7f ef       	ldi	r23, 0xFF	; 255
    b0b6:	c4 01       	movw	r24, r8
    b0b8:	2c 87       	std	Y+12, r18	; 0x0c
    b0ba:	0e 94 9a 59 	call	0xb334	; 0xb334 <strnlen_P>
    b0be:	5c 01       	movw	r10, r24
    b0c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    b0c2:	20 68       	ori	r18, 0x80	; 128
    b0c4:	83 01       	movw	r16, r6
    b0c6:	23 fd       	sbrc	r18, 3
    b0c8:	20 c0       	rjmp	.+64     	; 0xb10a <vfprintf+0x1ea>
    b0ca:	08 c0       	rjmp	.+16     	; 0xb0dc <vfprintf+0x1bc>
    b0cc:	80 e2       	ldi	r24, 0x20	; 32
    b0ce:	90 e0       	ldi	r25, 0x00	; 0
    b0d0:	b6 01       	movw	r22, r12
    b0d2:	2c 87       	std	Y+12, r18	; 0x0c
    b0d4:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b0d8:	fa 94       	dec	r15
    b0da:	2c 85       	ldd	r18, Y+12	; 0x0c
    b0dc:	8f 2d       	mov	r24, r15
    b0de:	90 e0       	ldi	r25, 0x00	; 0
    b0e0:	a8 16       	cp	r10, r24
    b0e2:	b9 06       	cpc	r11, r25
    b0e4:	98 f3       	brcs	.-26     	; 0xb0cc <vfprintf+0x1ac>
    b0e6:	11 c0       	rjmp	.+34     	; 0xb10a <vfprintf+0x1ea>
    b0e8:	f4 01       	movw	r30, r8
    b0ea:	27 fd       	sbrc	r18, 7
    b0ec:	85 91       	lpm	r24, Z+
    b0ee:	27 ff       	sbrs	r18, 7
    b0f0:	81 91       	ld	r24, Z+
    b0f2:	4f 01       	movw	r8, r30
    b0f4:	90 e0       	ldi	r25, 0x00	; 0
    b0f6:	b6 01       	movw	r22, r12
    b0f8:	2c 87       	std	Y+12, r18	; 0x0c
    b0fa:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b0fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    b100:	f1 10       	cpse	r15, r1
    b102:	fa 94       	dec	r15
    b104:	08 94       	sec
    b106:	a1 08       	sbc	r10, r1
    b108:	b1 08       	sbc	r11, r1
    b10a:	a1 14       	cp	r10, r1
    b10c:	b1 04       	cpc	r11, r1
    b10e:	61 f7       	brne	.-40     	; 0xb0e8 <vfprintf+0x1c8>
    b110:	f1 c0       	rjmp	.+482    	; 0xb2f4 <vfprintf+0x3d4>
    b112:	84 36       	cpi	r24, 0x64	; 100
    b114:	11 f0       	breq	.+4      	; 0xb11a <vfprintf+0x1fa>
    b116:	89 36       	cpi	r24, 0x69	; 105
    b118:	49 f5       	brne	.+82     	; 0xb16c <vfprintf+0x24c>
    b11a:	27 ff       	sbrs	r18, 7
    b11c:	08 c0       	rjmp	.+16     	; 0xb12e <vfprintf+0x20e>
    b11e:	f8 01       	movw	r30, r16
    b120:	60 81       	ld	r22, Z
    b122:	71 81       	ldd	r23, Z+1	; 0x01
    b124:	82 81       	ldd	r24, Z+2	; 0x02
    b126:	93 81       	ldd	r25, Z+3	; 0x03
    b128:	0c 5f       	subi	r16, 0xFC	; 252
    b12a:	1f 4f       	sbci	r17, 0xFF	; 255
    b12c:	09 c0       	rjmp	.+18     	; 0xb140 <vfprintf+0x220>
    b12e:	f8 01       	movw	r30, r16
    b130:	60 81       	ld	r22, Z
    b132:	71 81       	ldd	r23, Z+1	; 0x01
    b134:	88 27       	eor	r24, r24
    b136:	77 fd       	sbrc	r23, 7
    b138:	80 95       	com	r24
    b13a:	98 2f       	mov	r25, r24
    b13c:	0e 5f       	subi	r16, 0xFE	; 254
    b13e:	1f 4f       	sbci	r17, 0xFF	; 255
    b140:	4f e6       	ldi	r20, 0x6F	; 111
    b142:	b4 2e       	mov	r11, r20
    b144:	b2 22       	and	r11, r18
    b146:	97 ff       	sbrs	r25, 7
    b148:	09 c0       	rjmp	.+18     	; 0xb15c <vfprintf+0x23c>
    b14a:	90 95       	com	r25
    b14c:	80 95       	com	r24
    b14e:	70 95       	com	r23
    b150:	61 95       	neg	r22
    b152:	7f 4f       	sbci	r23, 0xFF	; 255
    b154:	8f 4f       	sbci	r24, 0xFF	; 255
    b156:	9f 4f       	sbci	r25, 0xFF	; 255
    b158:	f0 e8       	ldi	r31, 0x80	; 128
    b15a:	bf 2a       	or	r11, r31
    b15c:	a2 01       	movw	r20, r4
    b15e:	2a e0       	ldi	r18, 0x0A	; 10
    b160:	30 e0       	ldi	r19, 0x00	; 0
    b162:	0e 94 dc 59 	call	0xb3b8	; 0xb3b8 <__ultoa_invert>
    b166:	78 2e       	mov	r7, r24
    b168:	74 18       	sub	r7, r4
    b16a:	45 c0       	rjmp	.+138    	; 0xb1f6 <vfprintf+0x2d6>
    b16c:	85 37       	cpi	r24, 0x75	; 117
    b16e:	31 f4       	brne	.+12     	; 0xb17c <vfprintf+0x25c>
    b170:	3f ee       	ldi	r19, 0xEF	; 239
    b172:	b3 2e       	mov	r11, r19
    b174:	b2 22       	and	r11, r18
    b176:	2a e0       	ldi	r18, 0x0A	; 10
    b178:	30 e0       	ldi	r19, 0x00	; 0
    b17a:	25 c0       	rjmp	.+74     	; 0xb1c6 <vfprintf+0x2a6>
    b17c:	99 ef       	ldi	r25, 0xF9	; 249
    b17e:	b9 2e       	mov	r11, r25
    b180:	b2 22       	and	r11, r18
    b182:	8f 36       	cpi	r24, 0x6F	; 111
    b184:	c1 f0       	breq	.+48     	; 0xb1b6 <vfprintf+0x296>
    b186:	80 37       	cpi	r24, 0x70	; 112
    b188:	20 f4       	brcc	.+8      	; 0xb192 <vfprintf+0x272>
    b18a:	88 35       	cpi	r24, 0x58	; 88
    b18c:	09 f0       	breq	.+2      	; 0xb190 <vfprintf+0x270>
    b18e:	b5 c0       	rjmp	.+362    	; 0xb2fa <vfprintf+0x3da>
    b190:	0d c0       	rjmp	.+26     	; 0xb1ac <vfprintf+0x28c>
    b192:	80 37       	cpi	r24, 0x70	; 112
    b194:	21 f0       	breq	.+8      	; 0xb19e <vfprintf+0x27e>
    b196:	88 37       	cpi	r24, 0x78	; 120
    b198:	09 f0       	breq	.+2      	; 0xb19c <vfprintf+0x27c>
    b19a:	af c0       	rjmp	.+350    	; 0xb2fa <vfprintf+0x3da>
    b19c:	02 c0       	rjmp	.+4      	; 0xb1a2 <vfprintf+0x282>
    b19e:	20 e1       	ldi	r18, 0x10	; 16
    b1a0:	b2 2a       	or	r11, r18
    b1a2:	b4 fe       	sbrs	r11, 4
    b1a4:	0b c0       	rjmp	.+22     	; 0xb1bc <vfprintf+0x29c>
    b1a6:	84 e0       	ldi	r24, 0x04	; 4
    b1a8:	b8 2a       	or	r11, r24
    b1aa:	08 c0       	rjmp	.+16     	; 0xb1bc <vfprintf+0x29c>
    b1ac:	b4 fe       	sbrs	r11, 4
    b1ae:	09 c0       	rjmp	.+18     	; 0xb1c2 <vfprintf+0x2a2>
    b1b0:	e6 e0       	ldi	r30, 0x06	; 6
    b1b2:	be 2a       	or	r11, r30
    b1b4:	06 c0       	rjmp	.+12     	; 0xb1c2 <vfprintf+0x2a2>
    b1b6:	28 e0       	ldi	r18, 0x08	; 8
    b1b8:	30 e0       	ldi	r19, 0x00	; 0
    b1ba:	05 c0       	rjmp	.+10     	; 0xb1c6 <vfprintf+0x2a6>
    b1bc:	20 e1       	ldi	r18, 0x10	; 16
    b1be:	30 e0       	ldi	r19, 0x00	; 0
    b1c0:	02 c0       	rjmp	.+4      	; 0xb1c6 <vfprintf+0x2a6>
    b1c2:	20 e1       	ldi	r18, 0x10	; 16
    b1c4:	32 e0       	ldi	r19, 0x02	; 2
    b1c6:	b7 fe       	sbrs	r11, 7
    b1c8:	08 c0       	rjmp	.+16     	; 0xb1da <vfprintf+0x2ba>
    b1ca:	f8 01       	movw	r30, r16
    b1cc:	60 81       	ld	r22, Z
    b1ce:	71 81       	ldd	r23, Z+1	; 0x01
    b1d0:	82 81       	ldd	r24, Z+2	; 0x02
    b1d2:	93 81       	ldd	r25, Z+3	; 0x03
    b1d4:	0c 5f       	subi	r16, 0xFC	; 252
    b1d6:	1f 4f       	sbci	r17, 0xFF	; 255
    b1d8:	07 c0       	rjmp	.+14     	; 0xb1e8 <vfprintf+0x2c8>
    b1da:	f8 01       	movw	r30, r16
    b1dc:	60 81       	ld	r22, Z
    b1de:	71 81       	ldd	r23, Z+1	; 0x01
    b1e0:	80 e0       	ldi	r24, 0x00	; 0
    b1e2:	90 e0       	ldi	r25, 0x00	; 0
    b1e4:	0e 5f       	subi	r16, 0xFE	; 254
    b1e6:	1f 4f       	sbci	r17, 0xFF	; 255
    b1e8:	a2 01       	movw	r20, r4
    b1ea:	0e 94 dc 59 	call	0xb3b8	; 0xb3b8 <__ultoa_invert>
    b1ee:	78 2e       	mov	r7, r24
    b1f0:	74 18       	sub	r7, r4
    b1f2:	ff e7       	ldi	r31, 0x7F	; 127
    b1f4:	bf 22       	and	r11, r31
    b1f6:	b6 fe       	sbrs	r11, 6
    b1f8:	0b c0       	rjmp	.+22     	; 0xb210 <vfprintf+0x2f0>
    b1fa:	2e ef       	ldi	r18, 0xFE	; 254
    b1fc:	b2 22       	and	r11, r18
    b1fe:	7e 14       	cp	r7, r14
    b200:	38 f4       	brcc	.+14     	; 0xb210 <vfprintf+0x2f0>
    b202:	b4 fe       	sbrs	r11, 4
    b204:	07 c0       	rjmp	.+14     	; 0xb214 <vfprintf+0x2f4>
    b206:	b2 fc       	sbrc	r11, 2
    b208:	05 c0       	rjmp	.+10     	; 0xb214 <vfprintf+0x2f4>
    b20a:	8f ee       	ldi	r24, 0xEF	; 239
    b20c:	b8 22       	and	r11, r24
    b20e:	02 c0       	rjmp	.+4      	; 0xb214 <vfprintf+0x2f4>
    b210:	a7 2c       	mov	r10, r7
    b212:	01 c0       	rjmp	.+2      	; 0xb216 <vfprintf+0x2f6>
    b214:	ae 2c       	mov	r10, r14
    b216:	8b 2d       	mov	r24, r11
    b218:	90 e0       	ldi	r25, 0x00	; 0
    b21a:	b4 fe       	sbrs	r11, 4
    b21c:	0d c0       	rjmp	.+26     	; 0xb238 <vfprintf+0x318>
    b21e:	fe 01       	movw	r30, r28
    b220:	e7 0d       	add	r30, r7
    b222:	f1 1d       	adc	r31, r1
    b224:	20 81       	ld	r18, Z
    b226:	20 33       	cpi	r18, 0x30	; 48
    b228:	19 f4       	brne	.+6      	; 0xb230 <vfprintf+0x310>
    b22a:	e9 ee       	ldi	r30, 0xE9	; 233
    b22c:	be 22       	and	r11, r30
    b22e:	09 c0       	rjmp	.+18     	; 0xb242 <vfprintf+0x322>
    b230:	a3 94       	inc	r10
    b232:	b2 fe       	sbrs	r11, 2
    b234:	06 c0       	rjmp	.+12     	; 0xb242 <vfprintf+0x322>
    b236:	04 c0       	rjmp	.+8      	; 0xb240 <vfprintf+0x320>
    b238:	86 78       	andi	r24, 0x86	; 134
    b23a:	90 70       	andi	r25, 0x00	; 0
    b23c:	00 97       	sbiw	r24, 0x00	; 0
    b23e:	09 f0       	breq	.+2      	; 0xb242 <vfprintf+0x322>
    b240:	a3 94       	inc	r10
    b242:	8b 2c       	mov	r8, r11
    b244:	99 24       	eor	r9, r9
    b246:	b3 fc       	sbrc	r11, 3
    b248:	14 c0       	rjmp	.+40     	; 0xb272 <vfprintf+0x352>
    b24a:	b0 fe       	sbrs	r11, 0
    b24c:	0f c0       	rjmp	.+30     	; 0xb26c <vfprintf+0x34c>
    b24e:	af 14       	cp	r10, r15
    b250:	28 f4       	brcc	.+10     	; 0xb25c <vfprintf+0x33c>
    b252:	e7 2c       	mov	r14, r7
    b254:	ef 0c       	add	r14, r15
    b256:	ea 18       	sub	r14, r10
    b258:	af 2c       	mov	r10, r15
    b25a:	08 c0       	rjmp	.+16     	; 0xb26c <vfprintf+0x34c>
    b25c:	e7 2c       	mov	r14, r7
    b25e:	06 c0       	rjmp	.+12     	; 0xb26c <vfprintf+0x34c>
    b260:	80 e2       	ldi	r24, 0x20	; 32
    b262:	90 e0       	ldi	r25, 0x00	; 0
    b264:	b6 01       	movw	r22, r12
    b266:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b26a:	a3 94       	inc	r10
    b26c:	af 14       	cp	r10, r15
    b26e:	c0 f3       	brcs	.-16     	; 0xb260 <vfprintf+0x340>
    b270:	04 c0       	rjmp	.+8      	; 0xb27a <vfprintf+0x35a>
    b272:	af 14       	cp	r10, r15
    b274:	10 f4       	brcc	.+4      	; 0xb27a <vfprintf+0x35a>
    b276:	fa 18       	sub	r15, r10
    b278:	01 c0       	rjmp	.+2      	; 0xb27c <vfprintf+0x35c>
    b27a:	ff 24       	eor	r15, r15
    b27c:	84 fe       	sbrs	r8, 4
    b27e:	0f c0       	rjmp	.+30     	; 0xb29e <vfprintf+0x37e>
    b280:	80 e3       	ldi	r24, 0x30	; 48
    b282:	90 e0       	ldi	r25, 0x00	; 0
    b284:	b6 01       	movw	r22, r12
    b286:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b28a:	82 fe       	sbrs	r8, 2
    b28c:	1f c0       	rjmp	.+62     	; 0xb2cc <vfprintf+0x3ac>
    b28e:	81 fe       	sbrs	r8, 1
    b290:	03 c0       	rjmp	.+6      	; 0xb298 <vfprintf+0x378>
    b292:	88 e5       	ldi	r24, 0x58	; 88
    b294:	90 e0       	ldi	r25, 0x00	; 0
    b296:	10 c0       	rjmp	.+32     	; 0xb2b8 <vfprintf+0x398>
    b298:	88 e7       	ldi	r24, 0x78	; 120
    b29a:	90 e0       	ldi	r25, 0x00	; 0
    b29c:	0d c0       	rjmp	.+26     	; 0xb2b8 <vfprintf+0x398>
    b29e:	c4 01       	movw	r24, r8
    b2a0:	86 78       	andi	r24, 0x86	; 134
    b2a2:	90 70       	andi	r25, 0x00	; 0
    b2a4:	00 97       	sbiw	r24, 0x00	; 0
    b2a6:	91 f0       	breq	.+36     	; 0xb2cc <vfprintf+0x3ac>
    b2a8:	81 fc       	sbrc	r8, 1
    b2aa:	02 c0       	rjmp	.+4      	; 0xb2b0 <vfprintf+0x390>
    b2ac:	80 e2       	ldi	r24, 0x20	; 32
    b2ae:	01 c0       	rjmp	.+2      	; 0xb2b2 <vfprintf+0x392>
    b2b0:	8b e2       	ldi	r24, 0x2B	; 43
    b2b2:	b7 fc       	sbrc	r11, 7
    b2b4:	8d e2       	ldi	r24, 0x2D	; 45
    b2b6:	90 e0       	ldi	r25, 0x00	; 0
    b2b8:	b6 01       	movw	r22, r12
    b2ba:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b2be:	06 c0       	rjmp	.+12     	; 0xb2cc <vfprintf+0x3ac>
    b2c0:	80 e3       	ldi	r24, 0x30	; 48
    b2c2:	90 e0       	ldi	r25, 0x00	; 0
    b2c4:	b6 01       	movw	r22, r12
    b2c6:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b2ca:	ea 94       	dec	r14
    b2cc:	7e 14       	cp	r7, r14
    b2ce:	c0 f3       	brcs	.-16     	; 0xb2c0 <vfprintf+0x3a0>
    b2d0:	7a 94       	dec	r7
    b2d2:	f2 01       	movw	r30, r4
    b2d4:	e7 0d       	add	r30, r7
    b2d6:	f1 1d       	adc	r31, r1
    b2d8:	80 81       	ld	r24, Z
    b2da:	90 e0       	ldi	r25, 0x00	; 0
    b2dc:	b6 01       	movw	r22, r12
    b2de:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b2e2:	77 20       	and	r7, r7
    b2e4:	a9 f7       	brne	.-22     	; 0xb2d0 <vfprintf+0x3b0>
    b2e6:	06 c0       	rjmp	.+12     	; 0xb2f4 <vfprintf+0x3d4>
    b2e8:	80 e2       	ldi	r24, 0x20	; 32
    b2ea:	90 e0       	ldi	r25, 0x00	; 0
    b2ec:	b6 01       	movw	r22, r12
    b2ee:	0e 94 b0 59 	call	0xb360	; 0xb360 <fputc>
    b2f2:	fa 94       	dec	r15
    b2f4:	ff 20       	and	r15, r15
    b2f6:	c1 f7       	brne	.-16     	; 0xb2e8 <vfprintf+0x3c8>
    b2f8:	37 ce       	rjmp	.-914    	; 0xaf68 <vfprintf+0x48>
    b2fa:	f6 01       	movw	r30, r12
    b2fc:	26 81       	ldd	r18, Z+6	; 0x06
    b2fe:	37 81       	ldd	r19, Z+7	; 0x07
    b300:	02 c0       	rjmp	.+4      	; 0xb306 <vfprintf+0x3e6>
    b302:	2f ef       	ldi	r18, 0xFF	; 255
    b304:	3f ef       	ldi	r19, 0xFF	; 255
    b306:	c9 01       	movw	r24, r18
    b308:	2c 96       	adiw	r28, 0x0c	; 12
    b30a:	cd bf       	out	0x3d, r28	; 61
    b30c:	de bf       	out	0x3e, r29	; 62
    b30e:	cf 91       	pop	r28
    b310:	df 91       	pop	r29
    b312:	1f 91       	pop	r17
    b314:	0f 91       	pop	r16
    b316:	ff 90       	pop	r15
    b318:	ef 90       	pop	r14
    b31a:	df 90       	pop	r13
    b31c:	cf 90       	pop	r12
    b31e:	bf 90       	pop	r11
    b320:	af 90       	pop	r10
    b322:	9f 90       	pop	r9
    b324:	8f 90       	pop	r8
    b326:	7f 90       	pop	r7
    b328:	6f 90       	pop	r6
    b32a:	5f 90       	pop	r5
    b32c:	4f 90       	pop	r4
    b32e:	3f 90       	pop	r3
    b330:	2f 90       	pop	r2
    b332:	08 95       	ret

0000b334 <strnlen_P>:
    b334:	fc 01       	movw	r30, r24
    b336:	05 90       	lpm	r0, Z+
    b338:	61 50       	subi	r22, 0x01	; 1
    b33a:	70 40       	sbci	r23, 0x00	; 0
    b33c:	01 10       	cpse	r0, r1
    b33e:	d8 f7       	brcc	.-10     	; 0xb336 <strnlen_P+0x2>
    b340:	80 95       	com	r24
    b342:	90 95       	com	r25
    b344:	8e 0f       	add	r24, r30
    b346:	9f 1f       	adc	r25, r31
    b348:	08 95       	ret

0000b34a <strnlen>:
    b34a:	fc 01       	movw	r30, r24
    b34c:	61 50       	subi	r22, 0x01	; 1
    b34e:	70 40       	sbci	r23, 0x00	; 0
    b350:	01 90       	ld	r0, Z+
    b352:	01 10       	cpse	r0, r1
    b354:	d8 f7       	brcc	.-10     	; 0xb34c <strnlen+0x2>
    b356:	80 95       	com	r24
    b358:	90 95       	com	r25
    b35a:	8e 0f       	add	r24, r30
    b35c:	9f 1f       	adc	r25, r31
    b35e:	08 95       	ret

0000b360 <fputc>:
    b360:	0f 93       	push	r16
    b362:	1f 93       	push	r17
    b364:	cf 93       	push	r28
    b366:	df 93       	push	r29
    b368:	8c 01       	movw	r16, r24
    b36a:	eb 01       	movw	r28, r22
    b36c:	8b 81       	ldd	r24, Y+3	; 0x03
    b36e:	81 ff       	sbrs	r24, 1
    b370:	1b c0       	rjmp	.+54     	; 0xb3a8 <fputc+0x48>
    b372:	82 ff       	sbrs	r24, 2
    b374:	0d c0       	rjmp	.+26     	; 0xb390 <fputc+0x30>
    b376:	2e 81       	ldd	r18, Y+6	; 0x06
    b378:	3f 81       	ldd	r19, Y+7	; 0x07
    b37a:	8c 81       	ldd	r24, Y+4	; 0x04
    b37c:	9d 81       	ldd	r25, Y+5	; 0x05
    b37e:	28 17       	cp	r18, r24
    b380:	39 07       	cpc	r19, r25
    b382:	64 f4       	brge	.+24     	; 0xb39c <fputc+0x3c>
    b384:	e8 81       	ld	r30, Y
    b386:	f9 81       	ldd	r31, Y+1	; 0x01
    b388:	01 93       	st	Z+, r16
    b38a:	e8 83       	st	Y, r30
    b38c:	f9 83       	std	Y+1, r31	; 0x01
    b38e:	06 c0       	rjmp	.+12     	; 0xb39c <fputc+0x3c>
    b390:	e8 85       	ldd	r30, Y+8	; 0x08
    b392:	f9 85       	ldd	r31, Y+9	; 0x09
    b394:	80 2f       	mov	r24, r16
    b396:	19 95       	eicall
    b398:	00 97       	sbiw	r24, 0x00	; 0
    b39a:	31 f4       	brne	.+12     	; 0xb3a8 <fputc+0x48>
    b39c:	8e 81       	ldd	r24, Y+6	; 0x06
    b39e:	9f 81       	ldd	r25, Y+7	; 0x07
    b3a0:	01 96       	adiw	r24, 0x01	; 1
    b3a2:	8e 83       	std	Y+6, r24	; 0x06
    b3a4:	9f 83       	std	Y+7, r25	; 0x07
    b3a6:	02 c0       	rjmp	.+4      	; 0xb3ac <fputc+0x4c>
    b3a8:	0f ef       	ldi	r16, 0xFF	; 255
    b3aa:	1f ef       	ldi	r17, 0xFF	; 255
    b3ac:	c8 01       	movw	r24, r16
    b3ae:	df 91       	pop	r29
    b3b0:	cf 91       	pop	r28
    b3b2:	1f 91       	pop	r17
    b3b4:	0f 91       	pop	r16
    b3b6:	08 95       	ret

0000b3b8 <__ultoa_invert>:
    b3b8:	fa 01       	movw	r30, r20
    b3ba:	aa 27       	eor	r26, r26
    b3bc:	28 30       	cpi	r18, 0x08	; 8
    b3be:	51 f1       	breq	.+84     	; 0xb414 <__ultoa_invert+0x5c>
    b3c0:	20 31       	cpi	r18, 0x10	; 16
    b3c2:	81 f1       	breq	.+96     	; 0xb424 <__ultoa_invert+0x6c>
    b3c4:	e8 94       	clt
    b3c6:	6f 93       	push	r22
    b3c8:	6e 7f       	andi	r22, 0xFE	; 254
    b3ca:	6e 5f       	subi	r22, 0xFE	; 254
    b3cc:	7f 4f       	sbci	r23, 0xFF	; 255
    b3ce:	8f 4f       	sbci	r24, 0xFF	; 255
    b3d0:	9f 4f       	sbci	r25, 0xFF	; 255
    b3d2:	af 4f       	sbci	r26, 0xFF	; 255
    b3d4:	b1 e0       	ldi	r27, 0x01	; 1
    b3d6:	3e d0       	rcall	.+124    	; 0xb454 <__ultoa_invert+0x9c>
    b3d8:	b4 e0       	ldi	r27, 0x04	; 4
    b3da:	3c d0       	rcall	.+120    	; 0xb454 <__ultoa_invert+0x9c>
    b3dc:	67 0f       	add	r22, r23
    b3de:	78 1f       	adc	r23, r24
    b3e0:	89 1f       	adc	r24, r25
    b3e2:	9a 1f       	adc	r25, r26
    b3e4:	a1 1d       	adc	r26, r1
    b3e6:	68 0f       	add	r22, r24
    b3e8:	79 1f       	adc	r23, r25
    b3ea:	8a 1f       	adc	r24, r26
    b3ec:	91 1d       	adc	r25, r1
    b3ee:	a1 1d       	adc	r26, r1
    b3f0:	6a 0f       	add	r22, r26
    b3f2:	71 1d       	adc	r23, r1
    b3f4:	81 1d       	adc	r24, r1
    b3f6:	91 1d       	adc	r25, r1
    b3f8:	a1 1d       	adc	r26, r1
    b3fa:	20 d0       	rcall	.+64     	; 0xb43c <__ultoa_invert+0x84>
    b3fc:	09 f4       	brne	.+2      	; 0xb400 <__ultoa_invert+0x48>
    b3fe:	68 94       	set
    b400:	3f 91       	pop	r19
    b402:	2a e0       	ldi	r18, 0x0A	; 10
    b404:	26 9f       	mul	r18, r22
    b406:	11 24       	eor	r1, r1
    b408:	30 19       	sub	r19, r0
    b40a:	30 5d       	subi	r19, 0xD0	; 208
    b40c:	31 93       	st	Z+, r19
    b40e:	de f6       	brtc	.-74     	; 0xb3c6 <__ultoa_invert+0xe>
    b410:	cf 01       	movw	r24, r30
    b412:	08 95       	ret
    b414:	46 2f       	mov	r20, r22
    b416:	47 70       	andi	r20, 0x07	; 7
    b418:	40 5d       	subi	r20, 0xD0	; 208
    b41a:	41 93       	st	Z+, r20
    b41c:	b3 e0       	ldi	r27, 0x03	; 3
    b41e:	0f d0       	rcall	.+30     	; 0xb43e <__ultoa_invert+0x86>
    b420:	c9 f7       	brne	.-14     	; 0xb414 <__ultoa_invert+0x5c>
    b422:	f6 cf       	rjmp	.-20     	; 0xb410 <__ultoa_invert+0x58>
    b424:	46 2f       	mov	r20, r22
    b426:	4f 70       	andi	r20, 0x0F	; 15
    b428:	40 5d       	subi	r20, 0xD0	; 208
    b42a:	4a 33       	cpi	r20, 0x3A	; 58
    b42c:	18 f0       	brcs	.+6      	; 0xb434 <__ultoa_invert+0x7c>
    b42e:	49 5d       	subi	r20, 0xD9	; 217
    b430:	31 fd       	sbrc	r19, 1
    b432:	40 52       	subi	r20, 0x20	; 32
    b434:	41 93       	st	Z+, r20
    b436:	02 d0       	rcall	.+4      	; 0xb43c <__ultoa_invert+0x84>
    b438:	a9 f7       	brne	.-22     	; 0xb424 <__ultoa_invert+0x6c>
    b43a:	ea cf       	rjmp	.-44     	; 0xb410 <__ultoa_invert+0x58>
    b43c:	b4 e0       	ldi	r27, 0x04	; 4
    b43e:	a6 95       	lsr	r26
    b440:	97 95       	ror	r25
    b442:	87 95       	ror	r24
    b444:	77 95       	ror	r23
    b446:	67 95       	ror	r22
    b448:	ba 95       	dec	r27
    b44a:	c9 f7       	brne	.-14     	; 0xb43e <__ultoa_invert+0x86>
    b44c:	00 97       	sbiw	r24, 0x00	; 0
    b44e:	61 05       	cpc	r22, r1
    b450:	71 05       	cpc	r23, r1
    b452:	08 95       	ret
    b454:	9b 01       	movw	r18, r22
    b456:	ac 01       	movw	r20, r24
    b458:	0a 2e       	mov	r0, r26
    b45a:	06 94       	lsr	r0
    b45c:	57 95       	ror	r21
    b45e:	47 95       	ror	r20
    b460:	37 95       	ror	r19
    b462:	27 95       	ror	r18
    b464:	ba 95       	dec	r27
    b466:	c9 f7       	brne	.-14     	; 0xb45a <__ultoa_invert+0xa2>
    b468:	62 0f       	add	r22, r18
    b46a:	73 1f       	adc	r23, r19
    b46c:	84 1f       	adc	r24, r20
    b46e:	95 1f       	adc	r25, r21
    b470:	a0 1d       	adc	r26, r0
    b472:	08 95       	ret

0000b474 <_exit>:
    b474:	f8 94       	cli

0000b476 <__stop_program>:
    b476:	ff cf       	rjmp	.-2      	; 0xb476 <__stop_program>
