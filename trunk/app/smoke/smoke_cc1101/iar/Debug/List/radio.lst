###############################################################################
#                                                                             #
#                                                       19/Jun/2013  14:37:45 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  E:\Dooya\dooya_dev\DU0106\Source\smoke\src\app\radio.c  #
#    Command line  =  E:\Dooya\dooya_dev\DU0106\Source\smoke\src\app\radio.c  #
#                     -lC E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\Debug\Li #
#                     st\ -lA E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\Debu #
#                     g\List\ -o E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\D #
#                     ebug\Obj\ --no_cse --no_unroll --no_inline              #
#                     --no_code_motion --no_tbaa --debug -D__MSP430G2303__    #
#                     -e --double=32 --dlib_config "C:\Program Files\IAR      #
#                     Systems\Embedded Workbench 6.4                          #
#                     Evaluation\430\LIB\DLIB\dl430fn.h" -I                   #
#                     E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\..\src\app\  #
#                     -I E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\..\src\bs #
#                     p\ -I E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\..\src #
#                     \lib\ -I E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\..\ #
#                     src\Radio\ -I E:\Dooya\dooya_dev\DU0106\Source\smoke\ia #
#                     r\..\src\Radio\CC1101\ -I E:\Dooya\dooya_dev\DU0106\Sou #
#                     rce\smoke\iar\..\src\Radio\Si4455\ -Ol                  #
#    List file     =  E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\Debug\List\r #
#                     adio.lst                                                #
#    Object file   =  E:\Dooya\dooya_dev\DU0106\Source\smoke\iar\Debug\Obj\ra #
#                     dio.r43                                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\Dooya\dooya_dev\DU0106\Source\smoke\src\app\radio.c
      1          /*! @file radio.c
      2           * @brief This file contains functions to manage behavior of basic human module interfaces (push-buttons, switches, LEDs).
      3           *
      4           * @b COPYRIGHT
      5           * @n Silicon Laboratories Confidential
      6           * @n Copyright 2012 Silicon Laboratories, Inc.
      7           * @n http://www.silabs.com
      8           */
      9          
     10          #include "bsp.h"

      U8  TEST0;
          ^
"E:\Dooya\dooya_dev\DU0106\Source\smoke\src\Radio\Si4455\si4455_defs.h",43  Error[Pe040]: 
          expected an identifier

      U8  TEST1;
          ^
"E:\Dooya\dooya_dev\DU0106\Source\smoke\src\Radio\Si4455\si4455_defs.h",44  Error[Pe040]: 
          expected an identifier

      U8  TEST2;
          ^
"E:\Dooya\dooya_dev\DU0106\Source\smoke\src\Radio\Si4455\si4455_defs.h",45  Error[Pe040]: 
          expected an identifier
     11          
     12          /*****************************************************************************
     13           *  Local Macros & Definitions
     14           *****************************************************************************/
     15          
     16          /*****************************************************************************
     17           *  Global Variables
     18           *****************************************************************************/
     19          SEGMENT_VARIABLE(RadioConfiguration, tRadioConfiguration, CODE) = \
     20                                  RADIO_CONFIGURATION_DATA;
     21          
     22          SEGMENT_VARIABLE_SEGMENT_POINTER(pRadioConfiguration, tRadioConfiguration, CODE, CODE) = \
     23                                  &RadioConfiguration;
     24          	 
     25          /*****************************************************************************
     26           *  Local Function Declarations
     27           *****************************************************************************/
     28          void vRadio_PowerUp(void);
     29          /*!
     30           *  Power up the Radio, set GPIOs to HiZ state, get Part Info
     31           *  then set Sleep mode.
     32           *
     33           *  @note
     34           *
     35           */
     36          void vRadio_PowerUp(void)
     37          {
     38            SEGMENT_VARIABLE(wDelay, U16, XDATA) = 0u;
     39          
     40            si4455_reset();
     41            for (; wDelay < pRadioConfiguration->Radio_Delay_Cnt_After_Reset; wDelay++);
     42          
     43            si4455_power_up(pRadioConfiguration->Radio_BOOT_OPTIONS,
     44                            pRadioConfiguration->Radio_XTAL_OPTIONS,
     45                            pRadioConfiguration->Radio_XO_FREQ);
     46          
     47            radio_comm_PollCTS();
     48          }
     49          
     50          /*!
     51           *  Radio Initialization.
     52           *
     53           *  @author Sz. Papp
     54           *
     55           *  @note
     56           *
     57           */
     58          void vRadio_Init(void)
     59          {
     60            U16 lTemp;
     61          
     62          #if (RADIO_CONFIGURATION_DATA_RADIO_PATCH_INCLUDED > 0x00)
     63            const SEGMENT_VARIABLE(RadioPatch[RADIO_CONFIGURATION_DATA_RADIO_PATCH_SIZE], U8, CODE) = \
     64                RADIO_CONFIGURATION_DATA_RADIO_PATCH;
     65          
     66          #endif
     67          
     68            do
     69            {
     70              /* Power Up the radio chip */
     71              vRadio_PowerUp();
     72          
     73              /* Load the 1st part of the configuration array (128 bytes) */
     74              si4455_write_ezconfig_array(128u, pRadioConfiguration->EzConfig_Array);
     75          
     76              /* Delay between two part to let the radio process the incoming data */
     77              for (lTemp = 0x07FF; lTemp; lTemp--)  ;
     78          
     79              /* Load the final part of the configuration array (128 bytes) */
     80              si4455_write_ezconfig_array(EZCONFIG_RADIO_CFG_SIZE - 128u, (U8 *) pRadioConfiguration->EzConfig_Array + 128u);
     81          
     82              lTemp = bRadio_Check_Ezconfig(pRadioConfiguration->EzConfig_Array_CRC);
     83          
     84              /* Check the return value */
     85          //    if (lTemp == 1u) { LED4 = !LED4; }
     86          //    if (lTemp == 2u) { LED3 = !LED3; }
     87            } while(lTemp != 0u);
     88          
     89            // Read ITs, clear pending ones
     90            si4455_get_int_status(0u, 0u, 0u);
     91          
     92            /* Set XO TUNE */
     93            si4455_set_property(
     94                SI4455_PROP_GRP_ID_EZCONFIG,
     95                SI4455_PROP_GRP_LEN_EZCONFIG,
     96                SI4455_PROP_GRP_INDEX_EZCONFIG_XO_TUNE,
     97                (U8) pRadioConfiguration->Radio_EZCONFIG_XO_TUNE
     98            );
     99          
    100            /* Enable ITs */
    101            si4455_set_property(
    102                SI4455_PROP_GRP_ID_INT_CTL,
    103                SI4455_PROP_GRP_LEN_INT_CTL,
    104                SI4455_PROP_GRP_INDEX_INT_CTL_ENABLE,
    105                (U8) pRadioConfiguration->Radio_INT_CTL_ENABLE,
    106                (U8) pRadioConfiguration->Radio_INT_CTL_PH_ENABLE,
    107                (U8) pRadioConfiguration->Radio_INT_CTL_MODEM_ENABLE,
    108                (U8) pRadioConfiguration->Radio_INT_CTL_CHIP_ENABLE
    109            );
    110          
    111            // Configure Fast response registers
    112            si4455_set_property(
    113                SI4455_PROP_GRP_ID_FRR_CTL,
    114                SI4455_PROP_GRP_LEN_FRR_CTL,
    115                SI4455_PROP_GRP_INDEX_FRR_CTL_A_MODE,
    116                (U8) pRadioConfiguration->Radio_FRR_CTL_A_MODE,
    117                (U8) pRadioConfiguration->Radio_FRR_CTL_B_MODE,
    118                (U8) pRadioConfiguration->Radio_FRR_CTL_C_MODE,
    119                (U8) pRadioConfiguration->Radio_FRR_CTL_D_MODE
    120            );
    121          
    122            // Configure GPIO pins
    123            si4455_gpio_pin_cfg(
    124                pRadioConfiguration->Radio_GPIO0_PIN_CFG,
    125                pRadioConfiguration->Radio_GPIO1_PIN_CFG,
    126                pRadioConfiguration->Radio_GPIO2_PIN_CFG,
    127                pRadioConfiguration->Radio_GPIO3_PIN_CFG,
    128                pRadioConfiguration->Radio_GPIO_NIRQ_MODE,
    129                pRadioConfiguration->Radio_GPIO_SDO_MODE,
    130                pRadioConfiguration->Radio_GPIO_GEN_CONFIG
    131            );
    132          
    133            // Put the Radio into configured state
    134            si4455_change_state(pRadioConfiguration->Radio_State_After_Power_Up);
    135          
    136            // Read ITs, clear pending ones
    137            si4455_get_int_status(0u, 0u, 0u);
    138          }
    139          
    140          /*!
    141           *  Set Radio to RX mode, fixed packet length.
    142           *
    143           *  @param channel Freq. Channel
    144           *
    145           *  @note
    146           *
    147           */
    148          void vRadio_StartRX(U8 channel)
    149          {
    150            // Read ITs, clear pending ones
    151            si4455_get_int_status(0u, 0u, 0u);
    152          
    153            /* Start Receiving packet, channel 0, START immediately, Packet n bytes long */
    154            si4455_start_rx(channel, 0u, RadioConfiguration.Radio_PacketLength,
    155                            SI4455_CMD_START_RX_ARG_RXTIMEOUT_STATE_ENUM_RX,
    156                            SI4455_CMD_START_RX_ARG_RXVALID_STATE_ENUM_RX,
    157                            SI4455_CMD_START_RX_ARG_RXINVALID_STATE_ENUM_RX );
    158          }
    159          
    160          /*!
    161           *  Set Radio to TX mode, fixed packet length.
    162           *
    163           *  @param channel Freq. Channel, Packet to be sent
    164           *
    165           *  @note
    166           *
    167           */
    168          void  vRadio_StartTx(U8 channel, U8 *pioFixRadioPacket)
    169          {
    170            // Read ITs, clear pending ones
    171            si4455_get_int_status(0u, 0u, 0u);
    172          
    173            /* Start sending packet on channel, START immediately, Packet according to PH */
    174            si4455_start_tx(channel, 0u,  0u);
    175          }
    176          
    177          
    178          /*!
    179           * Check if EzConfig Array sent to the radio chip correctly.
    180           *
    181           * @param[in] crc CRC of the EZCONFIG array.
    182           *
    183           * @return    Respons from the radio chip.
    184           *
    185           * @note
    186           *
    187           */
    188          U8 bRadio_Check_Ezconfig(U16 crc)
    189          {
    190            si4455_ezconfig_check(crc);
    191          
    192            return radioCmd[0u];
    193          }

Errors: 3
Warnings: none
