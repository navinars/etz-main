###############################################################################
#                                                                             #
#                                                       07/Jul/2013  23:04:13 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\radio_ #
#                     handle.c                                                #
#    Command line  =  E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\radio_ #
#                     handle.c -lC E:\DOOYA\dooya_dev\DU0106\Source\test\cc11 #
#                     01_rcv\Debug\List\ -lA E:\DOOYA\dooya_dev\DU0106\Source #
#                     \test\cc1101_rcv\Debug\List\ -o                         #
#                     E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\Debug\ #
#                     Obj\ --no_cse --no_unroll --no_inline --no_code_motion  #
#                     --no_tbaa --debug -D__MSP430G2433__ -e --double=32      #
#                     --dlib_config "C:\Program Files (x86)\IAR               #
#                     Systems\Embedded Workbench 6.4                          #
#                     Evaluation\430\LIB\DLIB\dl430fn.h" -On                  #
#    List file     =  E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\Debug\ #
#                     List\radio_handle.lst                                   #
#    Object file   =  E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\Debug\ #
#                     Obj\radio_handle.r43                                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\DOOYA\dooya_dev\DU0106\Source\test\cc1101_rcv\radio_handle.c
      1          #include <msp430.h>

   \                                 In  segment DATA16_AN, at 0x21
   \   unsigned char volatile P1OUT
   \                     P1OUT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x2b
   \   unsigned char volatile P2IFG
   \                     P2IFG:
   \   000000                DS8 1
      2          #include <stdint.h>
      3          #include <string.h>
      4          #include "cc1101.h"
      5          #include "cc1101_defs.h"
      6          #include "radio_handle.h"
      7          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      8          uint8_t flag_send = 0;
   \                     flag_send:
   \   000000                DS8 1

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
      9          uint8_t flag_rcv = 0;
   \                     flag_rcv:
   \   000000                DS8 1
     10          

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     11          uint8_t frm[10] = {0};
   \                     frm:
   \   000000                DS8 10

   \                                 In  segment DATA16_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     12          uint8_t frm_rcv[10] = {0};
   \                     frm_rcv:
   \   000000                DS8 10
     13          

   \                                 In  segment CODE, align 2
     14          void radio_handle(void)
   \                     radio_handle:
     15          {
     16          	if(flag_send == 1)
   \   000000   D293....     CMP.B   #0x1, &flag_send
   \   000004   1020         JNE     ??radio_handle_0
     17          	{
     18          		flag_send = 0;
   \   000006   C243....     MOV.B   #0x0, &flag_send
     19          		
     20          		memcpy(frm, "dooya", 5);
   \   00000A   3E400500     MOV.W   #0x5, R14
   \   00000E   3D40....     MOV.W   #`?<Constant "dooya">`, R13
   \   000012   3C40....     MOV.W   #frm, R12
   \   000016   B012....     CALL    #memcpy
     21          		Radio_Transmit(frm, 5);
   \   00001A   7D400500     MOV.B   #0x5, R13
   \   00001E   3C40....     MOV.W   #frm, R12
   \   000022   B012....     CALL    #Radio_Transmit
     22          	}
     23          	
     24          	if(flag_rcv == 1)
   \                     ??radio_handle_0:
   \   000026   D293....     CMP.B   #0x1, &flag_rcv
   \   00002A   1A20         JNE     ??radio_handle_1
     25          	{
     26          		flag_rcv = 0;
   \   00002C   C243....     MOV.B   #0x0, &flag_rcv
     27          		
     28          		if ((frm_rcv[0] == 'd') && (frm_rcv[1] == 'o'))
   \   000030   F2906400.... CMP.B   #0x64, &frm_rcv
   \   000036   1420         JNE     ??radio_handle_1
   \   000038   F2906F00.... CMP.B   #0x6f, &frm_rcv + 1
   \   00003E   1020         JNE     ??radio_handle_1
     29          		{
     30          			memcpy(frm, "dooya", 5);
   \   000040   3E400500     MOV.W   #0x5, R14
   \   000044   3D40....     MOV.W   #`?<Constant "dooya">`, R13
   \   000048   3C40....     MOV.W   #frm, R12
   \   00004C   B012....     CALL    #memcpy
     31          			Radio_Transmit(frm, 5);
   \   000050   7D400500     MOV.B   #0x5, R13
   \   000054   3C40....     MOV.W   #frm, R12
   \   000058   B012....     CALL    #Radio_Transmit
     32          			P1OUT ^= BIT0;											// Turn LED0..
   \   00005C   D2E32100     XOR.B   #0x1, &0x21
     33          		}
     34          	}
     35          }
   \                     ??radio_handle_1:
   \   000060   3041         RET
   \   000062                REQUIRE P1OUT
     36          
     37          
     38          
     39          // Port 2 interrupt service routine
     40          #pragma vector=PORT2_VECTOR

   \                                 In  segment CODE, align 2
     41          __interrupt void Port_2(void)
   \                     Port_2:
     42          {
   \   000000   0A12         PUSH.W  R10
   \   000002   0B12         PUSH.W  R11
   \   000004   0D12         PUSH.W  R13
   \   000006   0C12         PUSH.W  R12
   \   000008   0F12         PUSH.W  R15
   \   00000A   0E12         PUSH.W  R14
     43          	uint8_t d1, len;
     44          	if(!!(P2IFG & BIT0))											// Rx receive.
   \   00000C   D2B32B00     BIT.B   #0x1, &0x2b
   \   000010   2728         JNC     ??Port_2_0
     45          	{
     46          		d1 = Mrfi_SpiReadReg(RXBYTES);								// Read RxBytes register.
   \   000012   7C403B00     MOV.B   #0x3b, R12
   \   000016   B012....     CALL    #Mrfi_SpiReadReg
   \   00001A   4A4C         MOV.B   R12, R10
     47          		if (d1 != 0)
   \   00001C   4A93         CMP.B   #0x0, R10
   \   00001E   1224         JEQ     ??Port_2_1
     48          		{
     49          			len = Mrfi_SpiReadReg(RXFIFO);
   \   000020   7C403F00     MOV.B   #0x3f, R12
   \   000024   B012....     CALL    #Mrfi_SpiReadReg
   \   000028   4B4C         MOV.B   R12, R11
     50          			if ((len > 0) && (len < 10))
   \   00002A   5B93         CMP.B   #0x1, R11
   \   00002C   0B28         JNC     ??Port_2_1
   \   00002E   7B900A00     CMP.B   #0xa, R11
   \   000032   082C         JC      ??Port_2_1
     51          			{
     52          				Mrfi_SpiReadRxFifo(frm_rcv, len+2);					// Receive data to buffer.
   \   000034   4D4B         MOV.B   R11, R13
   \   000036   6D53         ADD.B   #0x2, R13
   \   000038   3C40....     MOV.W   #frm_rcv, R12
   \   00003C   B012....     CALL    #Mrfi_SpiReadRxFifo
     53          				flag_rcv = 1;										
   \   000040   D243....     MOV.B   #0x1, &flag_rcv
     54          //				P1OUT ^= BIT0;										// Turn LED0..
     55          			}
     56          		}
     57          		
     58          		Mrfi_SpiCmdStrobe(SFRX);
   \                     ??Port_2_1:
   \   000044   7C403A00     MOV.B   #0x3a, R12
   \   000048   B012....     CALL    #Mrfi_SpiCmdStrobe
     59          		Mrfi_SpiCmdStrobe(SIDLE);
   \   00004C   7C403600     MOV.B   #0x36, R12
   \   000050   B012....     CALL    #Mrfi_SpiCmdStrobe
     60          		Mrfi_SpiCmdStrobe(SRX);
   \   000054   7C403400     MOV.B   #0x34, R12
   \   000058   B012....     CALL    #Mrfi_SpiCmdStrobe
     61          
     62          		P2IFG &= ~BIT0;                           					// P2.2 IFG cleared
   \   00005C   D2C32B00     BIC.B   #0x1, &0x2b
     63          	}
     64          }
   \                     ??Port_2_0:
   \   000060   3E41         POP.W   R14
   \   000062   3F41         POP.W   R15
   \   000064   3C41         POP.W   R12
   \   000066   3D41         POP.W   R13
   \   000068   3B41         POP.W   R11
   \   00006A   3A41         POP.W   R10
   \   00006C   0013         RETI
   \   00006E                REQUIRE P2IFG

   \                                 In  segment INTVEC, offset 0x6, root
   \                     `??Port_2??INTVEC 6`:
   \   000006   ....         DC16    Port_2

   \                                 In  segment DATA16_C, align 1, align-sorted
   \                     `?<Constant "dooya">`:
   \   000000   646F6F796100 DC8 "dooya"
     65          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      16  Port_2
            16 -> Mrfi_SpiCmdStrobe
            16 -> Mrfi_SpiReadReg
            16 -> Mrfi_SpiReadRxFifo
       2  radio_handle
             2 -> Radio_Transmit
             2 -> memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant "dooya">
       2  ??Port_2??INTVEC 6
       1  P1OUT
       1  P2IFG
     110  Port_2
       1  flag_rcv
       1  flag_send
      10  frm
      10  frm_rcv
      98  radio_handle

 
 208 bytes in segment CODE
   2 bytes in segment DATA16_AN
   6 bytes in segment DATA16_C
  22 bytes in segment DATA16_Z
   2 bytes in segment INTVEC
 
 208 bytes of CODE  memory
   6 bytes of CONST memory (+ 2 bytes shared)
  22 bytes of DATA  memory (+ 2 bytes shared)

Errors: none
Warnings: none
